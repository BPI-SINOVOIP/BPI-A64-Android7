/*
 * Copyright (C) 2012 STMicroelectronics
 * Matteo Dameno, Ciocca Denis, Alberto Marinoni, Giuseppe Barba
 * Motion MEMS Product Div.
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/*
 * Library Version: 1.6.1
 */

#ifndef CONFIGURATION_HAL_H
#define CONFIGURATION_HAL_H

/* ANDROID API VERSION */
#define ANDROID_ICS		(14)
#define ANDROIS_JB		(16)
#define ANDROIS_JBMR2		(18)
#define ANDROIS_KK		(19)

#if (ANDROID_VERSION >= ANDROIS_JBMR2)
#define OS_VERSION_ENABLE	(1)
#else
#define OS_VERSION_ENABLE	(0)
#endif

#include "conf_LSM9DS0.h"

#ifndef SENSORS_GYROSCOPE_ENABLE
#define SENSORS_GYROSCOPE_ENABLE 0
#endif

#ifndef SENSORS_ACCELEROMETER_ENABLE
#define SENSORS_ACCELEROMETER_ENABLE 0
#endif

#ifndef SENSORS_MAGNETIC_FIELD_ENABLE
#define SENSORS_MAGNETIC_FIELD_ENABLE 0
#endif

#define FUSION_6AXIS				(SENSORS_GYROSCOPE_ENABLE & \
						SENSORS_ACCELEROMETER_ENABLE)
#define FUSION_9AXIS				(FUSION_6AXIS & \
						SENSORS_MAGNETIC_FIELD_ENABLE)

/* SENSORS ENABLE */
#define SENSORS_UNCALIB_MAGNETIC_FIELD_ENABLE	(1 & SENSORS_MAGNETIC_FIELD_ENABLE & \
							SENSORS_ACCELEROMETER_ENABLE & \
							OS_VERSION_ENABLE)

#define SENSORS_UNCALIB_GYROSCOPE_ENABLE	(1 & OS_VERSION_ENABLE & \
							(FUSION_6AXIS | FUSION_9AXIS))

#define SENSORS_ORIENTATION_ENABLE		(1 & FUSION_9AXIS)

#define SENSORS_GRAVITY_ENABLE			(1 & FUSION_6AXIS)

#define SENSORS_LINEAR_ACCELERATION_ENABLE	(1 & FUSION_6AXIS)

#define SENSORS_ROTATION_VECTOR_ENABLE		(1 & FUSION_9AXIS)

#define SENSORS_GAME_ROTATION_ENABLE		(1 & OS_VERSION_ENABLE & \
							FUSION_6AXIS)

#define SENSOR_FUSION_ENABLE			(1 & SENSORS_GYROSCOPE_ENABLE & \
							(SENSORS_ORIENTATION_ENABLE | \
							SENSORS_GRAVITY_ENABLE | \
							SENSORS_LINEAR_ACCELERATION_ENABLE | \
							SENSORS_ROTATION_VECTOR_ENABLE | \
							SENSORS_GAME_ROTATION_ENABLE | \
							SENSORS_UNCALIB_GYROSCOPE_ENABLE))

#define SENSORS_GEOMAG_ROTATION_VECTOR_ENABLE	(1 & SENSORS_MAGNETIC_FIELD_ENABLE)

#define SENSOR_GEOMAG_ENABLE			(0 & !SENSOR_FUSION_ENABLE)
/* ACCELEROMETER CALIBRATION */

/* MAGNETOMETER CALIBRATION */
#define MAG_CALIBRATION_ENABLE			(1 & SENSORS_MAGNETIC_FIELD_ENABLE &\
							SENSORS_ACCELEROMETER_ENABLE)
#define MAG_SI_COMPENSATION_ENABLED		(1 & MAG_CALIBRATION_ENABLE)
#define CALIBRATION_FREQUENCY			25		// Default value is 25 Hz
#if (SENSOR_GEOMAG_ENABLE == 1)
#define GEOMAG_FREQUENCY			100		// Default value is 100 Hz (Geo Mag lib feeding)
#else
#define GEOMAG_FREQUENCY			25
#endif

/* GYROSCOPE BIAS ESTIMATION */
#define GYROSCOPE_GBIAS_CALIBRATION		(1 & SENSORS_GYROSCOPE_ENABLE)
#define GYROSCOPE_GBIAS_ESTIMATION_FUSION	(0 & GYROSCOPE_GBIAS_CALIBRATION & \
							SENSOR_FUSION_ENABLE)

#define GYROSCOPE_GBIAS_ESTIMATION_STANDALONE	(1 & GYROSCOPE_GBIAS_CALIBRATION & \
							!GYROSCOPE_GBIAS_ESTIMATION_FUSION)

#if (GYROSCOPE_GBIAS_ESTIMATION_STANDALONE == 1)
#define UNCALIB_GYRO_POWER_CONSUMPTION 	(GYRO_POWER_CONSUMPTION + \
						ACCEL_POWER_CONSUMPTION)
#else
#define UNCALIB_GYRO_POWER_CONSUMPTION 	(GYRO_POWER_CONSUMPTION + \
						MAGN_POWER_CONSUMPTION + \
						ACCEL_POWER_CONSUMPTION)
#endif

#if (FUSION_6AXIS & !FUSION_9AXIS)
#define FUSION_CONSUMPTION 			(GYRO_POWER_CONSUMPTION  + \
						ACCEL_POWER_CONSUMPTION)
#else
#if (FUSION_9AXIS)
#define FUSION_CONSUMPTION 			(GYRO_POWER_CONSUMPTION + \
						MAGN_POWER_CONSUMPTION + \
						ACCEL_POWER_CONSUMPTION)
#else
#define FUSION_CONSUMPTION 			(MAGN_POWER_CONSUMPTION + \
						ACCEL_POWER_CONSUMPTION)
#endif
#endif

#define ORIENTATION_POWER_CONSUMPTION (FUSION_CONSUMPTION)
#define GRAVITY_POWER_CONSUMPTION (FUSION_CONSUMPTION)
#define LINEAR_ACCEL_POWER_CONSUMPTION (FUSION_CONSUMPTION)
#define ROT_VEC_POWER_CONSUMPTION (FUSION_CONSUMPTION)

#define MAX_GYRO_OUTPUT_DPS			25.0f
#define MAX_ACC_OUTPUT_G			1.4f
#define SCALE_THRESHOLD				1.0f
#define ACC_THRESHOLD				0.003f
#define GYRO_THRESHOLD				0.02f
#define FUSION_MAX_ODR				100
#if (SENSOR_FUSION_ENABLE == 1)
#define ORIENTATION_MAX_ODR			100
#else
#define ORIENTATION_MAX_ODR			25
#endif

/* GYROSCOPE STARTUP */
#define DEFAULT_SAMPLES_TO_DISCARD		20
#define GYRO_STARTUP_TIME_MS			200

/* DEBUG INFORMATION */
#define DEBUG_ACCELEROMETER			(0)
#define DEBUG_MAGNETOMETER			(0)
#define DEBUG_GYROSCOPE				(0)
#define DEBUG_INEMO_SENSOR			(0)
#define DEBUG_PRESSURE_SENSOR			(0)
#define DEBUG_CALIBRATION			(0)

#if (ANDROID_VERSION >= ANDROIS_JB)
       #define STLOGI(...)			ALOGI(__VA_ARGS__)
       #define STLOGE(...)			ALOGE(__VA_ARGS__)
       #define STLOGD(...)			ALOGD(__VA_ARGS__)
       #define STLOGD_IF(...)			ALOGD_IF(__VA_ARGS__)
       #define STLOGE_IF(...)			ALOGE_IF(__VA_ARGS__)
#else
       #define STLOGI(...)			LOGI(__VA_ARGS__)
       #define STLOGE(...)			LOGE(__VA_ARGS__)
       #define STLOGD(...)			LOGD(__VA_ARGS__)
       #define STLOGD_IF(...)			LOGD_IF(__VA_ARGS__)
       #define STLOGE_IF(...)			LOGE_IF(__VA_ARGS__)

#endif

#endif	/*	CONFIGURATION_HAL_H	*/
