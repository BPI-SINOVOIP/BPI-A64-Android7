# Copyright 2013 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This recipe is intended to control all of the GPU testers on the
# following waterfalls:
#   chromium.gpu
#   chromium.gpu.fyi
#   chromium.webkit
#   tryserver.chromium.*
# These testers are triggered by the builders on the same waterfall.

DEPS = [
  'buildbot',
  'chromium',
  'gpu',
  'isolate',
  'json',
  'path',
  'platform',
  'properties',
  'raw_io',
  'step',
  'swarming',
  'swarming_client',
  'test_utils',
  'tryserver',
]

def RunSteps(api):
  api.gpu.setup()
  api.buildbot.prep()

  # The GPU recipes require the use of isolates for transmitting the
  # test binaries and data files from the builder to the tester. The
  # testers do not checkout the full Chromium tree; instead, the
  # swarming_client tools are checked out separately.
  api.swarming_client.checkout()
  api.chromium.get_vs_toolchain_if_necessary()
  api.buildbot.copy_parent_got_revision_to_got_revision()
  api.gpu.run_tests(api, api.gpu.get_build_revision(),
                    api.gpu.get_webkit_revision())

def GenTests(api):
  all_hashes = api.gpu.dummy_swarm_hashes

  named_props = lambda plat, flavor, name, hashes: api.properties.scheduled(
    mastername='chromium.gpu.testing',
    buildnumber=776,
    parent_buildnumber=571,
    parent_got_revision=160000,
    parent_got_webkit_revision=10000,
    parent_got_swarming_client_revision='feaaabcdef',
    # These would ordinarily be generated by the builder and passed
    # via build properties to the tester.
    swarm_hashes=hashes,
    # This is needed to achieve 100% coverage.
    master_class_name_for_testing='ChromiumGPUTesting',

    build_config=flavor,
    buildername=name,
    parent_buildername='%s %s builder' % (plat, flavor.lower()),
  )

  props = lambda plat, flavor: named_props(
    plat, flavor, '%s %s tester' % (plat, flavor.lower()), all_hashes,
  )

  # The majority of the tests are in the build_and_test recipe.

  # Keep the additional properties in sync with the build_and_upload
  # recipe in order to catch regressions.
  for plat in ['win', 'mac', 'linux']:
    for flavor in ['Debug', 'Release']:
      flavor_lower = flavor.lower()
      yield (
        api.test('%s_%s' % (plat, flavor_lower)) +
        props(plat, flavor) +
        api.platform.name(plat)
      )

  yield (
    api.test('failures_keeps_going') +
    props('linux', 'Release') +
    api.platform.name('linux') +
    api.step_data('content_gl_tests', retcode=1) +
    api.step_data('maps_pixel_test',
        api.test_utils.canned_telemetry_gpu_output(
            passing=False, is_win=False, swarming=False))
  )

  yield (
    api.test('telemetry_gpu_test_harness_failure') +
    props('linux', 'Release') +
    api.platform.name('linux') +
    api.step_data('maps_pixel_test',
        api.test_utils.canned_telemetry_gpu_output(
            passing=False, is_win=False, swarming=False,
            empty_per_page_values=True),
        retcode=255)
  )

  win_fyi_hashes = api.gpu.dummy_win_fyi_swarm_hashes

  yield (
    api.test('win_release_deqp') +
    named_props('win', 'Release', 'win release dEQP tester', win_fyi_hashes) +
    api.platform.name('win')
  )

  linux_fyi_hashes = api.gpu.dummy_linux_fyi_swarm_hashes

  yield (
    api.test('linux_release_deqp') +
    named_props('linux', 'Release', 'linux release dEQP tester',
        linux_fyi_hashes) +
    api.platform.name('linux')
  )
