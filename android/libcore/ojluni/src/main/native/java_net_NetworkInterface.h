/* This file was generated from java/net/NetworkInterface.java and is licensed
 * under the same terms. The copyright and license information for
 * java/net/NetworkInterface.java follows.
 *
 * Copyright (c) 2000, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class java_net_NetworkInterface */

#ifndef _Included_java_net_NetworkInterface
#define _Included_java_net_NetworkInterface
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     java_net_NetworkInterface
 * Method:    getAll
 * Signature: ()[Ljava/net/NetworkInterface;
 */
JNIEXPORT jobjectArray JNICALL NetworkInterface_getAll
  (JNIEnv *, jclass);

/*
 * Class:     java_net_NetworkInterface
 * Method:    getByName0
 * Signature: (Ljava/lang/String;)Ljava/net/NetworkInterface;
 */
JNIEXPORT jobject JNICALL NetworkInterface_getByName0
  (JNIEnv *, jclass, jstring);

/*
 * Class:     java_net_NetworkInterface
 * Method:    getByIndex0
 * Signature: (I)Ljava/net/NetworkInterface;
 */
JNIEXPORT jobject JNICALL NetworkInterface_getByIndex0
  (JNIEnv *, jclass, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    getByInetAddress0
 * Signature: (Ljava/net/InetAddress;)Ljava/net/NetworkInterface;
 */
JNIEXPORT jobject JNICALL NetworkInterface_getByInetAddress0
  (JNIEnv *, jclass, jobject);

/*
 * Class:     java_net_NetworkInterface
 * Method:    isUp0
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL NetworkInterface_isUp0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    isLoopback0
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL NetworkInterface_isLoopback0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    supportsMulticast0
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL NetworkInterface_supportsMulticast0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    isP2P0
 * Signature: (Ljava/lang/String;I)Z
 */
JNIEXPORT jboolean JNICALL NetworkInterface_isP2P0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    getMacAddr0
 * Signature: ([BLjava/lang/String;I)[B
 */
JNIEXPORT jbyteArray JNICALL NetworkInterface_getMacAddr0
  (JNIEnv *, jclass, jbyteArray, jstring, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    getMTU0
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL NetworkInterface_getMTU0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     java_net_NetworkInterface
 * Method:    init
 * Signature: ()V
 */
JNIEXPORT void JNICALL NetworkInterface_init
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
