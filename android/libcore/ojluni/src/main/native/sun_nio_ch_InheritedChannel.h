/* This file was generated from sun/nio/ch/InheritedChannel.java and is
 * licensed under the same terms. The copyright and license information for
 * sun/nio/ch/InheritedChannel.java follows.
 *
 * Copyright (c) 2003, 2010, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class sun_nio_ch_InheritedChannel */

#ifndef _Included_sun_nio_ch_InheritedChannel
#define _Included_sun_nio_ch_InheritedChannel
#ifdef __cplusplus
extern "C" {
#endif
#undef sun_nio_ch_InheritedChannel_UNKNOWN
#define sun_nio_ch_InheritedChannel_UNKNOWN -1L
#undef sun_nio_ch_InheritedChannel_SOCK_STREAM
#define sun_nio_ch_InheritedChannel_SOCK_STREAM 1L
#undef sun_nio_ch_InheritedChannel_SOCK_DGRAM
#define sun_nio_ch_InheritedChannel_SOCK_DGRAM 2L
#undef sun_nio_ch_InheritedChannel_O_RDONLY
#define sun_nio_ch_InheritedChannel_O_RDONLY 0L
#undef sun_nio_ch_InheritedChannel_O_WRONLY
#define sun_nio_ch_InheritedChannel_O_WRONLY 1L
#undef sun_nio_ch_InheritedChannel_O_RDWR
#define sun_nio_ch_InheritedChannel_O_RDWR 2L
/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    dup
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_sun_nio_ch_InheritedChannel_dup
  (JNIEnv *, jclass, jint);

/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    dup2
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_sun_nio_ch_InheritedChannel_dup2
  (JNIEnv *, jclass, jint, jint);

/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    open0
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_sun_nio_ch_InheritedChannel_open0
  (JNIEnv *, jclass, jstring, jint);

/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    close0
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_sun_nio_ch_InheritedChannel_close0
  (JNIEnv *, jclass, jint);

/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    soType0
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_sun_nio_ch_InheritedChannel_soType0
  (JNIEnv *, jclass, jint);

/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    peerAddress0
 * Signature: (I)Ljava/net/InetAddress;
 */
JNIEXPORT jobject JNICALL Java_sun_nio_ch_InheritedChannel_peerAddress0
  (JNIEnv *, jclass, jint);

/*
 * Class:     sun_nio_ch_InheritedChannel
 * Method:    peerPort0
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_sun_nio_ch_InheritedChannel_peerPort0
  (JNIEnv *, jclass, jint);

#ifdef __cplusplus
}
#endif
#endif
