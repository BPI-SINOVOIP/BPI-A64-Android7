#
# Test uses-sdk: add a uses-sdk from an app that doesn't define one.
#

@main

<manifest
    xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.app1"
    android:versionCode="100"
    android:versionName="1.0.0">

    <uses-sdk
        android:minSdkVersion="11"
        android:targetSdkVersion="14"
        />

    <application />

</manifest>


@lib1

<manifest
    xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.lib1">

    <!-- This app requires cupcake. -->
    <uses-sdk android:minSdkVersion="3" />

</manifest>


@lib2

<manifest
    xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.lib2">

    <!-- This only defines a max-sdk, and we purposely ignore this attribute.
         It doesn't get merged and doesn't generate a conflict either.
    -->
    <uses-sdk
        android:maxSdkVersion="5"
        />

</manifest>


@lib3

<manifest
    xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.lib3">

    <!-- Lib3 redefines the same requirements as lib1.
    -->
    <uses-sdk
        android:minSdkVersion="3"
        android:targetSdkVersion="11"
        />

</manifest>


@result

<manifest
    xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.app1"
    android:versionCode="100"
    android:versionName="1.0.0">

    <uses-sdk
        android:minSdkVersion="11"
        android:targetSdkVersion="14"
        />

    <application />

</manifest>


@errors

