/* The following code was generated by JFlex 1.4.1 on 26.04.11 15:46 */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.xpath;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

@SuppressWarnings({"ALL"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 26.04.11 15:46 from the specification file
 * <tt>C:/work/java/intellij/ultimate/community/plugins/xpath/xpath-lang/src/org/intellij/lang/xpath/xpath-lexer.flex</tt>
 */
abstract class _XPathLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int VAR = 2;
  public static final int YYINITIAL = 0;
  public static final int S1 = 1;
  public static final int TYPE = 3;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\2\0\1\1\22\0\1\1\1\56\1\7\1\0"+
    "\1\41\1\0\1\57\1\10\1\37\1\40\1\50\1\12\1\52\1\5"+
    "\1\4\1\53\12\3\1\6\1\60\1\44\1\55\1\45\1\47\1\51"+
    "\4\2\1\11\25\2\1\61\1\0\1\62\1\0\1\2\1\0\1\13"+
    "\1\26\1\15\1\31\1\16\1\24\1\33\1\30\1\25\2\2\1\23"+
    "\1\34\1\14\1\21\1\35\1\46\1\22\1\17\1\20\1\27\1\42"+
    "\1\32\1\36\1\43\1\2\1\63\1\54\1\64\54\0\1\2\12\0"+
    "\1\2\4\0\1\2\5\0\27\2\1\0\37\2\1\0\u013f\2\31\0"+
    "\162\2\4\0\14\2\16\0\5\2\11\0\1\2\213\0\1\2\13\0"+
    "\1\2\1\0\3\2\1\0\1\2\1\0\24\2\1\0\54\2\1\0"+
    "\46\2\1\0\5\2\4\0\202\2\10\0\105\2\1\0\46\2\2\0"+
    "\2\2\6\0\20\2\41\0\46\2\2\0\1\2\7\0\47\2\110\0"+
    "\33\2\5\0\3\2\56\0\32\2\5\0\13\2\25\0\12\3\4\0"+
    "\2\2\1\0\143\2\1\0\1\2\17\0\2\2\7\0\2\2\12\3"+
    "\3\2\2\0\1\2\20\0\1\2\1\0\36\2\35\0\3\2\60\0"+
    "\46\2\13\0\1\2\u0152\0\66\2\3\0\1\2\22\0\1\2\7\0"+
    "\12\2\4\0\12\3\25\0\10\2\2\0\2\2\2\0\26\2\1\0"+
    "\7\2\1\0\1\2\3\0\4\2\3\0\1\2\36\0\2\2\1\0"+
    "\3\2\4\0\12\3\2\2\23\0\6\2\4\0\2\2\2\0\26\2"+
    "\1\0\7\2\1\0\2\2\1\0\2\2\1\0\2\2\37\0\4\2"+
    "\1\0\1\2\7\0\12\3\2\0\3\2\20\0\11\2\1\0\3\2"+
    "\1\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\22\0\1\2\17\0\2\2\4\0\12\3\25\0\10\2\2\0\2\2"+
    "\2\0\26\2\1\0\7\2\1\0\2\2\1\0\5\2\3\0\1\2"+
    "\36\0\2\2\1\0\3\2\4\0\12\3\1\0\1\2\21\0\1\2"+
    "\1\0\6\2\3\0\3\2\1\0\4\2\3\0\2\2\1\0\1\2"+
    "\1\0\2\2\3\0\2\2\3\0\3\2\3\0\10\2\1\0\3\2"+
    "\55\0\11\3\25\0\10\2\1\0\3\2\1\0\27\2\1\0\12\2"+
    "\1\0\5\2\46\0\2\2\4\0\12\3\25\0\10\2\1\0\3\2"+
    "\1\0\27\2\1\0\12\2\1\0\5\2\3\0\1\2\40\0\1\2"+
    "\1\0\2\2\4\0\12\3\25\0\10\2\1\0\3\2\1\0\27\2"+
    "\1\0\20\2\46\0\2\2\4\0\12\3\25\0\22\2\3\0\30\2"+
    "\1\0\11\2\1\0\1\2\2\0\7\2\72\0\60\2\1\0\2\2"+
    "\14\0\7\2\11\0\12\3\47\0\2\2\1\0\1\2\2\0\2\2"+
    "\1\0\1\2\2\0\1\2\6\0\4\2\1\0\7\2\1\0\3\2"+
    "\1\0\1\2\1\0\1\2\2\0\2\2\1\0\4\2\1\0\2\2"+
    "\11\0\1\2\2\0\5\2\1\0\1\2\11\0\12\3\2\0\2\2"+
    "\42\0\1\2\37\0\12\3\26\0\10\2\1\0\42\2\35\0\4\2"+
    "\164\0\42\2\1\0\5\2\1\0\2\2\25\0\12\3\6\0\6\2"+
    "\112\0\46\2\12\0\51\2\7\0\132\2\5\0\104\2\5\0\122\2"+
    "\6\0\7\2\1\0\77\2\1\0\1\2\1\0\4\2\2\0\7\2"+
    "\1\0\1\2\1\0\4\2\2\0\47\2\1\0\1\2\1\0\4\2"+
    "\2\0\37\2\1\0\1\2\1\0\4\2\2\0\7\2\1\0\1\2"+
    "\1\0\4\2\2\0\7\2\1\0\7\2\1\0\27\2\1\0\37\2"+
    "\1\0\1\2\1\0\4\2\2\0\7\2\1\0\47\2\1\0\23\2"+
    "\16\0\11\3\56\0\125\2\14\0\u026c\2\2\0\10\2\12\0\32\2"+
    "\5\0\113\2\25\0\15\2\1\0\4\2\16\0\22\2\16\0\22\2"+
    "\16\0\15\2\1\0\3\2\17\0\64\2\43\0\1\2\4\0\1\2"+
    "\3\0\12\3\46\0\12\3\6\0\130\2\10\0\51\2\127\0\35\2"+
    "\51\0\12\3\36\2\2\0\5\2\u038b\0\154\2\224\0\234\2\4\0"+
    "\132\2\6\0\26\2\2\0\6\2\2\0\46\2\2\0\6\2\2\0"+
    "\10\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0\37\2\2\0"+
    "\65\2\1\0\7\2\1\0\1\2\3\0\3\2\1\0\7\2\3\0"+
    "\4\2\2\0\6\2\4\0\15\2\5\0\3\2\1\0\7\2\164\0"+
    "\1\2\15\0\1\2\202\0\1\2\4\0\1\2\2\0\12\2\1\0"+
    "\1\2\3\0\5\2\6\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\4\2\1\0\3\2\1\0\7\2\3\0\3\2\5\0\5\2\u0ebb\0"+
    "\2\2\52\0\5\2\5\0\2\2\4\0\126\2\6\0\3\2\1\0"+
    "\132\2\1\0\4\2\5\0\50\2\4\0\136\2\21\0\30\2\70\0"+
    "\20\2\u0200\0\u19b6\2\112\0\u51a6\2\132\0\u048d\2\u0773\0\u2ba4\2\u215c\0"+
    "\u012e\2\2\0\73\2\225\0\7\2\14\0\5\2\5\0\1\2\1\0"+
    "\12\2\1\0\15\2\1\0\5\2\1\0\1\2\1\0\2\2\1\0"+
    "\2\2\1\0\154\2\41\0\u016b\2\22\0\100\2\2\0\66\2\50\0"+
    "\14\2\164\0\5\2\1\0\207\2\23\0\12\3\7\0\32\2\6\0"+
    "\32\2\13\0\131\2\3\0\6\2\2\0\6\2\2\0\6\2\2\0"+
    "\3\2\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\10\1\11\14\3\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\2\1"+
    "\1\26\1\27\1\30\1\31\13\3\1\32\1\33\1\34"+
    "\1\35\1\36\14\35\1\37\1\40\1\41\1\42\1\4"+
    "\1\0\1\43\1\44\1\45\2\10\3\3\1\46\5\3"+
    "\1\47\4\3\1\50\1\51\1\3\1\52\1\53\2\3"+
    "\1\54\1\55\2\3\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\2\0\1\3\1\65\4\3\1\66\2\3"+
    "\1\67\1\70\1\3\1\71\4\3\1\0\1\72\3\35"+
    "\1\46\6\35\1\47\4\35\1\50\1\51\1\35\1\52"+
    "\1\35\1\53\2\35\1\54\1\55\2\35\1\4\1\0"+
    "\13\3\1\73\6\3\2\0\1\74\13\3\1\75\1\76"+
    "\14\35\1\73\7\35\3\3\1\77\4\3\1\100\1\101"+
    "\6\3\1\15\1\16\1\102\1\103\3\3\1\104\3\3"+
    "\1\105\1\3\3\35\1\77\5\35\1\100\1\101\1\35"+
    "\1\106\5\35\4\3\1\107\12\3\1\110\3\3\1\111"+
    "\5\35\1\107\7\35\11\3\1\112\1\3\1\113\2\3"+
    "\11\35\14\3\11\35\1\100\7\3\1\114\1\3\1\115"+
    "\1\3\1\100\10\35\1\3\1\100\3\3\1\116\1\117"+
    "\2\35\1\100\3\35\4\3\5\35\3\3\4\35\3\3"+
    "\4\35\3\3\4\35\2\3\1\120\2\35\2\3\2\35"+
    "\2\3\2\35\1\3\1\35\1\3\1\35\1\3\1\35"+
    "\1\3\1\35\1\3\1\35";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\324\0\u01dd\0\u0212\0\u0247\0\324\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\324\0\324\0\u052d\0\u0562\0\324"+
    "\0\324\0\324\0\324\0\u0597\0\324\0\324\0\u05cc\0\u0601"+
    "\0\324\0\324\0\324\0\324\0\u0636\0\u066b\0\u06a0\0\u06d5"+
    "\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848\0\324"+
    "\0\u087d\0\u01dd\0\u08b2\0\324\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u04f8\0\324\0\324\0\324\0\u0b63\0\u0b98\0\324\0\324"+
    "\0\324\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u013e\0\u0cd6"+
    "\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u013e\0\u0ddf\0\u0e14\0\u0e49"+
    "\0\u0e7e\0\u013e\0\u013e\0\u0eb3\0\u013e\0\u013e\0\u0ee8\0\u0f1d"+
    "\0\u013e\0\u013e\0\u0f52\0\u0f87\0\324\0\324\0\324\0\324"+
    "\0\324\0\324\0\324\0\u0fbc\0\u0ff1\0\u1026\0\u013e\0\u105b"+
    "\0\u1090\0\u10c5\0\u10fa\0\u013e\0\u112f\0\u1164\0\u013e\0\u013e"+
    "\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7\0\324"+
    "\0\u130c\0\u1341\0\u1376\0\u08b2\0\u13ab\0\u13e0\0\u1415\0\u144a"+
    "\0\u147f\0\u14b4\0\u08b2\0\u14e9\0\u151e\0\u1553\0\u1588\0\u08b2"+
    "\0\u08b2\0\u15bd\0\u08b2\0\u15f2\0\u08b2\0\u1627\0\u165c\0\u08b2"+
    "\0\u08b2\0\u1691\0\u16c6\0\u16fb\0\u16fb\0\u1730\0\u1765\0\u179a"+
    "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"+
    "\0\u013e\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5"+
    "\0\u1aea\0\u013e\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"+
    "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u013e\0\u013e\0\u1d66"+
    "\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e"+
    "\0\u1f43\0\u1f78\0\u1fad\0\u08b2\0\u1fe2\0\u2017\0\u204c\0\u2081"+
    "\0\u20b6\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u013e\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u013e\0\u013e\0\u22c8\0\u22fd\0\u2332"+
    "\0\u2367\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u013e\0\u24a5"+
    "\0\u24da\0\u250f\0\u013e\0\u2544\0\u2579\0\u25ae\0\u013e\0\u25e3"+
    "\0\u2618\0\u264d\0\u2682\0\u08b2\0\u26b7\0\u26ec\0\u2721\0\u2756"+
    "\0\u278b\0\u08b2\0\u08b2\0\u27c0\0\u08b2\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u013e\0\u29d2"+
    "\0\u2a07\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a"+
    "\0\u2baf\0\u013e\0\u2be4\0\u2c19\0\u2c4e\0\u013e\0\u2c83\0\u2cb8"+
    "\0\u2ced\0\u2d22\0\u2d57\0\u08b2\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b"+
    "\0\u2e60\0\u2e95\0\u2eca\0\u2eff\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3"+
    "\0\u3008\0\u303d\0\u3072\0\u30a7\0\u013e\0\u30dc\0\u013e\0\u3111"+
    "\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f\0\u3284\0\u32b9"+
    "\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7\0\u342c\0\u3461"+
    "\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f\0\u35d4\0\u3609"+
    "\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747\0\u377c\0\u37b1"+
    "\0\u37e6\0\u381b\0\u3850\0\u3885\0\u38ba\0\u38ef\0\u3924\0\u013e"+
    "\0\u3959\0\u013e\0\u398e\0\u39c3\0\u39f8\0\u3a2d\0\u3a62\0\u3a97"+
    "\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5\0\u3c0a\0\u3c3f"+
    "\0\u3c74\0\u013e\0\u013e\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d"+
    "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25"+
    "\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd"+
    "\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275"+
    "\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d"+
    "\0\u4452\0\u08b2\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b\0\u4590"+
    "\0\u45c5\0\u45fa\0\u462f\0\u4664\0\u4699\0\u46ce\0\u4703\0\u4738"+
    "\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\7\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\2\7\1\25\1\26\1\27\3\7\1\30\1\7"+
    "\1\31\1\7\1\32\1\7\1\33\1\34\1\35\2\7"+
    "\1\36\1\37\1\7\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\5\1\51\1\52\1\53"+
    "\1\54\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\7\1\16\1\55\1\20\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\25\1\26\1\64\1\7"+
    "\1\65\1\7\1\66\1\7\1\31\1\67\1\32\1\7"+
    "\1\33\1\34\1\35\2\7\1\36\1\37\1\7\1\40"+
    "\1\70\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\5\1\51\1\52\1\53\1\54\1\5\1\6\1\71"+
    "\1\10\1\11\1\12\1\72\1\14\1\15\1\71\1\16"+
    "\24\71\1\33\1\34\1\35\2\71\1\36\1\37\1\71"+
    "\1\40\1\5\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\5\1\51\1\52\1\53\1\54\1\5\1\6"+
    "\1\73\1\10\1\11\1\12\1\72\1\14\1\15\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\1\102\2\73"+
    "\1\103\1\104\1\105\3\73\1\106\1\73\1\107\1\73"+
    "\1\110\1\73\1\111\1\112\1\35\2\73\1\36\1\37"+
    "\1\73\1\113\1\114\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\5\1\51\1\52\1\53\1\54\66\0"+
    "\1\6\65\0\4\7\3\0\1\7\1\0\24\7\3\0"+
    "\2\7\2\0\1\7\21\0\1\10\1\115\4\0\1\116"+
    "\4\0\1\116\51\0\1\115\1\117\66\0\1\120\31\0"+
    "\1\121\24\0\7\14\1\122\55\14\10\15\1\123\54\15"+
    "\2\0\4\7\3\0\1\7\1\0\1\7\1\124\3\7"+
    "\1\125\16\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\1\126\2\7\1\127\2\7\1\130"+
    "\15\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\6\7\1\131\6\7\1\132\6\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\10\7\1\133\13\7\3\0\1\134\1\7\2\0\1\135"+
    "\20\0\4\7\3\0\1\7\1\0\2\7\1\136\1\137"+
    "\2\7\1\140\15\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\3\7\1\141\20\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\3\7\1\142\1\7\1\143\16\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\6\7\1\144"+
    "\15\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\4\7\1\145\4\7\1\146\12\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\3\7\1\147\2\7\1\150\15\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\3\7\1\151"+
    "\1\7\1\152\16\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\1\153\6\7\1\154\14\7"+
    "\3\0\2\7\2\0\1\7\24\0\1\155\122\0\1\156"+
    "\10\0\1\157\54\0\1\160\7\0\1\161\62\0\1\162"+
    "\66\0\1\163\32\0\1\164\7\0\1\165\33\0\4\7"+
    "\3\0\1\7\1\0\1\7\1\166\2\7\1\167\1\125"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\1\170\5\7\1\131\6\7\1\132\6\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\10\7\1\171\12\7\1\172\3\0\1\134\1\7"+
    "\2\0\1\135\20\0\4\7\3\0\1\7\1\0\1\173"+
    "\1\7\1\136\1\137\2\7\1\140\15\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\3\7"+
    "\1\141\2\7\1\174\1\175\5\7\1\176\6\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\7\7\1\177\1\7\1\200\12\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\3\7\1\201"+
    "\20\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\1\7\1\202\2\7\1\145\4\7\1\146"+
    "\4\7\1\203\5\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\1\7\1\204\22\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\3\7\1\147\2\7\1\150\3\7\1\205\11\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\6\7\1\206\15\7\3\0\2\7\2\0\1\7\17\0"+
    "\1\207\4\71\1\210\2\0\1\71\1\0\24\71\3\0"+
    "\2\71\2\0\1\71\20\0\4\73\3\0\1\73\1\0"+
    "\24\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\1\73\1\211\3\73\1\212\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\1\213\2\73\1\214\2\73\1\215\15\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\6\73"+
    "\1\216\6\73\1\217\6\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\10\73\1\220\10\73"+
    "\1\221\2\73\3\0\1\222\1\73\2\0\1\223\20\0"+
    "\4\73\3\0\1\73\1\0\2\73\1\224\1\225\2\73"+
    "\1\226\15\73\3\0\2\73\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\3\73\1\227\20\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\3\73"+
    "\1\230\1\73\1\231\16\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\6\73\1\232\15\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\4\73\1\233\1\234\3\73\1\235\12\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\236\2\73\1\237\15\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\3\73\1\240"+
    "\1\73\1\241\16\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\1\242\6\73\1\243\14\73"+
    "\3\0\2\73\2\0\1\73\21\0\1\115\5\0\1\116"+
    "\4\0\1\116\51\0\1\244\1\0\1\245\4\0\1\245"+
    "\61\0\1\14\65\0\1\15\56\0\4\7\3\0\1\7"+
    "\1\0\2\7\1\246\21\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\5\7\1\247\16\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\21\7\1\250\2\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\16\7\1\251\5\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\21\7\1\252\2\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\12\7\1\253\11\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\3\7\1\252\20\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\3\7\1\254\20\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\15\7\1\255\6\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\10\7\1\256\13\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\21\7\1\257\2\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\23\7\1\260\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\7\7\1\261\1\262\13\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\4\7\1\263\17\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\2\7\1\264\21\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\7\7\1\265\14\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\3\7\1\266\2\7\1\267\15\7\3\0\2\7"+
    "\2\0\1\7\36\0\1\270\64\0\1\271\46\0\4\7"+
    "\3\0\1\7\1\0\2\7\1\246\13\7\1\272\5\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\4\7\1\273\17\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\3\7\1\252\1\274"+
    "\17\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\2\7\1\275\21\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\5\7\1\276"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\277\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\3\7\1\300"+
    "\20\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\5\7\1\301\16\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\4\7\1\302"+
    "\1\303\16\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\12\7\1\304\11\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\12\7"+
    "\1\305\11\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\24\7\3\0\1\306\1\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\16\7\1\307"+
    "\5\7\3\0\2\7\2\0\1\7\17\0\1\207\4\0"+
    "\1\210\60\0\4\73\3\0\1\73\1\0\2\73\1\310"+
    "\21\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\5\73\1\311\16\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\21\73\1\312"+
    "\2\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\16\73\1\313\5\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\21\73\1\314"+
    "\2\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\12\73\1\315\11\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\3\73\1\314"+
    "\20\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\22\73\1\316\1\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\3\73\1\317"+
    "\20\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\15\73\1\320\6\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\10\73\1\321"+
    "\13\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\21\73\1\322\2\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\23\73\1\323"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\7\73\1\324\1\325\13\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\3\73\1\326"+
    "\20\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\4\73\1\327\17\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\2\73\1\330"+
    "\21\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\7\73\1\331\14\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\3\73\1\332"+
    "\2\73\1\333\15\73\3\0\2\73\2\0\1\73\21\0"+
    "\1\244\63\0\4\7\3\0\1\7\1\0\3\7\1\334"+
    "\20\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\7\7\1\335\14\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\3\7\1\336"+
    "\20\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\337\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\21\7\1\340"+
    "\2\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\10\7\1\341\13\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\7\7\1\342"+
    "\14\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\343\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\11\7\1\344"+
    "\12\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\345\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\5\7\1\337"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\10\7\1\346\13\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\2\7\1\347"+
    "\21\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\14\7\1\350\7\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\3\7\1\351"+
    "\20\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\2\7\1\352\21\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\2\7\1\353"+
    "\21\7\3\0\2\7\2\0\1\7\76\0\1\354\64\0"+
    "\1\355\6\0\4\7\3\0\1\7\1\0\5\7\1\356"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\357\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\3\7\1\360"+
    "\20\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\12\7\1\361\11\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\1\362\23\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\1\7\1\363\22\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\14\7\1\364\7\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\5\7\1\365\16\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\3\7\1\366\20\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\24\7\3\0\1\367\1\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\6\7\1\370\15\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\371\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\7\73\1\372\14\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\373\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\3\73\1\374\20\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\21\73\1\375\2\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\10\73\1\376\13\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\5\73\1\377\16\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\7\73\1\u0100\14\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\u0101\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\11\73\1\u0102\12\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\u0103\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\5\73\1\374\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\10\73\1\u0104\13\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\21\73\1\u0105\2\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\2\73\1\u0106\21\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\14\73\1\u0107\7\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\u0108\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\2\73\1\u0109\21\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\2\73\1\u010a\21\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\7\3\0\1\7\1\0\4\7\1\u010b\17\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\12\7\1\u010c\11\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\4\7\1\u010d\17\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\3\7\1\u010e\20\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\16\7\1\344\5\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\24\7\3\0\1\7\1\u010f\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\21\7\1\u0110\2\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\6\7"+
    "\1\u0111\15\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\3\7\1\u0112\20\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\21\7"+
    "\1\u0113\2\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\1\7\1\u0114\22\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\3\7"+
    "\1\u0115\20\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\3\7\1\u0116\20\7\3\0\2\7"+
    "\2\0\1\7\73\0\1\157\64\0\1\161\11\0\4\7"+
    "\3\0\1\7\1\0\1\u0117\23\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\22\7\1\u0118"+
    "\1\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\4\7\1\u0119\17\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\5\7\1\u011a"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\7\7\1\u011b\14\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\1\u011c\23\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\7\7\1\u011d\14\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\1\7\1\u011e\22\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\73\3\0\1\73"+
    "\1\0\4\73\1\u011f\17\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\12\73\1\u0120\11\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\4\73\1\u0121\17\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\3\73\1\u0122\20\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\16\73\1\u0102\5\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\24\73\3\0\1\73"+
    "\1\u0123\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\24\73\3\0\1\73\1\u0124\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\21\73\1\u0125\2\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\6\73"+
    "\1\u0126\15\73\3\0\2\73\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\3\73\1\u0127\20\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\21\73"+
    "\1\u0128\2\73\3\0\2\73\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\1\73\1\u0129\22\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\3\73"+
    "\1\u012a\20\73\3\0\2\73\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\3\73\1\u012b\20\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\7\3\0\1\7\1\0\5\7"+
    "\1\u012c\16\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\13\7\1\u012d\10\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\22\7"+
    "\1\u012e\1\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\1\7\1\260\22\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\1\u012f"+
    "\23\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\17\7\1\u0130\4\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\1\7\1\u0131"+
    "\22\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\u0132\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\5\7\1\344"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\16\7\1\u0130\5\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\4\7\1\u0133"+
    "\17\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\13\7\1\u0134\10\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\5\7\1\u0135"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\11\7\1\u0136\12\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\1\7\1\u0137"+
    "\22\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\1\7\1\u0138\22\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\4\7\1\u0139"+
    "\17\7\3\0\2\7\2\0\1\7\20\0\4\73\3\0"+
    "\1\73\1\0\5\73\1\u013a\16\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\13\73\1\u013b"+
    "\10\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\22\73\1\u013c\1\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\1\73\1\323"+
    "\22\73\3\0\2\73\2\0\1\73\20\0\3\73\1\u013d"+
    "\3\0\1\73\1\0\24\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\1\u013e\23\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\17\73\1\u013f\4\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\1\73\1\u0140\22\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\u0141\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\5\73\1\u0102\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\16\73\1\u013f\5\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\4\73\1\u0142\17\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\6\7\1\u0143\15\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\14\7\1\u0144\7\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\1\u0145\23\7\3\0\2\7\2\0\1\7\20\0\3\7"+
    "\1\u0146\3\0\1\7\1\0\24\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\12\7\1\u0147"+
    "\11\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\16\7\1\u0148\5\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\1\7\1\u0149"+
    "\22\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\4\7\1\u014a\17\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\10\7\1\u014b"+
    "\13\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\12\7\1\u014c\11\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\2\7\1\u014d"+
    "\21\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\3\7\1\u014e\20\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\73\3\0\1\73\1\0\6\73\1\u014f"+
    "\15\73\3\0\2\73\2\0\1\73\20\0\4\73\3\0"+
    "\1\73\1\0\14\73\1\u0150\7\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\1\u0151\23\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\4\73\1\u0152\17\73\3\0\2\73\2\0\1\73"+
    "\20\0\3\73\1\u0153\3\0\1\73\1\0\24\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\12\73\1\u0154\11\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\16\73\1\u0155\5\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\1\73\1\u0156\22\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\4\73\1\u0157\17\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\7\7\1\u0158\14\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\5\7\1\251\16\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\2\7\1\u0159\21\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\1\u015a\2\7\1\u015b\20\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\1\7\1\u015c\22\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\1\u015d\23\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\5\7\1\u015e\16\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\12\7\1\u015f\11\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\3\7\1\u0160\20\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\3\7\1\u0161\20\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\3\7\1\u0162\20\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\2\7\1\u0163\21\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\73\3\0\1\73\1\0"+
    "\7\73\1\u0164\14\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\5\73\1\313\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\2\73\1\u0165\21\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\3\73\1\u0166\20\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\1\u0167\2\73\1\u0168\20\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\1\73\1\u0169\22\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\1\u016a\23\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\5\73\1\u016b\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\12\73\1\u016c\11\73\3\0\2\73\2\0\1\73\20\0"+
    "\3\7\1\u016d\3\0\1\7\1\0\24\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\3\7"+
    "\1\344\20\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\5\7\1\125\16\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\10\7"+
    "\1\133\13\7\3\0\2\7\2\0\1\7\20\0\4\7"+
    "\3\0\1\7\1\0\20\7\1\u016e\3\7\3\0\2\7"+
    "\2\0\1\7\20\0\4\7\3\0\1\7\1\0\1\7"+
    "\1\u016f\22\7\3\0\2\7\2\0\1\7\20\0\3\7"+
    "\1\u0170\3\0\1\7\1\0\24\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\1\7\1\u0171"+
    "\22\7\3\0\2\7\2\0\1\7\20\0\4\7\3\0"+
    "\1\7\1\0\4\7\1\u0172\17\7\3\0\2\7\2\0"+
    "\1\7\20\0\4\7\3\0\1\7\1\0\5\7\1\u0173"+
    "\16\7\3\0\2\7\2\0\1\7\20\0\3\73\1\u0174"+
    "\3\0\1\73\1\0\24\73\3\0\2\73\2\0\1\73"+
    "\20\0\4\73\3\0\1\73\1\0\3\73\1\u0102\20\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\24\73\3\0\2\73\2\0\1\u0175\20\0\4\73"+
    "\3\0\1\73\1\0\5\73\1\212\16\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\10\73"+
    "\1\220\13\73\3\0\2\73\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\20\73\1\u0176\3\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\1\73"+
    "\1\u0177\22\73\3\0\2\73\2\0\1\73\20\0\3\73"+
    "\1\u0178\3\0\1\73\1\0\24\73\3\0\2\73\2\0"+
    "\1\73\20\0\4\73\3\0\1\73\1\0\1\73\1\u0179"+
    "\22\73\3\0\2\73\2\0\1\73\20\0\4\7\3\0"+
    "\1\7\1\0\6\7\1\u017a\15\7\3\0\2\7\2\0"+
    "\1\7\20\0\3\7\1\u017b\3\0\1\7\1\0\24\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\5\7\1\u0158\16\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\1\7\1\u017c\22\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\20\7\1\u017d\3\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\73\3\0\1\73\1\0\6\73\1\u017e\15\73"+
    "\3\0\2\73\2\0\1\73\20\0\4\73\3\0\1\73"+
    "\1\0\14\73\1\u017f\7\73\3\0\2\73\2\0\1\73"+
    "\20\0\3\73\1\u0180\3\0\1\73\1\0\24\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\5\73\1\u0164\16\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\1\73\1\u0181\22\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\20\73\1\u0182\3\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\7\3\0\1\7\1\0\7\7\1\u0183\14\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\4\7\1\u0184\17\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\6\7\1\130\15\7\3\0"+
    "\2\7\2\0\1\7\20\0\3\7\1\u0185\3\0\1\7"+
    "\1\0\24\7\3\0\2\7\2\0\1\7\20\0\4\73"+
    "\3\0\1\73\1\0\7\73\1\u0186\14\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\3\73"+
    "\1\u0187\20\73\3\0\2\73\2\0\1\73\20\0\4\73"+
    "\3\0\1\73\1\0\4\73\1\u0188\17\73\3\0\2\73"+
    "\2\0\1\73\20\0\4\73\3\0\1\73\1\0\6\73"+
    "\1\215\15\73\3\0\2\73\2\0\1\73\20\0\3\73"+
    "\1\u0189\3\0\1\73\1\0\24\73\3\0\2\73\2\0"+
    "\1\73\20\0\3\7\1\u018a\3\0\1\7\1\0\24\7"+
    "\3\0\2\7\2\0\1\7\20\0\4\7\3\0\1\7"+
    "\1\0\12\7\1\u018b\11\7\3\0\2\7\2\0\1\7"+
    "\20\0\4\7\3\0\1\7\1\0\12\7\1\u018c\11\7"+
    "\3\0\2\7\2\0\1\7\20\0\3\73\1\u018d\3\0"+
    "\1\73\1\0\24\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\1\73\1\u018e\22\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\12\73\1\u018f\11\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\12\73\1\u0190\11\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\4\7\1\u0191\17\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\13\7\1\u0192\10\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\1\7\1\u0193\22\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\73\3\0\1\73\1\0\4\73\1\u0194\17\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\2\73\1\u0195\21\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\13\73\1\u0196\10\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\1\73\1\u0197\22\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\7\3\0\1\7\1\0\3\7\1\137\20\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\7\3\0\1\7\1\0"+
    "\10\7\1\u0198\13\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\4\7\1\u0199\17\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\73\3\0\1\73\1\0"+
    "\3\73\1\225\20\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\3\73\1\u019a\20\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\73\3\0\1\73\1\0"+
    "\10\73\1\u019b\13\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\4\73\1\u019c\17\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\12\7\1\u019d\11\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\5\7\1\u019e\16\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\73\3\0\1\73\1\0"+
    "\12\73\1\u019f\11\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\5\73\1\u01a0\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\1\7\1\u01a1\22\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\7\7\1\u01a2\14\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\73\3\0\1\73\1\0"+
    "\1\73\1\u01a3\22\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\7\73\1\u01a4\14\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\20\7\1\344\3\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\7\3\0\1\7\1\0\14\7\1\u01a5\7\7\3\0"+
    "\2\7\2\0\1\7\20\0\4\73\3\0\1\73\1\0"+
    "\20\73\1\u0102\3\73\3\0\2\73\2\0\1\73\20\0"+
    "\4\73\3\0\1\73\1\0\14\73\1\u01a6\7\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\2\7\1\u01a7\21\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\73\3\0\1\73\1\0\2\73\1\u01a8\21\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\5\7\1\u01a9\16\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\73\3\0\1\73\1\0\5\73\1\u01aa\16\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\12\7\1\u01ab\11\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\73\3\0\1\73\1\0\12\73\1\u01ac\11\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\6\7\1\u01ad\15\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\73\3\0\1\73\1\0\6\73\1\u01ae\15\73\3\0"+
    "\2\73\2\0\1\73\20\0\4\7\3\0\1\7\1\0"+
    "\1\7\1\337\22\7\3\0\2\7\2\0\1\7\20\0"+
    "\4\73\3\0\1\73\1\0\1\73\1\374\22\73\3\0"+
    "\2\73\2\0\1\73\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18603];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\3\1\1\11\15\1\2\11"+
    "\2\1\4\11\1\1\2\11\2\1\4\11\13\1\1\11"+
    "\1\3\2\1\1\11\15\1\3\11\1\1\1\0\3\11"+
    "\33\1\7\11\2\0\21\1\1\0\1\15\34\1\1\0"+
    "\22\1\2\0\365\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private boolean allowXPath2Syntax = false;

  _XPathLexer(boolean allowXPath2Syntax) {
    this((java.io.Reader)null);
    this.allowXPath2Syntax = allowXPath2Syntax;
  }

  public final void setStart(int start) {
    zzCurrentPos = zzStartRead = start;
  }

  private IElementType ncName() {
    yybegin(S1);
    return XPathTokenTypes.NCNAME;
  }

  protected abstract void readComment() throws java.io.IOException;


  _XPathLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _XPathLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1304) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    reset(buffer, 0, buffer.length(), initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;
    int zzPushbackPosL = zzPushbackPos = -1;
    boolean zzWasPushback;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;

      zzWasPushback = false;

      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            zzPushbackPos = zzPushbackPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            zzPushbackPosL = zzPushbackPos;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 2) == 2 )
            zzPushbackPosL = zzCurrentPosL;

          if ( (zzAttributes & 1) == 1 ) {
            zzWasPushback = (zzAttributes & 4) == 4;
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;
      if (zzWasPushback)
        zzMarkedPos = zzPushbackPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 56: 
          { if (allowXPath2Syntax) { yybegin(TYPE); return XPath2TokenTypes.OF;        } else { return ncName(); }
          }
        case 81: break;
        case 6: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.MINUS;
          }
        case 82: break;
        case 50: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.GE;
          }
        case 83: break;
        case 8: 
          { yybegin(S1);          return XPathTokenTypes.STRING_LITERAL;
          }
        case 84: break;
        case 40: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WLE; } else { return ncName(); }
          }
        case 85: break;
        case 69: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.IDIV; } else { return ncName(); }
          }
        case 86: break;
        case 30: 
          { yybegin(S1); return XPathTokenTypes.PLUS;
          }
        case 87: break;
        case 54: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.TO;        } else { return ncName(); }
          }
        case 88: break;
        case 58: 
          { return XPathTokenTypes.VARIABLE_PREFIX;
          }
        case 89: break;
        case 25: 
          { return XPathTokenTypes.RBRACE;
          }
        case 90: break;
        case 11: 
          { yybegin(S1);          return XPathTokenTypes.RPAREN;
          }
        case 91: break;
        case 74: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.EXCEPT;    } else { return ncName(); }
          }
        case 92: break;
        case 3: 
          { yybegin(S1);          return XPathTokenTypes.NCNAME;
          }
        case 93: break;
        case 21: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.EQ;
          }
        case 94: break;
        case 38: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WNE; } else { return ncName(); }
          }
        case 95: break;
        case 51: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.ANY_PATH;
          }
        case 96: break;
        case 49: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.AFTER;  } else { yypushback(1); return XPathTokenTypes.GT; }
          }
        case 97: break;
        case 20: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.UNION;
          }
        case 98: break;
        case 2: 
          { return XPathTokenTypes.WHITESPACE;
          }
        case 99: break;
        case 77: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.INSTANCE;  } else { return ncName(); }
          }
        case 100: break;
        case 24: 
          { return XPathTokenTypes.LBRACE;
          }
        case 101: break;
        case 35: 
          { yybegin(S1);          return XPathTokenTypes.DOTDOT;
          }
        case 102: break;
        case 7: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.COL;
          }
        case 103: break;
        case 1: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.BAD_CHARACTER;
          }
        case 104: break;
        case 59: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.FOR;       } else { return ncName(); }
          }
        case 105: break;
        case 4: 
          { yybegin(S1);          return XPathTokenTypes.NUMBER;
          }
        case 106: break;
        case 47: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.BEFORE; } else { yypushback(1); return XPathTokenTypes.LT; }
          }
        case 107: break;
        case 46: 
          { if (allowXPath2Syntax) { readComment(); return XPath2TokenTypes.COMMENT; } else { yypushback(1); return XPathTokenTypes.LPAREN; }
          }
        case 108: break;
        case 70: 
          { return  XPath2TokenTypes.ITEM;
          }
        case 109: break;
        case 45: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WGT; } else { return ncName(); }
          }
        case 110: break;
        case 28: 
          { return XPathTokenTypes.COL;
          }
        case 111: break;
        case 19: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.PATH;
          }
        case 112: break;
        case 32: 
          { return XPathTokenTypes.RPAREN;
          }
        case 113: break;
        case 13: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LT;
          }
        case 114: break;
        case 31: 
          { return XPathTokenTypes.LPAREN;
          }
        case 115: break;
        case 5: 
          { yybegin(S1);          return XPathTokenTypes.DOT;
          }
        case 116: break;
        case 15: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.QUEST; } else { return XPathTokenTypes.BAD_CHARACTER; }
          }
        case 117: break;
        case 18: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.COMMA;
          }
        case 118: break;
        case 29: 
          { return XPathTokenTypes.NCNAME;
          }
        case 119: break;
        case 39: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WEQ; } else { return ncName(); }
          }
        case 120: break;
        case 10: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LPAREN;
          }
        case 121: break;
        case 23: 
          { yybegin(S1);          return XPathTokenTypes.RBRACKET;
          }
        case 122: break;
        case 36: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.COLCOL;
          }
        case 123: break;
        case 34: 
          { yybegin(S1); return XPathTokenTypes.STAR;
          }
        case 124: break;
        case 22: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LBRACKET;
          }
        case 125: break;
        case 71: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.EVERY;     } else { return ncName(); }
          }
        case 126: break;
        case 64: 
          { yybegin(S1);          return XPathTokenTypes.AXIS_NAME;
          }
        case 127: break;
        case 60: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.AND;
          }
        case 128: break;
        case 53: 
          { if (allowXPath2Syntax) { yybegin(TYPE); return XPath2TokenTypes.AS;        } else { return ncName(); }
          }
        case 129: break;
        case 78: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.SATISFIES; } else { return ncName(); }
          }
        case 130: break;
        case 75: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.RETURN;    } else { return ncName(); }
          }
        case 131: break;
        case 44: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WGE; } else { return ncName(); }
          }
        case 132: break;
        case 14: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.GT;
          }
        case 133: break;
        case 12: 
          { yybegin(VAR);         return XPathTokenTypes.DOLLAR;
          }
        case 134: break;
        case 42: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.IS;     } else { return ncName(); }
          }
        case 135: break;
        case 79: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.INTERSECT; } else { return ncName(); }
          }
        case 136: break;
        case 55: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.OR;
          }
        case 137: break;
        case 80: 
          { yybegin(YYINITIAL); return XPath2TokenTypes.EMPTY_SEQUENCE;
          }
        case 138: break;
        case 65: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.SOME;      } else { return ncName(); }
          }
        case 139: break;
        case 66: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.CAST;      } else { return ncName(); }
          }
        case 140: break;
        case 63: 
          { yybegin(S1);          return XPathTokenTypes.NODE_TYPE;
          }
        case 141: break;
        case 68: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.THEN;      } else { return ncName(); }
          }
        case 142: break;
        case 73: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.UNION;     } else { return ncName(); }
          }
        case 143: break;
        case 43: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.IF;        } else { return ncName(); }
          }
        case 144: break;
        case 17: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.AT;
          }
        case 145: break;
        case 33: 
          { yybegin(S1); return XPath2TokenTypes.QUEST;
          }
        case 146: break;
        case 52: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.NE;
          }
        case 147: break;
        case 62: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.MOD;
          }
        case 148: break;
        case 26: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.MULT;
          }
        case 149: break;
        case 16: 
          { yybegin(S1);          return XPathTokenTypes.STAR;
          }
        case 150: break;
        case 76: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.CASTABLE;  } else { return ncName(); }
          }
        case 151: break;
        case 37: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.END_COMMENT;            } else { yypushback(1); return XPathTokenTypes.COL;    }
          }
        case 152: break;
        case 57: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.IN;        } else { return ncName(); }
          }
        case 153: break;
        case 72: 
          { if (allowXPath2Syntax) { return XPath2TokenTypes.TREAT;     } else { return ncName(); }
          }
        case 154: break;
        case 61: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.DIV;
          }
        case 155: break;
        case 27: 
          { yybegin(S1);          return XPathTokenTypes.VARIABLE_NAME;
          }
        case 156: break;
        case 48: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.LE;
          }
        case 157: break;
        case 9: 
          { yybegin(YYINITIAL);   return XPathTokenTypes.PLUS;
          }
        case 158: break;
        case 67: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL); return XPath2TokenTypes.ELSE;      } else { return ncName(); }
          }
        case 159: break;
        case 41: 
          { if (allowXPath2Syntax) { yybegin(YYINITIAL);   return XPath2TokenTypes.WLT; } else { return ncName(); }
          }
        case 160: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
