<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           targetNamespace="http://www.infiview.net/infiview"
           xmlns="http://www.infiview.net/infiview"
           xmlns:bi="http://www.bindows.net/IVBindowsSchema"
           elementFormDefault="qualified">

  <xs:import namespace="http://www.bindows.net/IVBindowsSchema"
             schemaLocation="ComplexSchemaValidation19.xsd"/>

  <xs:group name="ElementsAllowedExternally">
    <xs:choice>
      <xs:element ref="ViewportNavigator" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="ComponentViewport" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="GraphViewport" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="InteractiveGraphViewport" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="DynamicViewportNavigator" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="InfiViewViewport" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="LayerPane" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element ref="PerspectiveTitle" minOccurs="0" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:group>

  <xs:attributeGroup name="VGComponentAttributes"></xs:attributeGroup>

  <xs:element name="DefaultSelectionDefinition">
    <xs:complexType>
      <xs:choice>
        <xs:element ref="Selection2"/>
        <xs:element ref="Selection"/>
        <xs:element ref="VGSelection"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="Layout">
    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="AbstractDataContainer">
    <xs:annotation>
      <xs:documentation>
        Abstract data container class
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractDataContainerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractDataContainerAttributes">

    <xs:attributeGroup ref="ViewportRectangleAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AbstractGroupNode">
    <xs:annotation>
      <xs:documentation>
        This class represent a special grouping data container.
        The member area of the group is the area where members are placed.
        Use the addMember method for adding data containers to a group.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractGroupNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractGroupNodeAttributes">

    <xs:attributeGroup ref="InfiViewNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AbstractGroupNodeType">
    <xs:annotation>
      <xs:documentation>
        infiview.AbstractGroupNodeType acts as a template for nodes that have grouping features.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractGroupNodeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractGroupNodeTypeAttributes">

    <xs:attributeGroup ref="NodeTypeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AbstractNode">
    <xs:annotation>
      <xs:documentation>
        Abstract data container class
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractNodeAttributes">

    <xs:attributeGroup ref="ViewportRectangleAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AbstractNodeRepAdapter">
    <xs:annotation>
      <xs:documentation>
        The abstract node representation adapter.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractNodeRepAdapterAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractNodeRepAdapterAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AbstractSelection">
    <xs:annotation>
      <xs:documentation>
        Adds a selection wireframe around multiple nodes that can then be dragged with the mouse.
        Nodes can be added to and removed from the selection as needed.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractSelectionAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractSelectionAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>

    <xs:attribute name="nodes"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Array Nodes inside the selection
          -
          Nodes inside the selection.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="parent"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          BiComponent
          -
          Sets the surface area in which the selection is allowed to operate.
          This method can be overidden if more than one component is used.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="moveDirection"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          String
          -
          Limits movement in various direction.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onchange"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when nodes are added to and removed from the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmovestart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when user starts dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmoveend"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when user has finished dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="AbstractUndoRedoCommand">
    <xs:annotation>
      <xs:documentation>
        This is the base class of all undo redo commands.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractUndoRedoCommandAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractUndoRedoCommandAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AbstractViewport">
    <xs:annotation>
      <xs:documentation>
        The abstract representation of the viewport collects methods giving
        a consistent interface for building custom viewports.

        The viewport is a component which makes it possible to write
        applications with practically infinite surfaces containing a
        tremendous amount of information which should be swapped in and out
        from either an internal lightweight information structure or server
        side information.

        The abstract viewport adds a resize and a
        mousewheel event listener in its constructor. The resize event is
        coupled to the resizeVisibleArea method of the given data model and
        the mousewheel event scrolls the viewport vertically by 50 pixels.
        This behavior can be overriden by overriding the onMouseWheel method.


        The default render margin is zero in both directions.

        setScrollLeft and setScrollTop are overridden to empty functions to
        avoid auto-scrolling problems when using drag-and-drop.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractViewportAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>

    <xs:attribute name="zoomable"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          boolean
          -
          Zoomable viewport or not
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="AbstractViewportModel">
    <xs:annotation>
      <xs:documentation>
        This is the is the foundation for all viewport data models which are
        used to manage the information on which infiview.AbstractViewport
        descendants are dependent on. The data model should store either
        lightweight information about components or manage communication
        with information on a server.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AbstractViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AbstractViewportModelAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>

    <xs:attribute name="onzoomchange"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Dispatched when the zoom level changes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="oncenterview"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Dispatched when the view is centered.</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="Actions">
    <xs:annotation>
      <xs:documentation>
        The class infiview.Actions acts as a manager for InfiView actions.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ActionsAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ActionsAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="AnchorPoints">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="AnchorPointsAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="AnchorPointsAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>

    <xs:attribute name="anchors"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="colorMap"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="BalloonTreeLayout">
    <xs:annotation>
      <xs:documentation>
        In this class a ballon tree layout algorithm is implemented
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="BalloonTreeLayoutAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="BalloonTreeLayoutAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="BiconnectedComponentLayout">
    <xs:annotation>
      <xs:documentation>
        A layout for general graphs that exhibits cluster structure. The
        graph (which is assumed to be connected) is subdivided in its
        bicomponents, and the vertices of each bicomponent are laid out on
        a circle. The bicomponents (which together with the cutpoints form
        a tree) are then laid out using the wedge tree layout algorithm.

        With this layout it is easy to visually identify the clusters
        (bicomponents) and cutpoints.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="BiconnectedComponentLayoutAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="BiconnectedComponentLayoutAttributes">


  </xs:attributeGroup>

  <xs:element name="BiconnectedComponentLayout.BiconnectedComponent">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="BiconnectedComponentLayout.BiconnectedComponentAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="BiconnectedComponentLayout.BiconnectedComponentAttributes">


  </xs:attributeGroup>

  <xs:element name="BiconnectedComponentLayout.BlockCutpointVertex">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="BiconnectedComponentLayout.BlockCutpointVertexAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="BiconnectedComponentLayout.BlockCutpointVertexAttributes">


  </xs:attributeGroup>

  <xs:element name="BiconnectedComponentLayout.Cutpoint">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="BiconnectedComponentLayout.CutpointAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="BiconnectedComponentLayout.CutpointAttributes">


  </xs:attributeGroup>

  <xs:element name="ComponentConstructor">
    <xs:annotation>
      <xs:documentation>
        NodeRepAdapter contructor holder
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ComponentConstructorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ComponentConstructorAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ComponentDataContainer">
    <xs:annotation>
      <xs:documentation>
        Wrapper class for objects inserted into a infiview.GraphViewportDatamodel
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ComponentDataContainerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ComponentDataContainerAttributes">

    <xs:attributeGroup ref="AbstractDataContainerAttributes"/>

    <xs:attribute name="visible"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="data"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Object
          -
          Set the data of this container.
          The properties that are given in the "persistentDataMap" property are saved int the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ComponentNode">
    <xs:annotation>
      <xs:documentation>
        The ComponentNode class represent a BiComponent based node.
        Observe that an instance of this class could reside in other models than infiview.ComponentViewportModel
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ComponentNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ComponentNodeAttributes">

    <xs:attributeGroup ref="AbstractNodeAttributes"/>

    <xs:attribute name="componentConstructors"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.ComponentConstructor[]
          -
          Sets the array of constructors to use for this node.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="component"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          Set the component of this node, it will be wrapped by a ComponentNodeRepAdapter.
          The properties that are given in the "persistentDataMap" property are saved int the container.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmove"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.MoveEvent When the node is moved.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onresize"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.MoveEvent When the node is resized.</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ComponentNodeRepAdapter">
    <xs:annotation>
      <xs:documentation>
        infiview.ComponentNodeRepAdapter represents a NodeRepAdapter containing a zoomable and resizable component.
        This class is used together with ComponentNode.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ComponentNodeRepAdapterAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ComponentNodeRepAdapterAttributes">

    <xs:attributeGroup ref="AbstractNodeRepAdapterAttributes"/>

    <xs:attribute name="component"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ComponentViewport">
    <xs:annotation>
      <xs:documentation>
        Implemented viewport for handling components. It is used together
        with a infiview.ComponentViewportModel.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ComponentViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ComponentViewportAttributes">

    <xs:attributeGroup ref="ZoomableViewportAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ComponentViewportModel">
    <xs:annotation>
      <xs:documentation>
        Model intended for keeping externally added components.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ComponentViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ComponentViewportModelAttributes">

    <xs:attributeGroup ref="ZoomableViewportModelAttributes"/>

    <xs:attribute name="rTreeEnabled"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          boolean
          -
          The rTree, see infiview.RTree for mor information.
          @Type infiview.RTree


          Whether the RTree is used for storing nodes. Storing nodes in an RTree
          allows for finding nodes inside a certain area qucikly, while it slows down
          insert and remove operations.

          When inserting many nodes (>100) it is often faster to first disable
          the rtree, then enable it again. This is because it is alot faster
          to create an rtree out of many nodes than to insert nodes one by one.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ContextMenu">
    <xs:annotation>
      <xs:documentation>
        This class represents an InfiView context menu.
        It takes MenuItems as children.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ContextMenuAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ContextMenuAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>

    <xs:attribute name="upActions"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.InfiView
          -
          Binds the menu items to infiview actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ContextMenus">
    <xs:annotation>
      <xs:documentation>
        The class infiview.ContextMenus represent a set of available context menus.

        TODO: Explain the purpose of this class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ContextMenusAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ContextMenusAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="CornerStitchArea">
    <xs:annotation>
      <xs:documentation>
        TODO: Document class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="CornerStitchAreaAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="CornerStitchAreaAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>

    <xs:attribute name="solid"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="DefaultSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DefaultSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DefaultSymbolAttributes">

    <xs:attributeGroup ref="VGSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="DiamondSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DiamondSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DiamondSymbolAttributes">

    <xs:attributeGroup ref="DefaultSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="DocSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DocSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DocSymbolAttributes">

    <xs:attributeGroup ref="DefaultSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="DoubleZoomFactorModel">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DoubleZoomFactorModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DoubleZoomFactorModelAttributes">

    <xs:attributeGroup ref="ZoomFactorModelAttributes"/>


  </xs:attributeGroup>

  <xs:element name="DrawAnchor">
    <xs:annotation>
      <xs:documentation>
        This class defines static properties that represent the anchoring locations for edge lines.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DrawAnchorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DrawAnchorAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="DynamicPreviewViewportNavigator">
    <xs:annotation>
      <xs:documentation>
        This class is specialized navigator that loads images as preview background.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DynamicPreviewViewportNavigatorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DynamicPreviewViewportNavigatorAttributes">

    <xs:attributeGroup ref="ViewportNavigatorAttributes"/>


  </xs:attributeGroup>

  <xs:element name="DynamicViewportNavigator">
    <xs:annotation>
      <xs:documentation>
        Dynamic Viewport Navigator updates when connected viewport is updated.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="DynamicViewportNavigatorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="DynamicViewportNavigatorAttributes">

    <xs:attributeGroup ref="ViewportNavigatorAttributes"/>


  </xs:attributeGroup>

  <xs:element name="Edge">
    <xs:annotation>
      <xs:documentation>
        This class represents the relationship between two components that are to be edgeed by a edge line.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EdgeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EdgeAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="EdgeContainer">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EdgeContainerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EdgeContainerAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>

    <xs:attribute name="labelNode"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          Sets a label node on the edge.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="edge"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="visible"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="EdgeManager">
    <xs:annotation>
      <xs:documentation>
        This class is a component that holds edgeed components. It also manages the edges involved with these components.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EdgeManagerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EdgeManagerAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>


  </xs:attributeGroup>

  <xs:element name="EdgeType">
    <xs:annotation>
      <xs:documentation>
        infiview.EdgeType acts as a template for edges.
        It holds properties usied by infiview.InfiView when creating an
        edge of a specific edge type.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EdgeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EdgeTypeAttributes">

    <xs:attributeGroup ref="InfiViewTypeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="EdgeTypes">
    <xs:annotation>
      <xs:documentation>
        The class infiview.EdgeTypes acts as a manager for the edge types.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EdgeTypesAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EdgeTypesAttributes">

    <xs:attributeGroup ref="TypeTableAttributes"/>


  </xs:attributeGroup>

  <xs:element name="EllipseSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EllipseSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EllipseSymbolAttributes">

    <xs:attributeGroup ref="DefaultSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="EventListener">
    <xs:annotation>
      <xs:documentation>
        The class infiview.EventListener is used by infiview.InfiView.
        This class is the holder of a event l├нstener. Used by property forms.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EventListenerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EventListenerAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="EventListeners">
    <xs:annotation>
      <xs:documentation>
        The class infiview.EventListeners is used by infiview.InfiView.
        Holder of a list of infiview.EventListener.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="EventListenersAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="EventListenersAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ExpandCollapseImage">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ExpandCollapseImageAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ExpandCollapseImageAttributes">

    <xs:attributeGroup ref="VGImageAttributes"/>

    <xs:attribute name="expandedUri"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="expanded"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="GoogleMapsNode">
    <xs:annotation>
      <xs:documentation>
        infiview.GoogleMapsNode is the light weight representation of an node residing
        in a InfiView using infiview.GoogleMapsViewport.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GoogleMapsNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GoogleMapsNodeAttributes">

    <xs:attributeGroup ref="InfiViewNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GoogleMapsNodeRepAdapter">
    <xs:annotation>
      <xs:documentation>
        The holds the representation of a node residing inside a google maps based graph.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GoogleMapsNodeRepAdapterAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GoogleMapsNodeRepAdapterAttributes">

    <xs:attributeGroup ref="InfiViewNodeRepAdapterAttributes"/>

    <xs:attribute name="left"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="top"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="GoogleMapsNodeType">
    <xs:annotation>
      <xs:documentation>
        infiview.GoogleMapsNodeType acts as a template for nodes that are used together with the GoogleMapsViewport
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GoogleMapsNodeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GoogleMapsNodeTypeAttributes">

    <xs:attributeGroup ref="NodeTypeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GoogleMapsViewport">
    <xs:annotation>
      <xs:documentation>
        This viewport is specilized for InfiView application that uses google maps.
        The method is used setUpGoogleMaps for setting up the Google Maps API together with this viewport.
        The GMap2 class is used internally.
        To make sure that the viewport works correctly a "glass pane" must be placed in front of the container component.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GoogleMapsViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GoogleMapsViewportAttributes">

    <xs:attributeGroup ref="InfiViewViewportAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GradientEdgeType">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GradientEdgeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GradientEdgeTypeAttributes">

    <xs:attributeGroup ref="EdgeTypeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GraphDataContainer">
    <xs:annotation>
      <xs:documentation>
        Wrapper class for objects inserted into a infiview.GraphViewportDatamodel
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GraphDataContainerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GraphDataContainerAttributes">

    <xs:attributeGroup ref="ComponentDataContainerAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GraphNode">
    <xs:annotation>
      <xs:documentation>
        Wrapper class for objects inserted into a infiview.GraphViewportDatamodel
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GraphNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GraphNodeAttributes">

    <xs:attributeGroup ref="ComponentNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GraphViewport">
    <xs:annotation>
      <xs:documentation>
        Viewport specialized for containing a edge manager to handle very
        large graphs.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GraphViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GraphViewportAttributes">

    <xs:attributeGroup ref="ComponentViewportAttributes"/>

    <xs:attribute name="grid"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.VGGrid
          -
          The grid object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="GraphViewportModel">
    <xs:annotation>
      <xs:documentation>
        Specialized model for the infiview.GraphViewport which handles very
        large graphs.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GraphViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GraphViewportModelAttributes">

    <xs:attributeGroup ref="ComponentViewportModelAttributes"/>


  </xs:attributeGroup>

  <xs:element name="Grid">
    <xs:annotation>
      <xs:documentation>
        Basic grid class, contains logic and grid related properties.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GridAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GridAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>

    <xs:attribute name="color"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="xStep"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="yStep"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="startX"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="startY"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="visible"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          boolean
          -
          The component
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="GroupNode">
    <xs:annotation>
      <xs:documentation>
        This class represent a special grouping node.
        The member area of the group is the area where members are placed.
        Use the addMember method for adding nodes to a group.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GroupNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GroupNodeAttributes">

    <xs:attributeGroup ref="AbstractGroupNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="GroupNodeType">
    <xs:annotation>
      <xs:documentation>
        infiview.GroupNodeType acts as a template for nodes that have grouping features.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="GroupNodeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="GroupNodeTypeAttributes">

    <xs:attributeGroup ref="AbstractGroupNodeTypeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ImageBasedNode">
    <xs:annotation>
      <xs:documentation>
        Class for showing nodes composed by an images in an infiview viewport.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ImageBasedNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ImageBasedNodeAttributes">

    <xs:attributeGroup ref="VGSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ImageBasedNodeImage">
    <xs:annotation>
      <xs:documentation>
        This class contains one zoomfactor specific image.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ImageBasedNodeImageAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ImageBasedNodeImageAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>

    <xs:attribute name="uri"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          BiUri
          -
          The location of the image file. If this is set to a string a
          new URI is created from that string relative to the
          ADF path.
          @Returns void
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InfiView">
    <xs:annotation>
      <xs:documentation>
        The InfiView class extends the standard Bindows BiComponent wich means that it can be used in any Bindows ADF
        and acts as a facade towards the inner InfiView object model, gathering events in form av actions and offering a set of
        convenient operations for the InfiView programmer.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>

    <xs:attribute name="undoBufferSize"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Number
          -
          Size of the undo/redo buffer. Default is 0 which is the same as turned off.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="activePerspective"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.Perspective
          -
          The resources of this InfiView object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="activeViewport"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.InfiViewViewport
          -
          An instance of an additional class that will be accessible in every action.
          Typically the main application object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="blockedActions"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Object
          -
          Returns blocked actions as a hash (object) with
          the keys being the name of the blocked actios.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onnewnode"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when the node representation is created for the first time.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onconnection"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a connection between nodes is issued by the user by carrying out a drag drop operation.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onviewportmarqueeselection"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a selection is issued by user by enclosing a set of node using marquee selector.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onnodemove"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a node is moved.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onnoderesize"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a node is resized.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onnodeclick"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a node is clicked.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onnodedoubleclick"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a node double clicked.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onedgeclick"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a edge is clicked</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onedgedoubleclick"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a edge is double clicked.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="ontoolaction"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a tool button is clicked.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onpropertyformlistener"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired when a event listener of a property form is dispatched.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onstart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This event is fired after the entire InfiView object is loaded.</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InfiViewBackEndViewport">
    <xs:annotation>
      <xs:documentation>
        Viewport specialized for InfiView backend applications
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewBackEndViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewBackEndViewportAttributes">

    <xs:attributeGroup ref="InfiViewViewportAttributes"/>

    <xs:attribute name="requestHandler"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.AbstractViewport
          -
          The request handler to use for retrieving nodes from back end.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InfiViewBackEndViewportModel">
    <xs:annotation>
      <xs:documentation>
        General back end model using the InfiViewGraph xml format for loading nodes
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewBackEndViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewBackEndViewportModelAttributes">

    <xs:attributeGroup ref="InfiViewViewportModelAttributes"/>

    <xs:attribute name="requestHandler"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.AbstractRequestHandler
          -
          The request handler this model is using for retreiving back end data.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="taskInterval"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          number
          -
          The interval the task timer should work. The task timer is responssible for adding and deleting nodes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InfiViewComponentDataContainer">
    <xs:annotation>
      <xs:documentation>
        infiview.InfiViewComponentDataContainer is the light weight representation of an node residing
        in a InfiView.
        This class can be inherit for adding och changing features of adding and dipsosing visual nodes in a InfiView.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewComponentDataContainerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewComponentDataContainerAttributes">

    <xs:attributeGroup ref="InteractiveGraphDataContainerAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InfiViewNode">
    <xs:annotation>
      <xs:documentation>
        infiview.InfiViewNode is the light weight representation of an node residing
        in a InfiView.
        This class can be inherit for adding och changing features of adding and dipsosing visual nodes in a InfiView.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewNodeAttributes">

    <xs:attributeGroup ref="InteractiveGraphNodeAttributes"/>

    <xs:attribute name="decorator"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          The node type of this data node.
          @Type infiview.NodeType


          The node id of this data node.
          @Type infiview.NodeType


          If this node is a member of a group this is the group.
          @Type infiview.AbstractGroupNode


          The decorator of this object (see decorator pattern)
          @Type infiview.InfiViewNode
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InfiViewNodeRepAdapter">
    <xs:annotation>
      <xs:documentation>
        The InteractiveGraphNodeRepAdapter holds the rpresentation logic of a node residing inside a interactive graph.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewNodeRepAdapterAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewNodeRepAdapterAttributes">

    <xs:attributeGroup ref="InteractiveGraphNodeRepAdapterAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InfiViewType">
    <xs:annotation>
      <xs:documentation>
        Basic class for element and edge type classes.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewTypeAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InfiViewViewport">
    <xs:annotation>
      <xs:documentation>
        Viewport specialized for the InfiView facade.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewViewportAttributes">

    <xs:attributeGroup ref="InteractiveGraphViewportAttributes"/>

    <xs:attribute name="infiView"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InfiViewViewportModel">
    <xs:annotation>
      <xs:documentation>
        Specialized model for the infiview.GraphViewport which handles very
        large graphs.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InfiViewViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InfiViewViewportModelAttributes">

    <xs:attributeGroup ref="InteractiveGraphViewportModelAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InteractiveGraphDataContainer">
    <xs:annotation>
      <xs:documentation>
        Wrapper class for objects inserted into a infiview.GraphViewportDatamodel
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InteractiveGraphDataContainerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InteractiveGraphDataContainerAttributes">

    <xs:attributeGroup ref="GraphDataContainerAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InteractiveGraphNode">
    <xs:annotation>
      <xs:documentation>
        Wrapper class for objects inserted into a infiview.GraphViewportDatamodel
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InteractiveGraphNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InteractiveGraphNodeAttributes">

    <xs:attributeGroup ref="GraphNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InteractiveGraphNodeRepAdapter">
    <xs:annotation>
      <xs:documentation>
        The InteractiveGraphNodeRepAdapter holds the representation logic of a node residing inside a interactive graph.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InteractiveGraphNodeRepAdapterAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InteractiveGraphNodeRepAdapterAttributes">

    <xs:attributeGroup ref="ComponentNodeRepAdapterAttributes"/>


  </xs:attributeGroup>

  <xs:element name="InteractiveGraphViewport">
    <xs:annotation>
      <xs:documentation>
        Viewport specialized for representing different interactive charts.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InteractiveGraphViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InteractiveGraphViewportAttributes">

    <xs:attributeGroup ref="GraphViewportAttributes"/>

    <xs:attribute name="edgeMode"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          boolean
          -
          Edge mode enabled / disabled
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="multiSelection"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Boolean


          Turn of or on nultiple selection
          -
          If this value is set to true it enables multipe selection of elements
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="selection"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="InteractiveGraphViewportModel">
    <xs:annotation>
      <xs:documentation>
        Specialized model of the infiview.GraphViewport which adds additional features for interactivity.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="InteractiveGraphViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="InteractiveGraphViewportModelAttributes">

    <xs:attributeGroup ref="GraphViewportModelAttributes"/>


  </xs:attributeGroup>

  <xs:element name="LayerPane">
    <xs:annotation>
      <xs:documentation>
        A pane with layers of viewports enabling the user to select or move a component on any layer.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="LayerPaneAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="LayerPaneAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>


  </xs:attributeGroup>

  <xs:element name="LineRouterManager">
    <xs:annotation>
      <xs:documentation>
        TODO: Document class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="LineRouterManagerAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="LineRouterManagerAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ListZoomFactorModel">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ListZoomFactorModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ListZoomFactorModelAttributes">

    <xs:attributeGroup ref="ZoomFactorModelAttributes"/>

    <xs:attribute name="factorList"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="currentFactor"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="MapViewport">
    <xs:annotation>
      <xs:documentation>
        Viewport specialized for containing images in thr form of tiles.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="MapViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="MapViewportAttributes">

    <xs:attributeGroup ref="ZoomableViewportAttributes"/>


  </xs:attributeGroup>

  <xs:element name="MapViewportModel">
    <xs:annotation>
      <xs:documentation>
        This class is a specialized model for tile based map applications.
        It's a low level implemntation using ComponentNode for representation BUT it doesn't use a RTree therefore
        the tiles must be in same size for each zoom level.
        infiview.MapZoomLevelDefinition is used for setting up zoom level logic.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="MapViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="MapViewportModelAttributes">

    <xs:attributeGroup ref="ZoomableViewportModelAttributes"/>


  </xs:attributeGroup>

  <xs:element name="MapZoomLevelDefinition">
    <xs:annotation>
      <xs:documentation>
        An instance of this class keeps track of a certain zoom level in a InfiView map application.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="MapZoomLevelDefinitionAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="MapZoomLevelDefinitionAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="MarqueeSelector">
    <xs:annotation>
      <xs:documentation>
        This component can be used as a wireframe for selecting components on a drawing area. Add this to the same area and
        on the mousedown event call startSelection(e) passing the BiMouseEvent object from the mousedown event handler as
        the parameter e.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="MarqueeSelectorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="MarqueeSelectorAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>

    <xs:attribute name="onselectionprogress"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.SelectionEvent Fires continually during the resizing of the wireframe</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onselectionend"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.SelectionEvent This is fired when the user releases the mouse button to signal
          that the selection is complete.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onselectionstart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>This is fired before the selection is starts. To prevent the wireframe
          from being displayed call
          preventDefault
          on the event object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="MinPriorityQueue">
    <xs:annotation>
      <xs:documentation>
        TODO: Document class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="MinPriorityQueueAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="MinPriorityQueueAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="MoveEvent">
    <xs:annotation>
      <xs:documentation>
        This event class is used in the infiview package for handling move events.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="MoveEventAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="MoveEventAttributes">

    <xs:attributeGroup ref="bi:MoveEventAttributes"/>


  </xs:attributeGroup>

  <xs:element name="NodeAnimation">
    <xs:annotation>
      <xs:documentation>
        This class implements a general node item animation algorithm.
        This class assumes that the node items are infiview nodes.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="NodeAnimationAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="NodeAnimationAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="NodeType">
    <xs:annotation>
      <xs:documentation>
        infiview.NodeType acts as a template for nodes.
        A infiview.NodeType instance supplies three different parts used for creating and represent a node of this node type - "symbol",
        "viewport" and "node".
        The "symbol" describes how this node type is suposed to be represented i.e. a panel.
        The "viewport" describes how this node type should be represented in a viewport.
        The "node" describes how a node of this node type should be created.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="NodeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="NodeTypeAttributes">

    <xs:attributeGroup ref="InfiViewTypeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="NodeTypes">
    <xs:annotation>
      <xs:documentation>
        Container for node types.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="NodeTypesAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="NodeTypesAttributes">

    <xs:attributeGroup ref="TypeTableAttributes"/>


  </xs:attributeGroup>

  <xs:element name="NodeTypeViewport">
    <xs:annotation>
      <xs:documentation>
        This class holds logic how to create the viewport representation of the a node type.
        A node type can contain 1-* instances of this class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="NodeTypeViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="NodeTypeViewportAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="Perspective">
    <xs:annotation>
      <xs:documentation>
        The class infiview.Perspective is used by infiview.InfiView.
        This class represents a Perspective.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PerspectiveAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PerspectiveAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="Perspectives">
    <xs:annotation>
      <xs:documentation>
        The class infiview.Perspectives is used by infiview.InfiView.
        Container of perspectives.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PerspectivesAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PerspectivesAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="PerspectiveTitle">
    <xs:annotation>
      <xs:documentation>
        Label holding the perspective title
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PerspectiveTitleAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PerspectiveTitleAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>

    <xs:attribute name="text"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          String
          -
          Sets the perspective title
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="PreviewImage">
    <xs:annotation>
      <xs:documentation>
        This class is used for showing images.
        Supported image types are GIF, JPEG and PNG (including support for 32-bit RGBA).
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PreviewImageAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PreviewImageAttributes">

    <xs:attributeGroup ref="bi:ImageAttributes"/>

    <xs:attribute name="onload"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Fires when the image loads. Note that the image file may be
          loaded before the constructor finishes and you should not only
          rely on this event but also use loaded property.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onerror"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Fires when the image failed to load.</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="PriorityQueue">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PriorityQueueAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PriorityQueueAttributes">


  </xs:attributeGroup>

  <xs:element name="PriorityQueueNode">
    <xs:annotation>
      <xs:documentation>
        TODO: Document class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PriorityQueueNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PriorityQueueNodeAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="PropertyForm">
    <xs:annotation>
      <xs:documentation>
        The class infiview.PropertyForm is used by infiview.InfiView.
        This class holds information for creating a property form
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PropertyFormAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PropertyFormAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="PropertyForms">
    <xs:annotation>
      <xs:documentation>
        The class infiview.PropertyForms is used by infiview.InfiView.
        This class is a container holding PropertyForm objects.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="PropertyFormsAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="PropertyFormsAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="RectSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="RectSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="RectSymbolAttributes">

    <xs:attributeGroup ref="DefaultSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ResizeEvent">
    <xs:annotation>
      <xs:documentation>
        This event class is used in the infiview package for handling resize events.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ResizeEventAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ResizeEventAttributes">

    <xs:attributeGroup ref="bi:ResizeEventAttributes"/>


  </xs:attributeGroup>

  <xs:element name="Resources">
    <xs:annotation>
      <xs:documentation>
        The class infiview.Resources acts as a manager for the resources used by infiview.InfiView
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ResourcesAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ResourcesAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="RoundRectImageSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="RoundRectImageSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="RoundRectImageSymbolAttributes">

    <xs:attributeGroup ref="VGSymbolAttributes"/>

    <xs:attribute name="href"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="RoundrectSymbol">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="RoundrectSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="RoundrectSymbolAttributes">

    <xs:attributeGroup ref="DefaultSymbolAttributes"/>


  </xs:attributeGroup>

  <xs:element name="RTree">
    <xs:annotation>
      <xs:documentation>
        R-Tree implementation. The R-tree is a tree designed to make fast
        searches of rectangular areas.

        Code is based on Guttman, A. "R-Trees: A Dynamic Index Structure for
        Spatial Searching", ACM 1984.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="RTreeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="RTreeAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="Selection">
    <xs:annotation>
      <xs:documentation>
        Adds a selection wireframe around multiple nodes that can then be dragged with the mouse.
        Nodes can be added to and removed from the selection as needed.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="SelectionAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="SelectionAttributes">

    <xs:attributeGroup ref="AbstractSelectionAttributes"/>

    <xs:attribute name="border"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          BiBorder
          -
          Sets the default appearance of the wireframe
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onchange"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when nodes are added to and removed from the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmovestart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when user starts dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmoveend"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when user has finished dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="Selection2">
    <xs:annotation>
      <xs:documentation>
        Adds a selection wireframe around multiple nodes that can then be dragged with the mouse.
        Nodes can be added to and removed from the selection as needed. This selection is created using
        4 border components so the internal components can still be clicked.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="Selection2Attributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="Selection2Attributes">

    <xs:attributeGroup ref="SelectionAttributes"/>

    <xs:attribute name="onchange"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when nodes are added to and removed from the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmovestart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when user starts dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmoveend"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event Fired when user has finished dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="SelectionEvent">
    <xs:annotation>
      <xs:documentation>
        The event dispatched by infiview.MarqueeSelector.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="SelectionEventAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="SelectionEventAttributes">

    <xs:attributeGroup ref="bi:EventAttributes"/>


  </xs:attributeGroup>

  <xs:element name="State">
    <xs:annotation>
      <xs:documentation>
        The class infiview.State is used by infiview.InfiView.
        This class represents a state.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="StateAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="StateAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="States">
    <xs:annotation>
      <xs:documentation>
        The class infiview.States is used by infiview.InfiView.
        Container of states.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="StatesAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="StatesAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ToolGroup">
    <xs:annotation>
      <xs:documentation>
        The class infiview.ToolGroup is used by infiview.InfiView.
        Container for tools, when tools are layout every group will separated.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ToolGroupAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ToolGroupAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>

    <xs:attribute name="upActions"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.InfiView
          -
          This method binds certains tool components events to infiview actions.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="Tools">
    <xs:annotation>
      <xs:documentation>
        This class is managing the tool groups.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ToolsAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ToolsAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="TreeLayout">
    <xs:annotation>
      <xs:documentation>
        Walker's layout algorithm for rooted trees, improved version with
        linear run-time [1], [2]. The tree is drawn in a top-down,
        hierarchical manner. The levels are placed on parallel lines with
        the root at the highest level. Each vertex is positioned above the
        midpoint of its children, and the children are placed in the
        order specified in the input and separated by at least a specified
        minimum distance. The algorithm minimizes the width of the drawing
        (under the relevant constraints).

        [1] Christoph Buchheim, Michael J├Г┬╝nger and Sebastian Leipert,
        "Improving Walker's Algorithm to Run in Linear Time". Graph
        Drawing: 10th International Symposium, Lecture Notes in Computer
        Science 2528 (2002), pp. 347-364, Springer.

        [2] Christoph Buchheim, Michael J├Г┬╝nger and Sebastian Leipert,
        "Improving Walker's Algorithm to Run in Linear Time". Technical
        Report zaik2002-431 (2002), ZAIK, Universit├Г┬дt zu K├Г┬╢ln.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="TreeLayoutAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="TreeLayoutAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="TypeTable">
    <xs:annotation>
      <xs:documentation>
        The class infiview.TypeTable is used by infiview.InfiView.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="TypeTableAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="TypeTableAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="UndoRedo">
    <xs:annotation>
      <xs:documentation>
        This class is a help class for implementing undo redo mechanisms in an InfiView application.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="UndoRedoAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="UndoRedoAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="UndoRedoAddOrRemoveEdgeCommand">
    <xs:annotation>
      <xs:documentation>
        This class implements undo redo mechanisms for edge adding and removing.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="UndoRedoAddOrRemoveEdgeCommandAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="UndoRedoAddOrRemoveEdgeCommandAttributes">

    <xs:attributeGroup ref="AbstractUndoRedoCommandAttributes"/>


  </xs:attributeGroup>

  <xs:element name="UndoRedoAddOrRemoveNodeCommand">
    <xs:annotation>
      <xs:documentation>
        This class implements undo redo mechanisms for node adding and removing.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="UndoRedoAddOrRemoveNodeCommandAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="UndoRedoAddOrRemoveNodeCommandAttributes">

    <xs:attributeGroup ref="UndoRedoNodeCommandAttributes"/>


  </xs:attributeGroup>

  <xs:element name="UndoRedoChangeBoundsCommand">
    <xs:annotation>
      <xs:documentation>
        The node id of the node related to the command.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="UndoRedoChangeBoundsCommandAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="UndoRedoChangeBoundsCommandAttributes">

    <xs:attributeGroup ref="UndoRedoNodeCommandAttributes"/>


  </xs:attributeGroup>

  <xs:element name="UndoRedoNodeCommand">
    <xs:annotation>
      <xs:documentation>
        This class is the base class for all node undo redo commands.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="UndoRedoNodeCommandAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="UndoRedoNodeCommandAttributes">

    <xs:attributeGroup ref="AbstractUndoRedoCommandAttributes"/>


  </xs:attributeGroup>

  <xs:element name="WedgeTreeLayout">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="WedgeTreeLayoutAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="WedgeTreeLayoutAttributes">


  </xs:attributeGroup>

  <xs:element name="VGGrid">
    <xs:annotation>
      <xs:documentation>
        Vector Grafik based grid
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="VGGridAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="VGGridAttributes">

    <xs:attributeGroup ref="VGComponentAttributes"/>

    <xs:attribute name="color"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="VGGroup">
    <xs:annotation>
      <xs:documentation>
        Vector grafic group object. Use this for composite symbols.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="VGGroupAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="VGGroupAttributes">

    <xs:attributeGroup ref="VGComponentAttributes"/>


  </xs:attributeGroup>

  <xs:element name="VGImage">
    <xs:annotation>
      <xs:documentation>
        This class represents an Vector Graphic image.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="VGImageAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="VGImageAttributes">

    <xs:attributeGroup ref="VGComponentAttributes"/>

    <xs:attribute name="uri"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          String
          -
          Convienience method to set the image uri of this VGImage.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="VGSelection">
    <xs:annotation>
      <xs:documentation>
        Adds a selection wireframe around multiple nodes that can then be dragged with the mouse.
        Nodes can be added to and removed from the selection as needed.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="VGSelectionAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="VGSelectionAttributes">

    <xs:attributeGroup ref="AbstractSelectionAttributes"/>

    <xs:attribute name="onchange"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Fired when nodes are added to and removed from the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmovestart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Fired when user starts dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onmoveend"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Fired when user has finished dragging the selection</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="VGSymbol">
    <xs:annotation>
      <xs:documentation>
        General base class for vector graphic symbols.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="VGSymbolAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="VGSymbolAttributes">

    <xs:attributeGroup ref="VGComponentAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ViewportComponentConstructor">
    <xs:annotation>
      <xs:documentation>
        Node constructor holder for InfiViewNode.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ViewportComponentConstructorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ViewportComponentConstructorAttributes">

    <xs:attributeGroup ref="ComponentConstructorAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ViewportMarqueeSelector">
    <xs:annotation>
      <xs:documentation>
        This component can be used as a wireframe for selecting components
        from a ViewportModel. Add this to the Viewport and on the mousedown
        event call startSelection(e) passing the infiview.MouseEvent object
        from the mousedown event handler as the parameter e.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ViewportMarqueeSelectorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ViewportMarqueeSelectorAttributes">

    <xs:attributeGroup ref="MarqueeSelectorAttributes"/>

    <xs:attribute name="onselectionprogress"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.SelectionEvent Fires continually during the resizing of the wireframe</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onselectionend"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.SelectionEvent This is fired when the user releases the mouse button to signal
          that the selection is complete.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onselectionstart"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>.Event This is fired before the selection is starts. To prevent the
          wireframe from being displayed call
          preventDefault
          on the event object.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ViewportNavigator">
    <xs:annotation>
      <xs:documentation>
        This class implements the basic viewport navigator.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ViewportNavigatorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ViewportNavigatorAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>

    <xs:attribute name="cursorColor"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          String
          -
          Sets the color of the cursor.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ViewportNavigatorCursor">
    <xs:annotation>
      <xs:documentation>
        TODO: Document class.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ViewportNavigatorCursorAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ViewportNavigatorCursorAttributes">

    <xs:attributeGroup ref="bi:ComponentAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ViewportRectangle">
    <xs:annotation>
      <xs:documentation>
        Helping class for describing a bounding rectangle in viewports.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ViewportRectangleAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ViewportRectangleAttributes">

    <xs:attributeGroup ref="bi:EventTargetAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomableButton">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomableButtonAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomableButtonAttributes">

    <xs:attributeGroup ref="bi:ButtonAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomableImage">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomableImageAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomableImageAttributes">

    <xs:attributeGroup ref="bi:ImageAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomableLabel">
    <xs:annotation>
      <xs:documentation>
        This class is a zoomable version of a BiLabel.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomableLabelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomableLabelAttributes">

    <xs:attributeGroup ref="bi:LabelAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomableViewport">
    <xs:annotation>
      <xs:documentation>
        Implemented viewport for handling zoomable components.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomableViewportAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomableViewportAttributes">

    <xs:attributeGroup ref="AbstractViewportAttributes"/>

    <xs:attribute name="zoomFactorDependantNodeRep"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          EDIT_THIS
          -
          EDIT_THIS
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ZoomableViewportModel">
    <xs:annotation>
      <xs:documentation>
        infiview.ZoomableViewport is an abstract class representing a model containing zoomable objects.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomableViewportModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomableViewportModelAttributes">

    <xs:attributeGroup ref="AbstractViewportModelAttributes"/>

    <xs:attribute name="nearestZoomFactor"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Number
          -
          Set nearest available zoom factor
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="nearestLowerZoomFactor"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          Number
          -
          Set nearest lower available zoom factor
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="zoomFactorModel"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Type:
          infiview.ZoomFactorModel
          -
          Set the zoom factor model.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onresetzoom"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Dispatched when zoom factor is set to 1.</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="onzoomfactorchange"
                  type="xs:string">
      <xs:annotation>
        <xs:documentation>Dispatched when the zoom level changes.</xs:documentation>
      </xs:annotation>
    </xs:attribute>


  </xs:attributeGroup>

  <xs:element name="ZoomDependentGroupNode">
    <xs:annotation>
      <xs:documentation>
        infiview.InfiViewNode is the light weight representation of an node residing
        in a InfiView using infiview.InfiViewViewport.

        This class can be inherit for adding och changing features of adding and dipsosing visual nodes in a InfiView.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomDependentGroupNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomDependentGroupNodeAttributes">

    <xs:attributeGroup ref="InfiViewNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomFactorModel">
    <xs:annotation>
      <xs:documentation>
        EDIT_THIS
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomFactorModelAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomFactorModelAttributes">

    <xs:attributeGroup ref="bi:ObjectAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomGroupNode">
    <xs:annotation>
      <xs:documentation>
        infiview.InfiViewNode is the light weight representation of an node residing
        in a InfiView using infiview.InfiViewViewport.

        This class can be inherit for adding och changing features of adding and dipsosing visual nodes in a InfiView.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomGroupNodeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomGroupNodeAttributes">

    <xs:attributeGroup ref="AbstractGroupNodeAttributes"/>


  </xs:attributeGroup>

  <xs:element name="ZoomGroupNodeType">
    <xs:annotation>
      <xs:documentation>
        infiview.ZoomGroupNodeType acts as a template for nodes that are zoom factor dependant groups.
      </xs:documentation>
    </xs:annotation>

    <xs:complexType>
      <xs:choice>
        <xs:group ref="InfiViewComponentsGroup" minOccurs="0" maxOccurs="unbounded"/>
      </xs:choice>
      <xs:attributeGroup ref="ZoomGroupNodeTypeAttributes"/>
    </xs:complexType>
  </xs:element>

  <xs:attributeGroup name="ZoomGroupNodeTypeAttributes">

    <xs:attributeGroup ref="AbstractGroupNodeTypeAttributes"/>


  </xs:attributeGroup>

  <xs:group name="InfiViewComponentsGroup">
    <xs:choice>
      <xs:group ref="bi:BindowsComponentsGroup"/>

      <xs:element ref="AbstractNodeRepAdapter" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ComponentNodeRepAdapter" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InteractiveGraphNodeRepAdapter" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewNodeRepAdapter" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GoogleMapsNodeRepAdapter" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractSelection" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Selection" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Selection2" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="VGSelection" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractUndoRedoCommand" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="UndoRedoAddOrRemoveEdgeCommand" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="UndoRedoNodeCommand" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="UndoRedoAddOrRemoveNodeCommand" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="UndoRedoChangeBoundsCommand" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomableViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ComponentViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GraphViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InteractiveGraphViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GoogleMapsViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewBackEndViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="MapViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomableViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ComponentViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GraphViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InteractiveGraphViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewBackEndViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="MapViewportModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Actions" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AnchorPoints" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="BalloonTreeLayout" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="BiconnectedComponentLayout.BiconnectedComponent" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="BiconnectedComponentLayout.BlockCutpointVertex" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="BiconnectedComponentLayout.Cutpoint" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="BiconnectedComponentLayout" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ComponentConstructor" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ViewportComponentConstructor" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ContextMenu" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ContextMenus" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="CornerStitchArea" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DrawAnchor" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Edge" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EdgeContainer" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EdgeManager" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EventListener" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EventListeners" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Grid" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ImageBasedNodeImage" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EdgeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GradientEdgeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="NodeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractGroupNodeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GroupNodeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomGroupNodeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GoogleMapsNodeType" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="LayerPane" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="LineRouterManager" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="MapZoomLevelDefinition" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="MarqueeSelector" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ViewportMarqueeSelector" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="MinPriorityQueue" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="MoveEvent" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="NodeAnimation" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="NodeTypeViewport" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Perspective" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Perspectives" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="PerspectiveTitle" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="PreviewImage" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="PriorityQueue" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="PriorityQueueNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="PropertyForm" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="PropertyForms" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ResizeEvent" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Resources" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="RTree" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="SelectionEvent" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="State" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="States" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ToolGroup" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="Tools" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="TreeLayout" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="TypeTable" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EdgeTypes" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="NodeTypes" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="UndoRedo" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="VGGrid" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="VGGroup" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="VGImage" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ExpandCollapseImage" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="VGSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DefaultSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DiamondSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DocSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="EllipseSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="RectSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="RoundrectSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ImageBasedNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="RoundRectImageSymbol" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ViewportNavigator" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DynamicPreviewViewportNavigator" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DynamicViewportNavigator" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ViewportNavigatorCursor" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ViewportRectangle" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractDataContainer" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ComponentDataContainer" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GraphDataContainer" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InteractiveGraphDataContainer" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewComponentDataContainer" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ComponentNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GraphNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InteractiveGraphNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="InfiViewNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="AbstractGroupNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GroupNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomGroupNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="GoogleMapsNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomDependentGroupNode" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="WedgeTreeLayout" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomableButton" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomableImage" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomableLabel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ZoomFactorModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DoubleZoomFactorModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="ListZoomFactorModel" minOccurs="0"
                  maxOccurs="unbounded"/>

      <xs:element ref="DefaultSelectionDefinition" minOccurs="0" maxOccurs="unbounded"/>

      <xs:element ref="Layout" minOccurs="0" maxOccurs="unbounded"/>

    </xs:choice>
  </xs:group>

</xs:schema>


