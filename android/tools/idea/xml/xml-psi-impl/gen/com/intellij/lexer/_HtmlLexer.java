/* The following code was generated by JFlex 1.4.3 on 4/26/14 5:25 PM */

/* It's an automatically generated code. Do not modify it. */
package com.intellij.lexer;

import com.intellij.psi.tree.IElementType;
import com.intellij.psi.*;
import com.intellij.psi.xml.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 4/26/14 5:25 PM from the specification file
 * <tt>/Users/ignatov/src/ultimate/tools/lexer/../../community/xml/xml-psi-impl/src/com/intellij/lexer/_HtmlLexer.flex</tt>
 */
public class _HtmlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROCESSING_INSTRUCTION = 18;
  public static final int C_COMMENT_END = 28;
  public static final int END_TAG_NAME = 8;
  public static final int START_TAG_NAME = 6;
  public static final int ATTRIBUTE_VALUE_SQ = 16;
  public static final int DOC_TYPE = 2;
  public static final int ATTRIBUTE_VALUE_DQ = 14;
  public static final int YYINITIAL = 0;
  public static final int TAG_CHARACTERS = 24;
  public static final int START_TAG_NAME2 = 20;
  public static final int TAG_ATTRIBUTES = 10;
  public static final int COMMENT = 4;
  public static final int ATTRIBUTE_VALUE_START = 12;
  public static final int C_COMMENT_START = 26;
  public static final int END_TAG_NAME2 = 22;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\2\3\1\0\2\3\22\0\1\3\1\14\1\11\1\7\1\41"+
    "\1\0\1\44\1\12\1\43\1\43\3\0\1\6\1\5\1\46\12\2"+
    "\1\4\1\52\1\13\1\10\1\42\1\45\1\0\1\61\1\36\1\20"+
    "\1\15\1\26\1\61\1\1\1\27\1\40\2\1\1\32\1\30\1\1"+
    "\1\16\1\24\3\1\1\21\1\34\3\1\1\23\1\1\1\47\1\51"+
    "\1\50\1\0\1\4\1\0\1\54\1\37\1\20\1\15\1\26\1\61"+
    "\1\53\1\27\1\40\2\1\1\33\1\31\1\57\1\17\1\25\1\56"+
    "\1\1\1\55\1\22\1\35\2\1\1\60\1\23\1\1\1\0\1\43"+
    "\1\0\54\0\1\1\12\0\1\1\4\0\1\1\5\0\27\1\1\0"+
    "\37\1\1\0\u013f\1\31\0\162\1\4\0\14\1\16\0\5\1\11\0"+
    "\1\1\213\0\1\1\13\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\24\1\1\0\54\1\1\0\46\1\1\0\5\1\4\0\202\1\10\0"+
    "\105\1\1\0\46\1\2\0\2\1\6\0\20\1\41\0\46\1\2\0"+
    "\1\1\7\0\47\1\110\0\33\1\5\0\3\1\56\0\32\1\5\0"+
    "\13\1\43\0\2\1\1\0\143\1\1\0\1\1\17\0\2\1\7\0"+
    "\2\1\12\0\3\1\2\0\1\1\20\0\1\1\1\0\36\1\35\0"+
    "\3\1\60\0\46\1\13\0\1\1\u0152\0\66\1\3\0\1\1\22\0"+
    "\1\1\7\0\12\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\1\1\3\0\4\1\3\0\1\1\36\0\2\1\1\0"+
    "\3\1\16\0\2\1\23\0\6\1\4\0\2\1\2\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\2\1\1\0\2\1\37\0\4\1\1\0"+
    "\1\1\23\0\3\1\20\0\11\1\1\0\3\1\1\0\26\1\1\0"+
    "\7\1\1\0\2\1\1\0\5\1\3\0\1\1\22\0\1\1\17\0"+
    "\2\1\43\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\3\0\1\1\36\0\2\1\1\0\3\1\17\0"+
    "\1\1\21\0\1\1\1\0\6\1\3\0\3\1\1\0\4\1\3\0"+
    "\2\1\1\0\1\1\1\0\2\1\3\0\2\1\3\0\3\1\3\0"+
    "\10\1\1\0\3\1\113\0\10\1\1\0\3\1\1\0\27\1\1\0"+
    "\12\1\1\0\5\1\46\0\2\1\43\0\10\1\1\0\3\1\1\0"+
    "\27\1\1\0\12\1\1\0\5\1\3\0\1\1\40\0\1\1\1\0"+
    "\2\1\43\0\10\1\1\0\3\1\1\0\27\1\1\0\20\1\46\0"+
    "\2\1\43\0\22\1\3\0\30\1\1\0\11\1\1\0\1\1\2\0"+
    "\7\1\72\0\60\1\1\0\2\1\14\0\7\1\72\0\2\1\1\0"+
    "\1\1\2\0\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0"+
    "\7\1\1\0\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0"+
    "\4\1\1\0\2\1\11\0\1\1\2\0\5\1\1\0\1\1\25\0"+
    "\2\1\42\0\1\1\77\0\10\1\1\0\42\1\35\0\4\1\164\0"+
    "\42\1\1\0\5\1\1\0\2\1\45\0\6\1\112\0\46\1\12\0"+
    "\51\1\7\0\132\1\5\0\104\1\5\0\122\1\6\0\7\1\1\0"+
    "\77\1\1\0\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0"+
    "\4\1\2\0\47\1\1\0\1\1\1\0\4\1\2\0\37\1\1\0"+
    "\1\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1\2\0"+
    "\7\1\1\0\7\1\1\0\27\1\1\0\37\1\1\0\1\1\1\0"+
    "\4\1\2\0\7\1\1\0\47\1\1\0\23\1\105\0\125\1\14\0"+
    "\u026c\1\2\0\10\1\12\0\32\1\5\0\113\1\25\0\15\1\1\0"+
    "\4\1\16\0\22\1\16\0\22\1\16\0\15\1\1\0\3\1\17\0"+
    "\64\1\43\0\1\1\4\0\1\1\103\0\130\1\10\0\51\1\127\0"+
    "\35\1\63\0\36\1\2\0\5\1\u038b\0\154\1\224\0\234\1\4\0"+
    "\132\1\6\0\26\1\2\0\6\1\2\0\46\1\2\0\6\1\2\0"+
    "\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1\2\0"+
    "\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1\3\0"+
    "\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1\164\0"+
    "\1\1\15\0\1\1\202\0\1\1\4\0\1\1\2\0\12\1\1\0"+
    "\1\1\3\0\5\1\6\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\4\1\1\0\3\1\1\0\7\1\3\0\3\1\5\0\5\1\u0ebb\0"+
    "\2\1\52\0\5\1\5\0\2\1\4\0\126\1\6\0\3\1\1\0"+
    "\132\1\1\0\4\1\5\0\50\1\4\0\136\1\21\0\30\1\70\0"+
    "\20\1\u0200\0\u19b6\1\112\0\u51a6\1\132\0\u048d\1\u0773\0\u2ba4\1\u215c\0"+
    "\u012e\1\2\0\73\1\225\0\7\1\14\0\5\1\5\0\1\1\1\0"+
    "\12\1\1\0\15\1\1\0\5\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1\2\0\66\1\50\0"+
    "\14\1\164\0\5\1\1\0\207\1\44\0\32\1\6\0\32\1\13\0"+
    "\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0\3\1\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\10\0\1\2\5\0\1\1\1\3\4\1\1\4"+
    "\1\5\4\4\1\6\1\4\3\7\1\10\1\7\1\11"+
    "\1\12\1\13\1\14\2\12\1\15\1\16\1\17\1\12"+
    "\1\20\1\21\1\22\1\20\1\23\1\24\2\23\1\2"+
    "\1\25\1\4\1\26\1\15\3\27\1\30\1\7\3\30"+
    "\1\31\1\32\1\33\1\0\1\34\1\35\14\0\1\35"+
    "\1\36\1\20\1\0\1\37\2\0\1\40\1\41\1\42"+
    "\11\0\1\43\1\44\1\45\1\0\1\46\3\0\1\15"+
    "\3\0\1\47\2\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u0352\0\u041a\0\u044c"+
    "\0\u047e\0\u04b0\0\u04e2\0\u0352\0\u03b6\0\u0352\0\u0514\0\u0546"+
    "\0\u0352\0\u03b6\0\u0352\0\u0352\0\u0578\0\u0352\0\u03b6\0\u05aa"+
    "\0\u05dc\0\u0352\0\u0352\0\u060e\0\u0640\0\u0352\0\u0352\0\u0672"+
    "\0\u0352\0\u0352\0\u03b6\0\u06a4\0\u06d6\0\u0352\0\u0708\0\u073a"+
    "\0\u076c\0\u0352\0\u03b6\0\u060e\0\u0352\0\u079e\0\u0514\0\u03b6"+
    "\0\u07d0\0\u0352\0\u0802\0\u0834\0\u0866\0\u0352\0\u0898\0\u08ca"+
    "\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4\0\u044c\0\u047e\0\u09f6"+
    "\0\u0a28\0\u0a5a\0\u0a8c\0\u0352\0\u0352\0\u0abe\0\u0af0\0\u0352"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0352\0\u0bea\0\u0c1c\0\u0c4e"+
    "\0\u0c80\0\u0cb2\0\u0ce4\0\u0d16\0\u0d48\0\u0d7a\0\u0352\0\u0352"+
    "\0\u0352\0\u0dac\0\u0352\0\u0dde\0\u0e10\0\u0e42\0\u0352\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\u0352\0\u0f0a\0\u0f3c\0\u0352";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\20\1\21\3\20\1\22\3\20\1\23\25\20\1\22"+
    "\2\20\1\24\4\20\1\25\10\20\3\26\1\27\5\26"+
    "\1\30\1\31\11\26\2\32\1\26\1\33\12\26\1\34"+
    "\1\26\1\35\15\26\6\36\1\37\4\36\1\40\26\36"+
    "\1\41\1\36\1\42\2\36\1\43\12\36\1\44\1\45"+
    "\1\44\1\27\1\45\6\44\1\46\1\44\24\45\3\44"+
    "\1\47\6\44\7\45\1\44\1\45\1\44\1\27\1\45"+
    "\6\44\1\50\1\44\24\45\3\44\1\47\6\44\7\45"+
    "\1\44\1\51\1\44\1\27\1\51\3\44\1\52\4\44"+
    "\24\51\1\44\1\53\1\44\1\47\1\44\1\54\4\44"+
    "\7\51\3\55\1\27\5\55\1\56\1\57\27\55\1\53"+
    "\3\55\1\60\13\55\11\61\1\62\32\61\1\63\4\61"+
    "\1\64\22\61\1\62\31\61\1\63\4\61\1\64\10\61"+
    "\42\65\1\66\2\65\1\67\14\65\7\26\1\70\3\26"+
    "\1\46\30\26\1\35\15\26\3\44\1\27\3\44\1\71"+
    "\3\44\1\50\26\44\1\53\1\44\1\47\15\44\3\72"+
    "\1\27\7\72\1\46\26\72\1\53\1\72\1\73\1\72"+
    "\1\74\13\72\1\75\1\76\4\75\1\77\6\75\24\76"+
    "\3\75\1\100\3\75\1\101\2\75\7\76\1\75\1\76"+
    "\4\75\1\77\6\75\24\76\3\75\1\100\3\75\1\102"+
    "\2\75\7\76\3\20\1\0\3\20\1\0\3\20\1\0"+
    "\25\20\1\0\2\20\1\0\4\20\1\25\10\20\3\0"+
    "\1\21\141\0\1\103\2\0\1\103\2\0\1\104\4\0"+
    "\1\105\24\103\4\0\1\106\1\107\4\0\7\103\1\0"+
    "\1\110\2\0\1\110\2\0\1\111\5\0\16\110\1\112"+
    "\5\110\12\0\1\112\1\113\1\110\1\114\1\115\2\110"+
    "\3\20\1\0\7\20\1\0\30\20\1\0\4\20\1\25"+
    "\10\20\3\0\1\27\56\0\11\116\1\61\50\116\12\117"+
    "\1\61\47\117\34\0\2\120\45\0\2\121\45\0\1\122"+
    "\67\0\1\123\46\0\2\45\1\0\3\45\6\0\24\45"+
    "\12\0\7\45\46\0\1\124\13\0\3\51\1\0\4\51"+
    "\4\0\26\51\1\0\3\51\1\0\13\51\42\0\1\125"+
    "\17\0\3\55\1\0\36\55\1\0\3\55\1\126\16\55"+
    "\1\0\36\55\1\125\3\55\1\126\13\55\41\0\1\61"+
    "\20\0\42\65\1\0\2\65\1\127\56\65\1\66\17\65"+
    "\1\0\2\70\1\0\3\70\6\0\24\70\12\0\7\70"+
    "\1\0\2\71\1\0\3\71\6\0\24\71\12\0\7\71"+
    "\1\0\3\76\1\0\1\76\6\0\25\76\2\0\2\76"+
    "\6\0\7\76\42\0\1\130\20\0\2\103\1\0\3\103"+
    "\6\0\24\103\12\0\7\103\1\0\2\104\1\0\3\104"+
    "\6\0\24\104\12\0\7\104\6\0\1\131\6\0\1\132"+
    "\45\0\1\133\2\0\1\133\2\0\1\134\5\0\24\133"+
    "\12\0\7\133\1\0\2\110\1\0\3\110\6\0\24\110"+
    "\11\0\1\135\7\110\2\0\1\136\55\0\1\137\2\0"+
    "\2\110\1\0\3\110\6\0\5\110\1\140\16\110\11\0"+
    "\1\135\7\110\1\0\2\110\1\0\3\110\6\0\10\110"+
    "\1\141\3\110\1\142\7\110\11\0\1\135\7\110\1\0"+
    "\2\110\1\0\3\110\6\0\20\110\1\143\3\110\11\0"+
    "\1\135\7\110\1\0\2\110\1\0\3\110\6\0\22\110"+
    "\1\144\1\110\11\0\1\135\7\110\36\0\2\145\52\0"+
    "\2\146\33\0\1\122\36\0\1\147\66\0\1\150\12\0"+
    "\42\55\1\0\3\55\1\126\13\55\42\65\1\0\17\65"+
    "\6\0\1\151\71\0\2\152\43\0\2\133\1\0\3\133"+
    "\6\0\24\133\12\0\7\133\1\0\2\134\1\0\3\134"+
    "\6\0\24\134\12\0\7\134\2\0\1\136\47\0\1\153"+
    "\11\0\1\154\12\0\1\154\2\0\1\154\5\0\1\154"+
    "\7\0\2\154\14\0\1\154\4\0\1\154\1\0\2\110"+
    "\1\0\3\110\6\0\24\110\11\0\1\153\7\110\1\0"+
    "\2\110\1\0\3\110\6\0\2\110\1\155\21\110\11\0"+
    "\1\135\7\110\1\0\2\110\1\0\3\110\6\0\10\110"+
    "\1\140\13\110\11\0\1\135\7\110\1\0\2\110\1\0"+
    "\3\110\6\0\2\110\1\112\21\110\11\0\1\135\7\110"+
    "\1\0\2\110\1\0\3\110\6\0\24\110\11\0\1\135"+
    "\2\110\1\142\4\110\32\0\2\156\60\0\2\157\46\0"+
    "\1\160\43\0\1\154\12\0\1\154\2\0\1\154\5\0"+
    "\1\154\7\0\2\154\12\0\1\153\1\0\1\154\4\0"+
    "\1\154\1\0\2\110\1\0\3\110\6\0\24\110\11\0"+
    "\1\135\2\110\1\140\4\110\40\0\1\161\42\0\2\162"+
    "\57\0\1\163\64\0\1\164\62\0\2\165\62\0\1\166"+
    "\33\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\10\0\1\1\5\0\2\1\1\11\3\1\1\11"+
    "\5\1\1\11\1\1\1\11\2\1\1\11\1\1\2\11"+
    "\1\1\1\11\3\1\2\11\2\1\2\11\1\1\2\11"+
    "\3\1\1\11\3\1\1\11\2\1\1\11\4\1\1\11"+
    "\2\1\1\0\1\11\1\1\14\0\2\11\1\1\1\0"+
    "\1\11\2\0\2\1\1\11\11\0\3\11\1\0\1\11"+
    "\3\0\1\11\3\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[118];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _HtmlLexer() {
    this((java.io.Reader)null);
  }


  public _HtmlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _HtmlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1260) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 19: 
          { return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 41: break;
        case 26: 
          { yybegin(START_TAG_NAME); yypushback(yylength());
          }
        case 42: break;
        case 23: 
          { return XmlTokenType.XML_TAG_CHARACTERS;
          }
        case 43: break;
        case 14: 
          { yybegin(ATTRIBUTE_VALUE_START); return XmlTokenType.XML_EQ;
          }
        case 44: break;
        case 13: 
          { return XmlTokenType.XML_NAME;
          }
        case 45: break;
        case 20: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;
          }
        case 46: break;
        case 10: 
          { yybegin(YYINITIAL); yypushback(1); break;
          }
        case 47: break;
        case 39: 
          { return XmlTokenType.XML_DOCTYPE_PUBLIC;
          }
        case 48: break;
        case 37: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_START;
          }
        case 49: break;
        case 3: 
          { return XmlTokenType.XML_REAL_WHITE_SPACE;
          }
        case 50: break;
        case 8: 
          { // according to HTML spec (http://www.w3.org/html/wg/drafts/html/master/syntax.html#comments)
  // comments should start with <!-- and end with --> thus making <!--> absolutely valid comment
  // please note that it's not true for XML (http://www.w3.org/TR/REC-xml/#sec-comments)
  int loc = getTokenStart();
  char prev = zzBuffer.charAt(loc - 1);
  char prevPrev = zzBuffer.charAt(loc - 2);
  if (prev == '-' && prevPrev == '-') {
    yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
  }
  return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 51: break;
        case 32: 
          { yybegin(END_TAG_NAME); yypushback(yylength());
          }
        case 52: break;
        case 1: 
          { return XmlTokenType.XML_DATA_CHARACTERS;
          }
        case 53: break;
        case 25: 
          { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_END;
          }
        case 54: break;
        case 33: 
          { yybegin(END_TAG_NAME2); yypushback(yylength());
          }
        case 55: break;
        case 4: 
          { return XmlTokenType.XML_BAD_CHARACTER;
          }
        case 56: break;
        case 15: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_TAG_END;
          }
        case 57: break;
        case 31: 
          { yybegin(COMMENT); return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;
          }
        case 58: break;
        case 29: 
          { return XmlTokenType.XML_END_TAG_START;
          }
        case 59: break;
        case 35: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_COMMENT_END;
          }
        case 60: break;
        case 40: 
          { yybegin(DOC_TYPE); return XmlTokenType.XML_DOCTYPE_START;
          }
        case 61: break;
        case 2: 
          { return XmlTokenType.XML_PI_TARGET;
          }
        case 62: break;
        case 30: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_EMPTY_ELEMENT_END;
          }
        case 63: break;
        case 36: 
          { yybegin(C_COMMENT_END); return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;
          }
        case 64: break;
        case 28: 
          { yybegin(PROCESSING_INSTRUCTION); return XmlTokenType.XML_PI_START;
          }
        case 65: break;
        case 9: 
          { yybegin(C_COMMENT_START); return XmlTokenType.XML_CONDITIONAL_COMMENT_START;
          }
        case 66: break;
        case 22: 
          { yybegin(TAG_CHARACTERS); return XmlTokenType.XML_NAME;
          }
        case 67: break;
        case 6: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_DOCTYPE_END;
          }
        case 68: break;
        case 38: 
          { return XmlTokenType.XML_CHAR_ENTITY_REF;
          }
        case 69: break;
        case 12: 
          { return XmlTokenType.XML_START_TAG_START;
          }
        case 70: break;
        case 5: 
          { return XmlTokenType.XML_WHITE_SPACE;
          }
        case 71: break;
        case 34: 
          { return XmlTokenType.XML_ENTITY_REF_TOKEN;
          }
        case 72: break;
        case 24: 
          { yybegin(COMMENT); return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 73: break;
        case 21: 
          { yybegin(YYINITIAL); return XmlTokenType.XML_PI_END;
          }
        case 74: break;
        case 17: 
          { yybegin(ATTRIBUTE_VALUE_DQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 75: break;
        case 18: 
          { yybegin(ATTRIBUTE_VALUE_SQ); return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;
          }
        case 76: break;
        case 11: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_NAME;
          }
        case 77: break;
        case 27: 
          { yybegin(START_TAG_NAME2); yypushback(yylength());
          }
        case 78: break;
        case 16: 
          { yybegin(TAG_ATTRIBUTES); return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;
          }
        case 79: break;
        case 7: 
          { return XmlTokenType.XML_COMMENT_CHARACTERS;
          }
        case 80: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
