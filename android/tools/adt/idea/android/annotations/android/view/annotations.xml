<?xml version="1.0" encoding="UTF-8"?>
<root>
  <item name="android.view.AbsSavedState AbsSavedState(android.os.Parcel) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.AbsSavedState void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ActionMode void setSubtitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.ActionMode void setTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderIcon(android.graphics.drawable.Drawable)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderIcon(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderTitle(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderTitle(java.lang.CharSequence)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ContextMenu android.view.ContextMenu setHeaderView(android.view.View)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ContextThemeWrapper ContextThemeWrapper(android.content.Context, int) 1">
    <annotation name="android.support.annotation.StyleRes" />
  </item>
  <item name="android.view.ContextThemeWrapper void onApplyThemeResource(android.content.res.Resources.Theme, int, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Display int getOrientation()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.Surface.ROTATION_0, android.view.Surface.ROTATION_90, android.view.Surface.ROTATION_180, android.view.Surface.ROTATION_270}" />
    </annotation>
  </item>
  <item name="android.view.Display int getRotation()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.Surface.ROTATION_0, android.view.Surface.ROTATION_90, android.view.Surface.ROTATION_180, android.view.Surface.ROTATION_270}" />
    </annotation>
  </item>
  <item name="android.view.Display void getCurrentSizeRange(android.graphics.Point, android.graphics.Point) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Display void getCurrentSizeRange(android.graphics.Point, android.graphics.Point) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Display void getRealSize(android.graphics.Point) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Display void getRectSize(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Display void getSize(android.graphics.Point) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.DragEvent void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.FocusFinder android.view.View findNearestTouchable(android.view.ViewGroup, int, int, int, int[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.FocusFinder android.view.View findNextFocus(android.view.ViewGroup, android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.FocusFinder android.view.View findNextFocusFromRect(android.view.ViewGroup, android.graphics.Rect, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.GestureDetector boolean onTouchEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, android.graphics.Rect) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, android.graphics.Rect) 4">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, android.graphics.Rect, int) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, android.graphics.Rect, int) 4">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect) 6">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect, int) 3">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void apply(int, int, int, android.graphics.Rect, int, int, android.graphics.Rect, int) 6">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void applyDisplay(int, android.graphics.Rect, android.graphics.Rect) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void applyDisplay(int, android.graphics.Rect, android.graphics.Rect) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void applyDisplay(int, android.graphics.Rect, android.graphics.Rect, int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Gravity void applyDisplay(int, android.graphics.Rect, android.graphics.Rect, int) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.InputDevice java.util.List&lt;android.view.InputDevice.MotionRange&gt; getMotionRanges()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.InputDevice void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyCharacterMap android.view.KeyEvent[] getEvents(char[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyCharacterMap boolean getKeyData(int, android.view.KeyCharacterMap.KeyData) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyCharacterMap.KeyData meta">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent KeyEvent(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent KeyEvent(android.view.KeyEvent, long, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent android.view.KeyEvent changeAction(android.view.KeyEvent, int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent android.view.KeyEvent changeAction(android.view.KeyEvent, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int, int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent, long, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent boolean dispatch(android.view.KeyEvent.Callback) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent boolean dispatch(android.view.KeyEvent.Callback, android.view.KeyEvent.DispatcherState, java.lang.Object) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent.DispatcherState boolean isTracking(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent.DispatcherState void handleUpEvent(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent.DispatcherState void performedLongPress(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.KeyEvent.DispatcherState void startTracking(android.view.KeyEvent, java.lang.Object) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater LayoutInflater(android.view.LayoutInflater, android.content.Context) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.LayoutInflater from(android.content.Context)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.LayoutInflater from(android.content.Context) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.View createView(java.lang.String, java.lang.String, android.util.AttributeSet) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup, boolean) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(int, android.view.ViewGroup, boolean) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.View inflate(org.xmlpull.v1.XmlPullParser, android.view.ViewGroup, boolean) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.LayoutInflater android.view.View onCreateView(android.view.View, java.lang.String, android.util.AttributeSet) 2">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.LayoutInflater android.view.View onCreateView(java.lang.String, android.util.AttributeSet) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Menu android.view.MenuItem add(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.Menu android.view.MenuItem add(int, int, int, int) 3">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.Menu android.view.SubMenu addSubMenu(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.Menu android.view.SubMenu addSubMenu(int, int, int, int) 3">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.MenuInflater void inflate(int, android.view.Menu) 0">
    <annotation name="android.support.annotation.MenuRes" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setActionView(int) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.MenuItem android.view.MenuItem setTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.MotionEvent void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.MotionEvent.PointerCoords PointerCoords(android.view.MotionEvent.PointerCoords) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.MotionEvent.PointerCoords void copyFrom(android.view.MotionEvent.PointerCoords) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.MotionEvent.PointerProperties PointerProperties(android.view.MotionEvent.PointerProperties) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.MotionEvent.PointerProperties void copyFrom(android.view.MotionEvent.PointerProperties) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.OrientationEventListener OrientationEventListener(android.content.Context) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.OrientationEventListener OrientationEventListener(android.content.Context, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ScaleGestureDetector ScaleGestureDetector(android.content.Context, android.view.ScaleGestureDetector.OnScaleGestureListener) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ScaleGestureDetector boolean onTouchEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderIcon(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderTitle(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderTitle(int) 0">
    <annotation name="android.support.annotation.StringRes" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderTitle(java.lang.CharSequence)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setHeaderView(android.view.View)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setIcon(android.graphics.drawable.Drawable)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setIcon(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SubMenu android.view.SubMenu setIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Surface android.graphics.Canvas lockCanvas(android.graphics.Rect)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SurfaceView SurfaceView(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SurfaceView SurfaceView(android.content.Context, android.util.AttributeSet, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SurfaceView void dispatchDraw(android.graphics.Canvas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.SurfaceView void draw(android.graphics.Canvas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.TextureView TextureView(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.TextureView TextureView(android.content.Context, android.util.AttributeSet, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.TextureView void unlockCanvasAndPost(android.graphics.Canvas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.TouchDelegate TouchDelegate(android.graphics.Rect, android.view.View) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.TouchDelegate boolean onTouchEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View">
    <annotation name="android.support.annotation.UiThread" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View View(android.content.Context, android.util.AttributeSet, int, int) 1">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.content.res.ColorStateList getBackgroundTintList()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.content.res.ColorStateList getForegroundTintList()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.graphics.PorterDuff.Mode getBackgroundTintMode()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.graphics.PorterDuff.Mode getForegroundTintMode()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View android.os.Parcelable onSaveInstanceState()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View android.view.View findViewById(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View android.view.View focusSearch(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View android.view.View inflate(android.content.Context, int, android.view.ViewGroup) 1">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.View boolean dispatchGenericMotionEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean dispatchHoverEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean dispatchKeyEvent(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean dispatchKeyEventPreIme(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean dispatchKeyShortcutEvent(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean dispatchNestedPreScroll(int, int, int[], int[]) 2">
    <annotation name="android.support.annotation.Nullable" />
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View boolean dispatchNestedPreScroll(int, int, int[], int[]) 3">
    <annotation name="android.support.annotation.Nullable" />
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View boolean dispatchNestedScroll(int, int, int, int, int[]) 4">
    <annotation name="android.support.annotation.Nullable" />
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View boolean dispatchTouchEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean dispatchUnhandledMove(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View boolean fitSystemWindows(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean getGlobalVisibleRect(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean getGlobalVisibleRect(android.graphics.Rect, android.graphics.Point) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean getLocalVisibleRect(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean onFilterTouchEventForSecurity(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean onHoverEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean onKeyDown(int, android.view.KeyEvent) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean onTouchEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean requestRectangleOnScreen(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean requestRectangleOnScreen(android.graphics.Rect, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean startDrag(android.content.ClipData, android.view.View.DragShadowBuilder, java.lang.Object, int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View boolean verifyDrawable(android.graphics.drawable.Drawable)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View int getDrawingCacheBackgroundColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View int getDrawingCacheQuality()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.DRAWING_CACHE_QUALITY_LOW, android.view.View.DRAWING_CACHE_QUALITY_HIGH, android.view.View.DRAWING_CACHE_QUALITY_AUTO}" />
    </annotation>
  </item>
  <item name="android.view.View int getId()">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View int getImportantForAccessibility()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_ACCESSIBILITY_AUTO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_YES, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.View int getLayoutDirection()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View int getScrollBarStyle()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLLBARS_INSIDE_OVERLAY, android.view.View.SCROLLBARS_INSIDE_INSET, android.view.View.SCROLLBARS_OUTSIDE_OVERLAY, android.view.View.SCROLLBARS_OUTSIDE_INSET}" />
    </annotation>
  </item>
  <item name="android.view.View int getScrollIndicators()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View int getSolidColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View int getTextAlignment()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_ALIGNMENT_INHERIT, android.view.View.TEXT_ALIGNMENT_GRAVITY, android.view.View.TEXT_ALIGNMENT_CENTER, android.view.View.TEXT_ALIGNMENT_TEXT_START, android.view.View.TEXT_ALIGNMENT_TEXT_END, android.view.View.TEXT_ALIGNMENT_VIEW_START, android.view.View.TEXT_ALIGNMENT_VIEW_END}" />
    </annotation>
  </item>
  <item name="android.view.View int getTextDirection()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_DIRECTION_LTR, android.view.View.TEXT_DIRECTION_RTL, android.view.View.TEXT_DIRECTION_ANY_RTL, android.view.View.TEXT_DIRECTION_LOCALE, android.view.View.TEXT_DIRECTION_FIRST_STRONG, android.view.View.TEXT_DIRECTION_FIRST_STRONG_LTR, android.view.View.TEXT_DIRECTION_FIRST_STRONG_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View int getVisibility()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View int getWindowVisibility()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View int[] mergeDrawableStates(int[], int[])">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View int[] mergeDrawableStates(int[], int[]) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View int[] mergeDrawableStates(int[], int[]) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View java.util.ArrayList&lt;android.view.View&gt; getFocusables(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View java.util.ArrayList&lt;android.view.View&gt; getFocusables(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View java.util.ArrayList&lt;android.view.View&gt; getTouchables()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void addChildrenForAccessibility(java.util.ArrayList&lt;android.view.View&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUSABLES_ALL, android.view.View.FOCUSABLES_TOUCH_MODE}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void addTouchables(java.util.ArrayList&lt;android.view.View&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void createContextMenu(android.view.ContextMenu) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchDisplayHint(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void dispatchRestoreInstanceState(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchSaveInstanceState(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchVisibilityChanged(android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void dispatchVisibilityChanged(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void dispatchWindowVisibilityChanged(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void draw(android.graphics.Canvas)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void draw(android.graphics.Canvas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void drawableHotspotChanged(float, float)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void drawableStateChanged()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void findViewsWithText(java.util.ArrayList&lt;android.view.View&gt;, java.lang.CharSequence, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void findViewsWithText(java.util.ArrayList&lt;android.view.View&gt;, java.lang.CharSequence, int) 2">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FIND_VIEWS_WITH_TEXT, android.view.View.FIND_VIEWS_WITH_CONTENT_DESCRIPTION}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void getDrawingRect(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void getFocusedRect(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void getHitRect(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void getLocationInWindow(int[]) 0">
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View void getLocationOnScreen(int[]) 0">
    <annotation name="android.support.annotation.Size">
      <val name="value" val="2" />
    </annotation>
  </item>
  <item name="android.view.View void getWindowVisibleDisplayFrame(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void initializeFadingEdge(android.content.res.TypedArray) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void initializeScrollbars(android.content.res.TypedArray) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void invalidate(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void invalidateDrawable(android.graphics.drawable.Drawable) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void jumpDrawablesToCurrentState()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onAnimationEnd()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onAnimationStart()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onAttachedToWindow()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onDetachedFromWindow()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onDisplayHint(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void onFinishInflate()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.FOCUS_BACKWARD, android.view.View.FOCUS_FORWARD, android.view.View.FOCUS_LEFT, android.view.View.FOCUS_UP, android.view.View.FOCUS_RIGHT, android.view.View.FOCUS_DOWN}" />
    </annotation>
  </item>
  <item name="android.view.View void onFocusChanged(boolean, int, android.graphics.Rect) 2">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onRestoreInstanceState(android.os.Parcelable)">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void onRtlPropertiesChanged(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View void onVisibilityChanged(android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void onVisibilityChanged(android.view.View, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void onWindowVisibilityChanged(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void requestLayout()">
    <annotation name="android.support.annotation.CallSuper" />
  </item>
  <item name="android.view.View void restoreHierarchyState(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void saveHierarchyState(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View void setAccessibilityDelegate(android.view.View.AccessibilityDelegate) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setAlpha(float) 0">
    <annotation name="android.support.annotation.FloatRange">
      <val name="from" val="0.0" />
      <val name="to" val="1.0" />
    </annotation>
  </item>
  <item name="android.view.View void setBackgroundColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View void setBackgroundResource(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.View void setBackgroundTintList(android.content.res.ColorStateList) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setBackgroundTintMode(android.graphics.PorterDuff.Mode) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setDrawingCacheBackgroundColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.View void setDrawingCacheQuality(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.DRAWING_CACHE_QUALITY_LOW, android.view.View.DRAWING_CACHE_QUALITY_HIGH, android.view.View.DRAWING_CACHE_QUALITY_AUTO}" />
    </annotation>
  </item>
  <item name="android.view.View void setForegroundTintList(android.content.res.ColorStateList) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setForegroundTintMode(android.graphics.PorterDuff.Mode) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setId(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View void setImportantForAccessibility(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.IMPORTANT_FOR_ACCESSIBILITY_AUTO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_YES, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO, android.view.View.IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.View void setLabelFor(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.View void setLayoutDirection(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.LAYOUT_DIRECTION_LTR, android.view.View.LAYOUT_DIRECTION_RTL, android.view.View.LAYOUT_DIRECTION_INHERIT, android.view.View.LAYOUT_DIRECTION_LOCALE}" />
    </annotation>
  </item>
  <item name="android.view.View void setOnClickListener(android.view.View.OnClickListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setOnContextClickListener(android.view.View.OnContextClickListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setOnLongClickListener(android.view.View.OnLongClickListener) 0">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.View void setScrollBarStyle(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLLBARS_INSIDE_OVERLAY, android.view.View.SCROLLBARS_INSIDE_INSET, android.view.View.SCROLLBARS_OUTSIDE_OVERLAY, android.view.View.SCROLLBARS_OUTSIDE_INSET}" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollIndicators(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollIndicators(int, int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void setScrollIndicators(int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.SCROLL_INDICATOR_TOP, android.view.View.SCROLL_INDICATOR_BOTTOM, android.view.View.SCROLL_INDICATOR_LEFT, android.view.View.SCROLL_INDICATOR_RIGHT, android.view.View.SCROLL_INDICATOR_START, android.view.View.SCROLL_INDICATOR_END}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.View void setTextAlignment(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_ALIGNMENT_INHERIT, android.view.View.TEXT_ALIGNMENT_GRAVITY, android.view.View.TEXT_ALIGNMENT_CENTER, android.view.View.TEXT_ALIGNMENT_TEXT_START, android.view.View.TEXT_ALIGNMENT_TEXT_END, android.view.View.TEXT_ALIGNMENT_VIEW_START, android.view.View.TEXT_ALIGNMENT_VIEW_END}" />
    </annotation>
  </item>
  <item name="android.view.View void setTextDirection(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.TEXT_DIRECTION_INHERIT, android.view.View.TEXT_DIRECTION_LTR, android.view.View.TEXT_DIRECTION_RTL, android.view.View.TEXT_DIRECTION_ANY_RTL, android.view.View.TEXT_DIRECTION_LOCALE, android.view.View.TEXT_DIRECTION_FIRST_STRONG, android.view.View.TEXT_DIRECTION_FIRST_STRONG_LTR, android.view.View.TEXT_DIRECTION_FIRST_STRONG_RTL}" />
    </annotation>
  </item>
  <item name="android.view.View void setVisibility(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.VISIBLE, android.view.View.INVISIBLE, android.view.View.GONE}" />
    </annotation>
  </item>
  <item name="android.view.View void startAnimation(android.view.animation.Animation) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate boolean dispatchPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate boolean onRequestSendAccessibilityEvent(android.view.ViewGroup, android.view.View, android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate boolean performAccessibilityAction(android.view.View, int, android.os.Bundle) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void onInitializeAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void onInitializeAccessibilityNodeInfo(android.view.View, android.view.accessibility.AccessibilityNodeInfo) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void onPopulateAccessibilityEvent(android.view.View, android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void sendAccessibilityEvent(android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.AccessibilityDelegate void sendAccessibilityEventUnchecked(android.view.View, android.view.accessibility.AccessibilityEvent) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.DragShadowBuilder void onDrawShadow(android.graphics.Canvas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.DragShadowBuilder void onProvideShadowMetrics(android.graphics.Point, android.graphics.Point) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.DragShadowBuilder void onProvideShadowMetrics(android.graphics.Point, android.graphics.Point) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.View.MeasureSpec int getMode(int)">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.MeasureSpec.UNSPECIFIED, android.view.View.MeasureSpec.EXACTLY, android.view.View.MeasureSpec.AT_MOST}" />
    </annotation>
  </item>
  <item name="android.view.View.MeasureSpec int makeMeasureSpec(int, int) 0">
    <annotation name="android.support.annotation.IntRange">
      <val name="from" val="0" />
      <val name="to" val="1073741823" />
    </annotation>
  </item>
  <item name="android.view.View.MeasureSpec int makeMeasureSpec(int, int) 1">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.View.MeasureSpec.UNSPECIFIED, android.view.View.MeasureSpec.EXACTLY, android.view.View.MeasureSpec.AT_MOST}" />
    </annotation>
  </item>
  <item name="android.view.View.MeasureSpec java.lang.String toString(int)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewConfiguration android.view.ViewConfiguration get(android.content.Context) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewDebug void dumpCapturedView(java.lang.String, java.lang.Object) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup">
    <annotation name="android.support.annotation.UiThread" />
  </item>
  <item name="android.view.ViewGroup ViewGroup(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup ViewGroup(android.content.Context, android.util.AttributeSet, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup android.view.ViewParent invalidateChildInParent(int[], android.graphics.Rect) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean addViewInLayout(android.view.View, int, android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean addViewInLayout(android.view.View, int, android.view.ViewGroup.LayoutParams, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchDragEvent(android.view.DragEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchGenericFocusedEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchGenericPointerEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchHoverEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchKeyEvent(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchKeyEventPreIme(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchKeyShortcutEvent(android.view.KeyEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean dispatchTouchEvent(android.view.MotionEvent) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean drawChild(android.graphics.Canvas, android.view.View, long) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean drawChild(android.graphics.Canvas, android.view.View, long) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean fitSystemWindows(android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup boolean getChildVisibleRect(android.view.View, android.graphics.Rect, android.graphics.Point) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup int getDescendantFocusability()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.FOCUS_BEFORE_DESCENDANTS, android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS, android.view.ViewGroup.FOCUS_BLOCK_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup int getPersistentDrawingCache()">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.PERSISTENT_NO_CACHE, android.view.ViewGroup.PERSISTENT_ANIMATION_CACHE, android.view.ViewGroup.PERSISTENT_SCROLLING_CACHE, android.view.ViewGroup.PERSISTENT_ALL_CACHES}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup void addChildrenForAccessibility(java.util.ArrayList&lt;android.view.View&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addFocusables(java.util.ArrayList&lt;android.view.View&gt;, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addTouchables(java.util.ArrayList&lt;android.view.View&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addView(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addView(android.view.View, android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addView(android.view.View, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addView(android.view.View, int, android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void addView(android.view.View, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void attachLayoutAnimationParameters(android.view.View, android.view.ViewGroup.LayoutParams, int, int) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void attachViewToParent(android.view.View, int, android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void bringChildToFront(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void cleanupLayoutState(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void dispatchDraw(android.graphics.Canvas) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void dispatchFreezeSelfOnly(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void dispatchRestoreInstanceState(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void dispatchSaveInstanceState(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void dispatchThawSelfOnly(android.util.SparseArray&lt;android.os.Parcelable&gt;) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void endViewTransition(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void findViewsWithText(java.util.ArrayList&lt;android.view.View&gt;, java.lang.CharSequence, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void invalidateChild(android.view.View, android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void invalidateChild(android.view.View, android.graphics.Rect) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void measureChild(android.view.View, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void measureChildWithMargins(android.view.View, int, int, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void offsetDescendantRectToMyCoords(android.view.View, android.graphics.Rect) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void offsetRectIntoDescendantCoords(android.view.View, android.graphics.Rect) 1">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void removeDetachedView(android.view.View, boolean) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void removeView(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void removeViewInLayout(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void setDescendantFocusability(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.FOCUS_BEFORE_DESCENDANTS, android.view.ViewGroup.FOCUS_AFTER_DESCENDANTS, android.view.ViewGroup.FOCUS_BLOCK_DESCENDANTS}" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup void setPersistentDrawingCache(int) 0">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.ViewGroup.PERSISTENT_NO_CACHE, android.view.ViewGroup.PERSISTENT_ANIMATION_CACHE, android.view.ViewGroup.PERSISTENT_SCROLLING_CACHE, android.view.ViewGroup.PERSISTENT_ALL_CACHES}" />
      <val name="flag" val="true" />
    </annotation>
  </item>
  <item name="android.view.ViewGroup void startViewTransition(android.view.View) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup void updateViewLayout(android.view.View, android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup.LayoutParams LayoutParams(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup.LayoutParams LayoutParams(android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup.LayoutParams void setBaseAttributes(android.content.res.TypedArray, int, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams MarginLayoutParams(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams MarginLayoutParams(android.view.ViewGroup.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewGroup.MarginLayoutParams MarginLayoutParams(android.view.ViewGroup.MarginLayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator alpha(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator alphaBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator rotation(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator rotationBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator rotationX(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator rotationXBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator rotationY(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator rotationYBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator scaleX(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator scaleXBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator scaleY(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator scaleYBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator setDuration(long)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator setListener(android.animation.Animator.AnimatorListener)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator setStartDelay(long)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator translationX(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator translationXBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator translationY(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator translationYBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator withEndAction(java.lang.Runnable)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator withLayer()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator withStartAction(java.lang.Runnable)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator x(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator xBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator y(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewPropertyAnimator android.view.ViewPropertyAnimator yBy(float)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStub ViewStub(android.content.Context, android.util.AttributeSet) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStub ViewStub(android.content.Context, android.util.AttributeSet, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.ViewStub ViewStub(android.content.Context, int) 1">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.ViewStub int getInflatedId()">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.ViewStub int getLayoutResource()">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.ViewStub void setInflatedId(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.ViewStub void setLayoutResource(int) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.Window android.view.LayoutInflater getLayoutInflater()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Window android.view.View findViewById(int) 0">
    <annotation name="android.support.annotation.IdRes" />
  </item>
  <item name="android.view.Window android.view.View getCurrentFocus()">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window android.view.WindowManager.LayoutParams getAttributes()">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.Window int getNavigationBarColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window int getStatusBarColor()">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setBackgroundDrawableResource(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setContentView(int) 0">
    <annotation name="android.support.annotation.LayoutRes" />
  </item>
  <item name="android.view.Window void setFeatureDrawableResource(int, int) 1">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setIcon(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setLogo(int) 0">
    <annotation name="android.support.annotation.DrawableRes" />
  </item>
  <item name="android.view.Window void setNavigationBarColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setStatusBarColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setTitleColor(int) 0">
    <annotation name="android.support.annotation.ColorInt" />
  </item>
  <item name="android.view.Window void setWindowAnimations(int) 0">
    <annotation name="android.support.annotation.StyleRes" />
  </item>
  <item name="android.view.Window.Callback android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window.Callback android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode.Callback, int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.Window.Callback android.view.View onCreatePanelView(int)">
    <annotation name="android.support.annotation.Nullable" />
  </item>
  <item name="android.view.WindowId void registerFocusObserver(android.view.WindowId.FocusObserver) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.WindowId void unregisterFocusObserver(android.view.WindowId.FocusObserver) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.WindowId void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.WindowManager.LayoutParams LayoutParams(android.os.Parcel) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.WindowManager.LayoutParams int copyFrom(android.view.WindowManager.LayoutParams) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.WindowManager.LayoutParams java.lang.String debug(java.lang.String)">
    <annotation name="android.support.annotation.NonNull" />
  </item>
  <item name="android.view.WindowManager.LayoutParams type">
    <annotation name="android.support.annotation.IntDef">
      <val name="value" val="{android.view.WindowManager.LayoutParams.TYPE_BASE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_STARTING, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL, android.view.WindowManager.LayoutParams.TYPE_APPLICATION_ATTACHED_DIALOG, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR, android.view.WindowManager.LayoutParams.TYPE_SEARCH_BAR, android.view.WindowManager.LayoutParams.TYPE_PHONE, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ALERT, android.view.WindowManager.LayoutParams.TYPE_TOAST, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_OVERLAY, android.view.WindowManager.LayoutParams.TYPE_PRIORITY_PHONE, android.view.WindowManager.LayoutParams.TYPE_STATUS_BAR_PANEL, android.view.WindowManager.LayoutParams.TYPE_PRIVATE_PRESENTATION, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_DIALOG, android.view.WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG, android.view.WindowManager.LayoutParams.TYPE_SYSTEM_ERROR, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD, android.view.WindowManager.LayoutParams.TYPE_INPUT_METHOD_DIALOG}" />
    </annotation>
  </item>
  <item name="android.view.WindowManager.LayoutParams void writeToParcel(android.os.Parcel, int) 0">
    <annotation name="android.support.annotation.NonNull" />
  </item>
</root>

