Kernel driver inv-mpu-iio
Author: Invensense <http://invensense.com>

Table of Contents:
==================
- Description
- Integrating the Driver in the Linux Kernel
- Board and Platform Data
    > Interrupt Pin
    > Platform Data
- Board File Modifications for Secondary I2C Configuration
    > ICM20645/ICM10340
- Board File Modifications for Invensense Devices
    > ICM20645/ICM10340
- IIO Subsystem
    > Communicating with the Driver in Userspace
    > ICM20645/ICM10340
- Suspend and Resume
- Wake up CPU using event interrupt
- DMP Event
- Motion Event
- Streaming Data to an Userspace Application
- Recommended Sysfs Entry Setup Sequence
    > With DMP Firmware
    > Without DMP Firmware
- Test Applications
    > Running Test Applications with ICM20728/ICM20628


Description
===========
This document describes how to install the Invensense device driver into a
Linux kernel. The Invensense driver currently supports the following sensors:
- ICM20645/ICM10340

The slave address of each device is either 0x68 or 0x69, depending on the AD0
pin value of the device. Please refer to the appropriate product specification
document for further information regarding the AD0 pin. The driver supports both
addresses.

The following files are included in this package:
- Kconfig
- Makefile
- Makefile.kernel_3_10
- inv_dmpfirmware_10340.bin
- inv_dmpfirmware.bin
- inv_mpu_core.c
- inv_mpu_dts.c
- inv_mpu_dts.h
- inv_mpu_common.c
- inv_mpu_misc.c
- inv_mpu_parsing.c
- inv_mpu_setup.c
- inv_mpu_iio.h
- inv_mpu_ring.c
- inv_slave_compass.c
- inv_slave_als.c
- inv_slave_pressure.c
- inv_mpu_i2c.c
- inv_mpu_spi.c
- inv_mpu_init.c
- inv_mpu_load_dmp.c
- inv_mpu_selftest.c
- dmp3Default.h
- mpu.h

Integrating the Driver in the Linux Kernel
==========================================
Please add the files as follows:
- Add mpu.h to "kernel/include/linux".
- Add all other files to drivers/staging/iio/imu/inv_mpu
(another directory is acceptable, but this is the recommended destination)

In order to see the driver in menuconfig when building the kernel, please
make modifications as shown below:

    modify "drivers/staging/iio/imu/Kconfig" with:
    >> source "drivers/staging/iio/imu/inv_mpu/Kconfig"

    modify "drivers/staging/iio/imu/Makefile" with:
    >> obj-y += inv_mpu/


Board and Platform Data
=======================
In order to recognize the Invensense device on the I2C bus, the board file must
be modified.
The i2c_board_info instance must be defined as shown below.

Interrupt Pin
-------------
The hardcoded value of 140 corresponds to the GPIO input pin connected to the
Invensense device's interrupt pin.
This pin will most likely be different for your platform, and the value should
be changed accordingly.

Platform Data
-------------
The platform data (orientation matrix and secondary bus configurations) must be
modified as show below, according to your particular platform configuration.

Board File Modifications for Secondary I2C Configuration
========================================================
For the Panda Board, the board file can be found at
arch/arm/mach-omap2/board-omap4panda.c.
Please modify the pertinent baord file in your system according to the examples
shown below:

ICM20645/ICM10340
--------

Board File Modifications for Invensense Devices
===============================================
For Invensense devices, please provide the i2c init data as shown in the
examples below.

In the _i2c_init function, the device is registered in the following manner:

    // arch/arm/mach-omap2/board-omap4panda.c
    // in static int __init omap4_panda_i2c_init(void)
    omap_register_i2c_bus(4, 400,
                          single_chip_board_info,
                          ARRAY_SIZE(single_chip_board_info));

ICM10340
-------
static struct i2c_board_info __initdata single_chip_board_info[] = {
        {
                I2C_BOARD_INFO("icm10340", 0x68),
                .irq = (IH_GPIO_BASE + MPUIRQ_GPIO),
                .platform_data = &gyro_platform_data,
        },
};

ICM20645 + AK8963 + BMP280 + APDS9930
-------
static struct mpu_platform_data mpu_data = {
        .int_config  = 0x00,
        .level_shifter = 0,
        .orientation = {  -1,  0,  0,
                           0,  1,  0,
                           0,  0, -1 },
        .sec_slave_type = SECONDARY_SLAVE_TYPE_COMPASS,
        .sec_slave_id   = COMPASS_ID_AK8963,
        .secondary_i2c_addr = 0x0E,
        .secondary_orientation = { 1,  0,  0,
                                   0,  1,  0,
                                   0,  0,  1 },
        .aux_slave_type = SECONDARY_SLAVE_TYPE_PRESSURE,
        .aux_slave_id   = PRESSURE_ID_BMP280,
        .aux_i2c_addr   = 0x77,
        .read_only_slave_type = SECONDARY_SLAVE_TYPE_ALS,
        .read_only_slave_id = ALS_ID_APDS_9930,
        .read_only_i2c_addr = 0x39,
};

static struct i2c_board_info __initdata chip_board_info[] = {
        {
                I2C_BOARD_INFO("icm20645", 0x68),
                .irq = (IH_GPIO_BASE + MPUIRQ_GPIO),
                .platform_data = &mpu_data,
        }
};

IIO subsystem
=============
A successful installation will create the following two new directories under
/sys/bus/iio/devices:
    - iio:device0
    - trigger0

Also, a new file, "iio:device0", will be created in the /dev/ diretory.
(if you have more than one IIO device, the file will be named "iio:deviceX",
where X is a number)


Communicating with the Driver in Userspace
------------------------------------------
The driver generates several files in sysfs upon installation.
These files are used to communicate with the driver. The files can be found
at /sys/bus/iio/devices/iio:device0 (or ../iio:deviceX as shown above).

A brief description of the pertinent files for each Invensense device is shown
below:

ICM20645/ICM10340
---------------------
in_6quat_enable
in_9quat_enable
in_accel_enable
in_anglvel_enable
in_calib_anglvel_enable
in_calib_magn_enable
in_geomag_enable
in_magn_enable
in_p6quat_enable
in_step_detector_enable
in_step_indicator_enable
--enable the the corresponding sensor.

in_6quat_rate
in_9quat_rate
in_accel_rate
in_anglvel_rate
in_calib_anglvel_rate
in_calib_magn_rate
in_geomag_rate
in_magn_rate
in_p6quat_rate
--set rate for the appropriate sensor. Not all sensors has rate.

event_pedometer_enable
event_smd_enable
-- set event enable

misc_bin_accel_covariance
misc_bin_cur_magn_covariance
misc_bin_dmp_firmware
misc_bin_magn_covariance
misc_bin_soft_iron_matrix
-- binary sysfs entries. In which, misc_bin_dmp_firmware is the one to load DMP image.

poll_pedometer
poll_smd
-- pollable sysfs entries to indicate an event happens.

info_accel_matrix
info_anglvel_matrix
info_firmware_loaded
info_gyro_sf
info_magn_matrix
info_secondary_name
-- information only sysfs entries.

out_pedometer_counter
out_pedometer_steps
out_pedometer_time
out_temperature
-- output of chip.

Suspend and Resume
========================================
The suspend and resume functions are call backs registered to the system
and executed when the system goes in suspend and resumes.
It is enabled when CONFIG_PM is defined.
The current behavior is simple:
- suspend will turn off the chip
- resume will turn on the chip

However, it is possible for the driver to do more complex things;
for example, leaving pedometers running when system is off. This can save whole
system power while letting pedometer working. Other behaviors are possible
too.

Wake up CPU using event interrupt
====================================================
It is common practice in current mobile device to save power as much as
possible. Ususally the device can sleep when not use and only be wake up when in use.
Invensense MPU series provides an efficient way of waking up CPU by events.
The events could be pedometer steps, SMD(significant Motion Detection),
or any customer defined actions. CPU can sleep to save power, when event happens,
DMP will calculate the motion data to detemine whether a pre-defined event happens
or not. If an pre-defined happens, an interrupt is generated to wake up the CPU
to do further processing.
The requirements of doing event wake is the following:
1. Add enable_irq_wake() either in the driver or in the board file.
2. Connect the interrupt pin to the CPU wake up pin.
3. Configure CPU to be woken up by wake up pin.

Stress test application
=================================
A stress test application is located under software/simple_apps/stress_iio.
This application simulates HAL's usage calls to the driver. It creates three
threads. One for data read; one for event read; one for sysfs control.
It can run without any parameters or run with some control parameters. Please
see README in the same directories for details.

