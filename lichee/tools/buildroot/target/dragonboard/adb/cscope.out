cscope 15 $HOME/workspace/tina/package/allwinner/adb/src -q 0000004414 0000654291
	@adb.c

17 
	#TRACE_TAG
 
TRACE_ADB


	)

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<˘y≥.h
>

22 
	~<°d¨g.h
>

23 
	~<î∫o.h
>

24 
	~<°ddef.h
>

25 
	~<°rög.h
>

26 
	~<time.h
>

27 
	~<sys/time.h
>

29 
	~"cutûs/¥›îtõs.h
"

31 
	~"sysdïs.h
"

32 
	~"adb.h
"

33 
	~"adb_auth.h
"

35 
	#ARRAY_SIZE
(
a
Ë(◊Ë/ (◊)[0]))

	)

37 #i‡!
ADB_HOST


38 
	~<¥iv©e/™droid_fûesy°em_c⁄fig.h
>

39 
	~<löux/ˇ∑bûôy.h
>

40 
	~<löux/¥˘l.h
>

41 
	~<sys/mou¡.h
>

43 
	~"usb_víd‹s.h
"

46 #i‡
ADB_TRACE


47 
ADB_MUTEX_DEFINE
–
D_lock
 );

50 
	gHOST
 = 0;

52 
	gauth_íabÀd
 = 0;

54 #i‡!
ADB_HOST


55 c⁄° *
	gadb_devi˚_b™√r
 = "device";

58 
	$Áèl
(c⁄° *
fmt
, ...)

60 
va_li°
 
≠
;

61 
	`va_°¨t
(
≠
, 
fmt
);

62 
	`Ârötf
(
°dîr
, "error: ");

63 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

64 
	`Ârötf
(
°dîr
, "\n");

65 
	`va_íd
(
≠
);

66 
	`exô
(-1);

67 
	}
}

69 
	$Áèl_î∫o
(c⁄° *
fmt
, ...)

71 
va_li°
 
≠
;

72 
	`va_°¨t
(
≠
, 
fmt
);

73 
	`Ârötf
(
°dîr
, "îr‹: %s: ", 
	`°ªº‹
(
î∫o
));

74 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

75 
	`Ârötf
(
°dîr
, "\n");

76 
	`va_íd
(
≠
);

77 
	`exô
(-1);

78 
	}
}

80 
	gadb_åa˚_mask
;

87 
	$adb_åa˚_öô
()

89 c⁄° * 
p
 = 
	`gëív
("ADB_TRACE");

90 c⁄° * 
q
;

93 c⁄° * 
èg
;

94 
Êag
;

95 } 
ègs
[] = {

98 { "adb", 
TRACE_ADB
 },

99 { "sockës", 
TRACE_SOCKETS
 },

100 { "∑ckës", 
TRACE_PACKETS
 },

101 { "rwx", 
TRACE_RWX
 },

102 { "usb", 
TRACE_USB
 },

103 { "sync", 
TRACE_SYNC
 },

104 { "sysdïs", 
TRACE_SYSDEPS
 },

105 { "å™•‹t", 
TRACE_TRANSPORT
 },

106 { "jdwp", 
TRACE_JDWP
 },

107 { "£rvi˚s", 
TRACE_SERVICES
 },

108 { "auth", 
TRACE_AUTH
 },

109 { 
NULL
, 0 }

112 i‡(
p
 =
NULL
)

116 *
p
) {

117 
Àn
, 
ègn
;

119 
q
 = 
	`°Ωbrk
(
p
, " ,:;");

120 i‡(
q
 =
NULL
) {

121 
q
 = 
p
 + 
	`°æí
(p);

123 
Àn
 = 
q
 - 
p
;

125 
ègn
 = 0; 
ègs
[ègn].
èg
 !
NULL
;Åagn++)

127 
ègÀn
 = 
	`°æí
(
ègs
[
ègn
].
èg
);

129 i‡(
Àn
 =
ègÀn
 && !
	`memcmp
(
ègs
[
ègn
].
èg
, 
p
,Üen) )

131 
Êag
 = 
ègs
[
ègn
].flag;

132 i‡(
Êag
 == 0) {

133 
adb_åa˚_mask
 = ~0;

136 
adb_åa˚_mask
 |(1 << 
Êag
);

140 
p
 = 
q
;

141 i‡(*
p
)

142 
p
++;

144 
adb_åa˚_mask
 = ~0;

145 
	}
}

147 #i‡!
ADB_HOST


152 
	~<°d¨g.h
>

159 #unde‡
›í


160 #unde‡
wrôe


161 
	#›í
 
adb_›í


	)

162 
	#wrôe
 
adb_wrôe


	)

163 
	~<qemu/qemu_pùe.h
>

164 #unde‡
›í


165 #unde‡
wrôe


166 
	#›í
 
___xxx_›í


	)

167 
	#wrôe
 
___xxx_wrôe


	)

170 
	gadb_debug_qemu
 = -1;

173 
	$adb_qemu_åa˚_öô
()

175 
c⁄_«me
[32];

177 i‡(
adb_debug_qemu
 >= 0) {

182 
	`¢¥ötf
(
c⁄_«me
, (con_name), "qemud:adb-debug");

183 
adb_debug_qemu
 = 
	`qemu_pùe_›í
(
c⁄_«me
);

184  (
adb_debug_qemu
 >= 0) ? 0 : -1;

185 
	}
}

187 
	$adb_qemu_åa˚
(c⁄° * 
fmt
, ...)

189 
va_li°
 
¨gs
;

190 
	`va_°¨t
(
¨gs
, 
fmt
);

191 
msg
[1024];

193 i‡(
adb_debug_qemu
 >= 0) {

194 
	`v¢¥ötf
(
msg
, (msg), 
fmt
, 
¨gs
);

195 
	`adb_wrôe
(
adb_debug_qemu
, 
msg
, 
	`°æí
(msg));

197 
	}
}

200 
≠ackë
 *
	$gë_≠ackë
()

202 
≠ackë
 *
p
 = 
	`mÆloc
((apacket));

203 if(
p
 =0Ë
	`Áèl
("failedÅoállocateánápacket");

204 
	`mem£t
(
p
, 0, (
≠ackë
Ë- 
MAX_PAYLOAD
);

205  
p
;

206 
	}
}

208 
	$put_≠ackë
(
≠ackë
 *
p
)

210 
	`‰ì
(
p
);

211 
	}
}

213 
	$h™dÀ_⁄löe
(
©øn•‹t
 *
t
)

215 
	`D
("adb: online\n");

216 
t
->
⁄löe
 = 1;

217 
	}
}

219 
	$h™dÀ_ofÊöe
(
©øn•‹t
 *
t
)

221 
	`D
("adb: offline\n");

223 
t
->
⁄löe
 = 0;

224 
	`run_å™•‹t_disc⁄√˘s
(
t
);

225 
	}
}

227 #i‡
DEBUG_PACKETS


228 
	#DUMPMAX
 32

	)

229 
	$¥öt_∑ckë
(c⁄° *
œbñ
, 
≠ackë
 *
p
)

231 *
èg
;

232 *
x
;

233 
cou¡
;

235 
p
->
msg
.
comm™d
){

236 
A_SYNC
: 
èg
 = "SYNC"; ;

237 
A_CNXN
: 
èg
 = "CNXN" ; ;

238 
A_OPEN
: 
èg
 = "OPEN"; ;

239 
A_OKAY
: 
èg
 = "OKAY"; ;

240 
A_CLSE
: 
èg
 = "CLSE"; ;

241 
A_WRTE
: 
èg
 = "WRTE"; ;

242 
A_AUTH
: 
èg
 = "AUTH"; ;

243 : 
èg
 = "????"; ;

246 
	`Ârötf
(
°dîr
, "%s: %s %08x %08x %04x \"",

247 
œbñ
, 
èg
, 
p
->
msg
.
¨g0
,Ö->msg.
¨g1
,Ö->msg.
d©a_Àngth
);

248 
cou¡
 = 
p
->
msg
.
d©a_Àngth
;

249 
x
 = (*Ë
p
->
d©a
;

250 if(
cou¡
 > 
DUMPMAX
) {

251 
cou¡
 = 
DUMPMAX
;

252 
èg
 = "\n";

254 
èg
 = "\"\n";

256 
cou¡
-- > 0){

257 if((*
x
 >= ' ') && (*x < 127)) {

258 
	`Âutc
(*
x
, 
°dîr
);

260 
	`Âutc
('.', 
°dîr
);

262 
x
++;

264 
	`Âuts
(
èg
, 
°dîr
);

265 
	}
}

268 
	$£nd_ªady
(
loˇl
, 
ªmŸe
, 
©øn•‹t
 *
t
)

270 
	`D
("Calling send_ready \n");

271 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

272 
p
->
msg
.
comm™d
 = 
A_OKAY
;

273 
p
->
msg
.
¨g0
 = 
loˇl
;

274 
p
->
msg
.
¨g1
 = 
ªmŸe
;

275 
	`£nd_∑ckë
(
p
, 
t
);

276 
	}
}

278 
	$£nd_˛o£
(
loˇl
, 
ªmŸe
, 
©øn•‹t
 *
t
)

280 
	`D
("Calling send_close \n");

281 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

282 
p
->
msg
.
comm™d
 = 
A_CLSE
;

283 
p
->
msg
.
¨g0
 = 
loˇl
;

284 
p
->
msg
.
¨g1
 = 
ªmŸe
;

285 
	`£nd_∑ckë
(
p
, 
t
);

286 
	}
}

288 
size_t
 
	$fûl_c⁄√˘_d©a
(*
buf
, 
size_t
 
bufsize
)

290 #i‡
ADB_HOST


291  
	`¢¥ötf
(
buf
, 
bufsize
, "host::") + 1;

293 c⁄° *
˙xn_¥›s
[] = {

298 c⁄° 
num_˙xn_¥›s
 = 
	`ARRAY_SIZE
(
˙xn_¥›s
);

299 
i
;

300 
size_t
 
ªmaöög
 = 
bufsize
;

301 
size_t
 
Àn
;

303 
Àn
 = 
	`¢¥ötf
(
buf
, 
ªmaöög
, "%s::", 
adb_devi˚_b™√r
);

304 
ªmaöög
 -
Àn
;

305 
buf
 +
Àn
;

306 
i
 = 0; i < 
num_˙xn_¥›s
; i++) {

307 
vÆue
[
PROPERTY_VALUE_MAX
];

308 
	`¥›îty_gë
(
˙xn_¥›s
[
i
], 
vÆue
, "");

309 
Àn
 = 
	`¢¥ötf
(
buf
, 
ªmaöög
, "%s=%s;", 
˙xn_¥›s
[
i
], 
vÆue
);

310 
ªmaöög
 -
Àn
;

311 
buf
 +
Àn
;

314  
bufsize
 - 
ªmaöög
 + 1;

316 
	}
}

318 
	$£nd_c⁄√˘
(
©øn•‹t
 *
t
)

320 
	`D
("Calling send_connect \n");

321 
≠ackë
 *
˝
 = 
	`gë_≠ackë
();

322 
˝
->
msg
.
comm™d
 = 
A_CNXN
;

323 
˝
->
msg
.
¨g0
 = 
A_VERSION
;

324 
˝
->
msg
.
¨g1
 = 
MAX_PAYLOAD
;

325 
˝
->
msg
.
d©a_Àngth
 = 
	`fûl_c⁄√˘_d©a
((*)˝->
d©a
,

326 (
˝
->
d©a
));

327 
	`£nd_∑ckë
(
˝
, 
t
);

328 
	}
}

330 
	$£nd_auth_ªque°
(
©øn•‹t
 *
t
)

332 
	`D
("Calling send_auth_request\n");

333 
≠ackë
 *
p
;

334 
ªt
;

336 
ªt
 = 
	`adb_auth_gíî©e_tokí
(
t
->
tokí
, (t->token));

337 i‡(
ªt
 !(
t
->
tokí
)) {

338 
	`D
("Eº‹ gíî©ögÅokíÑë=%d\n", 
ªt
);

342 
p
 = 
	`gë_≠ackë
();

343 
	`mem˝y
(
p
->
d©a
, 
t
->
tokí
, 
ªt
);

344 
p
->
msg
.
comm™d
 = 
A_AUTH
;

345 
p
->
msg
.
¨g0
 = 
ADB_AUTH_TOKEN
;

346 
p
->
msg
.
d©a_Àngth
 = 
ªt
;

347 
	`£nd_∑ckë
(
p
, 
t
);

348 
	}
}

350 
	$£nd_auth_ª•⁄£
(
uöt8_t
 *
tokí
, 
size_t
 
tokí_size
, 
©øn•‹t
 *
t
)

352 
	`D
("Calling send_auth_response\n");

353 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

354 
ªt
;

356 
ªt
 = 
	`adb_auth_sign
(
t
->
key
, 
tokí
, 
tokí_size
, 
p
->
d©a
);

357 i‡(!
ªt
) {

358 
	`D
("Error signingÅheÅoken\n");

359 
	`put_≠ackë
(
p
);

363 
p
->
msg
.
comm™d
 = 
A_AUTH
;

364 
p
->
msg
.
¨g0
 = 
ADB_AUTH_SIGNATURE
;

365 
p
->
msg
.
d©a_Àngth
 = 
ªt
;

366 
	`£nd_∑ckë
(
p
, 
t
);

367 
	}
}

369 
	$£nd_auth_publickey
(
©øn•‹t
 *
t
)

371 
	`D
("Calling send_auth_publickey\n");

372 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

373 
ªt
;

375 
ªt
 = 
	`adb_auth_gë_u£rkey
(
p
->
d©a
, (p->data));

376 i‡(!
ªt
) {

377 
	`D
("FailedÅo get userÖublic key\n");

378 
	`put_≠ackë
(
p
);

382 
p
->
msg
.
comm™d
 = 
A_AUTH
;

383 
p
->
msg
.
¨g0
 = 
ADB_AUTH_RSAPUBLICKEY
;

384 
p
->
msg
.
d©a_Àngth
 = 
ªt
;

385 
	`£nd_∑ckë
(
p
, 
t
);

386 
	}
}

388 
	$adb_auth_vîifõd
(
©øn•‹t
 *
t
)

390 
	`h™dÀ_⁄löe
(
t
);

391 
	`£nd_c⁄√˘
(
t
);

392 
	}
}

394 *
	$c⁄√˘i⁄_°©e_«me
(
©øn•‹t
 *
t
)

396 i‡(
t
 =
NULL
) {

400 
t
->
c⁄√˘i⁄_°©e
) {

401 
CS_BOOTLOADER
:

403 
CS_DEVICE
:

405 
CS_OFFLINE
:

410 
	}
}

416 
	$quÆ_ovîwrôe
(**
d°
, c⁄° *
§c
)

418 i‡(!
d°
)

421 
	`‰ì
(*
d°
);

422 *
d°
 = 
NULL
;

424 i‡(!
§c
 || !*src)

427 *
d°
 = 
	`°rdup
(
§c
);

428 
	}
}

430 
	$∑r£_b™√r
(*
b™√r
, 
©øn•‹t
 *
t
)

432 c⁄° *
¥›_£ps
 = ";";

433 c⁄° 
key_vÆ_£p
 = '=';

434 *
˝
;

435 *
ty≥
;

437 
	`D
("∑r£_b™√r: %s\n", 
b™√r
);

438 
ty≥
 = 
b™√r
;

439 
˝
 = 
	`°rchr
(
ty≥
, ':');

440 i‡(
˝
) {

441 *
˝
++ = 0;

443 
˝
 = 
	`°rchr
(cp, ':');

444 i‡(
˝
) {

445 *
ßve
;

446 *
key
;

447 
key
 = 
	`adb_°πok_r
(
˝
 + 1, 
¥›_£ps
, &
ßve
);

448 
key
) {

449 
˝
 = 
	`°rchr
(
key
, 
key_vÆ_£p
);

450 i‡(
˝
) {

451 *
˝
++ = '\0';

452 i‡(!
	`°rcmp
(
key
, "ro.product.name"))

453 
	`quÆ_ovîwrôe
(&
t
->
¥odu˘
, 
˝
);

454 i‡(!
	`°rcmp
(
key
, "ro.product.model"))

455 
	`quÆ_ovîwrôe
(&
t
->
modñ
, 
˝
);

456 i‡(!
	`°rcmp
(
key
, "ro.product.device"))

457 
	`quÆ_ovîwrôe
(&
t
->
devi˚
, 
˝
);

459 
key
 = 
	`adb_°πok_r
(
NULL
, 
¥›_£ps
, &
ßve
);

464 if(!
	`°rcmp
(
ty≥
, "bootloader")){

465 
	`D
("setting connection_stateÅo CS_BOOTLOADER\n");

466 
t
->
c⁄√˘i⁄_°©e
 = 
CS_BOOTLOADER
;

467 
	`upd©e_å™•‹ts
();

471 if(!
	`°rcmp
(
ty≥
, "device")) {

472 
	`D
("setting connection_stateÅo CS_DEVICE\n");

473 
t
->
c⁄√˘i⁄_°©e
 = 
CS_DEVICE
;

474 
	`upd©e_å™•‹ts
();

478 if(!
	`°rcmp
(
ty≥
, "recovery")) {

479 
	`D
("setting connection_stateÅo CS_RECOVERY\n");

480 
t
->
c⁄√˘i⁄_°©e
 = 
CS_RECOVERY
;

481 
	`upd©e_å™•‹ts
();

485 if(!
	`°rcmp
(
ty≥
, "sideload")) {

486 
	`D
("setting connection_stateÅo CS_SIDELOAD\n");

487 
t
->
c⁄√˘i⁄_°©e
 = 
CS_SIDELOAD
;

488 
	`upd©e_å™•‹ts
();

492 
t
->
c⁄√˘i⁄_°©e
 = 
CS_HOST
;

493 
	}
}

495 
	$h™dÀ_∑ckë
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
)

497 
asockë
 *
s
;

499 
	`D
("h™dÀ_∑ckë(Ë%c%c%c%c\n", ((*Ë(&(
p
->
msg
.
comm™d
)))[0],

500 ((*Ë(&(
p
->
msg
.
comm™d
)))[1],

501 ((*Ë(&(
p
->
msg
.
comm™d
)))[2],

502 ((*Ë(&(
p
->
msg
.
comm™d
)))[3]);

503 
	`¥öt_∑ckë
("ªcv", 
p
);

505 
p
->
msg
.
comm™d
){

506 
A_SYNC
:

507 if(
p
->
msg
.
¨g0
){

508 
	`£nd_∑ckë
(
p
, 
t
);

509 if(
HOST
Ë
	`£nd_c⁄√˘
(
t
);

511 
t
->
c⁄√˘i⁄_°©e
 = 
CS_OFFLINE
;

512 
	`h™dÀ_ofÊöe
(
t
);

513 
	`£nd_∑ckë
(
p
, 
t
);

517 
A_CNXN
:

519 if(
t
->
c⁄√˘i⁄_°©e
 !
CS_OFFLINE
) {

520 
t
->
c⁄√˘i⁄_°©e
 = 
CS_OFFLINE
;

521 
	`h™dÀ_ofÊöe
(
t
);

524 
	`∑r£_b™√r
((*Ë
p
->
d©a
, 
t
);

526 i‡(
HOST
 || !
auth_íabÀd
) {

527 
	`h™dÀ_⁄löe
(
t
);

528 if(!
HOST
Ë
	`£nd_c⁄√˘
(
t
);

530 
	`£nd_auth_ªque°
(
t
);

534 
A_AUTH
:

535 i‡(
p
->
msg
.
¨g0
 =
ADB_AUTH_TOKEN
) {

536 
t
->
key
 = 
	`adb_auth_√xtkey
(t->key);

537 i‡(
t
->
key
) {

538 
	`£nd_auth_ª•⁄£
(
p
->
d©a
,Ö->
msg
.
d©a_Àngth
, 
t
);

541 
	`£nd_auth_publickey
(
t
);

543 } i‡(
p
->
msg
.
¨g0
 =
ADB_AUTH_SIGNATURE
) {

544 i‡(
	`adb_auth_vîify
(
t
->
tokí
, 
p
->
d©a
,Ö->
msg
.
d©a_Àngth
)) {

545 
	`adb_auth_vîifõd
(
t
);

546 
t
->
Áûed_auth_©ãm±s
 = 0;

548 i‡(
t
->
Áûed_auth_©ãm±s
++ > 10)

549 
	`adb_¶ìp_ms
(1000);

550 
	`£nd_auth_ªque°
(
t
);

552 } i‡(
p
->
msg
.
¨g0
 =
ADB_AUTH_RSAPUBLICKEY
) {

553 
	`adb_auth_c⁄fúm_key
(
p
->
d©a
,Ö->
msg
.
d©a_Àngth
, 
t
);

557 
A_OPEN
:

558 i‡(
t
->
⁄löe
) {

559 *
«me
 = (*Ë
p
->
d©a
;

560 
«me
[
p
->
msg
.
d©a_Àngth
 > 0 ?Ö->msg.data_length - 1 : 0] = 0;

561 
s
 = 
	`¸óã_loˇl_£rvi˚_sockë
(
«me
);

562 if(
s
 == 0) {

563 
	`£nd_˛o£
(0, 
p
->
msg
.
¨g0
, 
t
);

565 
s
->
≥î
 = 
	`¸óã_ªmŸe_sockë
(
p
->
msg
.
¨g0
, 
t
);

566 
s
->
≥î
->peer = s;

567 
	`£nd_ªady
(
s
->
id
, s->
≥î
->id, 
t
);

568 
s
->
	`ªady
(s);

573 
A_OKAY
:

574 i‡(
t
->
⁄löe
) {

575 if((
s
 = 
	`föd_loˇl_sockë
(
p
->
msg
.
¨g1
))) {

576 if(
s
->
≥î
 == 0) {

577 
s
->
≥î
 = 
	`¸óã_ªmŸe_sockë
(
p
->
msg
.
¨g0
, 
t
);

578 
s
->
≥î
->peer = s;

580 
s
->
	`ªady
(s);

585 
A_CLSE
:

586 i‡(
t
->
⁄löe
) {

587 if((
s
 = 
	`föd_loˇl_sockë
(
p
->
msg
.
¨g1
))) {

588 
s
->
	`˛o£
(s);

593 
A_WRTE
:

594 i‡(
t
->
⁄löe
) {

595 if((
s
 = 
	`föd_loˇl_sockë
(
p
->
msg
.
¨g1
))) {

596 
rid
 = 
p
->
msg
.
¨g0
;

597 
p
->
Àn
 =Ö->
msg
.
d©a_Àngth
;

599 if(
s
->
	`íqueue
(s, 
p
) == 0) {

600 
	`D
("EnqueueÅhe socket\n");

601 
	`£nd_ªady
(
s
->
id
, 
rid
, 
t
);

609 
	`¥ötf
("h™dÀ_∑ckë: wh© i†%08x?!\n", 
p
->
msg
.
comm™d
);

612 
	`put_≠ackë
(
p
);

613 
	}
}

615 
Æi°íî
 
	gli°íî_li°
 = {

616 .
√xt
 = &
li°íî_li°
,

617 .
	g¥ev
 = &
li°íî_li°
,

620 
	$ss_li°íî_evít_func
(
_fd
, 
ev
, *
_l
)

622 
asockë
 *
s
;

624 if(
ev
 & 
FDE_READ
) {

625 
sockaddr
 
addr
;

626 
sockÀn_t
 
Æí
;

627 
fd
;

629 
Æí
 = (
addr
);

630 
fd
 = 
	`adb_sockë_ac˚±
(
_fd
, &
addr
, &
Æí
);

631 if(
fd
 < 0) ;

633 
	`adb_sockë_£tbufsize
(
fd
, 
CHUNK_SIZE
);

635 
s
 = 
	`¸óã_loˇl_sockë
(
fd
);

636 if(
s
) {

637 
	`c⁄√˘_to_sm¨tsockë
(
s
);

641 
	`adb_˛o£
(
fd
);

643 
	}
}

645 
	$li°íî_evít_func
(
_fd
, 
ev
, *
_l
)

647 
Æi°íî
 *
l
 = 
_l
;

648 
asockë
 *
s
;

650 if(
ev
 & 
FDE_READ
) {

651 
sockaddr
 
addr
;

652 
sockÀn_t
 
Æí
;

653 
fd
;

655 
Æí
 = (
addr
);

656 
fd
 = 
	`adb_sockë_ac˚±
(
_fd
, &
addr
, &
Æí
);

657 if(
fd
 < 0) ;

659 
s
 = 
	`¸óã_loˇl_sockë
(
fd
);

660 if(
s
) {

661 
s
->
å™•‹t
 = 
l
->transport;

662 
	`c⁄√˘_to_ªmŸe
(
s
, 
l
->
c⁄√˘_to
);

666 
	`adb_˛o£
(
fd
);

668 
	}
}

670 
	$‰ì_li°íî
(
Æi°íî
* 
l
)

672 i‡(
l
->
√xt
) {

673 
l
->
√xt
->
¥ev
 =Ü->prev;

674 
l
->
¥ev
->
√xt
 =Ü->next;

675 
l
->
√xt
 =Ü->
¥ev
 =Ü;

679 
	`fdevít_ªmove
(&
l
->
fde
);

681 i‡(
l
->
loˇl_«me
)

682 
	`‰ì
((*)
l
->
loˇl_«me
);

684 i‡(
l
->
c⁄√˘_to
)

685 
	`‰ì
((*)
l
->
c⁄√˘_to
);

687 i‡(
l
->
å™•‹t
) {

688 
	`ªmove_å™•‹t_disc⁄√˘
(
l
->
å™•‹t
, &l->
disc⁄√˘
);

690 
	`‰ì
(
l
);

691 
	}
}

693 
	$li°íî_disc⁄√˘
(* 
_l
, 
©øn•‹t
* 
t
)

695 
Æi°íî
* 
l
 = 
_l
;

697 
	`‰ì_li°íî
(
l
);

698 
	}
}

700 
	$loˇl_«me_to_fd
(c⁄° *
«me
)

702 
p‹t
;

704 if(!
	`°∫cmp
("t˝:", 
«me
, 4)){

705 
ªt
;

706 
p‹t
 = 
	`©oi
(
«me
 + 4);

707 
ªt
 = 
	`sockë_lo›back_£rvî
(
p‹t
, 
SOCK_STREAM
);

708  
ªt
;

710 #i‚de‡
HAVE_WIN32_IPC


712 if(!
	`°∫cmp
(
«me
, "local:", 6)) {

713  
	`sockë_loˇl_£rvî
(
«me
 + 6,

714 
ANDROID_SOCKET_NAMESPACE_ABSTRACT
, 
SOCK_STREAM
);

715 } if(!
	`°∫cmp
(
«me
, "localabstract:", 14)) {

716  
	`sockë_loˇl_£rvî
(
«me
 + 14,

717 
ANDROID_SOCKET_NAMESPACE_ABSTRACT
, 
SOCK_STREAM
);

718 } if(!
	`°∫cmp
(
«me
, "localfilesystem:", 16)) {

719  
	`sockë_loˇl_£rvî
(
«me
 + 16,

720 
ANDROID_SOCKET_NAMESPACE_FILESYSTEM
, 
SOCK_STREAM
);

724 
	`¥ötf
("unknow¿loˇ»p‹äamê'%s'\n", 
«me
);

726 
	}
}

728 
	$ªmove_li°íî
(c⁄° *
loˇl_«me
, c⁄° *
c⁄√˘_to
, 
©øn•‹t
* 
å™•‹t
)

730 
Æi°íî
 *
l
;

732 
l
 = 
li°íî_li°
.
√xt
;Ü != &listener_list;Ü =Ü->next) {

733 i‡(!
	`°rcmp
(
loˇl_«me
, 
l
->local_name) &&

734 !
	`°rcmp
(
c⁄√˘_to
, 
l
->connect_to) &&

735 
l
->
å™•‹t
 &&Ü->transport ==Åransport) {

737 
	`li°íî_disc⁄√˘
(
l
, 
å™•‹t
);

743 
	}
}

745 
	$ö°Æl_li°íî
(c⁄° *
loˇl_«me
, c⁄° *
c⁄√˘_to
, 
©øn•‹t
* 
å™•‹t
)

747 
Æi°íî
 *
l
;

751 
l
 = 
li°íî_li°
.
√xt
;Ü != &listener_list;Ü =Ü->next){

752 if(
	`°rcmp
(
loˇl_«me
, 
l
->local_name) == 0) {

753 *
˘o
;

756 if(
l
->
c⁄√˘_to
[0] == '*') {

760 
˘o
 = 
	`°rdup
(
c⁄√˘_to
);

761 if(
˘o
 == 0) {

766 
	`‰ì
((*Ë
l
->
c⁄√˘_to
);

767 
l
->
c⁄√˘_to
 = 
˘o
;

768 i‡(
l
->
å™•‹t
 !=Åransport) {

769 
	`ªmove_å™•‹t_disc⁄√˘
(
l
->
å™•‹t
, &l->
disc⁄√˘
);

770 
l
->
å™•‹t
 =Åransport;

771 
	`add_å™•‹t_disc⁄√˘
(
l
->
å™•‹t
, &l->
disc⁄√˘
);

777 if((
l
 = 
	`ˇŒoc
(1, (
Æi°íî
))Ë=0Ë
nomem
;

778 if((
l
->
loˇl_«me
 = 
	`°rdup
÷oˇl_«me)Ë=0Ë
nomem
;

779 if((
l
->
c⁄√˘_to
 = 
	`°rdup
(c⁄√˘_to)Ë=0Ë
nomem
;

782 
l
->
fd
 = 
	`loˇl_«me_to_fd
(
loˇl_«me
);

783 if(
l
->
fd
 < 0) {

784 
	`‰ì
((*Ë
l
->
loˇl_«me
);

785 
	`‰ì
((*Ë
l
->
c⁄√˘_to
);

786 
	`‰ì
(
l
);

787 
	`¥ötf
("ˇ¬Ÿ böd '%s'\n", 
loˇl_«me
);

791 
	`˛o£_⁄_exec
(
l
->
fd
);

792 if(!
	`°rcmp
(
l
->
c⁄√˘_to
, "*smartsocket*")) {

793 
	`fdevít_ö°Æl
(&
l
->
fde
,Ü->
fd
, 
ss_li°íî_evít_func
,Ü);

795 
	`fdevít_ö°Æl
(&
l
->
fde
,Ü->
fd
, 
li°íî_evít_func
,Ü);

797 
	`fdevít_£t
(&
l
->
fde
, 
FDE_READ
);

799 
l
->
√xt
 = &
li°íî_li°
;

800 
l
->
¥ev
 = 
li°íî_li°
.prev;

801 
l
->
√xt
->
¥ev
 =Ü;

802 
l
->
¥ev
->
√xt
 =Ü;

803 
l
->
å™•‹t
 =Åransport;

805 i‡(
å™•‹t
) {

806 
l
->
disc⁄√˘
.
›aque
 =Ü;

807 
l
->
disc⁄√˘
.
func
 = 
li°íî_disc⁄√˘
;

808 
	`add_å™•‹t_disc⁄√˘
(
å™•‹t
, &
l
->
disc⁄√˘
);

812 
nomem
:

813 
	`Áèl
("cannotállocateÜistener");

815 
	}
}

817 #ifde‡
HAVE_WIN32_PROC


818 
BOOL
 
WINAPI
 
	$˘æc_h™dÀr
(
DWORD
 
ty≥
)

820 
	`exô
(
STATUS_CONTROL_C_EXIT
);

821  
TRUE
;

822 
	}
}

825 
	$adb_˛ónup
()

827 
	`usb_˛ónup
();

828 
	}
}

830 
	$°¨t_loggög
()

832 #ifde‡
HAVE_WIN32_PROC


833 
ãmp
[ 
MAX_PATH
 ];

834 
FILE
* 
‚ul
;

835 
FILE
* 
Êog
;

837 
	`GëTempP©h
–(
ãmp
) - 8,Åemp );

838 
	`°rˇt
–
ãmp
, "adb.log" );

841 
‚ul
 = 
	`f›í
( "NUL", "rt" );

842 i‡(
‚ul
 !
NULL
)

843 
°dö
[0] = 
‚ul
[0];

845 
Êog
 = 
	`f›í
–
ãmp
, "at" );

846 i‡(
Êog
 =
NULL
)

847 
Êog
 = 
‚ul
;

849 
	`£tvbuf
–
Êog
, 
NULL
, 
_IONBF
, 0 );

851 
°dout
[0] = 
Êog
[0];

852 
°dîr
[0] = 
Êog
[0];

853 
	`Ârötf
(
°dîr
,"---ádb sèπög (pid %dË---\n", 
	`gëpid
());

855 
fd
;

857 
fd
 = 
	`unix_›í
("/dev/nuŒ", 
O_RDONLY
);

858 
	`dup2
(
fd
, 0);

859 
	`adb_˛o£
(
fd
);

861 
fd
 = 
	`unix_›í
("/tmp/adb.log", 
O_WRONLY
 | 
O_CREAT
 | 
O_APPEND
, 0640);

862 if(
fd
 < 0) {

863 
fd
 = 
	`unix_›í
("/dev/nuŒ", 
O_WRONLY
);

865 
	`dup2
(
fd
, 1);

866 
	`dup2
(
fd
, 2);

867 
	`adb_˛o£
(
fd
);

868 
	`Ârötf
(
°dîr
,"---ádb sèπög (pid %dË---\n", 
	`gëpid
());

870 
	}
}

872 #i‡!
ADB_HOST


873 
	$°¨t_devi˚_log
()

875 
fd
;

876 
∑th
[
PATH_MAX
];

877 
tm
 
now
;

878 
time_t
 
t
;

879 
vÆue
[
PROPERTY_VALUE_MAX
];

883 
	`¥›îty_gë
("≥rsi°.adb.åa˚_mask", 
vÆue
, "");

884 i‡(
	`ssˇnf
(
vÆue
, "%x", &
adb_åa˚_mask
) != 1)

887 
	`adb_mkdú
("/data/adb", 0775);

888 
	`tz£t
();

889 
	`time
(&
t
);

890 
	`loˇ…ime_r
(&
t
, &
now
);

891 
	`°r·ime
(
∑th
, (path),

893 &
now
);

894 
fd
 = 
	`unix_›í
(
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0640);

895 i‡(
fd
 < 0)

899 
	`dup2
(
fd
, 1);

900 
	`dup2
(
fd
, 2);

901 
	`Ârötf
(
°dîr
,"---ádb sèπög (pid %dË---\n", 
	`gëpid
());

902 
	`adb_˛o£
(
fd
);

904 
fd
 = 
	`unix_›í
("/dev/nuŒ", 
O_RDONLY
);

905 
	`dup2
(
fd
, 0);

906 
	`adb_˛o£
(
fd
);

907 
	}
}

910 #i‡
ADB_HOST


911 
	$œunch_£rvî
(
£rvî_p‹t
)

913 #ifde‡
HAVE_WIN32_PROC


918 
HANDLE
 
pùe_ªad
, 
pùe_wrôe
;

919 
SECURITY_ATTRIBUTES
 
ß
;

920 
STARTUPINFO
 
°¨tup
;

921 
PROCESS_INFORMATION
 
pöfo
;

922 
¥ogøm_∑th
[ 
MAX_PATH
 ];

923 
ªt
;

925 
ß
.
nLígth
 = (sa);

926 
ß
.
ÕSecurôyDes¸ùt‹
 = 
NULL
;

927 
ß
.
bInhîôH™dÀ
 = 
TRUE
;

930 
ªt
 = 
	`Cª©ePùe
–&
pùe_ªad
, &
pùe_wrôe
, &
ß
, 0 );

931 i‡(!
ªt
) {

932 
	`Ârötf
(
°dîr
, "Cª©ePùe(ËÁûuª,Éº‹ %ld\n", 
	`GëLa°Eº‹
() );

936 
	`SëH™dÀInf‹m©i⁄
–
pùe_ªad
, 
HANDLE_FLAG_INHERIT
, 0 );

938 
	`ZîoMem‹y
–&
°¨tup
, (startup) );

939 
°¨tup
.
cb
 = (startup);

940 
°¨tup
.
hStdI≈ut
 = 
	`GëStdH™dÀ
–
STD_INPUT_HANDLE
 );

941 
°¨tup
.
hStdOuçut
 = 
pùe_wrôe
;

942 
°¨tup
.
hStdEº‹
 = 
	`GëStdH™dÀ
–
STD_ERROR_HANDLE
 );

943 
°¨tup
.
dwFœgs
 = 
STARTF_USESTDHANDLES
;

945 
	`ZîoMem‹y
–&
pöfo
, (pinfo) );

948 
	`GëModuÀFûeName
–
NULL
, 
¥ogøm_∑th
, (program_path) );

950 
ªt
 = 
	`Cª©ePro˚ss
(

951 
¥ogøm_∑th
,

955 
NULL
,

956 
NULL
,

957 
TRUE
,

958 
DETACHED_PROCESS
,

959 
NULL
,

960 
NULL
,

961 &
°¨tup
,

962 &
pöfo
 );

964 
	`Clo£H™dÀ
–
pùe_wrôe
 );

966 i‡(!
ªt
) {

967 
	`Ârötf
(
°dîr
, "Cª©ePro˚s†Áûuª,Éº‹ %ld\n", 
	`GëLa°Eº‹
() );

968 
	`Clo£H™dÀ
–
pùe_ªad
 );

972 
	`Clo£H™dÀ
–
pöfo
.
hPro˚ss
 );

973 
	`Clo£H™dÀ
–
pöfo
.
hThªad
 );

977 
ãmp
[3];

978 
DWORD
 
cou¡
;

980 
ªt
 = 
	`RódFûe
–
pùe_ªad
, 
ãmp
, 3, &
cou¡
, 
NULL
 );

981 
	`Clo£H™dÀ
–
pùe_ªad
 );

982 i‡–!
ªt
 ) {

983 
	`Ârötf
(
°dîr
, "couldÇŸÑód ok from ADB Sîvî,Éº‹ = %ld\n", 
	`GëLa°Eº‹
() );

986 i‡(
cou¡
 !3 || 
ãmp
[0] != 'O' ||Åemp[1] != 'K' ||Åemp[2] != '\n') {

987 
	`Ârötf
(
°dîr
, "ADB server didn't ACK\n" );

991 #ñi‡
	`deföed
(
HAVE_FORKEXEC
)

992 
∑th
[
PATH_MAX
];

993 
fd
[2];

997 i‡(
	`pùe
(
fd
)) {

998 
	`Ârötf
(
°dîr
, "pùêÁûed i¿œunch_£rvî,Éºno: %d\n", 
î∫o
);

1001 
	`gë_my_∑th
(
∑th
, 
PATH_MAX
);

1002 
pid_t
 
pid
 = 
	`f‹k
();

1003 if(
pid
 < 0)  -1;

1005 i‡(
pid
 == 0) {

1010 
	`adb_˛o£
(
fd
[0]);

1011 
	`dup2
(
fd
[1], 
STDERR_FILENO
);

1012 
	`adb_˛o£
(
fd
[1]);

1015 
ªsu…
 = 
	`exe˛
(
∑th
, "adb", "f‹k-£rvî", "£rvî", 
NULL
);

1017 
	`Ârötf
(
°dîr
, "OOPS!Éxe˛Ñëu∫ed %d,Éºno: %d\n", 
ªsu…
, 
î∫o
);

1021 
ãmp
[3];

1023 
ãmp
[0] = 'A';Åemp[1] = 'B';Åemp[2] = 'C';

1025 
	`adb_˛o£
(
fd
[1]);

1026 
ªt
 = 
	`adb_ªad
(
fd
[0], 
ãmp
, 3);

1027 
ßved_î∫o
 = 
î∫o
;

1028 
	`adb_˛o£
(
fd
[0]);

1029 i‡(
ªt
 < 0) {

1030 
	`Ârötf
(
°dîr
, "couldÇŸÑód ok from ADB Sîvî,Éºnÿ%d\n", 
ßved_î∫o
);

1033 i‡(
ªt
 !3 || 
ãmp
[0] != 'O' ||Åemp[1] != 'K' ||Åemp[2] != '\n') {

1034 
	`Ârötf
(
°dîr
, "ADB server didn't ACK\n" );

1038 
	`£tsid
();

1044 
	}
}

1052 
	$buûd_loˇl_«me
(* 
èrgë_°r
, 
size_t
 
èrgë_size
, 
£rvî_p‹t
)

1054 
	`¢¥ötf
(
èrgë_°r
, 
èrgë_size
, "t˝:%d", 
£rvî_p‹t
);

1055 
	}
}

1057 #i‡!
ADB_HOST


1058 
	$should_dr›_¥ivûeges
() {

1059 #i‚de‡
ALLOW_ADBD_ROOT


1062 
£cuª
 = 0;

1063 
vÆue
[
PROPERTY_VALUE_MAX
];

1068 
	`¥›îty_gë
("ro.kî√l.qemu", 
vÆue
, "");

1069 i‡(
	`°rcmp
(
vÆue
, "1") != 0) {

1070 
	`¥›îty_gë
("ro.£cuª", 
vÆue
, "1");

1071 i‡(
	`°rcmp
(
vÆue
, "1") == 0) {

1073 
£cuª
 = 1;

1077 
	`¥›îty_gë
("ro.debuggabÀ", 
vÆue
, "");

1078 i‡(
	`°rcmp
(
vÆue
, "1") == 0) {

1079 
	`¥›îty_gë
("£rvi˚.adb.roŸ", 
vÆue
, "");

1080 i‡(
	`°rcmp
(
vÆue
, "1") == 0) {

1081 
£cuª
 = 0;

1086  
£cuª
;

1088 
	}
}

1091 
	$adb_maö
(
is_d´m⁄
, 
£rvî_p‹t
)

1093 #i‡!
ADB_HOST


1094 
p‹t
;

1095 
vÆue
[
PROPERTY_VALUE_MAX
];

1097 
	`umask
(000);

1100 
	`©exô
(
adb_˛ónup
);

1101 #ifde‡
HAVE_WIN32_PROC


1102 
	`SëC⁄sﬁeCålH™dÀr
–
˘æc_h™dÀr
, 
TRUE
 );

1103 #ñi‡
	`deföed
(
HAVE_FORKEXEC
)

1105 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

1108 
	`öô_å™•‹t_ªgi°øti⁄
();

1110 #i‡
ADB_HOST


1111 
HOST
 = 1;

1112 
	`usb_víd‹s_öô
();

1113 
	`usb_öô
();

1114 
	`loˇl_öô
(
DEFAULT_ADB_LOCAL_TRANSPORT_PORT
);

1115 
	`adb_auth_öô
();

1117 
loˇl_«me
[30];

1118 
	`buûd_loˇl_«me
(
loˇl_«me
, ÷oˇl_«me), 
£rvî_p‹t
);

1119 if(
	`ö°Æl_li°íî
(
loˇl_«me
, "*sm¨tsockë*", 
NULL
)) {

1120 
	`exô
(1);

1123 
	`¥›îty_gë
("ro.adb.£cuª", 
vÆue
, "0");

1124 
auth_íabÀd
 = !
	`°rcmp
(
vÆue
, "1");

1125 i‡(
auth_íabÀd
)

1126 
	`adb_auth_öô
();

1130 c⁄° * 
adb_exã∫Æ_°‹age
 = 
	`gëív
("ADB_EXTERNAL_STORAGE");

1131 i‡(
NULL
 !
adb_exã∫Æ_°‹age
) {

1132 
	`£ãnv
("EXTERNAL_STORAGE", 
adb_exã∫Æ_°‹age
, 1);

1134 
	`D
("Warning: ADB_EXTERNAL_STORAGE isÇot set. Leaving EXTERNAL_STORAGE"

1140 i‡(
	`should_dr›_¥ivûeges
()) {

1141 
__u£r_ˇp_hódî_°ru˘
 
hódî
;

1142 
__u£r_ˇp_d©a_°ru˘
 
ˇp
;

1144 i‡(
	`¥˘l
(
PR_SET_KEEPCAPS
, 1, 0, 0, 0) != 0) {

1145 
	`exô
(1);

1160 
gid_t
 
groups
[] = { 
AID_ADB
, 
AID_LOG
, 
AID_INPUT
, 
AID_INET
, 
AID_GRAPHICS
,

1161 
AID_NET_BT
, 
AID_NET_BT_ADMIN
, 
AID_SDCARD_R
, 
AID_SDCARD_RW
,

1162 
AID_MOUNT
, 
AID_NET_BW_STATS
 };

1163 i‡(
	`£tgroups
((
groups
)/(groups[0]), groups) != 0) {

1164 
	`exô
(1);

1168 i‡(
	`£tgid
(
AID_SHELL
) != 0) {

1169 
	`exô
(1);

1171 i‡(
	`£tuid
(
AID_SHELL
) != 0) {

1172 
	`exô
(1);

1176 
hódî
.
vîsi⁄
 = 
_LINUX_CAPABILITY_VERSION
;

1177 
hódî
.
pid
 = 0;

1178 
ˇp
.
ef„˘ive
 = c≠.
≥rmôãd
 = (1 << 
CAP_SYS_BOOT
);

1179 
ˇp
.
öhîôabÀ
 = 0;

1180 
	`ˇp£t
(&
hódî
, &
ˇp
);

1182 
	`D
("LocalÖort disabled\n");

1184 
loˇl_«me
[30];

1185 
	`buûd_loˇl_«me
(
loˇl_«me
, ÷oˇl_«me), 
£rvî_p‹t
);

1186 if(
	`ö°Æl_li°íî
(
loˇl_«me
, "*sm¨tsockë*", 
NULL
)) {

1187 
	`exô
(1);

1191 
usb
 = 0;

1192 i‡(
	`ac˚ss
(
USB_ADB_PATH
, 
F_OK
Ë=0 ||ác˚ss(
USB_FFS_ADB_EP0
, F_OK) == 0) {

1194 
	`usb_öô
();

1195 
usb
 = 1;

1201 
	`¥›îty_gë
("£rvi˚.adb.t˝.p‹t", 
vÆue
, "");

1202 i‡(!
vÆue
[0]) {

1203 
	`¥›îty_gë
("≥rsi°.adb.t˝.p‹t", 
vÆue
, "");

1205 i‡(
	`ssˇnf
(
vÆue
, "%d", &
p‹t
) == 1 &&Öort > 0) {

1206 
	`¥ötf
("usögÖ‹t=%d\n", 
p‹t
);

1208 
	`loˇl_öô
(
p‹t
);

1209 } i‡(!
usb
) {

1211 
	`loˇl_öô
(
DEFAULT_ADB_LOCAL_TRANSPORT_PORT
);

1214 
	`D
("adb_main():Öre init_jdwp()\n");

1215 
	`öô_jdwp
();

1216 
	`D
("adb_main():Öost init_jdwp()\n");

1219 i‡(
is_d´m⁄
)

1222 #ifde‡
HAVE_WIN32_PROC


1223 
DWORD
 
cou¡
;

1224 
	`WrôeFûe
–
	`GëStdH™dÀ
–
STD_OUTPUT_HANDLE
 ), "OK\n", 3, &
cou¡
, 
NULL
 );

1225 #ñi‡
	`deföed
(
HAVE_FORKEXEC
)

1226 
	`Ârötf
(
°dîr
, "OK\n");

1228 
	`°¨t_loggög
();

1230 
	`D
("EventÜoop starting\n");

1232 
	`fdevít_lo›
();

1234 
	`usb_˛ónup
();

1237 
	}
}

1239 #i‡
ADB_HOST


1240 
	$c⁄√˘_devi˚
(* 
ho°
, * 
buf„r
, 
buf„r_size
)

1242 
p‹t
, 
fd
;

1243 * 
p‹t°r
 = 
	`°rchr
(
ho°
, ':');

1244 
ho°buf
[100];

1245 
£rül
[100];

1247 
	`°∫˝y
(
ho°buf
, 
ho°
, (hostbuf) - 1);

1248 i‡(
p‹t°r
) {

1249 i‡(
p‹t°r
 - 
ho°
 >(
±rdiff_t
)(
ho°buf
)) {

1250 
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "bad ho°Çamê%s", 
ho°
);

1254 
ho°buf
[
p‹t°r
 - 
ho°
] = 0;

1255 i‡(
	`ssˇnf
(
p‹t°r
 + 1, "%d", &
p‹t
) == 0) {

1256 
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "badÖ‹ànumbî %s", 
p‹t°r
);

1260 
p‹t
 = 
DEFAULT_ADB_LOCAL_TRANSPORT_PORT
;

1263 
	`¢¥ötf
(
£rül
, (£rül), "%s:%d", 
ho°buf
, 
p‹t
);

1264 i‡(
	`föd_å™•‹t
(
£rül
)) {

1265 
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "Æªady c⁄√˘edÅÿ%s", 
£rül
);

1269 
fd
 = 
	`sockë_√tw‹k_˛õ¡
(
ho°buf
, 
p‹t
, 
SOCK_STREAM
);

1270 i‡(
fd
 < 0) {

1271 
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "u«bÀÅÿc⁄√˘Åÿ%s:%d", 
ho°
, 
p‹t
);

1275 
	`D
("˛õ¡: c⁄√˘ed o¿ªmŸê⁄ fd %d\n", 
fd
);

1276 
	`˛o£_⁄_exec
(
fd
);

1277 
	`dißbÀ_t˝_«gÀ
(
fd
);

1278 
	`ªgi°î_sockë_å™•‹t
(
fd
, 
£rül
, 
p‹t
, 0);

1279 
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "c⁄√˘edÅÿ%s", 
£rül
);

1280 
	}
}

1282 
	$c⁄√˘_emuœt‹
(* 
p‹t_•ec
, * 
buf„r
, 
buf„r_size
)

1284 * 
p‹t_£∑øt‹
 = 
	`°rchr
(
p‹t_•ec
, ',');

1285 i‡(!
p‹t_£∑øt‹
) {

1286 
	`¢¥ötf
(
buf„r
, 
buf„r_size
,

1288 
p‹t_•ec
);

1293 *
p‹t_£∑øt‹
++ = 0;

1294 
c⁄sﬁe_p‹t
 = 
	`°πﬁ
(
p‹t_•ec
, 
NULL
, 0);

1295 
adb_p‹t
 = 
	`°πﬁ
(
p‹t_£∑øt‹
, 
NULL
, 0);

1296 i‡(!(
c⁄sﬁe_p‹t
 > 0 && 
adb_p‹t
 > 0)) {

1297 *(
p‹t_£∑øt‹
 - 1) = ',';

1298 
	`¢¥ötf
(
buf„r
, 
buf„r_size
,

1300 
p‹t_•ec
);

1311 
©øn•‹t
* 
known_emuœt‹
 = 
	`föd_emuœt‹_å™•‹t_by_adb_p‹t
(
adb_p‹t
);

1312 i‡(
known_emuœt‹
 !
NULL
) {

1313 
	`¢¥ötf
(
buf„r
, 
buf„r_size
,

1314 "Emuœt‹ o¿p‹à%dáÃódyÑegi°îed.", 
adb_p‹t
);

1320 
ˇndid©e_¶Ÿ
 = 
	`gë_avaûabÀ_loˇl_å™•‹t_ödex
();

1321 i‡(
ˇndid©e_¶Ÿ
 < 0) {

1322 
	`¢¥ötf
(
buf„r
, 
buf„r_size
, "Cannotáccept moreÉmulators.");

1327 i‡(!
	`loˇl_c⁄√˘_¨bôøry_p‹ts
(
c⁄sﬁe_p‹t
, 
adb_p‹t
)) {

1328 
	`¢¥ötf
(
buf„r
, 
buf„r_size
,

1329 "C⁄√˘edÅÿemuœt‹ o¿p‹t†%d,%d", 
c⁄sﬁe_p‹t
, 
adb_p‹t
);

1331 
	`¢¥ötf
(
buf„r
, 
buf„r_size
,

1333 
c⁄sﬁe_p‹t
, 
adb_p‹t
);

1335 
	}
}

1338 
	$h™dÀ_ho°_ªque°
(*
£rvi˚
, 
å™•‹t_ty≥
 
ây≥
, * 
£rül
, 
ª∂y_fd
, 
asockë
 *
s
)

1340 
©øn•‹t
 *
å™•‹t
 = 
NULL
;

1341 
buf
[4096];

1343 if(!
	`°rcmp
(
£rvi˚
, "kill")) {

1344 
	`Ârötf
(
°dîr
,"adb server killed byÑemoteÑequest\n");

1345 
	`fÊush
(
°dout
);

1346 
	`adb_wrôe
(
ª∂y_fd
, "OKAY", 4);

1347 
	`usb_˛ónup
();

1348 
	`exô
(0);

1351 #i‡
ADB_HOST


1356 i‡(!
	`°∫cmp
(
£rvi˚
, "å™•‹t", 
	`°æí
("transport"))) {

1357 * 
îr‹_°rög
 = "unknown failure";

1358 
å™•‹t_ty≥
 
ty≥
 = 
kTøn•‹tAny
;

1360 i‡(!
	`°∫cmp
(
£rvi˚
, "å™•‹t-usb", 
	`°æí
("transport-usb"))) {

1361 
ty≥
 = 
kTøn•‹tUsb
;

1362 } i‡(!
	`°∫cmp
(
£rvi˚
, "å™•‹t-loˇl", 
	`°æí
("transport-local"))) {

1363 
ty≥
 = 
kTøn•‹tLoˇl
;

1364 } i‡(!
	`°∫cmp
(
£rvi˚
, "å™•‹t-™y", 
	`°æí
("transport-any"))) {

1365 
ty≥
 = 
kTøn•‹tAny
;

1366 } i‡(!
	`°∫cmp
(
£rvi˚
, "å™•‹t:", 
	`°æí
("transport:"))) {

1367 
£rvi˚
 +
	`°æí
("transport:");

1368 
£rül
 = 
£rvi˚
;

1371 
å™•‹t
 = 
	`acquúe_⁄e_å™•‹t
(
CS_ANY
, 
ty≥
, 
£rül
, &
îr‹_°rög
);

1373 i‡(
å™•‹t
) {

1374 
s
->
å™•‹t
 =Åransport;

1375 
	`adb_wrôe
(
ª∂y_fd
, "OKAY", 4);

1377 
	`£ndÁûmsg
(
ª∂y_fd
, 
îr‹_°rög
);

1383 i‡(!
	`°∫cmp
(
£rvi˚
, "devices", 7)) {

1384 
buf„r
[4096];

1385 
u£_l⁄g
 = !
	`°rcmp
(
£rvi˚
+7, "-l");

1386 i‡(
u£_l⁄g
 || 
£rvi˚
[7] == 0) {

1387 
	`mem£t
(
buf
, 0, (buf));

1388 
	`mem£t
(
buf„r
, 0, (buffer));

1389 
	`D
("Getting deviceÜist \n");

1390 
	`li°_å™•‹ts
(
buf„r
, (buf„r), 
u£_l⁄g
);

1391 
	`¢¥ötf
(
buf
, (buf), "OKAY%04x%s",()
	`°æí
(
buf„r
),buffer);

1392 
	`D
("Wrote deviceÜist \n");

1393 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1399 i‡(!
	`°∫cmp
(
£rvi˚
, "connect:", 8)) {

1400 
buf„r
[4096];

1401 * 
ho°
 = 
£rvi˚
 + 8;

1402 i‡(!
	`°∫cmp
(
ho°
, "emu:", 4)) {

1403 
	`c⁄√˘_emuœt‹
(
ho°
 + 4, 
buf„r
, (buffer));

1405 
	`c⁄√˘_devi˚
(
ho°
, 
buf„r
, (buffer));

1408 
	`¢¥ötf
(
buf
, (buf), "OKAY%04x%s",()
	`°æí
(
buf„r
), buffer);

1409 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1414 i‡(!
	`°∫cmp
(
£rvi˚
, "disconnect:", 11)) {

1415 
buf„r
[4096];

1416 
	`mem£t
(
buf„r
, 0, (buffer));

1417 * 
£rül
 = 
£rvi˚
 + 11;

1418 i‡(
£rül
[0] == 0) {

1420 
	`uƒegi°î_Æl_t˝_å™•‹ts
();

1422 
ho°buf
[100];

1424 i‡(!
	`°rchr
(
£rül
, ':')) {

1425 
	`¢¥ötf
(
ho°buf
, (ho°bufË- 1, "%s:5555", 
£rül
);

1426 
£rül
 = 
ho°buf
;

1428 
©øn•‹t
 *
t
 = 
	`föd_å™•‹t
(
£rül
);

1430 i‡(
t
) {

1431 
	`uƒegi°î_å™•‹t
(
t
);

1433 
	`¢¥ötf
(
buf„r
, (buf„r), "Nÿsuch devi˚ %s", 
£rül
);

1437 
	`¢¥ötf
(
buf
, (buf), "OKAY%04x%s",()
	`°æí
(
buf„r
), buffer);

1438 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1443 i‡(!
	`°rcmp
(
£rvi˚
, "version")) {

1444 
vîsi⁄
[12];

1445 
	`¢¥ötf
(
vîsi⁄
,  vîsi⁄, "%04x", 
ADB_SERVER_VERSION
);

1446 
	`¢¥ötf
(
buf
,  buf, "OKAY%04x%s", ()
	`°æí
(
vîsi⁄
), version);

1447 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1451 if(!
	`°∫cmp
(
£rvi˚
,"gë-£rü o",
	`°æí
("get-serialno"))) {

1452 *
out
 = "unknown";

1453 
å™•‹t
 = 
	`acquúe_⁄e_å™•‹t
(
CS_ANY
, 
ây≥
, 
£rül
, 
NULL
);

1454 i‡(
å™•‹t
 &&Åøn•‹t->
£rül
) {

1455 
out
 = 
å™•‹t
->
£rül
;

1457 
	`¢¥ötf
(
buf
,  buf, "OKAY%04x%s",()
	`°æí
(
out
),out);

1458 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1461 if(!
	`°∫cmp
(
£rvi˚
,"gë-dev∑th",
	`°æí
("get-devpath"))) {

1462 *
out
 = "unknown";

1463 
å™•‹t
 = 
	`acquúe_⁄e_å™•‹t
(
CS_ANY
, 
ây≥
, 
£rül
, 
NULL
);

1464 i‡(
å™•‹t
 &&Åøn•‹t->
dev∑th
) {

1465 
out
 = 
å™•‹t
->
dev∑th
;

1467 
	`¢¥ötf
(
buf
,  buf, "OKAY%04x%s",()
	`°æí
(
out
),out);

1468 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1472 i‡(!
	`°∫cmp
(
£rvi˚
,"emulator:",9)) {

1473 
p‹t
 = 
	`©oi
(
£rvi˚
+9);

1474 
	`loˇl_c⁄√˘
(
p‹t
);

1480 if(!
	`°∫cmp
(
£rvi˚
,"forward:",8) || !strncmp(service,"killforward:",12)) {

1481 *
loˇl
, *
ªmŸe
, *
îr
;

1482 
r
;

1483 
©øn•‹t
 *
å™•‹t
;

1485 
¸óãF‹w¨d
 = 
	`°∫cmp
(
£rvi˚
,"kill",4);

1487 
loˇl
 = 
£rvi˚
 + (
¸óãF‹w¨d
 ? 8 : 12);

1488 
ªmŸe
 = 
	`°rchr
(
loˇl
,';');

1489 if(
ªmŸe
 == 0) {

1490 
	`£ndÁûmsg
(
ª∂y_fd
, "malformed forward spec");

1494 *
ªmŸe
++ = 0;

1495 if((
loˇl
[0] =0Ë|| (
ªmŸe
[0] == 0) || (remote[0] == '*')){

1496 
	`£ndÁûmsg
(
ª∂y_fd
, "malformed forward spec");

1500 
å™•‹t
 = 
	`acquúe_⁄e_å™•‹t
(
CS_ANY
, 
ây≥
, 
£rül
, &
îr
);

1501 i‡(!
å™•‹t
) {

1502 
	`£ndÁûmsg
(
ª∂y_fd
, 
îr
);

1506 i‡(
¸óãF‹w¨d
) {

1507 
r
 = 
	`ö°Æl_li°íî
(
loˇl
, 
ªmŸe
, 
å™•‹t
);

1509 
r
 = 
	`ªmove_li°íî
(
loˇl
, 
ªmŸe
, 
å™•‹t
);

1511 if(
r
 == 0) {

1513 
	`wrôex
(
ª∂y_fd
, "OKAYOKAY", 8);

1517 i‡(
¸óãF‹w¨d
) {

1518 
	`£ndÁûmsg
(
ª∂y_fd
, (
r
 == -1) ? "cannotÑebind smartsocket" : "cannot bind socket");

1520 
	`£ndÁûmsg
(
ª∂y_fd
, "cannotÑemoveÜistener");

1525 if(!
	`°∫cmp
(
£rvi˚
,"gë-°©e",
	`°æí
("get-state"))) {

1526 
å™•‹t
 = 
	`acquúe_⁄e_å™•‹t
(
CS_ANY
, 
ây≥
, 
£rül
, 
NULL
);

1527 *
°©e
 = 
	`c⁄√˘i⁄_°©e_«me
(
å™•‹t
);

1528 
	`¢¥ötf
(
buf
,  buf, "OKAY%04x%s",()
	`°æí
(
°©e
),state);

1529 
	`wrôex
(
ª∂y_fd
, 
buf
, 
	`°æí
(buf));

1533 
	}
}

1535 #i‡!
ADB_HOST


1536 
	gªcovîy_mode
 = 0;

1539 
	$maö
(
¨gc
, **
¨gv
)

1541 
	`check_chù
();

1542 #i‡
ADB_HOST


1543 
	`adb_sysdïs_öô
();

1544 
	`adb_åa˚_öô
();

1545 
	`D
("Handling commandline()\n");

1546  
	`adb_comm™dlöe
(
¨gc
 - 1, 
¨gv
 + 1);

1550 
	`¥ötf
("initádb main\n");

1551 
	`adb_qemu_åa˚_öô
();

1552 if((
¨gc
 > 1Ë&& (!
	`°rcmp
(
¨gv
[1],"recovery"))) {

1553 
adb_devi˚_b™√r
 = "recovery";

1554 
ªcovîy_mode
 = 1;

1557 
	`°¨t_devi˚_log
();

1558 
	`D
("Handling main()\n");

1559 
	`¥ötf
("Handling main()\n");

1560  
	`adb_maö
(0, 
DEFAULT_ADB_PORT
);

1562 
	}
}

	@adb.h

17 #i‚de‡
__ADB_H


18 
	#__ADB_H


	)

20 
	~<limôs.h
>

22 
	~"å™•‹t.h
"

24 
	#MAX_PAYLOAD
 4096

	)

26 
	#A_SYNC
 0x434e5953

	)

27 
	#A_CNXN
 0x4e584e43

	)

28 
	#A_OPEN
 0x4e45504f

	)

29 
	#A_OKAY
 0x59414b4f

	)

30 
	#A_CLSE
 0x45534c43

	)

31 
	#A_WRTE
 0x45545257

	)

32 
	#A_AUTH
 0x48545541

	)

34 
	#A_VERSION
 0x01000000

35 

	)

36 
	#ADB_VERSION_MAJOR
 1

37 
	#ADB_VERSION_MINOR
 0

38 

	)

39 
	#ADB_SERVER_VERSION
 31

40 

	)

41 
amesßge
 
	tamesßge
;

42 
≠ackë
 
	t≠ackë
;

43 
asockë
 
	tasockë
;

44 
Æi°íî
 
	tÆi°íî
;

45 
a£rvi˚
 
	ta£rvi˚
;

46 
©øn•‹t
 
	t©øn•‹t
;

47 
adisc⁄√˘
 
	tadisc⁄√˘
;

48 
usb_h™dÀ
 
	tusb_h™dÀ
;

50 
	samesßge
 {

51 
	mcomm™d
;

52 
	m¨g0
;

53 
	m¨g1
;

54 
	md©a_Àngth
;

55 
	md©a_check
;

56 
	mmagic
;

59 
	s≠ackë


61 
≠ackë
 *
	m√xt
;

63 
	mÀn
;

64 *
	m±r
;

66 
amesßge
 
	mmsg
;

67 
	md©a
[
MAX_PAYLOAD
];

74 
	sasockë
 {

78 
asockë
 *
	m√xt
;

79 
asockë
 *
	m¥ev
;

83 
	mid
;

88 
	m˛osög
;

93 
	mexô_⁄_˛o£
;

98 
asockë
 *
	m≥î
;

104 
fdevít
 
	mfde
;

105 
	mfd
;

109 
≠ackë
 *
	mpkt_fú°
;

110 
≠ackë
 *
	mpkt_œ°
;

118 (*
	míqueue
)(
asockë
 *
	ms
, 
≠ackë
 *
	mpkt
);

123 (*
	mªady
)(
asockë
 *
	ms
);

129 (*
	m˛o£
)(
asockë
 *
	ms
);

132 *
	mexåa
;

135 
©øn•‹t
 *
	må™•‹t
;

144 
	sadisc⁄√˘


146 (*
	mfunc
)(* 
	m›aque
, 
©øn•‹t
* 
	mt
);

147 * 
	m›aque
;

148 
adisc⁄√˘
* 
	m√xt
;

149 
adisc⁄√˘
* 
	m¥ev
;

162 
	eå™•‹t_ty≥
 {

163 
	mkTøn•‹tUsb
,

164 
	mkTøn•‹tLoˇl
,

165 
	mkTøn•‹tAny
,

166 
	mkTøn•‹tHo°
,

167 } 
	tå™•‹t_ty≥
;

169 
	#TOKEN_SIZE
 20

	)

171 
	s©øn•‹t


173 
©øn•‹t
 *
	m√xt
;

174 
©øn•‹t
 *
	m¥ev
;

176 (*
	mªad_‰om_ªmŸe
)(
≠ackë
 *
	mp
, 
©øn•‹t
 *
	mt
);

177 (*
	mwrôe_to_ªmŸe
)(
≠ackë
 *
	mp
, 
©øn•‹t
 *
	mt
);

178 (*
	m˛o£
)(
©øn•‹t
 *
	mt
);

179 (*
	mkick
)(
©øn•‹t
 *
	mt
);

181 
	mfd
;

182 
	må™•‹t_sockë
;

183 
fdevít
 
	må™•‹t_fde
;

184 
	mªf_cou¡
;

185 
	msync_tokí
;

186 
	mc⁄√˘i⁄_°©e
;

187 
	m⁄löe
;

188 
å™•‹t_ty≥
 
	mty≥
;

191 
usb_h™dÀ
 *
	musb
;

192 
	msfd
;

195 *
	m£rül
;

196 *
	m¥odu˘
;

197 *
	mmodñ
;

198 *
	mdevi˚
;

199 *
	mdev∑th
;

200 
	madb_p‹t
;

203 
	mkicked
;

204 
adisc⁄√˘
 
	mdisc⁄√˘s
;

206 *
	mkey
;

207 
	mtokí
[
TOKEN_SIZE
];

208 
fdevít
 
	mauth_fde
;

209 
	mÁûed_auth_©ãm±s
;

222 
	sÆi°íî


224 
Æi°íî
 *
	m√xt
;

225 
Æi°íî
 *
	m¥ev
;

227 
fdevít
 
	mfde
;

228 
	mfd
;

230 c⁄° *
	mloˇl_«me
;

231 c⁄° *
	mc⁄√˘_to
;

232 
©øn•‹t
 *
	må™•‹t
;

233 
adisc⁄√˘
 
	mdisc⁄√˘
;

237 
¥öt_∑ckë
(c⁄° *
œbñ
, 
≠ackë
 *
p
);

239 
asockë
 *
föd_loˇl_sockë
(
id
);

240 
ö°Æl_loˇl_sockë
(
asockë
 *
s
);

241 
ªmove_sockë
(
asockë
 *
s
);

242 
˛o£_Æl_sockës
(
©øn•‹t
 *
t
);

244 
	#LOCAL_CLIENT_PREFIX
 "emuœt‹-"

	)

246 
asockë
 *
¸óã_loˇl_sockë
(
fd
);

247 
asockë
 *
¸óã_loˇl_£rvi˚_sockë
(c⁄° *
de°ö©i⁄
);

249 
asockë
 *
¸óã_ªmŸe_sockë
(
id
, 
©øn•‹t
 *
t
);

250 
c⁄√˘_to_ªmŸe
(
asockë
 *
s
, c⁄° *
de°ö©i⁄
);

251 
c⁄√˘_to_sm¨tsockë
(
asockë
 *
s
);

253 
Áèl
(c⁄° *
fmt
, ...);

254 
Áèl_î∫o
(c⁄° *
fmt
, ...);

256 
h™dÀ_∑ckë
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
);

257 
£nd_∑ckë
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
);

259 
gë_my_∑th
(*
s
, 
size_t
 
maxLí
);

260 
œunch_£rvî
(
£rvî_p‹t
);

261 
adb_maö
(
is_d´m⁄
, 
£rvî_p‹t
);

267 
öô_å™•‹t_ªgi°øti⁄
();

268 
li°_å™•‹ts
(*
buf
, 
size_t
 
bufsize
, 
l⁄g_li°ög
);

269 
upd©e_å™•‹ts
();

271 
asockë
* 
¸óã_devi˚_åackî
();

278 
©øn•‹t
 *
acquúe_⁄e_å™•‹t
(
°©e
, 
å™•‹t_ty≥
 
ây≥
, c⁄° * 
£rül
, **
îr‹_out
);

279 
add_å™•‹t_disc⁄√˘
–
©øn•‹t
* 
t
, 
adisc⁄√˘
* 
dis
 );

280 
ªmove_å™•‹t_disc⁄√˘
–
©øn•‹t
* 
t
, 
adisc⁄√˘
* 
dis
 );

281 
run_å™•‹t_disc⁄√˘s
–
©øn•‹t
* 
t
 );

282 
kick_å™•‹t
–
©øn•‹t
* 
t
 );

285 #i‡
ADB_HOST


286 
gë_avaûabÀ_loˇl_å™•‹t_ödex
();

288 
öô_sockë_å™•‹t
(
©øn•‹t
 *
t
, 
s
, 
p‹t
, 
loˇl
);

289 
öô_usb_å™•‹t
(
©øn•‹t
 *
t
, 
usb_h™dÀ
 *
usb
, 
°©e
);

292 
˛o£_usb_devi˚s
();

295 
ªgi°î_sockë_å™•‹t
(
s
, c⁄° *
£rül
, 
p‹t
, 
loˇl
);

298 
uƒegi°î_å™•‹t
(
©øn•‹t
 *
t
);

299 
uƒegi°î_Æl_t˝_å™•‹ts
();

301 
ªgi°î_usb_å™•‹t
(
usb_h™dÀ
 *
h
, c⁄° *
£rül
, c⁄° *
dev∑th
, 
wrôóbÀ
);

304 
uƒegi°î_usb_å™•‹t
(
usb_h™dÀ
 *
usb
);

306 
©øn•‹t
 *
föd_å™•‹t
(c⁄° *
£rül
);

307 #i‡
ADB_HOST


308 
©øn•‹t
* 
föd_emuœt‹_å™•‹t_by_adb_p‹t
(
adb_p‹t
);

311 
£rvi˚_to_fd
(c⁄° *
«me
);

312 #i‡
ADB_HOST


313 
asockë
 *
ho°_£rvi˚_to_sockë
(c⁄° * 
«me
, c⁄° *
£rül
);

316 #i‡!
ADB_HOST


317 
öô_jdwp
();

318 
asockë
* 
¸óã_jdwp_£rvi˚_sockë
();

319 
asockë
* 
¸óã_jdwp_åackî_£rvi˚_sockë
();

320 
¸óã_jdwp_c⁄√˘i⁄_fd
(
jdwp_pid
);

323 #i‡!
ADB_HOST


325 
	mBACKUP
,

326 
	mRESTORE


327 } 
	tBackupO≥øti⁄
;

328 
backup_£rvi˚
(
BackupO≥øti⁄
 
›î©i⁄
, * 
¨gs
);

329 
‰amebuf„r_£rvi˚
(
fd
, *
cookõ
);

330 
log_£rvi˚
(
fd
, *
cookõ
);

331 
ªmou¡_£rvi˚
(
fd
, *
cookõ
);

332 * 
gë_log_fûe_∑th
(c⁄° * 
log_«me
);

336 
≠ackë
 *
gë_≠ackë
();

337 
put_≠ackë
(
≠ackë
 *
p
);

339 
check_hódî
(
≠ackë
 *
p
);

340 
check_d©a
(
≠ackë
 *
p
);

344 
	#ADB_TRACE
 1

	)

351 
	mTRACE_ADB
 = 0,

352 
	mTRACE_SOCKETS
,

353 
	mTRACE_PACKETS
,

354 
	mTRACE_TRANSPORT
,

355 
	mTRACE_RWX
,

356 
	mTRACE_USB
,

357 
	mTRACE_SYNC
,

358 
	mTRACE_SYSDEPS
,

359 
	mTRACE_JDWP
,

360 
	mTRACE_SERVICES
,

361 
	mTRACE_AUTH
,

362 } 
	tAdbTø˚
;

364 #i‡
ADB_TRACE


366 #i‡!
ADB_HOST


374 
adb_qemu_åa˚
(c⁄° * 
fmt
, ...);

376 
	#DQ
(...Ë
	`adb_qemu_åa˚
(
__VA_ARGS__
)

	)

378 
	#DQ
(...Ë(()0)

	)

381 
adb_åa˚_mask
;

382 
adb_åa˚_ouçut_cou¡
;

383 
adb_åa˚_öô
();

385 
	#ADB_TRACING
 ((
adb_åa˚_mask
 & (1 << 
TRACE_TAG
)Ë!0)

	)

388 
	#D
(...) \

390 
	`¥ötf
("[adbd D]"
__VA_ARGS__
); \

391 i‡(
ADB_TRACING
) { \

392 
ßve_î∫o
 = 
î∫o
; \

393 
	`adb_muãx_lock
(&
D_lock
); \

394 
	`Ârötf
(
°dîr
, "%s::%s():", \

395 
__FILE__
, 
__FUNCTION__
); \

396 
î∫o
 = 
ßve_î∫o
; \

397 
	`Ârötf
(
°dîr
, 
__VA_ARGS__
 ); \

398 
	`fÊush
(
°dîr
); \

399 
	`adb_muãx_u∆ock
(&
D_lock
); \

400 
î∫o
 = 
ßve_î∫o
; \

402 } 0)

	)

403 
	#DR
(...) \

405 
	`¥ötf
("[adbd DR]"
__VA_ARGS__
); \

406 i‡(
ADB_TRACING
) { \

407 
ßve_î∫o
 = 
î∫o
; \

408 
	`adb_muãx_lock
(&
D_lock
); \

409 
î∫o
 = 
ßve_î∫o
; \

410 
	`Ârötf
(
°dîr
, 
__VA_ARGS__
 ); \

411 
	`fÊush
(
°dîr
); \

412 
	`adb_muãx_u∆ock
(&
D_lock
); \

413 
î∫o
 = 
ßve_î∫o
; \

415 } 0)

	)

417 
	#D
(...Ë(()0)

	)

418 
	#DR
(...Ë(()0)

	)

419 
	#ADB_TRACING
 0

	)

423 #i‡!
DEBUG_PACKETS


424 
	#¥öt_∑ckë
(
èg
,
p
Ëdÿ{} 0)

	)

427 #i‡
ADB_HOST_ON_TARGET


431 
	#DEFAULT_ADB_PORT
 5038

	)

433 
	#DEFAULT_ADB_PORT
 5037

	)

436 
	#DEFAULT_ADB_LOCAL_TRANSPORT_PORT
 5555

	)

438 
	#ADB_CLASS
 0xff

	)

439 
	#ADB_SUBCLASS
 0x42

	)

440 
	#ADB_PROTOCOL
 0x1

	)

443 
loˇl_öô
(
p‹t
);

444 
loˇl_c⁄√˘
(
p‹t
);

445 
loˇl_c⁄√˘_¨bôøry_p‹ts
(
c⁄sﬁe_p‹t
, 
adb_p‹t
);

448 
usb_öô
();

449 
usb_˛ónup
();

450 
usb_wrôe
(
usb_h™dÀ
 *
h
, c⁄° *
d©a
, 
Àn
);

451 
usb_ªad
(
usb_h™dÀ
 *
h
, *
d©a
, 
Àn
);

452 
usb_˛o£
(
usb_h™dÀ
 *
h
);

453 
usb_kick
(
usb_h™dÀ
 *
h
);

456 #i‡
ADB_HOST


457 
is_adb_öãrÁ˚
(
vid
, 
pid
, 
usb_˛ass
, 
usb_sub˛ass
, 
usb_¥Ÿocﬁ
);

460 
ho°_to_À32
(
n
);

461 
adb_comm™dlöe
(
¨gc
, **
¨gv
);

463 
c⁄√˘i⁄_°©e
(
©øn•‹t
 *
t
);

465 
	#CS_ANY
 -1

	)

466 
	#CS_OFFLINE
 0

	)

467 
	#CS_BOOTLOADER
 1

	)

468 
	#CS_DEVICE
 2

	)

469 
	#CS_HOST
 3

	)

470 
	#CS_RECOVERY
 4

	)

471 
	#CS_NOPERM
 5

	)

472 
	#CS_SIDELOAD
 6

	)

474 
HOST
;

475 
SHELL_EXIT_NOTIFY_FD
;

477 
	#CHUNK_SIZE
 (64*1024)

	)

479 #i‡!
ADB_HOST


480 
	#USB_ADB_PATH
 "/dev/™droid_adb"

	)

482 
	#USB_FFS_ADB_PATH
 "/dev/usb-ffs/adb/"

	)

483 
	#USB_FFS_ADB_EP
(
x
Ë
USB_FFS_ADB_PATH
#x

	)

485 
	#USB_FFS_ADB_EP0
 
	`USB_FFS_ADB_EP
(
ï0
)

	)

486 
	#USB_FFS_ADB_OUT
 
	`USB_FFS_ADB_EP
(
ï1
)

	)

487 
	#USB_FFS_ADB_IN
 
	`USB_FFS_ADB_EP
(
ï2
)

	)

490 
£ndÁûmsg
(
fd
, c⁄° *
ªas⁄
);

491 
h™dÀ_ho°_ªque°
(*
£rvi˚
, 
å™•‹t_ty≥
 
ây≥
, * 
£rül
, 
ª∂y_fd
, 
asockë
 *
s
);

	@adb_auth.h

17 #i‚de‡
__ADB_AUTH_H


18 
	#__ADB_AUTH_H


	)

20 
adb_auth_öô
();

21 
adb_auth_vîifõd
(
©øn•‹t
 *
t
);

25 
	#ADB_AUTH_TOKEN
 1

	)

27 
	#ADB_AUTH_SIGNATURE
 2

	)

28 
	#ADB_AUTH_RSAPUBLICKEY
 3

	)

30 #i‡
ADB_HOST


32 
adb_auth_sign
(*
key
, *
tokí
, 
size_t
 
tokí_size
, *
sig
);

33 *
adb_auth_√xtkey
(*
cuºít
);

34 
adb_auth_gë_u£rkey
(*
d©a
, 
size_t
 
Àn
);

36 
ölöe
 
	$adb_auth_gíî©e_tokí
(*
tokí
, 
size_t
 
tokí_size
Ë{  0; 
	}
}

37 
ölöe
 
	$adb_auth_vîify
(*
tokí
, *
sig
, 
sigÀn
Ë{  0; 
	}
}

38 
ölöe
 
	$adb_auth_c⁄fúm_key
(*
d©a
, 
size_t
 
Àn
, 
©øn•‹t
 *
t
Ë{ 
	}
}

39 
ölöe
 
	$adb_auth_ªlﬂd_keys
(Ë{ 
	}
}

43 
ölöe
 
	$adb_auth_sign
(* 
key
, *
tokí
, 
size_t
 
tokí_size
, *
sig
Ë{  0; 
	}
}

44 
ölöe
 *
	$adb_auth_√xtkey
(*
cuºít
Ë{  
NULL
; 
	}
}

45 
ölöe
 
	$adb_auth_gë_u£rkey
(*
d©a
, 
size_t
 
Àn
Ë{  0; 
	}
}

47 
adb_auth_gíî©e_tokí
(*
tokí
, 
size_t
 
tokí_size
);

48 
adb_auth_vîify
(*
tokí
, *
sig
, 
sigÀn
);

49 
adb_auth_c⁄fúm_key
(*
d©a
, 
size_t
 
Àn
, 
©øn•‹t
 *
t
);

50 
adb_auth_ªlﬂd_keys
();

	@adb_auth_client.c

17 
	~<°dio.h
>

18 
	~<°rög.h
>

19 
	~<ªsﬁv.h
>

20 
	~<cutûs/li°.h
>

21 
	~<cutûs/sockës.h
>

23 
	~"sysdïs.h
"

24 
	~"adb.h
"

25 
	~"adb_auth.h
"

26 
	~"fdevít.h
"

27 
	~"mö¸y±/rß.h
"

29 
	#TRACE_TAG
 
TRACE_AUTH


	)

32 
	sadb_public_key
 {

33 
li°node
 
	mnode
;

34 
RSAPublicKey
 
	mkey
;

37 
li°node
 
	gkey_li°
;

39 *
	gkey_∑ths
[] = {

42 
NULL


45 
fdevít
 
	gli°íî_fde
;

46 
	g‰amew‹k_fd
 = -1;

49 
	$ªad_keys
(c⁄° *
fûe
, 
li°node
 *
li°
)

51 
adb_public_key
 *
key
;

52 
FILE
 *
f
;

53 
buf
[
MAX_PAYLOAD
];

54 *
£p
;

55 
ªt
;

57 
f
 = 
	`f›í
(
fûe
, "r");

58 i‡(!
f
) {

59 
	`D
("C™'à›í '%s'\n", 
fûe
);

63 
	`fgës
(
buf
, (buf), 
f
)) {

65 
key
 = 
	`ˇŒoc
(1, (*key) + 4);

66 i‡(!
key
) {

67 
	`D
("Can't malloc key\n");

71 
£p
 = 
	`°Ωbrk
(
buf
, " \t");

72 i‡(
£p
)

73 *
£p
 = '\0';

75 i‡(
ªt
 !(
key
->key)) {

76 
	`D
("%s: InvÆid ba£64 d©®ªt=%d\n", 
fûe
, 
ªt
);

77 
	`‰ì
(
key
);

81 i‡(
key
->key.
Àn
 !
RSANUMWORDS
) {

82 
	`D
("%s: InvÆid keyÜí %d\n", 
fûe
, 
key
->key.
Àn
);

83 
	`‰ì
(
key
);

87 
	`li°_add_èû
(
li°
, &
key
->
node
);

90 
	`f˛o£
(
f
);

91 
	}
}

93 
	$‰ì_keys
(
li°node
 *
li°
)

95 
li°node
 *
ôem
;

97 !
	`li°_em±y
(
li°
)) {

98 
ôem
 = 
	`li°_hód
(
li°
);

99 
	`li°_ªmove
(
ôem
);

100 
	`‰ì
(
	`node_to_ôem
(
ôem
, 
adb_public_key
, 
node
));

102 
	}
}

104 
	$adb_auth_ªlﬂd_keys
()

106 *
∑th
;

107 **
∑ths
 = 
key_∑ths
;

108 
°©
 
buf
;

110 
	`‰ì_keys
(&
key_li°
);

112 (
∑th
 = *
∑ths
++)) {

113 i‡(!
	`°©
(
∑th
, &
buf
)) {

114 
	`D
("Lﬂdög key†‰om '%s'\n", 
∑th
);

115 
	`ªad_keys
(
∑th
, &
key_li°
);

118 
	}
}

120 
	$adb_auth_gíî©e_tokí
(*
tokí
, 
size_t
 
tokí_size
)

122 
FILE
 *
f
;

123 
ªt
;

125 
f
 = 
	`f›í
("/dev/urandom", "r");

126 i‡(!
f
)

129 
ªt
 = 
	`‰ód
(
tokí
, 
tokí_size
, 1, 
f
);

131 
	`f˛o£
(
f
);

132  
ªt
 * 
tokí_size
;

133 
	}
}

135 
	$adb_auth_vîify
(*
tokí
, *
sig
, 
sigÀn
)

137 
li°node
 *
ôem
;

138 
adb_public_key
 *
key
;

139 
ªt
;

141 i‡(
sigÀn
 !
RSANUMBYTES
)

144 
	`li°_f‹_óch
(
ôem
, &
key_li°
) {

145 
key
 = 
	`node_to_ôem
(
ôem
, 
adb_public_key
, 
node
);

146 
ªt
 = 
	`RSA_vîify
(&
key
->key, 
sig
, 
sigÀn
, 
tokí
);

147 i‡(
ªt
)

152 
	}
}

154 
	$adb_auth_evít
(
fd
, 
evíts
, *
d©a
)

156 
©øn•‹t
 *
t
 = 
d©a
;

157 
ª•⁄£
[2];

158 
ªt
;

160 i‡(
evíts
 & 
FDE_READ
) {

161 
ªt
 = 
	`unix_ªad
(
fd
, 
ª•⁄£
, (response));

162 i‡(
ªt
 < 0) {

163 
	`D
("Disconnect");

164 
	`fdevít_ªmove
(&
t
->
auth_fde
);

165 
‰amew‹k_fd
 = -1;

167 i‡(
ªt
 =2 && 
ª•⁄£
[0] == 'O' &&Ñesponse[1] == 'K') {

168 
	`adb_auth_ªlﬂd_keys
();

169 
	`adb_auth_vîifõd
(
t
);

172 
	}
}

174 
	$adb_auth_c⁄fúm_key
(*
key
, 
size_t
 
Àn
, 
©øn•‹t
 *
t
)

176 
msg
[
MAX_PAYLOAD
];

177 
ªt
;

179 i‡(
‰amew‹k_fd
 < 0) {

180 
	`D
("ClientÇot connected\n");

184 i‡(
key
[
Àn
 - 1] != '\0') {

185 
	`D
("Key must beáÇull-terminated string\n");

189 
ªt
 = 
	`¢¥ötf
(
msg
, (msg), "PK%s", 
key
);

190 i‡(
ªt
 >(sig√d)(
msg
)) {

191 
	`D
("KeyÅoÿl⁄g.Ñë=%d", 
ªt
);

194 
	`D
("Sídög '%s'\n", 
msg
);

196 
ªt
 = 
	`unix_wrôe
(
‰amew‹k_fd
, 
msg
,Ñet);

197 i‡(
ªt
 < 0) {

198 
	`D
("FaûedÅÿwrôêPK,Éºno=%d\n", 
î∫o
);

202 
	`fdevít_ö°Æl
(&
t
->
auth_fde
, 
‰amew‹k_fd
, 
adb_auth_evít
,Å);

203 
	`fdevít_add
(&
t
->
auth_fde
, 
FDE_READ
);

204 
	}
}

206 
	$adb_auth_li°íî
(
fd
, 
evíts
, *
d©a
)

208 
sockaddr
 
addr
;

209 
sockÀn_t
 
Æí
;

210 
s
;

212 
Æí
 = (
addr
);

214 
s
 = 
	`adb_sockë_ac˚±
(
fd
, &
addr
, &
Æí
);

215 i‡(
s
 < 0) {

216 
	`D
("FaûedÅÿac˚±:Éºno=%d\n", 
î∫o
);

220 
‰amew‹k_fd
 = 
s
;

221 
	}
}

223 
	$adb_auth_öô
()

225 
fd
, 
ªt
;

227 
	`li°_öô
(&
key_li°
);

228 
	`adb_auth_ªlﬂd_keys
();

230 
fd
 = 
	`™droid_gë_c⁄åﬁ_sockë
("adbd");

231 i‡(
fd
 < 0) {

232 
	`D
("FailedÅo getádbd socket\n");

236 
ªt
 = 
	`li°í
(
fd
, 4);

237 i‡(
ªt
 < 0) {

238 
	`D
("FaûedÅÿli°í o¿'%d'\n", 
fd
);

242 
	`fdevít_ö°Æl
(&
li°íî_fde
, 
fd
, 
adb_auth_li°íî
, 
NULL
);

243 
	`fdevít_add
(&
li°íî_fde
, 
FDE_READ
);

244 
	}
}

	@adb_auth_host.c

17 
	~<°dio.h
>

19 #ifde‡
_WIN32


20 
	#WIN32_LEAN_AND_MEAN


	)

21 
	~"wödows.h
"

22 
	~"shlobj.h
"

24 
	~<sys/ty≥s.h
>

25 
	~<sys/°©.h
>

26 
	~<uni°d.h
>

28 
	~<°rög.h
>

30 
	~"sysdïs.h
"

31 
	~"adb.h
"

32 
	~"adb_auth.h
"

36 
	#RSA_vîify
 
RSA_vîify_mö¸y±


	)

37 
	~"mö¸y±/rß.h
"

38 #unde‡
RSA_vîify


40 
	~<cutûs/li°.h
>

42 
	~<›ís¶/evp.h
>

43 
	~<›ís¶/obje˘s.h
>

44 
	~<›ís¶/≥m.h
>

45 
	~<›ís¶/rß.h
>

46 
	~<›ís¶/sha.h
>

48 
	#TRACE_TAG
 
TRACE_AUTH


	)

50 
	#ANDROID_PATH
 ".™droid"

	)

51 
	#ADB_KEY_FILE
 "adbkey"

	)

54 
	sadb_¥iv©e_key
 {

55 
li°node
 
	mnode
;

56 
RSA
 *
	mrß
;

59 
li°node
 
	gkey_li°
;

63 
	$RSA_to_RSAPublicKey
(
RSA
 *
rß
, 
RSAPublicKey
 *
pkey
)

65 
ªt
 = 1;

66 
i
;

68 
BN_CTX
* 
˘x
 = 
	`BN_CTX_√w
();

69 
BIGNUM
* 
r32
 = 
	`BN_√w
();

70 
BIGNUM
* 
º
 = 
	`BN_√w
();

71 
BIGNUM
* 
r
 = 
	`BN_√w
();

72 
BIGNUM
* 
ªm
 = 
	`BN_√w
();

73 
BIGNUM
* 
n
 = 
	`BN_√w
();

74 
BIGNUM
* 
n0öv
 = 
	`BN_√w
();

76 i‡(
	`RSA_size
(
rß
Ë!
RSANUMBYTES
) {

77 
ªt
 = 0;

78 
out
;

81 
	`BN_£t_bô
(
r32
, 32);

82 
	`BN_c›y
(
n
, 
rß
->n);

83 
	`BN_£t_bô
(
r
, 
RSANUMWORDS
 * 32);

84 
	`BN_mod_sqr
(
º
, 
r
, 
n
, 
˘x
);

85 
	`BN_div
(
NULL
, 
ªm
, 
n
, 
r32
, 
˘x
);

86 
	`BN_mod_övî£
(
n0öv
, 
ªm
, 
r32
, 
˘x
);

88 
pkey
->
Àn
 = 
RSANUMWORDS
;

89 
pkey
->
n0öv
 = 0 - 
	`BN_gë_w‹d
(n0inv);

90 
i
 = 0; i < 
RSANUMWORDS
; i++) {

91 
	`BN_div
(
º
, 
ªm
,Ñr, 
r32
, 
˘x
);

92 
pkey
->
º
[
i
] = 
	`BN_gë_w‹d
(
ªm
);

93 
	`BN_div
(
n
, 
ªm
,Ç, 
r32
, 
˘x
);

94 
pkey
->
n
[
i
] = 
	`BN_gë_w‹d
(
ªm
);

96 
pkey
->
exp⁄ít
 = 
	`BN_gë_w‹d
(
rß
->
e
);

98 
out
:

99 
	`BN_‰ì
(
n0öv
);

100 
	`BN_‰ì
(
n
);

101 
	`BN_‰ì
(
ªm
);

102 
	`BN_‰ì
(
r
);

103 
	`BN_‰ì
(
º
);

104 
	`BN_‰ì
(
r32
);

105 
	`BN_CTX_‰ì
(
˘x
);

107  
ªt
;

108 
	}
}

110 
	$gë_u£r_öfo
(*
buf
, 
size_t
 
Àn
)

112 
ho°«me
[1024], 
u£∫ame
[1024];

113 
ªt
;

115 #i‚de‡
_WIN32


116 
ªt
 = 
	`gëho°«me
(
ho°«me
, (hostname));

117 i‡(
ªt
 < 0)

119 
	`°r˝y
(
ho°«me
, "unknown");

121 #i‡!
deföed
 
_WIN32
 && !deföed 
ADB_HOST_ON_TARGET


122 
ªt
 = 
	`gëlogö_r
(
u£∫ame
, (username));

123 i‡(
ªt
 < 0)

125 
	`°r˝y
(
u£∫ame
, "unknown");

127 
ªt
 = 
	`¢¥ötf
(
buf
, 
Àn
, " %s@%s", 
u£∫ame
, 
ho°«me
);

128 i‡(
ªt
 >(sig√d)
Àn
)

129 
buf
[
Àn
 - 1] = '\0';

130 
	}
}

132 
	$wrôe_public_keyfûe
(
RSA
 *
¥iv©e_key
, c⁄° *
¥iv©e_key_∑th
)

134 
RSAPublicKey
 
pkey
;

135 
BIO
 *
bio
, *
b64
, *
bfûe
;

136 
∑th
[
PATH_MAX
], 
öfo
[
MAX_PAYLOAD
];

137 
ªt
;

139 
ªt
 = 
	`¢¥ötf
(
∑th
, ’©h), "%s.pub", 
¥iv©e_key_∑th
);

140 i‡(
ªt
 >(sig√d)(
∑th
))

143 
ªt
 = 
	`RSA_to_RSAPublicKey
(
¥iv©e_key
, &
pkey
);

144 i‡(!
ªt
) {

145 
	`D
("FailedÅo convertÅoÖublickey\n");

149 
bfûe
 = 
	`BIO_√w_fûe
(
∑th
, "w");

150 i‡(!
bfûe
) {

151 
	`D
("FaûedÅÿ›í '%s'\n", 
∑th
);

155 
	`D
("WrôögÖubli¯keyÅÿ'%s'\n", 
∑th
);

157 
b64
 = 
	`BIO_√w
(
	`BIO_f_ba£64
());

158 
	`BIO_£t_Êags
(
b64
, 
BIO_FLAGS_BASE64_NO_NL
);

160 
bio
 = 
	`BIO_push
(
b64
, 
bfûe
);

161 
	`BIO_wrôe
(
bio
, &
pkey
, (pkey));

162 
	`BIO_Êush
(
bio
);

163 
	`BIO_p›
(
b64
);

164 
	`BIO_‰ì
(
b64
);

166 
	`gë_u£r_öfo
(
öfo
, (info));

167 
	`BIO_wrôe
(
bfûe
, 
öfo
, 
	`°æí
(info));

168 
	`BIO_Êush
(
bfûe
);

169 
	`BIO_‰ì_Æl
(
bfûe
);

172 
	}
}

174 
	$gíî©e_key
(c⁄° *
fûe
)

176 
EVP_PKEY
* 
pkey
 = 
	`EVP_PKEY_√w
();

177 
BIGNUM
* 
exp⁄ít
 = 
	`BN_√w
();

178 
RSA
* 
rß
 = 
	`RSA_√w
();

179 
mode_t
 
ﬁd_mask
;

180 
FILE
 *
f
 = 
NULL
;

181 
ªt
 = 0;

183 
	`D
("gíî©e_key '%s'\n", 
fûe
);

185 i‡(!
pkey
 || !
exp⁄ít
 || !
rß
) {

186 
	`D
("FailedÅoállocate key\n");

187 
out
;

190 
	`BN_£t_w‹d
(
exp⁄ít
, 
RSA_F4
);

191 
	`RSA_gíî©e_key_ex
(
rß
, 2048, 
exp⁄ít
, 
NULL
);

192 
	`EVP_PKEY_£t1_RSA
(
pkey
, 
rß
);

194 
ﬁd_mask
 = 
	`umask
(077);

196 
f
 = 
	`f›í
(
fûe
, "w");

197 i‡(!
f
) {

198 
	`D
("FaûedÅÿ›í '%s'\n", 
fûe
);

199 
	`umask
(
ﬁd_mask
);

200 
out
;

203 
	`umask
(
ﬁd_mask
);

205 i‡(!
	`PEM_wrôe_Priv©eKey
(
f
, 
pkey
, 
NULL
, NULL, 0, NULL, NULL)) {

206 
	`D
("FailedÅo write key\n");

207 
out
;

210 i‡(!
	`wrôe_public_keyfûe
(
rß
, 
fûe
)) {

211 
	`D
("FailedÅo writeÖublic key\n");

212 
out
;

215 
ªt
 = 1;

217 
out
:

218 i‡(
f
)

219 
	`f˛o£
(
f
);

220 
	`EVP_PKEY_‰ì
(
pkey
);

221 
	`RSA_‰ì
(
rß
);

222 
	`BN_‰ì
(
exp⁄ít
);

223  
ªt
;

224 
	}
}

226 
	$ªad_key
(c⁄° *
fûe
, 
li°node
 *
li°
)

228 
adb_¥iv©e_key
 *
key
;

229 
FILE
 *
f
;

231 
	`D
("ªad_key '%s'\n", 
fûe
);

233 
f
 = 
	`f›í
(
fûe
, "r");

234 i‡(!
f
) {

235 
	`D
("FaûedÅÿ›í '%s'\n", 
fûe
);

239 
key
 = 
	`mÆloc
((*key));

240 i‡(!
key
) {

241 
	`D
("FailedÅoálloc key\n");

242 
	`f˛o£
(
f
);

245 
key
->
rß
 = 
	`RSA_√w
();

247 i‡(!
	`PEM_ªad_RSAPriv©eKey
(
f
, &
key
->
rß
, 
NULL
, NULL)) {

248 
	`D
("FailedÅoÑead key\n");

249 
	`f˛o£
(
f
);

250 
	`RSA_‰ì
(
key
->
rß
);

251 
	`‰ì
(
key
);

255 
	`f˛o£
(
f
);

256 
	`li°_add_èû
(
li°
, &
key
->
node
);

258 
	}
}

260 
	$gë_u£r_keyfûï©h
(*
fûíame
, 
size_t
 
Àn
)

262 c⁄° *
f‹m©
, *
home
;

263 
™droid_dú
[
PATH_MAX
];

264 
°©
 
buf
;

265 #ifde‡
_WIN32


266 
∑th
[
PATH_MAX
];

267 
home
 = 
	`gëív
("ANDROID_SDK_HOME");

268 i‡(!
home
) {

269 
	`SHGëFﬁdîP©h
(
NULL
, 
CSIDL_PROFILE
, NULL, 0, 
∑th
);

270 
home
 = 
∑th
;

272 
f‹m©
 = "%s\\%s";

274 
home
 = 
	`gëív
("HOME");

275 i‡(!
home
)

277 
f‹m©
 = "%s/%s";

280 
	`D
("homê'%s'\n", 
home
);

282 i‡(
	`¢¥ötf
(
™droid_dú
, ◊ndroid_dú), 
f‹m©
, 
home
,

283 
ANDROID_PATH
Ë>()(
™droid_dú
))

286 i‡(
	`°©
(
™droid_dú
, &
buf
)) {

287 i‡(
	`adb_mkdú
(
™droid_dú
, 0750) < 0) {

288 
	`D
("C™nŸ mkdú '%s'", 
™droid_dú
);

293  
	`¢¥ötf
(
fûíame
, 
Àn
, 
f‹m©
, 
™droid_dú
, 
ADB_KEY_FILE
);

294 
	}
}

296 
	$gë_u£r_key
(
li°node
 *
li°
)

298 
°©
 
buf
;

299 
∑th
[
PATH_MAX
];

300 
ªt
;

302 
ªt
 = 
	`gë_u£r_keyfûï©h
(
∑th
, (path));

303 i‡(
ªt
 < 0 ||Ñë >(sig√d)(
∑th
)) {

304 
	`D
("Error getting user key filename");

308 
	`D
("u£∏key '%s'\n", 
∑th
);

310 i‡(
	`°©
(
∑th
, &
buf
) == -1) {

311 i‡(!
	`gíî©e_key
(
∑th
)) {

312 
	`D
("FailedÅo generateÇew key\n");

317  
	`ªad_key
(
∑th
, 
li°
);

318 
	}
}

320 
	$gë_víd‹_keys
(
li°node
 *
li°
)

322 c⁄° *
adb_keys_∑th
;

323 
keys_∑th
[
MAX_PAYLOAD
];

324 *
∑th
;

325 *
ßve
;

326 
°©
 
buf
;

328 
adb_keys_∑th
 = 
	`gëív
("ADB_VENDOR_KEYS");

329 i‡(!
adb_keys_∑th
)

331 
	`°∫˝y
(
keys_∑th
, 
adb_keys_∑th
, (keys_path));

333 
∑th
 = 
	`adb_°πok_r
(
keys_∑th
, 
ENV_PATH_SEPARATOR_STR
, &
ßve
);

334 
∑th
) {

335 
	`D
("Ródög: '%s'\n", 
∑th
);

337 i‡(
	`°©
(
∑th
, &
buf
))

338 
	`D
("C™'àªad '%s'\n", 
∑th
);

339 i‡(!
	`ªad_key
(
∑th
, 
li°
))

340 
	`D
("FaûedÅÿªad '%s'\n", 
∑th
);

342 
∑th
 = 
	`adb_°πok_r
(
NULL
, 
ENV_PATH_SEPARATOR_STR
, &
ßve
);

344 
	}
}

346 
	$adb_auth_sign
(*
node
, *
tokí
, 
size_t
 
tokí_size
, *
sig
)

348 
Àn
;

349 
adb_¥iv©e_key
 *
key
 = 
	`node_to_ôem
(
node
, adb_private_key,Çode);

351 i‡(!
	`RSA_sign
(
NID_sha1
, 
tokí
, 
tokí_size
, 
sig
, &
Àn
, 
key
->
rß
)) {

355 
	`D
("adb_auth_sig¿Àn=%d\n", 
Àn
);

356  ()
Àn
;

357 
	}
}

359 *
	$adb_auth_√xtkey
(*
cuºít
)

361 
li°node
 *
ôem
;

363 i‡(
	`li°_em±y
(&
key_li°
))

364  
NULL
;

366 i‡(!
cuºít
)

367  
	`li°_hód
(&
key_li°
);

369 
	`li°_f‹_óch
(
ôem
, &
key_li°
) {

370 i‡(
ôem
 =
cuºít
) {

372 i‡(
ôem
->
√xt
 =&
key_li°
)

373  
NULL
;

374  
ôem
->
√xt
;

378  
NULL
;

379 
	}
}

381 
	$adb_auth_gë_u£rkey
(*
d©a
, 
size_t
 
Àn
)

383 
∑th
[
PATH_MAX
];

384 *
fûe
;

385 
ªt
;

387 
ªt
 = 
	`gë_u£r_keyfûï©h
(
∑th
, (path) - 4);

388 i‡(
ªt
 < 0 ||Ñë >(sig√d)((
∑th
) - 4)) {

389 
	`D
("Error getting user key filename");

392 
	`°rˇt
(
∑th
, ".pub");

394 
fûe
 = 
	`lﬂd_fûe
(
∑th
, (*)&
ªt
);

395 i‡(!
fûe
) {

396 
	`D
("C™'àlﬂd '%s'\n", 
∑th
);

400 i‡(
Àn
 < (
size_t
)(
ªt
 + 1)) {

401 
	`D
("%s: C⁄ã¡Åoÿœrgêªt=%d\n", 
∑th
, 
ªt
);

405 
	`mem˝y
(
d©a
, 
fûe
, 
ªt
);

406 
d©a
[
ªt
] = '\0';

408  
ªt
 + 1;

409 
	}
}

411 
	$adb_auth_öô
()

413 
ªt
;

415 
	`D
("adb_auth_init\n");

417 
	`li°_öô
(&
key_li°
);

419 
ªt
 = 
	`gë_u£r_key
(&
key_li°
);

420 i‡(!
ªt
) {

421 
	`D
("FailedÅo get user key\n");

425 
	`gë_víd‹_keys
(&
key_li°
);

426 
	}
}

	@adb_client.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<î∫o.h
>

5 
	~<limôs.h
>

6 
	~<°d¨g.h
>

7 
	~<zùfûe/zùfûe.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

11 
	~"sysdïs.h
"

13 
	#TRACE_TAG
 
TRACE_ADB


	)

14 
	~"adb_˛õ¡.h
"

16 
å™•‹t_ty≥
 
	g__adb_å™•‹t
 = 
kTøn•‹tAny
;

17 c⁄° * 
	g__adb_£rül
 = 
NULL
;

19 
	g__adb_£rvî_p‹t
 = 
DEFAULT_ADB_PORT
;

21 
	$adb_£t_å™•‹t
(
å™•‹t_ty≥
 
ty≥
, c⁄° * 
£rül
)

23 
__adb_å™•‹t
 = 
ty≥
;

24 
__adb_£rül
 = 
£rül
;

25 
	}
}

27 
	$adb_£t_t˝_•ecifics
(
£rvî_p‹t
)

29 
__adb_£rvî_p‹t
 = 
£rvî_p‹t
;

30 
	}
}

32 
	$adb_gë_emuœt‹_c⁄sﬁe_p‹t
()

34 c⁄° * 
£rül
 = 
__adb_£rül
;

35 
p‹t
;

37 i‡(
£rül
 =
NULL
) {

41 * 
tmp
 = 
	`adb_quîy
("host:devices");

42 * 
p
 = 
tmp
;

43 if(!
tmp
) {

44 
	`¥ötf
("noÉmulator connected\n");

47 *
p
) {

48 * 
q
 = 
	`°rchr
(
p
, '\n');

49 i‡(
q
 !
NULL
)

50 *
q
++ = 0;

52 
q
 = 
p
 + 
	`°æí
(p);

54 i‡(!
	`memcmp
(
p
, 
LOCAL_CLIENT_PREFIX
, (LOCAL_CLIENT_PREFIX)-1)) {

55 i‡(
£rül
 !
NULL
) {

56 
	`‰ì
(
tmp
);

59 
£rül
 = 
p
;

62 
p
 = 
q
;

64 
	`‰ì
(
tmp
);

66 i‡(
£rül
 =
NULL
)

70 i‡(
	`memcmp
(
£rül
, 
LOCAL_CLIENT_PREFIX
, (LOCAL_CLIENT_PREFIX)-1) != 0)

74 
£rül
 +(
LOCAL_CLIENT_PREFIX
)-1;

75 
p‹t
 = 
	`°πﬁ
(
£rül
, 
NULL
, 10);

76  
p‹t
;

77 
	}
}

79 
	g__adb_îr‹
[256] = { 0 };

81 c⁄° *
	$adb_îr‹
()

83  
__adb_îr‹
;

84 
	}
}

86 
	$swôch_sockë_å™•‹t
(
fd
)

88 
£rvi˚
[64];

89 
tmp
[5];

90 
Àn
;

92 i‡(
__adb_£rül
)

93 
	`¢¥ötf
(
£rvi˚
,  sîvi˚, "ho°:å™•‹t:%s", 
__adb_£rül
);

95 * 
å™•‹t_ty≥
 = "???";

97 
__adb_å™•‹t
) {

98 
kTøn•‹tUsb
:

99 
å™•‹t_ty≥
 = "transport-usb";

101 
kTøn•‹tLoˇl
:

102 
å™•‹t_ty≥
 = "transport-local";

104 
kTøn•‹tAny
:

105 
å™•‹t_ty≥
 = "transport-any";

107 
kTøn•‹tHo°
:

113 
	`¢¥ötf
(
£rvi˚
,  sîvi˚, "ho°:%s", 
å™•‹t_ty≥
);

115 
Àn
 = 
	`°æí
(
£rvi˚
);

116 
	`¢¥ötf
(
tmp
, Åmp, "%04x", 
Àn
);

118 if(
	`wrôex
(
fd
, 
tmp
, 4Ë|| wrôex(fd, 
£rvi˚
, 
Àn
)) {

119 
	`°r˝y
(
__adb_îr‹
, "write failure during connection");

120 
	`adb_˛o£
(
fd
);

123 
	`D
("SwitchÅransport inÖrogress\n");

125 if(
	`adb_°©us
(
fd
)) {

126 
	`adb_˛o£
(
fd
);

127 
	`D
("SwitchÅransport failed\n");

130 
	`D
("SwitchÅransport success\n");

132 
	}
}

134 
	$adb_°©us
(
fd
)

136 
buf
[5];

137 
Àn
;

139 if(
	`ªadx
(
fd
, 
buf
, 4)) {

140 
	`°r˝y
(
__adb_îr‹
, "protocol fault (no status)");

144 if(!
	`memcmp
(
buf
, "OKAY", 4)) {

148 if(
	`memcmp
(
buf
, "FAIL", 4)) {

149 
	`•rötf
(
__adb_îr‹
,

151 
buf
[0], buf[1], buf[2], buf[3]);

155 if(
	`ªadx
(
fd
, 
buf
, 4)) {

156 
	`°r˝y
(
__adb_îr‹
, "protocol fault (statusÜen)");

159 
buf
[4] = 0;

160 
Àn
 = 
	`°πoul
((*)
buf
, 0, 16);

161 if(
Àn
 > 255)Üen = 255;

162 if(
	`ªadx
(
fd
, 
__adb_îr‹
, 
Àn
)) {

163 
	`°r˝y
(
__adb_îr‹
, "protocol fault (statusÑead)");

166 
__adb_îr‹
[
Àn
] = 0;

168 
	}
}

170 
	$_adb_c⁄√˘
(c⁄° *
£rvi˚
)

172 
tmp
[5];

173 
Àn
;

174 
fd
;

176 
	`D
("_adb_c⁄√˘: %s\n", 
£rvi˚
);

177 
Àn
 = 
	`°æí
(
£rvi˚
);

178 if((
Àn
 < 1) || (len > 1024)) {

179 
	`°r˝y
(
__adb_îr‹
, "serviceÇameÅooÜong");

182 
	`¢¥ötf
(
tmp
, Åmp, "%04x", 
Àn
);

184 
fd
 = 
	`sockë_lo›back_˛õ¡
(
__adb_£rvî_p‹t
, 
SOCK_STREAM
);

185 if(
fd
 < 0) {

186 
	`°r˝y
(
__adb_îr‹
, "cannot connectÅo daemon");

190 i‡(
	`memcmp
(
£rvi˚
,"ho°",4Ë!0 && 
	`swôch_sockë_å™•‹t
(
fd
)) {

194 if(
	`wrôex
(
fd
, 
tmp
, 4Ë|| wrôex(fd, 
£rvi˚
, 
Àn
)) {

195 
	`°r˝y
(
__adb_îr‹
, "write failure during connection");

196 
	`adb_˛o£
(
fd
);

200 if(
	`adb_°©us
(
fd
)) {

201 
	`adb_˛o£
(
fd
);

205 
	`D
("_adb_c⁄√˘:Ñëu∫ fd %d\n", 
fd
);

206  
fd
;

207 
	}
}

209 
	$adb_c⁄√˘
(c⁄° *
£rvi˚
)

212 
fd
 = 
	`_adb_c⁄√˘
("host:version");

214 
	`D
("adb_c⁄√˘: sîvi˚ %s\n", 
£rvi˚
);

215 if(
fd
 == -2) {

216 
	`Ârötf
(
°dout
,"* daemonÇotÑunning. starting itÇow onÖort %d *\n",

217 
__adb_£rvî_p‹t
);

218 
°¨t_£rvî
:

219 if(
	`œunch_£rvî
(
__adb_£rvî_p‹t
)) {

220 
	`Ârötf
(
°dîr
,"* failedÅo start daemon *\n");

223 
	`Ârötf
(
°dout
,"* daemon started successfully *\n");

226 
	`adb_¶ìp_ms
(3000);

230 
buf
[100];

231 
n
;

232 
vîsi⁄
 = 
ADB_SERVER_VERSION
 - 1;

235 if(
fd
 >= 0) {

236 if(
	`ªadx
(
fd
, 
buf
, 4)Ë
îr‹
;

238 
buf
[4] = 0;

239 
n
 = 
	`°πoul
(
buf
, 0, 16);

240 if(
n
 > ()(
buf
)Ë
îr‹
;

241 if(
	`ªadx
(
fd
, 
buf
, 
n
)Ë
îr‹
;

242 
	`adb_˛o£
(
fd
);

244 i‡(
	`ssˇnf
(
buf
, "%04x", &
vîsi⁄
Ë!1Ë
îr‹
;

248 i‡(
	`°rcmp
(
__adb_îr‹
, "unknown host service") != 0)

249  
fd
;

252 if(
vîsi⁄
 !
ADB_SERVER_VERSION
) {

253 
	`¥ötf
("adb server is out of date. killing...\n");

254 
fd
 = 
	`_adb_c⁄√˘
("host:kill");

255 
	`adb_˛o£
(
fd
);

258 
	`adb_¶ìp_ms
(2000);

259 
°¨t_£rvî
;

264 i‡(!
	`°rcmp
(
£rvi˚
, "host:start-server"))

267 
fd
 = 
	`_adb_c⁄√˘
(
£rvi˚
);

268 if(
fd
 == -2) {

269 
	`Ârötf
(
°dîr
,"** daemon stillÇotÑunning");

271 
	`D
("adb_c⁄√˘:Ñëu∫ fd %d\n", 
fd
);

273  
fd
;

274 
îr‹
:

275 
	`adb_˛o£
(
fd
);

277 
	}
}

280 
	$adb_comm™d
(c⁄° *
£rvi˚
)

282 
fd
 = 
	`adb_c⁄√˘
(
£rvi˚
);

283 if(
fd
 < 0) {

287 if(
	`adb_°©us
(
fd
)) {

288 
	`adb_˛o£
(
fd
);

293 
	}
}

295 *
	$adb_quîy
(c⁄° *
£rvi˚
)

297 
buf
[5];

298 
n
;

299 *
tmp
;

301 
	`D
("adb_quîy: %s\n", 
£rvi˚
);

302 
fd
 = 
	`adb_c⁄√˘
(
£rvi˚
);

303 if(
fd
 < 0) {

304 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
__adb_îr‹
);

308 if(
	`ªadx
(
fd
, 
buf
, 4)Ë
o›s
;

310 
buf
[4] = 0;

311 
n
 = 
	`°πoul
(
buf
, 0, 16);

312 if(
n
 > 1024Ë
o›s
;

314 
tmp
 = 
	`mÆloc
(
n
 + 1);

315 if(
tmp
 =0Ë
o›s
;

317 if(
	`ªadx
(
fd
, 
tmp
, 
n
) == 0) {

318 
tmp
[
n
] = 0;

319 
	`adb_˛o£
(
fd
);

320  
tmp
;

322 
	`‰ì
(
tmp
);

324 
o›s
:

325 
	`adb_˛o£
(
fd
);

327 
	}
}

	@adb_client.h

1 #i‚de‡
_ADB_CLIENT_H_


2 
	#_ADB_CLIENT_H_


	)

4 
	~"adb.h
"

10 
adb_c⁄√˘
(c⁄° *
£rvi˚
);

11 
_adb_c⁄√˘
(c⁄° *
£rvi˚
);

16 
adb_comm™d
(c⁄° *
£rvi˚
);

22 *
adb_quîy
(c⁄° *
£rvi˚
);

26 
adb_£t_å™•‹t
(
å™•‹t_ty≥
 
ty≥
, c⁄° * 
£rül
);

30 
adb_£t_t˝_•ecifics
(
£rvî_p‹t
);

36 
adb_gë_emuœt‹_c⁄sﬁe_p‹t
();

42 
adb_£nd_emuœt‹_comm™d
(
¨gc
, ** 
¨gv
);

45 c⁄° *
adb_îr‹
();

51 
adb_°©us
(
fd
);

	@backup_service.c

17 
	~<uni°d.h
>

18 
	~<°dio.h
>

20 
	~"sysdïs.h
"

22 
	#TRACE_TAG
 
TRACE_ADB


	)

23 
	~"adb.h
"

26 
pid_t
 
	mpid
;

27 
	mfd
;

28 } 
	tbackup_h¨ve°_∑øms
;

31 
	$backup_sockë∑ú
(
sv
[2]) {

32 
rc
 = 
	`unix_sockë∑ú
–
AF_UNIX
, 
SOCK_STREAM
, 0, 
sv
 );

33 i‡(
rc
 < 0)

37 
	}
}

40 * 
	$backup_chûd_waôî
(* 
¨gs
) {

41 
°©us
;

42 
backup_h¨ve°_∑øms
* 
∑øms
 = (backup_h¨ve°_∑øms*Ë
¨gs
;

44 
	`waôpid
(
∑øms
->
pid
, &
°©us
, 0);

45 
	`adb_˛o£
(
∑øms
->
fd
);

46 
	`‰ì
(
∑øms
);

47  
NULL
;

48 
	}
}

51 
	$backup_£rvi˚
(
BackupO≥øti⁄
 
›
, * 
¨gs
) {

52 
pid_t
 
pid
;

53 
s
[2];

54 * 
›î©i⁄
;

55 
sockënum
;

58 i‡(
›
 =
BACKUP
) {

59 
›î©i⁄
 = "backup";

60 
sockënum
 = 
STDOUT_FILENO
;

62 
›î©i⁄
 = "restore";

63 
sockënum
 = 
STDIN_FILENO
;

66 
	`D
("backup_£rvi˚(%s, %s)\n", 
›î©i⁄
, 
¨gs
);

70 i‡(
	`backup_sockë∑ú
(
s
)) {

71 
	`D
("can't create backup/restore socketpair\n");

72 
	`Ârötf
(
°dîr
, "unableÅo create backup/restore socketpair\n");

76 
	`D
("Backup/ª°‹êsockëÖaú: (£nd=%d,Ñe˚ive=%d)\n", 
s
[1], s[0]);

77 
	`˛o£_⁄_exec
(
s
[0]);

80 
pid
 = 
	`f‹k
();

81 i‡(
pid
 < 0) {

83 
	`D
("ˇn'àf‹k f‹ %s\n", 
›î©i⁄
);

84 
	`Ârötf
(
°dîr
, "u«bÀÅÿf‹k f‹ %s\n", 
›î©i⁄
);

85 
	`adb_˛o£
(
s
[0]);

86 
	`adb_˛o£
(
s
[1]);

91 i‡(
pid
 == 0) {

93 * 
p
;

94 
¨gc
;

95 
p‹äum
[16];

96 ** 
bu_¨gs
;

99 
¨gc
 = 3;

100 
p
 = (*)
¨gs
;Ö && *p; ) {

101 
¨gc
++;

102 *
p
 && *p != ':')Ö++;

103 i‡(*
p
 == ':')Ö++;

106 
bu_¨gs
 = (**Ë
	`Æloˇ
(
¨gc
*(*) + 1);

109 
¨gc
 = 0;

110 
bu_¨gs
[
¨gc
++] = "bu";

111 
	`¢¥ötf
(
p‹äum
, ’‹äum), "%d", 
s
[1]);

112 
bu_¨gs
[
¨gc
++] = 
p‹äum
;

113 
bu_¨gs
[
¨gc
++] = 
›î©i⁄
;

114 
p
 = (*)
¨gs
;Ö && *p; ) {

115 
bu_¨gs
[
¨gc
++] = 
p
;

116 *
p
 && *p != ':')Ö++;

117 i‡(*
p
 == ':') {

118 *
p
 = 0;

119 
p
++;

122 
bu_¨gs
[
¨gc
] = 
NULL
;

126 
	`adb_˛o£
(
s
[0]);

129 
	`execvp
("/sy°em/bö/bu", (* c⁄° *)
bu_¨gs
);

131 
	`Ârötf
(
°dîr
, "UnableÅoÉxec 'bu', bailing\n");

132 
	`exô
(-1);

134 
adb_thªad_t
 
t
;

135 
backup_h¨ve°_∑øms
* 
∑øms
;

138 
	`D
("f‹k(Ëªtu∫edÖid %d\n", 
pid
);

139 
	`adb_˛o£
(
s
[1]);

142 
∑øms
 = (
backup_h¨ve°_∑øms
*Ë
	`mÆloc
((backup_harvest_params));

143 
∑øms
->
pid
 =Öid;

144 
∑øms
->
fd
 = 
s
[0];

145 i‡(
	`adb_thªad_¸óã
(&
t
, 
backup_chûd_waôî
, 
∑øms
)) {

146 
	`adb_˛o£
(
s
[0]);

147 
	`‰ì
(
∑øms
);

148 
	`D
("UnableÅo create child harvester\n");

154  
s
[0];

155 
	}
}

	@commandline.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<uni°d.h
>

22 
	~<limôs.h
>

23 
	~<°d¨g.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/°©.h
>

26 
	~<˘y≥.h
>

27 
	~<as£π.h
>

29 
	~"sysdïs.h
"

31 #ifde‡
HAVE_TERMIO_H


32 
	~<ãrmios.h
>

35 
	#TRACE_TAG
 
TRACE_ADB


	)

36 
	~"adb.h
"

37 
	~"adb_˛õ¡.h
"

38 
	~"fûe_sync_£rvi˚.h
"

40 
do_cmd
(
å™•‹t_ty≥
 
ây≥
, * 
£rül
, *
cmd
, ...);

42 
gë_my_∑th
(*
s
, 
size_t
 
maxLí
);

43 
föd_sync_dús
(c⁄° *
§ˇrg
,

44 **
™droid_§cdú_out
, **
d©a_§cdú_out
);

45 
ö°Æl_≠p
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, 
¨gc
, ** 
¨gv
);

46 
unö°Æl_≠p
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, 
¨gc
, ** 
¨gv
);

48 c⁄° *
	ggProdu˘OutP©h
 = 
NULL
;

50 *
	$¥odu˘_fûe
(c⁄° *
exåa
)

52 
n
;

53 *
x
;

55 i‡(
gProdu˘OutP©h
 =
NULL
) {

56 
	`Ârötf
(
°dîr
, "adb: Product directoryÇot specified; "

58 
	`exô
(1);

61 
n
 = 
	`°æí
(
gProdu˘OutP©h
Ë+ såÀn(
exåa
) + 2;

62 
x
 = 
	`mÆloc
(
n
);

63 i‡(
x
 == 0) {

64 
	`Ârötf
(
°dîr
, "adb: Out of memory (product_file())\n");

65 
	`exô
(1);

68 
	`¢¥ötf
(
x
, (
size_t
)
n
, "%s" 
OS_PATH_SEPARATOR_STR
 "%s", 
gProdu˘OutP©h
, 
exåa
);

69  
x
;

70 
	}
}

72 
	$vîsi⁄
(
FILE
 * 
out
) {

73 
	`Ârötf
(
out
, "Android Debug Bridge version %d.%d.%d\n",

74 
ADB_VERSION_MAJOR
, 
ADB_VERSION_MINOR
, 
ADB_SERVER_VERSION
);

75 
	}
}

77 
	$hñp
()

79 
	`vîsi⁄
(
°dîr
);

81 
	`Ârötf
(
°dîr
,

192 
	}
}

194 
	$ußge
()

196 
	`hñp
();

198 
	}
}

200 #ifde‡
HAVE_TERMIO_H


201 
ãrmios
 
	gtio_ßve
;

203 
	$°dö_øw_öô
(
fd
)

205 
ãrmios
 
tio
;

207 if(
	`tcgë©å
(
fd
, &
tio
)) ;

208 if(
	`tcgë©å
(
fd
, &
tio_ßve
)) ;

210 
tio
.
c_lÊag
 = 0;

213 
tio
.
c_cc
[
VTIME
] = 0;

214 
tio
.
c_cc
[
VMIN
] = 1;

216 
	`tc£èâr
(
fd
, 
TCSANOW
, &
tio
);

217 
	`tcÊush
(
fd
, 
TCIFLUSH
);

218 
	}
}

220 
	$°dö_øw_ª°‹e
(
fd
)

222 
	`tc£èâr
(
fd
, 
TCSANOW
, &
tio_ßve
);

223 
	`tcÊush
(
fd
, 
TCIFLUSH
);

224 
	}
}

227 
	$ªad_™d_dump
(
fd
)

229 
buf
[4096];

230 
Àn
;

232 
fd
 >= 0) {

233 
	`D
("ªad_™d_dump():Öªádb_ªad(fd=%d)\n", 
fd
);

234 
Àn
 = 
	`adb_ªad
(
fd
, 
buf
, 4096);

235 
	`D
("ªad_™d_dump():Öo°ádb_ªad(fd=%d):Üí=%d\n", 
fd
, 
Àn
);

236 if(
Àn
 == 0) {

240 if(
Àn
 < 0) {

241 if(
î∫o
 =
EINTR
) ;

244 
	`fwrôe
(
buf
, 1, 
Àn
, 
°dout
);

245 
	`fÊush
(
°dout
);

247 
	}
}

249 
	$c›y_to_fûe
(
öFd
, 
outFd
) {

250 c⁄° 
size_t
 
BUFSIZE
 = 32 * 1024;

251 * 
buf
 = (*Ë
	`mÆloc
(
BUFSIZE
);

252 
Àn
;

253 
tŸÆ
 = 0;

255 
	`D
("c›y_to_fûe(%d -> %d)\n", 
öFd
, 
outFd
);

257 
Àn
 = 
	`adb_ªad
(
öFd
, 
buf
, 
BUFSIZE
);

258 i‡(
Àn
 == 0) {

259 
	`D
("copy_to_file() :Ñead 0 bytes;Éxiting\n");

262 i‡(
Àn
 < 0) {

263 i‡(
î∫o
 =
EINTR
) {

264 
	`D
("copy_to_file() : EINTR,Ñetrying\n");

267 
	`D
("c›y_to_fûe(Ë:Éº‹ %d\n", 
î∫o
);

270 
	`adb_wrôe
(
outFd
, 
buf
, 
Àn
);

271 
tŸÆ
 +
Àn
;

273 
	`D
("c›y_to_fûe(Ëföishedá·î %lu byãs\n", 
tŸÆ
);

274 
	`‰ì
(
buf
);

275 
	}
}

277 *
	$°dö_ªad_thªad
(*
x
)

279 
fd
, 
fdi
;

280 
buf
[1024];

281 
r
, 
n
;

282 
°©e
 = 0;

284 *
fds
 = (*Ë
x
;

285 
fd
 = 
fds
[0];

286 
fdi
 = 
fds
[1];

287 
	`‰ì
(
fds
);

291 
	`D
("°dö_ªad_thªad():Öª unix_ªad(fdi=%d,...)\n", 
fdi
);

292 
r
 = 
	`unix_ªad
(
fdi
, 
buf
, 1024);

293 
	`D
("°dö_ªad_thªad():Öo° unix_ªad(fdi=%d,...)\n", 
fdi
);

294 if(
r
 == 0) ;

295 if(
r
 < 0) {

296 if(
î∫o
 =
EINTR
) ;

299 
n
 = 0;Ç < 
r
;Ç++){

300 
buf
[
n
]) {

302 
°©e
 = 1;

305 
°©e
 = 1;

308 if(
°©e
 == 1) state++;

311 if(
°©e
 == 2) {

312 
	`Ârötf
(
°dîr
,"\n* disconnect *\n");

313 #ifde‡
HAVE_TERMIO_H


314 
	`°dö_øw_ª°‹e
(
fdi
);

316 
	`exô
(0);

319 
°©e
 = 0;

322 
r
 = 
	`adb_wrôe
(
fd
, 
buf
,Ñ);

323 if(
r
 <= 0) {

328 
	}
}

330 
	$öãø˘ive_shñl
()

332 
adb_thªad_t
 
thr
;

333 
fdi
, 
fd
;

334 *
fds
;

336 
fd
 = 
	`adb_c⁄√˘
("shell:");

337 if(
fd
 < 0) {

338 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

341 
fdi
 = 0;

343 
fds
 = 
	`mÆloc
(() * 2);

344 
fds
[0] = 
fd
;

345 
fds
[1] = 
fdi
;

347 #ifde‡
HAVE_TERMIO_H


348 
	`°dö_øw_öô
(
fdi
);

350 
	`adb_thªad_¸óã
(&
thr
, 
°dö_ªad_thªad
, 
fds
);

351 
	`ªad_™d_dump
(
fd
);

352 #ifde‡
HAVE_TERMIO_H


353 
	`°dö_øw_ª°‹e
(
fdi
);

356 
	}
}

359 
	$f‹m©_ho°_comm™d
(* 
buf„r
, 
size_t
 
buÊí
, c⁄° * 
comm™d
, 
å™•‹t_ty≥
 
ây≥
, c⁄° * 
£rül
)

361 i‡(
£rül
) {

362 
	`¢¥ötf
(
buf„r
, 
buÊí
, "ho°-£rül:%s:%s", 
£rül
, 
comm™d
);

364 c⁄° * 
¥efix
 = "host";

365 i‡(
ây≥
 =
kTøn•‹tUsb
)

366 
¥efix
 = "host-usb";

367 i‡(
ây≥
 =
kTøn•‹tLoˇl
)

368 
¥efix
 = "host-local";

370 
	`¢¥ötf
(
buf„r
, 
buÊí
, "%s:%s", 
¥efix
, 
comm™d
);

372 
	}
}

374 
	$adb_dow∆ﬂd_buf„r
(c⁄° *
£rvi˚
, c⁄° * 
d©a
, 
sz
,

375 
¥ogªss
)

377 
buf
[4096];

378 
tŸÆ
;

379 
fd
;

380 c⁄° *
±r
;

382 
	`•rötf
(
buf
,"%s:%d", 
£rvi˚
, 
sz
);

383 
fd
 = 
	`adb_c⁄√˘
(
buf
);

384 if(
fd
 < 0) {

385 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

389 
›t
 = 
CHUNK_SIZE
;

390 
›t
 = 
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, &opt, (opt));

392 
tŸÆ
 = 
sz
;

393 
±r
 = 
d©a
;

395 if(
¥ogªss
) {

396 *
x
 = 
	`°ºchr
(
£rvi˚
, ':');

397 if(
x
Ë
£rvi˚
 = x + 1;

400 
sz
 > 0) {

401 
x„r
 = (
sz
 > 
CHUNK_SIZE
) ? CHUNK_SIZE : sz;

402 if(
	`wrôex
(
fd
, 
±r
, 
x„r
)) {

403 
	`adb_°©us
(
fd
);

404 
	`Ârötf
(
°dîr
,"* faûedÅÿwrôêd©®'%s' *\n", 
	`adb_îr‹
());

407 
sz
 -
x„r
;

408 
±r
 +
x„r
;

409 if(
¥ogªss
) {

410 
	`¥ötf
("£ndög: '%s' %4d%% \r", 
£rvi˚
, ()(100LL - ((100LL * 
sz
Ë/ (
tŸÆ
))));

411 
	`fÊush
(
°dout
);

414 if(
¥ogªss
) {

415 
	`¥ötf
("\n");

418 if(
	`ªadx
(
fd
, 
buf
, 4)){

419 
	`Ârötf
(
°dîr
,"*ÉrrorÑeadingÑesponse *\n");

420 
	`adb_˛o£
(
fd
);

423 if(
	`memcmp
(
buf
, "OKAY", 4)) {

424 
buf
[4] = 0;

425 
	`Ârötf
(
°dîr
,"*Éº‹Ñe•⁄£ '%s' *\n", 
buf
);

426 
	`adb_˛o£
(
fd
);

430 
	`adb_˛o£
(
fd
);

432 
	}
}

435 
	$adb_dow∆ﬂd
(c⁄° *
£rvi˚
, c⁄° *
‚
, 
¥ogªss
)

437 *
d©a
;

438 
sz
;

440 
d©a
 = 
	`lﬂd_fûe
(
‚
, &
sz
);

441 if(
d©a
 == 0) {

442 
	`Ârötf
(
°dîr
,"* c™nŸÑód '%s' *\n", 
£rvi˚
);

446 
°©us
 = 
	`adb_dow∆ﬂd_buf„r
(
£rvi˚
, 
d©a
, 
sz
, 
¥ogªss
);

447 
	`‰ì
(
d©a
);

448  
°©us
;

449 
	}
}

451 
	$°©us_wödow
(
å™•‹t_ty≥
 
ây≥
, c⁄° * 
£rül
)

453 
comm™d
[4096];

454 *
°©e
 = 0;

455 *
œ°°©e
 = 0;

458 #ifde‡
_WIN32


461 
fd
;

462 
fd
 = 
	`unix_›í
("/dev/nuŒ", 
O_WRONLY
);

463 
	`dup2
(
fd
, 2);

464 
	`adb_˛o£
(
fd
);

467 
	`f‹m©_ho°_comm™d
(
comm™d
,  comm™d, "gë-°©e", 
ây≥
, 
£rül
);

470 
	`adb_¶ìp_ms
(250);

472 if(
°©e
) {

473 
	`‰ì
(
°©e
);

474 
°©e
 = 0;

477 
°©e
 = 
	`adb_quîy
(
comm™d
);

479 if(
°©e
) {

480 if(
œ°°©e
 && !
	`°rcmp
(
°©e
,laststate)){

483 if(
œ°°©e
Ë
	`‰ì
(laststate);

484 
œ°°©e
 = 
	`°rdup
(
°©e
);

488 
	`¥ötf
("%c[2J%c[2H", 27, 27);

489 
	`¥ötf
("Android Debug Bridge\n");

490 
	`¥ötf
("Sèã: %s\n", 
°©e
 ? state : "offline");

491 
	`fÊush
(
°dout
);

493 
	}
}

497 
	$dupAndQuŸe
(c⁄° *
s
)

499 c⁄° *
ts
;

500 
size_t
 
Æloc_Àn
;

501 *
ªt
;

502 *
de°
;

504 
ts
 = 
s
;

506 
Æloc_Àn
 = 0;

508  ;*
ts
 != '\0';Ås++) {

509 
Æloc_Àn
++;

510 i‡(*
ts
 == ' ' || *ts == '"' || *ts == '\\' || *ts == '(' || *ts == ')') {

511 
Æloc_Àn
++;

515 
ªt
 = (*)
	`mÆloc
(
Æloc_Àn
 + 1);

517 
ts
 = 
s
;

518 
de°
 = 
ªt
;

520  ;*
ts
 != '\0';Ås++) {

521 i‡(*
ts
 == ' ' || *ts == '"' || *ts == '\\' || *ts == '(' || *ts == ')') {

522 *
de°
++ = '\\';

525 *
de°
++ = *
ts
;

528 *
de°
++ = '\0';

530  
ªt
;

531 
	}
}

540 
	$µp
(
¨gc
, **
¨gv
)

542 #ifde‡
HAVE_WIN32_PROC


543 
	`Ârötf
(
°dîr
, "îr‹:ádb %†nŸ im∂emíãd o¿Wö32\n", 
¨gv
[0]);

546 *
adb_£rvi˚_«me
;

547 
pid_t
 
pid
;

548 
fd
;

550 i‡(
¨gc
 < 2) {

551 
	`Ârötf
(
°dîr
, "usage:ádb %s <adb serviceÇame> [ppp opts]\n",

552 
¨gv
[0]);

557 
adb_£rvi˚_«me
 = 
¨gv
[1];

559 
fd
 = 
	`adb_c⁄√˘
(
adb_£rvi˚_«me
);

561 if(
fd
 < 0) {

562 
	`Ârötf
(
°dîr
,"Error: CouldÇot openádb service: %s. Error: %s\n",

563 
adb_£rvi˚_«me
, 
	`adb_îr‹
());

567 
pid
 = 
	`f‹k
();

569 i‡(
pid
 < 0) {

570 
	`≥º‹
("from fork()");

572 } i‡(
pid
 == 0) {

573 
îr
;

574 
i
;

575 c⁄° **
µp_¨gs
;

578 
µp_¨gs
 = (c⁄° **Ë
	`Æloˇ
((*Ë* 
¨gc
 + 1);

579 
µp_¨gs
[0] = "pppd";

580 
i
 = 2 ; i < 
¨gc
 ; i++) {

582 
µp_¨gs
[
i
 - 1] = 
¨gv
[i];

584 
µp_¨gs
[
i
-1] = 
NULL
;

588 
	`dup2
(
fd
, 
STDIN_FILENO
);

589 
	`dup2
(
fd
, 
STDOUT_FILENO
);

590 
	`adb_˛o£
(
STDERR_FILENO
);

591 
	`adb_˛o£
(
fd
);

593 
îr
 = 
	`execvp
("µpd", (* c⁄° *)
µp_¨gs
);

595 i‡(
îr
 < 0) {

596 
	`≥º‹
("execingÖppd");

598 
	`exô
(-1);

602 
	`adb_˛o£
(
fd
);

606 
	}
}

608 
	$£nd_shñlcomm™d
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, * 
buf
)

610 
fd
, 
ªt
;

613 
fd
 = 
	`adb_c⁄√˘
(
buf
);

614 if(
fd
 >= 0)

616 
	`Ârötf
(
°dîr
,"- waiting for device -\n");

617 
	`adb_¶ìp_ms
(1000);

618 
	`do_cmd
(
å™•‹t
, 
£rül
, "wait-for-device", 0);

621 
	`ªad_™d_dump
(
fd
);

622 
ªt
 = 
	`adb_˛o£
(
fd
);

623 i‡(
ªt
)

624 
	`≥º‹
("close");

626  
ªt
;

627 
	}
}

629 
	$logˇt
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, 
¨gc
, **
¨gv
)

631 
buf
[4096];

633 *
log_ègs
;

634 *
quŸed_log_ègs
;

636 
log_ègs
 = 
	`gëív
("ANDROID_LOG_TAGS");

637 
quŸed_log_ègs
 = 
	`dupAndQuŸe
(
log_ègs
 =
NULL
 ? "" :Üog_tags);

639 
	`¢¥ötf
(
buf
, (buf),

641 
quŸed_log_ègs
);

643 
	`‰ì
(
quŸed_log_ègs
);

645 i‡(!
	`°rcmp
(
¨gv
[0],"longcat")) {

646 
	`°∫ˇt
(
buf
, " -vÜong", (buf)-1);

649 
¨gc
 -= 1;

650 
¨gv
 += 1;

651 
¨gc
-- > 0) {

652 *
quŸed
;

654 
quŸed
 = 
	`dupAndQuŸe
 (*
¨gv
++);

656 
	`°∫ˇt
(
buf
, " ", (buf)-1);

657 
	`°∫ˇt
(
buf
, 
quŸed
, (buf)-1);

658 
	`‰ì
(
quŸed
);

661 
	`£nd_shñlcomm™d
(
å™•‹t
, 
£rül
, 
buf
);

663 
	}
}

665 
	$mkdús
(*
∑th
)

667 
ªt
;

668 *
x
 = 
∑th
 + 1;

671 
x
 = 
	`adb_dú°¨t
(x);

672 if(
x
 == 0)  0;

673 *
x
 = 0;

674 
ªt
 = 
	`adb_mkdú
(
∑th
, 0775);

675 *
x
 = 
OS_PATH_SEPARATOR
;

676 if((
ªt
 < 0Ë&& (
î∫o
 !
EEXIST
)) {

677  
ªt
;

679 
x
++;

682 
	}
}

684 
	$backup
(
¨gc
, ** 
¨gv
) {

685 
buf
[4096];

686 
deÁu…_«me
[32];

687 c⁄° * 
fûíame
 = 
	`°r˝y
(
deÁu…_«me
, "./backup.ab");

688 
fd
, 
outFd
;

689 
i
, 
j
;

692 
i
 = 1; i < 
¨gc
; i++) {

693 i‡(!
	`°rcmp
("-f", 
¨gv
[
i
])) {

694 i‡(
i
 =
¨gc
-1) {

695 
	`Ârötf
(
°dîr
, "adb: -fÖassed withÇo filename\n");

696  
	`ußge
();

698 
fûíame
 = 
¨gv
[
i
+1];

699 
j
 = 
i
+2; j <
¨gc
; ) {

700 
¨gv
[
i
++] =árgv[
j
++];

702 
¨gc
 -= 2;

703 
¨gv
[
¨gc
] = 
NULL
;

708 i‡(
¨gc
 < 2Ë 
	`ußge
();

710 
	`adb_u∆ök
(
fûíame
);

711 
	`mkdús
((*)
fûíame
);

712 
outFd
 = 
	`adb_¸ót
(
fûíame
, 0640);

713 i‡(
outFd
 < 0) {

714 
	`Ârötf
(
°dîr
, "adb: u«bÀÅÿ›í fûê%s\n", 
fûíame
);

718 
	`¢¥ötf
(
buf
, (buf), "backup");

719 
¨gc
--, 
¨gv
++;árgc;árgc--,árgv++) {

720 
	`°∫ˇt
(
buf
, ":", (bufË- 
	`°æí
(buf) - 1);

721 
	`°∫ˇt
(
buf
, 
¨gv
[0], (bufË- 
	`°æí
(buf) - 1);

724 
	`D
("backup. fûíame=%†buf=%s\n", 
fûíame
, 
buf
);

725 
fd
 = 
	`adb_c⁄√˘
(
buf
);

726 i‡(
fd
 < 0) {

727 
	`Ârötf
(
°dîr
, "adb: unableÅo connect for backup\n");

728 
	`adb_˛o£
(
outFd
);

732 
	`¥ötf
("Now unlock your deviceánd confirmÅhe backup operation.\n");

733 
	`c›y_to_fûe
(
fd
, 
outFd
);

735 
	`adb_˛o£
(
fd
);

736 
	`adb_˛o£
(
outFd
);

738 
	}
}

740 
	$ª°‹e
(
¨gc
, ** 
¨gv
) {

741 c⁄° * 
fûíame
;

742 
fd
, 
èrFd
;

744 i‡(
¨gc
 !2Ë 
	`ußge
();

746 
fûíame
 = 
¨gv
[1];

747 
èrFd
 = 
	`adb_›í
(
fûíame
, 
O_RDONLY
);

748 i‡(
èrFd
 < 0) {

749 
	`Ârötf
(
°dîr
, "adb: u«bÀÅÿ›í fûê%s\n", 
fûíame
);

753 
fd
 = 
	`adb_c⁄√˘
("restore:");

754 i‡(
fd
 < 0) {

755 
	`Ârötf
(
°dîr
, "adb: unableÅo connect for backup\n");

756 
	`adb_˛o£
(
èrFd
);

760 
	`¥ötf
("Now unlock your deviceánd confirmÅheÑestore operation.\n");

761 
	`c›y_to_fûe
(
èrFd
, 
fd
);

763 
	`adb_˛o£
(
fd
);

764 
	`adb_˛o£
(
èrFd
);

766 
	}
}

768 
	#SENTINEL_FILE
 "c⁄fig" 
OS_PATH_SEPARATOR_STR
 "ív£tup.make"

	)

769 
	$t›_w‹ks
(c⁄° *
t›
)

771 i‡(
t›
 !
NULL
 && 
	`adb_is_absﬁuã_ho°_∑th
(top)) {

772 
∑th_buf
[
PATH_MAX
];

773 
	`¢¥ötf
(
∑th_buf
, (path_buf),

774 "%s" 
OS_PATH_SEPARATOR_STR
 
SENTINEL_FILE
, 
t›
);

775  
	`ac˚ss
(
∑th_buf
, 
F_OK
) == 0;

778 
	}
}

780 *
	$föd_t›_‰om
(c⁄° *
ödú
, 
∑th_buf
[
PATH_MAX
])

782 
	`°r˝y
(
∑th_buf
, 
ödú
);

784 i‡(
	`t›_w‹ks
(
∑th_buf
)) {

785  
∑th_buf
;

787 *
s
 = 
	`adb_dú°›
(
∑th_buf
);

788 i‡(
s
 !
NULL
) {

789 *
s
 = '\0';

791 
∑th_buf
[0] = '\0';

792  
NULL
;

795 
	}
}

797 *
	$föd_t›
(
∑th_buf
[
PATH_MAX
])

799 *
t›
 = 
	`gëív
("ANDROID_BUILD_TOP");

800 i‡(
t›
 !
NULL
 &&Åop[0] != '\0') {

801 i‡(!
	`t›_w‹ks
(
t›
)) {

802 
	`Ârötf
(
°dîr
, "adb: bad ANDROID_BUILD_TOP vÆuê\"%s\"\n", 
t›
);

803  
NULL
;

806 
t›
 = 
	`gëív
("TOP");

807 i‡(
t›
 !
NULL
 &&Åop[0] != '\0') {

808 i‡(!
	`t›_w‹ks
(
t›
)) {

809 
	`Ârötf
(
°dîr
, "adb: bad TOP vÆuê\"%s\"\n", 
t›
);

810  
NULL
;

813 
t›
 = 
NULL
;

817 i‡(
t›
 !
NULL
) {

820 
	`°r˝y
(
∑th_buf
, 
t›
);

821  
∑th_buf
;

827 
dú
[
PATH_MAX
];

828 
t›
 = 
	`föd_t›_‰om
(
	`gëcwd
(
dú
, (dú)), 
∑th_buf
);

829 i‡(
t›
 =
NULL
) {

833 
	`gë_my_∑th
(
dú
, 
PATH_MAX
);

834 
t›
 = 
	`föd_t›_‰om
(
dú
, 
∑th_buf
);

836  
t›
;

837 
	}
}

851 c⁄° *
	$föd_¥odu˘_out_∑th
(c⁄° *
höt
)

853 
∑th_buf
[
PATH_MAX
];

855 i‡(
höt
 =
NULL
 || hint[0] == '\0') {

856  
NULL
;

861 i‡(
	`adb_is_absﬁuã_ho°_∑th
(
höt
)) {

862 
	`°r˝y
(
∑th_buf
, 
höt
);

863  
∑th_buf
;

869 i‡(
	`adb_dú°¨t
(
höt
Ë!
NULL
) {

870 i‡(
	`gëcwd
(
∑th_buf
, ’©h_buf)Ë=
NULL
) {

871 
	`Ârötf
(
°dîr
, "adb: Couldn'àgë CWD: %s\n", 
	`°ªº‹
(
î∫o
));

872  
NULL
;

874 i‡(
	`°æí
(
∑th_buf
Ë+ 1 + såÀn(
höt
) >= (path_buf)) {

875 
	`Ârötf
(
°dîr
, "adb: Couldn'tássembleÖath\n");

876  
NULL
;

878 
	`°rˇt
(
∑th_buf
, 
OS_PATH_SEPARATOR_STR
);

879 
	`°rˇt
(
∑th_buf
, 
höt
);

880  
∑th_buf
;

888 
t›_buf
[
PATH_MAX
];

889 c⁄° *
t›
 = 
	`föd_t›
(
t›_buf
);

890 i‡(
t›
 =
NULL
) {

891 
	`Ârötf
(
°dîr
, "adb: Couldn't findÅop of buildÅree\n");

892  
NULL
;

895 
	`¢¥ötf
(
∑th_buf
, (path_buf),

896 "%s" 
OS_PATH_SEPARATOR_STR


897 "out" 
OS_PATH_SEPARATOR_STR


898 "èrgë" 
OS_PATH_SEPARATOR_STR


899 "¥odu˘" 
OS_PATH_SEPARATOR_STR


900 "%s", 
t›_buf
, 
höt
);

901 i‡(
	`ac˚ss
(
∑th_buf
, 
F_OK
) < 0) {

902 
	`Ârötf
(
°dîr
, "adb: Couldn't findáÖroduct dir "

903 "ba£d o¿\"-∞%s\"; \"%s\" d€¢'àexi°\n", 
höt
, 
∑th_buf
);

904  
NULL
;

906  
∑th_buf
;

907 
	}
}

909 
	$adb_comm™dlöe
(
¨gc
, **
¨gv
)

911 
buf
[4096];

912 
no_d´m⁄
 = 0;

913 
is_d´m⁄
 = 0;

914 
is_£rvî
 = 0;

915 
≥rsi°
 = 0;

916 
r
;

917 
quŸe
;

918 
å™•‹t_ty≥
 
ây≥
 = 
kTøn•‹tAny
;

919 * 
£rül
 = 
NULL
;

920 * 
£rvî_p‹t_°r
 = 
NULL
;

928 
gProdu˘OutP©h
 = 
	`gëív
("ANDROID_PRODUCT_OUT");

929 i‡(
gProdu˘OutP©h
 =
NULL
 || gProductOutPath[0] == '\0') {

930 
gProdu˘OutP©h
 = 
NULL
;

934 
£rül
 = 
	`gëív
("ANDROID_SERIAL");

937 
£rvî_p‹t_°r
 = 
	`gëív
("ANDROID_ADB_SERVER_PORT");

938 
£rvî_p‹t
 = 
DEFAULT_ADB_PORT
;

939 i‡(
£rvî_p‹t_°r
 && 
	`°æí
(server_port_str) > 0) {

940 
£rvî_p‹t
 = (Ë
	`°πﬁ
(
£rvî_p‹t_°r
, 
NULL
, 0);

941 i‡(
£rvî_p‹t
 <= 0) {

942 
	`Ârötf
(
°dîr
,

944 
£rvî_p‹t_°r
);

945  
	`ußge
();

950 
¨gc
 > 0) {

951 if(!
	`°rcmp
(
¨gv
[0],"server")) {

952 
is_£rvî
 = 1;

953 } if(!
	`°rcmp
(
¨gv
[0],"nodaemon")) {

954 
no_d´m⁄
 = 1;

955 } i‡(!
	`°rcmp
(
¨gv
[0], "fork-server")) {

957 
is_d´m⁄
 = 1;

958 } if(!
	`°rcmp
(
¨gv
[0],"persist")) {

959 
≥rsi°
 = 1;

960 } if(!
	`°∫cmp
(
¨gv
[0], "-p", 2)) {

961 c⁄° *
¥odu˘
 = 
NULL
;

962 i‡(
¨gv
[0][2] == '\0') {

963 i‡(
¨gc
 < 2Ë 
	`ußge
();

964 
¥odu˘
 = 
¨gv
[1];

965 
¨gc
--;

966 
¨gv
++;

968 
¥odu˘
 = 
¨gv
[0] + 2;

970 
gProdu˘OutP©h
 = 
	`föd_¥odu˘_out_∑th
(
¥odu˘
);

971 i‡(
gProdu˘OutP©h
 =
NULL
) {

972 
	`Ârötf
(
°dîr
, "adb: couldÇotÑesolve \"-p %s\"\n",

973 
¥odu˘
);

974  
	`ußge
();

976 } i‡(
¨gv
[0][0]=='-' &&árgv[0][1]=='s') {

977 i‡(
	`isdigô
(
¨gv
[0][2])) {

978 
£rül
 = 
¨gv
[0] + 2;

980 if(
¨gc
 < 2 || 
¨gv
[0][2] !'\0'Ë 
	`ußge
();

981 
£rül
 = 
¨gv
[1];

982 
¨gc
--;

983 
¨gv
++;

985 } i‡(!
	`°rcmp
(
¨gv
[0],"-d")) {

986 
ây≥
 = 
kTøn•‹tUsb
;

987 } i‡(!
	`°rcmp
(
¨gv
[0],"-e")) {

988 
ây≥
 = 
kTøn•‹tLoˇl
;

993 
¨gc
--;

994 
¨gv
++;

997 
	`adb_£t_å™•‹t
(
ây≥
, 
£rül
);

998 
	`adb_£t_t˝_•ecifics
(
£rvî_p‹t
);

1000 i‡(
is_£rvî
) {

1001 i‡(
no_d´m⁄
 || 
is_d´m⁄
) {

1002 
r
 = 
	`adb_maö
(
is_d´m⁄
, 
£rvî_p‹t
);

1004 
r
 = 
	`œunch_£rvî
(
£rvî_p‹t
);

1006 if(
r
) {

1007 
	`Ârötf
(
°dîr
,"* couldÇot start server *\n");

1009  
r
;

1012 
t›
:

1013 if(
¨gc
 == 0) {

1014  
	`ußge
();

1019 if(!
	`°rcmp
(
¨gv
[0], "devices")) {

1020 *
tmp
;

1021 *
li°›t
;

1022 i‡(
¨gc
 < 2)

1023 
li°›t
 = "";

1024 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "-l"))

1025 
li°›t
 = 
¨gv
[1];

1027 
	`Ârötf
(
°dîr
, "Usage:ádb devices [-l]\n");

1030 
	`¢¥ötf
(
buf
,  buf, "ho°:%s%s", 
¨gv
[0], 
li°›t
);

1031 
tmp
 = 
	`adb_quîy
(
buf
);

1032 if(
tmp
) {

1033 
	`¥ötf
("List of devicesáttached \n");

1034 
	`¥ötf
("%s\n", 
tmp
);

1041 if(!
	`°rcmp
(
¨gv
[0], "connect")) {

1042 *
tmp
;

1043 i‡(
¨gc
 != 2) {

1044 
	`Ârötf
(
°dîr
, "Usage:ádb connect <host>[:<port>]\n");

1047 
	`¢¥ötf
(
buf
,  buf, "ho°:c⁄√˘:%s", 
¨gv
[1]);

1048 
tmp
 = 
	`adb_quîy
(
buf
);

1049 if(
tmp
) {

1050 
	`¥ötf
("%s\n", 
tmp
);

1057 if(!
	`°rcmp
(
¨gv
[0], "disconnect")) {

1058 *
tmp
;

1059 i‡(
¨gc
 > 2) {

1060 
	`Ârötf
(
°dîr
, "Usage:ádb disconnect [<host>[:<port>]]\n");

1063 i‡(
¨gc
 == 2) {

1064 
	`¢¥ötf
(
buf
,  buf, "ho°:disc⁄√˘:%s", 
¨gv
[1]);

1066 
	`¢¥ötf
(
buf
,  buf, "host:disconnect:");

1068 
tmp
 = 
	`adb_quîy
(
buf
);

1069 if(
tmp
) {

1070 
	`¥ötf
("%s\n", 
tmp
);

1077 i‡(!
	`°rcmp
(
¨gv
[0], "emu")) {

1078  
	`adb_£nd_emuœt‹_comm™d
(
¨gc
, 
¨gv
);

1081 if(!
	`°rcmp
(
¨gv
[0], "shell") || !strcmp(argv[0], "hell")) {

1082 
r
;

1083 
fd
;

1085 
h
 = (
¨gv
[0][0] == 'h');

1087 i‡(
h
) {

1088 
	`¥ötf
("\x1b[41;33m");

1089 
	`fÊush
(
°dout
);

1092 if(
¨gc
 < 2) {

1093 
	`D
("starting interactive shell\n");

1094 
r
 = 
	`öãø˘ive_shñl
();

1095 i‡(
h
) {

1096 
	`¥ötf
("\x1b[0m");

1097 
	`fÊush
(
°dout
);

1099  
r
;

1102 
	`¢¥ötf
(
buf
,  buf, "shñl:%s", 
¨gv
[1]);

1103 
¨gc
 -= 2;

1104 
¨gv
 += 2;

1105 
¨gc
-- > 0) {

1106 
	`°rˇt
(
buf
, " ");

1109 
quŸe
 = (**
¨gv
 =0 || 
	`°rchr
(*argv, ' '));

1110 i‡(
quŸe
)

1111 
	`°rˇt
(
buf
, "\"");

1112 
	`°rˇt
(
buf
, *
¨gv
++);

1113 i‡(
quŸe
)

1114 
	`°rˇt
(
buf
, "\"");

1118 
	`D
("öãø˘ivêshñ»lo›. buff=%s\n", 
buf
);

1119 
fd
 = 
	`adb_c⁄√˘
(
buf
);

1120 if(
fd
 >= 0) {

1121 
	`D
("abouàtÿªad_™d_dump(fd=%d)\n", 
fd
);

1122 
	`ªad_™d_dump
(
fd
);

1123 
	`D
("read_and_dump() done.\n");

1124 
	`adb_˛o£
(
fd
);

1125 
r
 = 0;

1127 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

1128 
r
 = -1;

1131 if(
≥rsi°
) {

1132 
	`Ârötf
(
°dîr
,"\n- waiting for device -\n");

1133 
	`adb_¶ìp_ms
(1000);

1134 
	`do_cmd
(
ây≥
, 
£rül
, "wait-for-device", 0);

1136 i‡(
h
) {

1137 
	`¥ötf
("\x1b[0m");

1138 
	`fÊush
(
°dout
);

1140 
	`D
("öãø˘ivêshñ»lo›.Ñëu∫Ñ=%d\n", 
r
);

1141  
r
;

1146 if(!
	`°rcmp
(
¨gv
[0], "kill-server")) {

1147 
fd
;

1148 
fd
 = 
	`_adb_c⁄√˘
("host:kill");

1149 if(
fd
 == -1) {

1150 
	`Ârötf
(
°dîr
,"* serverÇotÑunning *\n");

1156 if(!
	`°rcmp
(
¨gv
[0], "sideload")) {

1157 if(
¨gc
 !2Ë 
	`ußge
();

1158 if(
	`adb_dow∆ﬂd
("sidñﬂd", 
¨gv
[1], 1)) {

1165 if(!
	`°rcmp
(
¨gv
[0], "remount") || !strcmp(argv[0], "reboot")

1166 || !
	`°rcmp
(
¨gv
[0], "reboot-bootloader")

1167 || !
	`°rcmp
(
¨gv
[0], "tcpip") || !strcmp(argv[0], "usb")

1168 || !
	`°rcmp
(
¨gv
[0], "root")) {

1169 
comm™d
[100];

1170 i‡(!
	`°rcmp
(
¨gv
[0], "reboot-bootloader"))

1171 
	`¢¥ötf
(
comm™d
, (command), "reboot:bootloader");

1172 i‡(
¨gc
 > 1)

1173 
	`¢¥ötf
(
comm™d
, (comm™d), "%s:%s", 
¨gv
[0],árgv[1]);

1175 
	`¢¥ötf
(
comm™d
, (comm™d), "%s:", 
¨gv
[0]);

1176 
fd
 = 
	`adb_c⁄√˘
(
comm™d
);

1177 if(
fd
 >= 0) {

1178 
	`ªad_™d_dump
(
fd
);

1179 
	`adb_˛o£
(
fd
);

1182 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

1186 if(!
	`°rcmp
(
¨gv
[0], "bugreport")) {

1187 i‡(
¨gc
 !1Ë 
	`ußge
();

1188 
	`do_cmd
(
ây≥
, 
£rül
, "shell", "bugreport", 0);

1194 if(!
	`°∫cmp
(
¨gv
[0], "waô-f‹-", 
	`°æí
("wait-for-"))) {

1195 * 
£rvi˚
 = 
¨gv
[0];

1196 i‡(!
	`°∫cmp
(
£rvi˚
, "waô-f‹-devi˚", 
	`°æí
("wait-for-device"))) {

1197 i‡(
ây≥
 =
kTøn•‹tUsb
) {

1198 
£rvi˚
 = "wait-for-usb";

1199 } i‡(
ây≥
 =
kTøn•‹tLoˇl
) {

1200 
£rvi˚
 = "wait-for-local";

1202 
£rvi˚
 = "wait-for-any";

1206 
	`f‹m©_ho°_comm™d
(
buf
,  buf, 
£rvi˚
, 
ây≥
, 
£rül
);

1208 i‡(
	`adb_comm™d
(
buf
)) {

1209 
	`D
("Áûuª: %†*\n",
	`adb_îr‹
());

1210 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

1217 if(
¨gc
 > 1) {

1218 
¨gc
--;

1219 
¨gv
++;

1220 
t›
;

1225 if(!
	`°rcmp
(
¨gv
[0], "forward")) {

1226 if(
¨gc
 !3Ë 
	`ußge
();

1227 i‡(
£rül
) {

1228 
	`¢¥ötf
(
buf
,  buf, "ho°-£rül:%s:f‹w¨d:%s;%s",
£rül
, 
¨gv
[1],árgv[2]);

1229 } i‡(
ây≥
 =
kTøn•‹tUsb
) {

1230 
	`¢¥ötf
(
buf
,  buf, "ho°-usb:f‹w¨d:%s;%s", 
¨gv
[1],árgv[2]);

1231 } i‡(
ây≥
 =
kTøn•‹tLoˇl
) {

1232 
	`¢¥ötf
(
buf
,  buf, "ho°-loˇl:f‹w¨d:%s;%s", 
¨gv
[1],árgv[2]);

1234 
	`¢¥ötf
(
buf
,  buf, "ho°:f‹w¨d:%s;%s", 
¨gv
[1],árgv[2]);

1236 if(
	`adb_comm™d
(
buf
)) {

1237 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

1245 if(!
	`°rcmp
(
¨gv
[0], "ls")) {

1246 if(
¨gc
 !2Ë 
	`ußge
();

1247  
	`do_sync_ls
(
¨gv
[1]);

1250 if(!
	`°rcmp
(
¨gv
[0], "push")) {

1251 if(
¨gc
 !3Ë 
	`ußge
();

1252  
	`do_sync_push
(
¨gv
[1],árgv[2], 0 );

1255 if(!
	`°rcmp
(
¨gv
[0], "pull")) {

1256 i‡(
¨gc
 == 2) {

1257  
	`do_sync_puŒ
(
¨gv
[1], ".");

1258 } i‡(
¨gc
 == 3) {

1259  
	`do_sync_puŒ
(
¨gv
[1],árgv[2]);

1261  
	`ußge
();

1265 if(!
	`°rcmp
(
¨gv
[0], "install")) {

1266 i‡(
¨gc
 < 2Ë 
	`ußge
();

1267  
	`ö°Æl_≠p
(
ây≥
, 
£rül
, 
¨gc
, 
¨gv
);

1270 if(!
	`°rcmp
(
¨gv
[0], "uninstall")) {

1271 i‡(
¨gc
 < 2Ë 
	`ußge
();

1272  
	`unö°Æl_≠p
(
ây≥
, 
£rül
, 
¨gc
, 
¨gv
);

1275 if(!
	`°rcmp
(
¨gv
[0], "sync")) {

1276 *
§ˇrg
, *
™droid_§˝©h
, *
d©a_§˝©h
;

1277 
li°⁄ly
 = 0;

1279 
ªt
;

1280 if(
¨gc
 < 2) {

1282 
§ˇrg
 = 
NULL
;

1283 } i‡(
¨gc
 >2 && 
	`°rcmp
(
¨gv
[1], "-l") == 0) {

1284 
li°⁄ly
 = 1;

1285 i‡(
¨gc
 == 3) {

1286 
§ˇrg
 = 
¨gv
[2];

1288 
§ˇrg
 = 
NULL
;

1290 } if(
¨gc
 == 2) {

1292 
§ˇrg
 = 
¨gv
[1];

1294  
	`ußge
();

1296 
ªt
 = 
	`föd_sync_dús
(
§ˇrg
, &
™droid_§˝©h
, &
d©a_§˝©h
);

1297 if(
ªt
 !0Ë 
	`ußge
();

1299 if(
™droid_§˝©h
 !
NULL
)

1300 
ªt
 = 
	`do_sync_sync
(
™droid_§˝©h
, "/sy°em", 
li°⁄ly
);

1301 if(
ªt
 =0 && 
d©a_§˝©h
 !
NULL
)

1302 
ªt
 = 
	`do_sync_sync
(
d©a_§˝©h
, "/d©a", 
li°⁄ly
);

1304 
	`‰ì
(
™droid_§˝©h
);

1305 
	`‰ì
(
d©a_§˝©h
);

1306  
ªt
;

1311 if(!
	`°rcmp
(
¨gv
[0],"get-state") ||

1312 !
	`°rcmp
(
¨gv
[0],"get-serialno") ||

1313 !
	`°rcmp
(
¨gv
[0],"get-devpath"))

1315 *
tmp
;

1317 
	`f‹m©_ho°_comm™d
(
buf
,  buf, 
¨gv
[0], 
ây≥
, 
£rül
);

1318 
tmp
 = 
	`adb_quîy
(
buf
);

1319 if(
tmp
) {

1320 
	`¥ötf
("%s\n", 
tmp
);

1329 if(!
	`°rcmp
(
¨gv
[0],"status-window")) {

1330 
	`°©us_wödow
(
ây≥
, 
£rül
);

1334 if(!
	`°rcmp
(
¨gv
[0],"logcat") || !strcmp(argv[0],"lolcat") || !strcmp(argv[0],"longcat")) {

1335  
	`logˇt
(
ây≥
, 
£rül
, 
¨gc
, 
¨gv
);

1338 if(!
	`°rcmp
(
¨gv
[0],"ppp")) {

1339  
	`µp
(
¨gc
, 
¨gv
);

1342 i‡(!
	`°rcmp
(
¨gv
[0], "start-server")) {

1343  
	`adb_c⁄√˘
("host:start-server");

1346 i‡(!
	`°rcmp
(
¨gv
[0], "backup")) {

1347  
	`backup
(
¨gc
, 
¨gv
);

1350 i‡(!
	`°rcmp
(
¨gv
[0], "restore")) {

1351  
	`ª°‹e
(
¨gc
, 
¨gv
);

1354 i‡(!
	`°rcmp
(
¨gv
[0], "jdwp")) {

1355 
fd
 = 
	`adb_c⁄√˘
("jdwp");

1356 i‡(
fd
 >= 0) {

1357 
	`ªad_™d_dump
(
fd
);

1358 
	`adb_˛o£
(
fd
);

1361 
	`Ârötf
(
°dîr
, "îr‹: %s\n", 
	`adb_îr‹
());

1367 if(!
	`°rcmp
(
¨gv
[0], "help") || !strcmp(argv[0], "/?")) {

1368 
	`hñp
();

1372 if(!
	`°rcmp
(
¨gv
[0], "version")) {

1373 
	`vîsi⁄
(
°dout
);

1377 
	`ußge
();

1379 
	}
}

1381 
	$do_cmd
(
å™•‹t_ty≥
 
ây≥
, * 
£rül
, *
cmd
, ...)

1383 *
¨gv
[16];

1384 
¨gc
;

1385 
va_li°
 
≠
;

1387 
	`va_°¨t
(
≠
, 
cmd
);

1388 
¨gc
 = 0;

1390 i‡(
£rül
) {

1391 
¨gv
[
¨gc
++] = "-s";

1392 
¨gv
[
¨gc
++] = 
£rül
;

1393 } i‡(
ây≥
 =
kTøn•‹tUsb
) {

1394 
¨gv
[
¨gc
++] = "-d";

1395 } i‡(
ây≥
 =
kTøn•‹tLoˇl
) {

1396 
¨gv
[
¨gc
++] = "-e";

1399 
¨gv
[
¨gc
++] = 
cmd
;

1400 (
¨gv
[
¨gc
] = 
	`va_¨g
(
≠
, *)) != 0)árgc++;

1401 
	`va_íd
(
≠
);

1404 
n
;

1405 
	`Ârötf
(
°dîr
,"¨g¯%d\n",
¨gc
);

1406 
n
 = 0;Ç < 
¨gc
;Ç++) {

1407 
	`Ârötf
(
°dîr
,"¨gv[%d] = \"%s\"\n", 
n
, 
¨gv
[n]);

1411  
	`adb_comm™dlöe
(
¨gc
, 
¨gv
);

1412 
	}
}

1414 
	$föd_sync_dús
(c⁄° *
§ˇrg
,

1415 **
™droid_§cdú_out
, **
d©a_§cdú_out
)

1417 *
™droid_§cdú
, *
d©a_§cdú
;

1419 if(
§ˇrg
 =
NULL
) {

1420 
™droid_§cdú
 = 
	`¥odu˘_fûe
("system");

1421 
d©a_§cdú
 = 
	`¥odu˘_fûe
("data");

1426 if(
	`°rcmp
(
§ˇrg
, "system") == 0) {

1427 
™droid_§cdú
 = 
	`¥odu˘_fûe
("system");

1428 
d©a_§cdú
 = 
NULL
;

1429 } if(
	`°rcmp
(
§ˇrg
, "data") == 0) {

1430 
™droid_§cdú
 = 
NULL
;

1431 
d©a_§cdú
 = 
	`¥odu˘_fûe
("data");

1439 if(
™droid_§cdú_out
 !
NULL
)

1440 *
™droid_§cdú_out
 = 
™droid_§cdú
;

1442 
	`‰ì
(
™droid_§cdú
);

1444 if(
d©a_§cdú_out
 !
NULL
)

1445 *
d©a_§cdú_out
 = 
d©a_§cdú
;

1447 
	`‰ì
(
d©a_§cdú
);

1450 
	}
}

1452 
	$pm_comm™d
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
,

1453 
¨gc
, ** 
¨gv
)

1455 
buf
[4096];

1457 
	`¢¥ötf
(
buf
, (buf), "shell:pm");

1459 
¨gc
-- > 0) {

1460 *
quŸed
;

1462 
quŸed
 = 
	`dupAndQuŸe
(*
¨gv
++);

1464 
	`°∫ˇt
(
buf
, " ", (buf)-1);

1465 
	`°∫ˇt
(
buf
, 
quŸed
, (buf)-1);

1466 
	`‰ì
(
quŸed
);

1469 
	`£nd_shñlcomm™d
(
å™•‹t
, 
£rül
, 
buf
);

1471 
	}
}

1473 
	$unö°Æl_≠p
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, 
¨gc
, ** 
¨gv
)

1477 i‡(
¨gc
 =3 && 
	`°rcmp
(
¨gv
[1], "-k") == 0)

1479 
	`¥ötf
(

1483 "I‡youÅruly wishÅÿc⁄töue,Éxecuã 'adb shñ»pm unö°Æ»-k %s'\n", 
¨gv
[2]);

1488  
	`pm_comm™d
(
å™•‹t
, 
£rül
, 
¨gc
, 
¨gv
);

1489 
	}
}

1491 
	$dñëe_fûe
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, * 
fûíame
)

1493 
buf
[4096];

1494 * 
quŸed
;

1496 
	`¢¥ötf
(
buf
, (buf), "shell:rm ");

1497 
quŸed
 = 
	`dupAndQuŸe
(
fûíame
);

1498 
	`°∫ˇt
(
buf
, 
quŸed
, (buf)-1);

1499 
	`‰ì
(
quŸed
);

1501 
	`£nd_shñlcomm™d
(
å™•‹t
, 
£rül
, 
buf
);

1503 
	}
}

1505 c⁄° * 
	$gë_ba£«me
(c⁄° * 
fûíame
)

1507 c⁄° * 
ba£«me
 = 
	`adb_dú°›
(
fûíame
);

1508 i‡(
ba£«me
) {

1509 
ba£«me
++;

1510  
ba£«me
;

1512  
fûíame
;

1514 
	}
}

1516 
	$check_fûe
(c⁄° * 
fûíame
)

1518 
°©
 
°
;

1520 i‡(
fûíame
 =
NULL
) {

1524 i‡(
	`°©
(
fûíame
, &
°
) != 0) {

1525 
	`Ârötf
(
°dîr
, "ˇn'àföd '%s'Åÿö°Æl\n", 
fûíame
);

1529 i‡(!
	`S_ISREG
(
°
.
°_mode
)) {

1530 
	`Ârötf
(
°dîr
, "ˇn'àö°Æ»'%s' beˇu£ it'†nŸá fûe\n", 
fûíame
);

1535 
	}
}

1537 
	$ö°Æl_≠p
(
å™•‹t_ty≥
 
å™•‹t
, * 
£rül
, 
¨gc
, ** 
¨gv
)

1539 c⁄° *c⁄° 
DATA_DEST
 = "/data/local/tmp/%s";

1540 c⁄° *c⁄° 
SD_DEST
 = "/sdcard/tmp/%s";

1541 c⁄° * 
whîe
 = 
DATA_DEST
;

1542 
≠k_de°
[
PATH_MAX
];

1543 
vîifiˇti⁄_de°
[
PATH_MAX
];

1544 * 
≠k_fûe
;

1545 * 
vîifiˇti⁄_fûe
 = 
NULL
;

1546 
fûe_¨g
 = -1;

1547 
îr
;

1548 
i
;

1549 
vîify_≠k
 = 1;

1551 
i
 = 1; i < 
¨gc
; i++) {

1552 i‡(*
¨gv
[
i
] != '-') {

1553 
fûe_¨g
 = 
i
;

1555 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-i")) {

1557 
i
++;

1558 } i‡(!
	`°rcmp
(
¨gv
[
i
], "-s")) {

1559 
whîe
 = 
SD_DEST
;

1560 } i‡(!
	`°rcmp
(
¨gv
[
i
], "--algo")) {

1561 
vîify_≠k
 = 0;

1562 
i
++;

1563 } i‡(!
	`°rcmp
(
¨gv
[
i
], "--iv")) {

1564 
vîify_≠k
 = 0;

1565 
i
++;

1566 } i‡(!
	`°rcmp
(
¨gv
[
i
], "--key")) {

1567 
vîify_≠k
 = 0;

1568 
i
++;

1572 i‡(
fûe_¨g
 < 0) {

1573 
	`Ârötf
(
°dîr
, "can't find filename inárguments\n");

1575 } i‡(
fûe_¨g
 + 2 < 
¨gc
) {

1576 
	`Ârötf
(
°dîr
, "too many files specified; onlyÅakes APK fileánd verifier file\n");

1580 
≠k_fûe
 = 
¨gv
[
fûe_¨g
];

1582 i‡(
fûe_¨g
 !
¨gc
 - 1) {

1583 
vîifiˇti⁄_fûe
 = 
¨gv
[
fûe_¨g
 + 1];

1586 i‡(
	`check_fûe
(
≠k_fûe
Ë|| check_fûe(
vîifiˇti⁄_fûe
)) {

1590 
	`¢¥ötf
(
≠k_de°
, ápk_de°, 
whîe
, 
	`gë_ba£«me
(
≠k_fûe
));

1591 i‡(
vîifiˇti⁄_fûe
 !
NULL
) {

1592 
	`¢¥ötf
(
vîifiˇti⁄_de°
, (vîifiˇti⁄_de°), 
whîe
, 
	`gë_ba£«me
(
vîifiˇti⁄_fûe
));

1594 i‡(!
	`°rcmp
(
≠k_de°
, 
vîifiˇti⁄_de°
)) {

1595 
	`Ârötf
(
°dîr
, "APKánd verification file can't haveÅhe sameÇame\n");

1600 
îr
 = 
	`do_sync_push
(
≠k_fûe
, 
≠k_de°
, 
vîify_≠k
);

1601 i‡(
îr
) {

1602 
˛ónup_≠k
;

1604 
¨gv
[
fûe_¨g
] = 
≠k_de°
;

1607 i‡(
vîifiˇti⁄_fûe
 !
NULL
) {

1608 
îr
 = 
	`do_sync_push
(
vîifiˇti⁄_fûe
, 
vîifiˇti⁄_de°
, 0 );

1609 i‡(
îr
) {

1610 
˛ónup_≠k
;

1612 
¨gv
[
fûe_¨g
 + 1] = 
vîifiˇti⁄_de°
;

1616 
	`pm_comm™d
(
å™•‹t
, 
£rül
, 
¨gc
, 
¨gv
);

1618 
˛ónup_≠k
:

1619 i‡(
vîifiˇti⁄_fûe
 !
NULL
) {

1620 
	`dñëe_fûe
(
å™•‹t
, 
£rül
, 
vîifiˇti⁄_de°
);

1623 
	`dñëe_fûe
(
å™•‹t
, 
£rül
, 
≠k_de°
);

1625  
îr
;

1626 
	}
}

	@console.c

1 
	~"sysdïs.h
"

2 
	~"adb.h
"

3 
	~"adb_˛õ¡.h
"

4 
	~<°dio.h
>

6 
	$c⁄√˘_to_c⁄sﬁe
()

8 
fd
, 
p‹t
;

10 
p‹t
 = 
	`adb_gë_emuœt‹_c⁄sﬁe_p‹t
();

11 i‡(
p‹t
 < 0) {

12 i‡(
p‹t
 == -2)

13 
	`Ârötf
(
°dîr
, "error: moreÅhan oneÉmulator detected. use -s option\n");

15 
	`Ârötf
(
°dîr
, "error:ÇoÉmulator detected\n");

18 
fd
 = 
	`sockë_lo›back_˛õ¡
–
p‹t
, 
SOCK_STREAM
 );

19 i‡(
fd
 < 0) {

20 
	`Ârötf
(
°dîr
, "îr‹: couldÇŸ c⁄√˘ÅÿTCPÖ‹à%d\n", 
p‹t
);

23  
fd
;

24 
	}
}

27 
	$adb_£nd_emuœt‹_comm™d
(
¨gc
, ** 
¨gv
)

29 
fd
, 
¬
;

31 
fd
 = 
	`c⁄√˘_to_c⁄sﬁe
();

32 i‡(
fd
 < 0)

35 
	#QUIT
 "quô\n"

	)

37 
¬
 = 1;Ç¿< 
¨gc
;Çn++) {

38 
	`adb_wrôe
–
fd
, 
¨gv
[
¬
], 
	`°æí
(argv[nn]) );

39 
	`adb_wrôe
–
fd
, (
¬
 =
¨gc
-1) ? "\n" : " ", 1 );

41 
	`adb_wrôe
–
fd
, 
QUIT
, (QUIT)-1 );

42 
	`adb_˛o£
(
fd
);

45 
	}
}

	@fdevent.c

18 
	~<sys/io˘l.h
>

20 
	~<°dlib.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

23 
	~<uni°d.h
>

24 
	~<î∫o.h
>

26 
	~<f˙é.h
>

28 
	~<°d¨g.h
>

29 
	~<°ddef.h
>

31 
	~"fdevít.h
"

32 
	~"å™•‹t.h
"

33 
	~"sysdïs.h
"

40 
	#DEBUG
 0

	)

45 
	gSHELL_EXIT_NOTIFY_FD
 = -1;

47 
	$Áèl
(c⁄° *
‚
, c⁄° *
fmt
, ...)

49 
va_li°
 
≠
;

50 
	`va_°¨t
(
≠
, 
fmt
);

51 
	`Ârötf
(
°dîr
, "%s:", 
‚
);

52 
	`vÂrötf
(
°dîr
, 
fmt
, 
≠
);

53 
	`va_íd
(
≠
);

54 
	`ab‹t
();

55 
	}
}

57 
	#FATAL
(
x
...Ë
	`Áèl
(
__FUNCTION__
, x)

	)

59 #i‡
DEBUG


60 
	#D
(...) \

62 
	`adb_muãx_lock
(&
D_lock
); \

63 
ßve_î∫o
 = 
î∫o
; \

64 
	`Ârötf
(
°dîr
, "%s::%s():", 
__FILE__
, 
__FUNCTION__
); \

65 
î∫o
 = 
ßve_î∫o
; \

66 
	`Ârötf
(
°dîr
, 
__VA_ARGS__
); \

67 
	`adb_muãx_u∆ock
(&
D_lock
); \

68 
î∫o
 = 
ßve_î∫o
; \

69 } 0)

	)

70 
	$dump_fde
(
fdevít
 *
fde
, c⁄° *
öfo
)

72 
	`adb_muãx_lock
(&
D_lock
);

73 
	`Ârötf
(
°dîr
,"FDE #%03d %c%c%¯%s\n", 
fde
->
fd
,

74 
fde
->
°©e
 & 
FDE_READ
 ? 'R' : ' ',

75 
fde
->
°©e
 & 
FDE_WRITE
 ? 'W' : ' ',

76 
fde
->
°©e
 & 
FDE_ERROR
 ? 'E' : ' ',

77 
öfo
);

78 
	`adb_muãx_u∆ock
(&
D_lock
);

79 
	}
}

81 
	#D
(...Ë(()0)

	)

82 
	#dump_fde
(
fde
, 
öfo
Ëdÿ{ } 0)

	)

85 
	#FDE_EVENTMASK
 0x00ff

	)

86 
	#FDE_STATEMASK
 0xff00

	)

88 
	#FDE_ACTIVE
 0x0100

	)

89 
	#FDE_PENDING
 0x0200

	)

90 
	#FDE_CREATED
 0x0400

	)

92 
fdevít_∂i°_íqueue
(
fdevít
 *
node
);

93 
fdevít_∂i°_ªmove
(
fdevít
 *
node
);

94 
fdevít
 *
fdevít_∂i°_dequeue
();

95 
fdevít_sub¥oc_evít_func
(
fd
, 
evíts
, *
u£rd©a
);

97 
fdevít
 
	gli°_≥ndög
 = {

98 .
√xt
 = &
li°_≥ndög
,

99 .
	g¥ev
 = &
li°_≥ndög
,

102 
fdevít
 **
	gfd_èbÀ
 = 0;

103 
	gfd_èbÀ_max
 = 0;

105 #ifde‡
CRAPTASTIC


108 
	~<sys/ïﬁl.h
>

110 
	gïﬁl_fd
 = -1;

112 
	$fdevít_öô
()

115 
ïﬁl_fd
 = 
	`ïﬁl_¸óã
(256);

117 if(
ïﬁl_fd
 < 0) {

118 
	`≥º‹
("epoll_create() failed");

119 
	`exô
(1);

123 
	`f˙é
(
ïﬁl_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

124 
	}
}

126 
	$fdevít_c⁄√˘
(
fdevít
 *
fde
)

128 
ïﬁl_evít
 
ev
;

130 
	`mem£t
(&
ev
, 0, (ev));

131 
ev
.
evíts
 = 0;

132 
ev
.
d©a
.
±r
 = 
fde
;

135 if(
	`ïﬁl_˘l
(
ïﬁl_fd
, 
EPOLL_CTL_ADD
, 
fde
->
fd
, &
ev
)) {

136 
	`≥º‹
("epoll_ctl() failed\n");

137 
	`exô
(1);

140 
	}
}

142 
	$fdevít_disc⁄√˘
(
fdevít
 *
fde
)

144 
ïﬁl_evít
 
ev
;

146 
	`mem£t
(&
ev
, 0, (ev));

147 
ev
.
evíts
 = 0;

148 
ev
.
d©a
.
±r
 = 
fde
;

155 
	`ïﬁl_˘l
(
ïﬁl_fd
, 
EPOLL_CTL_DEL
, 
fde
->
fd
, &
ev
);

156 
	}
}

158 
	$fdevít_upd©e
(
fdevít
 *
fde
, 
evíts
)

160 
ïﬁl_evít
 
ev
;

161 
a˘ive
;

163 
a˘ive
 = (
fde
->
°©e
 & 
FDE_EVENTMASK
) != 0;

165 
	`mem£t
(&
ev
, 0, (ev));

166 
ev
.
evíts
 = 0;

167 
ev
.
d©a
.
±r
 = 
fde
;

169 if(
evíts
 & 
FDE_READ
Ë
ev
.evít†|
EPOLLIN
;

170 if(
evíts
 & 
FDE_WRITE
Ë
ev
.evít†|
EPOLLOUT
;

171 if(
evíts
 & 
FDE_ERROR
Ë
ev
.evít†|(
EPOLLERR
 | 
EPOLLHUP
);

173 
fde
->
°©e
 = (fde->°©ê& 
FDE_STATEMASK
Ë| 
evíts
;

175 if(
a˘ive
) {

180 if(
ev
.
evíts
) {

181 if(
	`ïﬁl_˘l
(
ïﬁl_fd
, 
EPOLL_CTL_MOD
, 
fde
->
fd
, &
ev
)) {

182 
	`≥º‹
("epoll_ctl() failed\n");

183 
	`exô
(1);

186 if(
	`ïﬁl_˘l
(
ïﬁl_fd
, 
EPOLL_CTL_DEL
, 
fde
->
fd
, &
ev
)) {

187 
	`≥º‹
("epoll_ctl() failed\n");

188 
	`exô
(1);

195 if(
ev
.
evíts
) {

196 if(
	`ïﬁl_˘l
(
ïﬁl_fd
, 
EPOLL_CTL_ADD
, 
fde
->
fd
, &
ev
)) {

197 
	`≥º‹
("epoll_ctl() failed\n");

198 
	`exô
(1);

202 
	}
}

204 
	$fdevít_¥o˚ss
()

206 
ïﬁl_evít
 
evíts
[256];

207 
fdevít
 *
fde
;

208 
i
, 
n
;

210 
n
 = 
	`ïﬁl_waô
(
ïﬁl_fd
, 
evíts
, 256, -1);

212 if(
n
 < 0) {

213 if(
î∫o
 =
EINTR
) ;

214 
	`≥º‹
("epoll_wait");

215 
	`exô
(1);

218 
i
 = 0; i < 
n
; i++) {

219 
ïﬁl_evít
 *
ev
 = 
evíts
 + 
i
;

220 
fde
 = 
ev
->
d©a
.
±r
;

222 if(
ev
->
evíts
 & 
EPOLLIN
) {

223 
fde
->
evíts
 |
FDE_READ
;

225 if(
ev
->
evíts
 & 
EPOLLOUT
) {

226 
fde
->
evíts
 |
FDE_WRITE
;

228 if(
ev
->
evíts
 & (
EPOLLERR
 | 
EPOLLHUP
)) {

229 
fde
->
evíts
 |
FDE_ERROR
;

231 if(
fde
->
evíts
) {

232 if(
fde
->
°©e
 & 
FDE_PENDING
) ;

233 
fde
->
°©e
 |
FDE_PENDING
;

234 
	`fdevít_∂i°_íqueue
(
fde
);

237 
	}
}

241 #ifde‡
HAVE_WINSOCK


242 
	~<wösock2.h
>

244 
	~<sys/£À˘.h
>

247 
fd_£t
 
	gªad_fds
;

248 
fd_£t
 
	gwrôe_fds
;

249 
fd_£t
 
	gîr‹_fds
;

251 
	g£À˘_n
 = 0;

253 
	$fdevít_öô
()

255 
	`FD_ZERO
(&
ªad_fds
);

256 
	`FD_ZERO
(&
wrôe_fds
);

257 
	`FD_ZERO
(&
îr‹_fds
);

258 
	}
}

260 
	$fdevít_c⁄√˘
(
fdevít
 *
fde
)

262 if(
fde
->
fd
 >
£À˘_n
) {

263 
£À˘_n
 = 
fde
->
fd
 + 1;

265 
	}
}

267 
	$fdevít_disc⁄√˘
(
fdevít
 *
fde
)

269 
i
, 
n
;

271 
	`FD_CLR
(
fde
->
fd
, &
ªad_fds
);

272 
	`FD_CLR
(
fde
->
fd
, &
wrôe_fds
);

273 
	`FD_CLR
(
fde
->
fd
, &
îr‹_fds
);

275 
n
 = 0, 
i
 = 0; i < 
£À˘_n
; i++) {

276 if(
fd_èbÀ
[
i
] !0Ë
n
 = i;

278 
£À˘_n
 = 
n
 + 1;

279 
	}
}

281 
	$fdevít_upd©e
(
fdevít
 *
fde
, 
evíts
)

283 if(
evíts
 & 
FDE_READ
) {

284 
	`FD_SET
(
fde
->
fd
, &
ªad_fds
);

286 
	`FD_CLR
(
fde
->
fd
, &
ªad_fds
);

288 if(
evíts
 & 
FDE_WRITE
) {

289 
	`FD_SET
(
fde
->
fd
, &
wrôe_fds
);

291 
	`FD_CLR
(
fde
->
fd
, &
wrôe_fds
);

293 if(
evíts
 & 
FDE_ERROR
) {

294 
	`FD_SET
(
fde
->
fd
, &
îr‹_fds
);

296 
	`FD_CLR
(
fde
->
fd
, &
îr‹_fds
);

299 
fde
->
°©e
 = (fde->°©ê& 
FDE_STATEMASK
Ë| 
evíts
;

300 
	}
}

305 
	$fdevít_fd_check
(
fd_£t
 *
fds
)

307 
i
, 
n
 = 0;

308 
fdevít
 *
fde
;

310 
i
 = 0; i < 
£À˘_n
; i++) {

311 
fde
 = 
fd_èbÀ
[
i
];

312 if(
fde
 == 0) ;

313 if(
	`f˙é
(
i
, 
F_GETFL
, 
NULL
) < 0) {

314 
	`FD_SET
(
i
, 
fds
);

315 
n
++;

320  
n
;

321 
	}
}

323 #i‡!
DEBUG


324 
ölöe
 
	$dump_Æl_fds
(c⁄° *
exåa_msg
Ë{
	}
}

326 
	$dump_Æl_fds
(c⁄° *
exåa_msg
)

328 
i
;

329 
fdevít
 *
fde
;

331 
msg_buff
[
FD_SETSIZE
*6 + 1], *
pb
=msg_buff;

332 
size_t
 
max_ch¨s
 = 
FD_SETSIZE
 * 6 + 1;

333 
¥öãd_out
;

334 
	#SAFE_SPRINTF
(...) \

336 
¥öãd_out
 = 
	`¢¥ötf
(
pb
, 
max_ch¨s
, 
__VA_ARGS__
); \

337 i‡(
¥öãd_out
 <= 0) { \

338 
	`D
("... snprintf failed.\n"); \

341 i‡(
max_ch¨s
 < ()
¥öãd_out
) { \

342 
	`D
("... snprintf out of space.\n"); \

345 
pb
 +
¥öãd_out
; \

346 
max_ch¨s
 -
¥öãd_out
; \

347 } 0)

	)

349 
i
 = 0; i < 
£À˘_n
; i++) {

350 
fde
 = 
fd_èbÀ
[
i
];

351 
	`SAFE_SPRINTF
("%d", 
i
);

352 if(
fde
 == 0) {

353 
	`SAFE_SPRINTF
("? ");

356 if(
	`f˙é
(
i
, 
F_GETFL
, 
NULL
) < 0) {

357 
	`SAFE_SPRINTF
("b");

359 
	`SAFE_SPRINTF
(" ");

361 
	`D
("%†fd_èbÀ[]->fd = {%s}\n", 
exåa_msg
, 
msg_buff
);

362 
	}
}

365 
	$fdevít_¥o˚ss
()

367 
i
, 
n
;

368 
fdevít
 *
fde
;

369 
evíts
;

370 
fd_£t
 
rfd
, 
wfd
, 
efd
;

372 
	`mem˝y
(&
rfd
, &
ªad_fds
, (
fd_£t
));

373 
	`mem˝y
(&
wfd
, &
wrôe_fds
, (
fd_£t
));

374 
	`mem˝y
(&
efd
, &
îr‹_fds
, (
fd_£t
));

376 
	`dump_Æl_fds
("pre select()");

378 
n
 = 
	`£À˘
(
£À˘_n
, &
rfd
, &
wfd
, &
efd
, 
NULL
);

379 
ßved_î∫o
 = 
î∫o
;

380 
	`D
("£À˘(Ëªtu∫edÇ=%d,Éºno=%d\n", 
n
,Ç<0?
ßved_î∫o
:0);

382 
	`dump_Æl_fds
("post select()");

384 if(
n
 < 0) {

385 
ßved_î∫o
) {

386 
EINTR
: ;

387 
EBADF
:

389 
	`FD_ZERO
(&
wfd
);

390 
	`FD_ZERO
(&
efd
);

391 
	`FD_ZERO
(&
rfd
);

394 
	`D
("U√x≥˘ed sñe˘(Ëîr‹=%d\n", 
ßved_î∫o
);

398 if(
n
 <= 0) {

401 
n
 = 
	`fdevít_fd_check
(&
rfd
);

404 
i
 = 0; (ò< 
£À˘_n
Ë&& (
n
 > 0); i++) {

405 
evíts
 = 0;

406 if(
	`FD_ISSET
(
i
, &
rfd
)Ë{ 
evíts
 |
FDE_READ
; 
n
--; }

407 if(
	`FD_ISSET
(
i
, &
wfd
)Ë{ 
evíts
 |
FDE_WRITE
; 
n
--; }

408 if(
	`FD_ISSET
(
i
, &
efd
)Ë{ 
evíts
 |
FDE_ERROR
; 
n
--; }

410 if(
evíts
) {

411 
fde
 = 
fd_èbÀ
[
i
];

412 if(
fde
 == 0)

413 
	`FATAL
("missög fdêf‹ fd %d\n", 
i
);

415 
fde
->
evíts
 |=Évents;

417 
	`D
("gotÉvents fde->fd=%dÉvents=%04x, state=%04x\n",

418 
fde
->
fd
, fde->
evíts
, fde->
°©e
);

419 if(
fde
->
°©e
 & 
FDE_PENDING
) ;

420 
fde
->
°©e
 |
FDE_PENDING
;

421 
	`fdevít_∂i°_íqueue
(
fde
);

424 
	}
}

428 
	$fdevít_ªgi°î
(
fdevít
 *
fde
)

430 if(
fde
->
fd
 < 0) {

431 
	`FATAL
("bogu†√g©ivêfd (%d)\n", 
fde
->
fd
);

434 if(
fde
->
fd
 >
fd_èbÀ_max
) {

435 
ﬁdmax
 = 
fd_èbÀ_max
;

436 if(
fde
->
fd
 > 32000) {

437 
	`FATAL
("bogu†huuuugêfd (%d)\n", 
fde
->
fd
);

439 if(
fd_èbÀ_max
 == 0) {

440 
	`fdevít_öô
();

441 
fd_èbÀ_max
 = 256;

443 
fd_èbÀ_max
 <
fde
->
fd
) {

444 
fd_èbÀ_max
 *= 2;

446 
fd_èbÀ
 = 
	`ªÆloc
(fd_èbÀ, (
fdevít
*Ë* 
fd_èbÀ_max
);

447 if(
fd_èbÀ
 == 0) {

448 
	`FATAL
("couldÇŸÉx∑nd fd_èbÀÅÿ%dÉ¡rõs\n", 
fd_èbÀ_max
);

450 
	`mem£t
(
fd_èbÀ
 + 
ﬁdmax
, 0, (Ë* (
fd_èbÀ_max
 - oldmax));

453 
fd_èbÀ
[
fde
->
fd
] = fde;

454 
	}
}

456 
	$fdevít_uƒegi°î
(
fdevít
 *
fde
)

458 if((
fde
->
fd
 < 0Ë|| (fde->fd >
fd_èbÀ_max
)) {

459 
	`FATAL
("fd ouào‡øngê(%d)\n", 
fde
->
fd
);

462 if(
fd_èbÀ
[
fde
->
fd
] != fde) {

463 
	`FATAL
("fd_èbÀ ouào‡syn¯[%d]\n", 
fde
->
fd
);

466 
fd_èbÀ
[
fde
->
fd
] = 0;

468 if(!(
fde
->
°©e
 & 
FDE_DONT_CLOSE
)) {

469 
	`dump_fde
(
fde
, "close");

470 
	`adb_˛o£
(
fde
->
fd
);

472 
	}
}

474 
	$fdevít_∂i°_íqueue
(
fdevít
 *
node
)

476 
fdevít
 *
li°
 = &
li°_≥ndög
;

478 
node
->
√xt
 = 
li°
;

479 
node
->
¥ev
 = 
li°
->prev;

480 
node
->
¥ev
->
√xt
 =Çode;

481 
li°
->
¥ev
 = 
node
;

482 
	}
}

484 
	$fdevít_∂i°_ªmove
(
fdevít
 *
node
)

486 
node
->
¥ev
->
√xt
 =Çode->next;

487 
node
->
√xt
->
¥ev
 =Çode->prev;

488 
node
->
√xt
 = 0;

489 
node
->
¥ev
 = 0;

490 
	}
}

492 
fdevít
 *
	$fdevít_∂i°_dequeue
()

494 
fdevít
 *
li°
 = &
li°_≥ndög
;

495 
fdevít
 *
node
 = 
li°
->
√xt
;

497 if(
node
 =
li°
)  0;

499 
li°
->
√xt
 = 
node
->next;

500 
li°
->
√xt
->
¥ev
 =Üist;

501 
node
->
√xt
 = 0;

502 
node
->
¥ev
 = 0;

504  
node
;

505 
	}
}

507 
	$fdevít_ˇŒ_fdfunc
(
fdevít
* 
fde
)

509 
evíts
 = 
fde
->events;

510 
fde
->
evíts
 = 0;

511 if(!(
fde
->
°©e
 & 
FDE_PENDING
)) ;

512 
fde
->
°©e
 &(~
FDE_PENDING
);

513 
	`dump_fde
(
fde
, "callback");

514 
fde
->
	`func
(fde->
fd
, 
evíts
, fde->
¨g
);

515 
	}
}

517 
	$fdevít_sub¥oc_evít_func
(
fd
, 
ev
, *
u£rd©a
)

520 
	`D
("sub¥o¯h™dlög o¿fd=%dÉv=%04x\n", 
fd
, 
ev
);

523 if((
fd
 < 0Ë|| (fd >
fd_èbÀ_max
)) {

524 
	`FATAL
("fd %d ouào‡øngêf‹ fd_èbÀ \n", 
fd
);

526 
fdevít
 *
fde
 = 
fd_èbÀ
[
fd
];

527 
	`fdevít_add
(
fde
, 
FDE_READ
);

529 if(
ev
 & 
FDE_READ
){

530 
sub¥oc_fd
;

532 if(
	`ªadx
(
fd
, &
sub¥oc_fd
, (subproc_fd))) {

533 
	`FATAL
("FaûedÅÿªadÅhêsub¥oc'†fd from fd=%d\n", 
fd
);

535 if((
sub¥oc_fd
 < 0Ë|| (sub¥oc_fd >
fd_èbÀ_max
)) {

536 
	`D
("subproc_fd %d out ofÑange 0, fd_table_max=%d\n",

537 
sub¥oc_fd
, 
fd_èbÀ_max
);

540 
fdevít
 *
sub¥oc_fde
 = 
fd_èbÀ
[
sub¥oc_fd
];

541 if(!
sub¥oc_fde
) {

542 
	`D
("sub¥oc_fd %d cÀ¨ed from fd_èbÀ\n", 
sub¥oc_fd
);

545 if(
sub¥oc_fde
->
fd
 !
sub¥oc_fd
) {

547 
	`D
("sub¥oc_fd %d !fd_èbÀ[].fd %d\n", 
sub¥oc_fd
, 
sub¥oc_fde
->
fd
);

551 
sub¥oc_fde
->
f‹˚_eof
 = 1;

553 
rcou¡
 = 0;

554 
	`io˘l
(
sub¥oc_fd
, 
FIONREAD
, &
rcou¡
);

555 
	`D
("subproc with fd=%d hasÑcount=%dÉrr=%d\n",

556 
sub¥oc_fd
, 
rcou¡
, 
î∫o
);

558 if(
rcou¡
) {

565 
	`D
("sub¥oc_fde.°©e=%04x\n", 
sub¥oc_fde
->
°©e
);

566 
sub¥oc_fde
->
evíts
 |
FDE_READ
;

567 if(
sub¥oc_fde
->
°©e
 & 
FDE_PENDING
) {

570 
sub¥oc_fde
->
°©e
 |
FDE_PENDING
;

571 
	`fdevít_ˇŒ_fdfunc
(
sub¥oc_fde
);

573 
	}
}

575 
fdevít
 *
	$fdevít_¸óã
(
fd
, 
fd_func
 
func
, *
¨g
)

577 
fdevít
 *
fde
 = (fdevít*Ë
	`mÆloc
((fdevent));

578 if(
fde
 == 0)  0;

579 
	`fdevít_ö°Æl
(
fde
, 
fd
, 
func
, 
¨g
);

580 
fde
->
°©e
 |
FDE_CREATED
;

581  
fde
;

582 
	}
}

584 
	$fdevít_de°roy
(
fdevít
 *
fde
)

586 if(
fde
 == 0) ;

587 if(!(
fde
->
°©e
 & 
FDE_CREATED
)) {

588 
	`FATAL
("fdê%∞nŸ cª©ed by fdevít_¸óã()\n", 
fde
);

590 
	`fdevít_ªmove
(
fde
);

591 
	}
}

593 
	$fdevít_ö°Æl
(
fdevít
 *
fde
, 
fd
, 
fd_func
 
func
, *
¨g
)

595 
	`mem£t
(
fde
, 0, (
fdevít
));

596 
fde
->
°©e
 = 
FDE_ACTIVE
;

597 
fde
->
fd
 = fd;

598 
fde
->
f‹˚_eof
 = 0;

599 
fde
->
func
 = func;

600 
fde
->
¨g
 =árg;

602 #i‚de‡
HAVE_WINSOCK


603 
	`f˙é
(
fd
, 
F_SETFL
, 
O_NONBLOCK
);

605 
	`fdevít_ªgi°î
(
fde
);

606 
	`dump_fde
(
fde
, "connect");

607 
	`fdevít_c⁄√˘
(
fde
);

608 
fde
->
°©e
 |
FDE_ACTIVE
;

609 
	}
}

611 
	$fdevít_ªmove
(
fdevít
 *
fde
)

613 if(
fde
->
°©e
 & 
FDE_PENDING
) {

614 
	`fdevít_∂i°_ªmove
(
fde
);

617 if(
fde
->
°©e
 & 
FDE_ACTIVE
) {

618 
	`fdevít_disc⁄√˘
(
fde
);

619 
	`dump_fde
(
fde
, "disconnect");

620 
	`fdevít_uƒegi°î
(
fde
);

623 
fde
->
°©e
 = 0;

624 
fde
->
evíts
 = 0;

625 
	}
}

628 
	$fdevít_£t
(
fdevít
 *
fde
, 
evíts
)

630 
evíts
 &
FDE_EVENTMASK
;

632 if((
fde
->
°©e
 & 
FDE_EVENTMASK
Ë=
evíts
) ;

634 if(
fde
->
°©e
 & 
FDE_ACTIVE
) {

635 
	`fdevít_upd©e
(
fde
, 
evíts
);

636 
	`dump_fde
(
fde
, "update");

639 
fde
->
°©e
 = (fde->°©ê& 
FDE_STATEMASK
Ë| 
evíts
;

641 if(
fde
->
°©e
 & 
FDE_PENDING
) {

646 
fde
->
evíts
 &= (~events);

647 if(
fde
->
evíts
 == 0) {

648 
	`fdevít_∂i°_ªmove
(
fde
);

649 
fde
->
°©e
 &(~
FDE_PENDING
);

652 
	}
}

654 
	$fdevít_add
(
fdevít
 *
fde
, 
evíts
)

656 
	`fdevít_£t
(

657 
fde
, (fde->
°©e
 & 
FDE_EVENTMASK
Ë| (
evíts
 & FDE_EVENTMASK));

658 
	}
}

660 
	$fdevít_dñ
(
fdevít
 *
fde
, 
evíts
)

662 
	`fdevít_£t
(

663 
fde
, (fde->
°©e
 & 
FDE_EVENTMASK
Ë& (~(
evíts
 & FDE_EVENTMASK)));

664 
	}
}

666 
	$fdevít_sub¥oc_£tup
()

668 
s
[2];

670 if(
	`adb_sockë∑ú
(
s
)) {

671 
	`FATAL
("cannot create shell-exit socket-pair\n");

673 
SHELL_EXIT_NOTIFY_FD
 = 
s
[0];

674 
fdevít
 *
fde
;

675 
fde
 = 
	`fdevít_¸óã
(
s
[1], 
fdevít_sub¥oc_evít_func
, 
NULL
);

676 if(!
fde
)

677 
	`FATAL
("cannot create fdevent for shell-exit handler\n");

678 
	`fdevít_add
(
fde
, 
FDE_READ
);

679 
	}
}

681 
	$fdevít_lo›
()

683 
fdevít
 *
fde
;

684 
	`fdevít_sub¥oc_£tup
();

687 
	`D
("--- ---- waiting forÉvents\n");

689 
	`fdevít_¥o˚ss
();

691 (
fde
 = 
	`fdevít_∂i°_dequeue
())) {

692 
	`fdevít_ˇŒ_fdfunc
(
fde
);

695 
	}
}

	@fdevent.h

17 #i‚de‡
__FDEVENT_H


18 
	#__FDEVENT_H


	)

20 
	~<°döt.h
>

23 
	#FDE_READ
 0x0001

	)

24 
	#FDE_WRITE
 0x0002

	)

25 
	#FDE_ERROR
 0x0004

	)

26 
	#FDE_TIMEOUT
 0x0008

	)

29 
	#FDE_DONT_CLOSE
 0x0080

	)

31 
fdevít
 
	tfdevít
;

33 (*
	tfd_func
)(
	tfd
, 
	tevíts
, *
	tu£rd©a
);

39 
fdevít
 *
	`fdevít_¸óã
(
fd
, 
fd_func
 
func
, *
¨g
);

44 
	`fdevít_de°roy
(
fdevít
 *
fde
);

48 
	`fdevít_ö°Æl
(
fdevít
 *
fde
, 
fd
, 
fd_func
 
func
, *
¨g
);

53 
	`fdevít_ªmove
(
fdevít
 *
ôem
);

57 
	`fdevít_£t
(
fdevít
 *
fde
, 
evíts
);

58 
	`fdevít_add
(
fdevít
 *
fde
, 
evíts
);

59 
	`fdevít_dñ
(
fdevít
 *
fde
, 
evíts
);

61 
	`fdevít_£t_timeout
(
fdevít
 *
fde
, 
öt64_t
 
timeout_ms
);

65 
	`fdevít_lo›
();

67 
	sfdevít


69 
fdevít
 *
√xt
;

70 
fdevít
 *
¥ev
;

72 
fd
;

73 
f‹˚_eof
;

75 
°©e
;

76 
evíts
;

78 
fd_func
 
func
;

79 *
¨g
;

	@file_sync_client.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/time.h
>

23 
	~<time.h
>

24 
	~<dúít.h
>

25 
	~<limôs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<zùfûe/zùfûe.h
>

29 
	~"sysdïs.h
"

30 
	~"adb.h
"

31 
	~"adb_˛õ¡.h
"

32 
	~"fûe_sync_£rvi˚.h
"

35 
	gtŸÆ_byãs
;

36 
	g°¨t_time
;

38 
	$NOW
()

40 
timevÆ
 
tv
;

41 
	`gëtimeofday
(&
tv
, 0);

42  ((Ë
tv
.
tv_u£c
) +

43 1000000LL * ((Ë
tv
.
tv_£c
);

44 
	}
}

46 
	$BEGIN
()

48 
tŸÆ_byãs
 = 0;

49 
°¨t_time
 = 
	`NOW
();

50 
	}
}

52 
	$END
()

54 
t
 = 
	`NOW
(Ë- 
°¨t_time
;

55 if(
tŸÆ_byãs
 == 0) ;

57 i‡(
t
 == 0)

58 
t
 = 1000000;

60 
	`Ârötf
(
°dîr
,"%lld KB/s (%lld bytes in %lld.%03llds)\n",

61 ((((Ë
tŸÆ_byãs
Ë* 1000000LLË/ 
t
) / 1024LL,

62 (Ë
tŸÆ_byãs
, (
t
 / 1000000LL), (t % 1000000LL) / 1000LL);

63 
	}
}

65 
	$sync_quô
(
fd
)

67 
syncmsg
 
msg
;

69 
msg
.
ªq
.
id
 = 
ID_QUIT
;

70 
msg
.
ªq
.
«mñí
 = 0;

72 
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req));

73 
	}
}

75 (*
	tsync_ls_cb
)(
	tmode
, 
	tsize
, 
	ttime
, c⁄° *
	t«me
, *
	tcookõ
);

77 
	$sync_ls
(
fd
, c⁄° *
∑th
, 
sync_ls_cb
 
func
, *
cookõ
)

79 
syncmsg
 
msg
;

80 
buf
[257];

81 
Àn
;

83 
Àn
 = 
	`°æí
(
∑th
);

84 if(
Àn
 > 1024Ë
Áû
;

86 
msg
.
ªq
.
id
 = 
ID_LIST
;

87 
msg
.
ªq
.
«mñí
 = 
	`htﬁl
(
Àn
);

89 if(
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req)) ||

90 
	`wrôex
(
fd
, 
∑th
, 
Àn
)) {

91 
Áû
;

95 if(
	`ªadx
(
fd
, &
msg
.
dít
, (msg.dent))) ;

96 if(
msg
.
dít
.
id
 =
ID_DONE
)  0;

97 if(
msg
.
dít
.
id
 !
ID_DENT
) ;

99 
Àn
 = 
	`…ohl
(
msg
.
dít
.
«mñí
);

100 if(
Àn
 > 256) ;

102 if(
	`ªadx
(
fd
, 
buf
, 
Àn
)) ;

103 
buf
[
Àn
] = 0;

105 
	`func
(
	`…ohl
(
msg
.
dít
.
mode
),

106 
	`…ohl
(
msg
.
dít
.
size
),

107 
	`…ohl
(
msg
.
dít
.
time
),

108 
buf
, 
cookõ
);

111 
Áû
:

112 
	`adb_˛o£
(
fd
);

114 
	}
}

116 
sync£ndbuf
 
	tsync£ndbuf
;

118 
	ssync£ndbuf
 {

119 
	mid
;

120 
	msize
;

121 
	md©a
[
SYNC_DATA_MAX
];

124 
sync£ndbuf
 
	g£nd_buf„r
;

126 
	$sync_ªadtime
(
fd
, c⁄° *
∑th
, *
time°amp
)

128 
syncmsg
 
msg
;

129 
Àn
 = 
	`°æí
(
∑th
);

131 
msg
.
ªq
.
id
 = 
ID_STAT
;

132 
msg
.
ªq
.
«mñí
 = 
	`htﬁl
(
Àn
);

134 if(
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req)) ||

135 
	`wrôex
(
fd
, 
∑th
, 
Àn
)) {

139 if(
	`ªadx
(
fd
, &
msg
.
°©
, (msg.stat))) {

143 if(
msg
.
°©
.
id
 !
ID_STAT
) {

147 *
time°amp
 = 
	`…ohl
(
msg
.
°©
.
time
);

149 
	}
}

151 
	$sync_°¨t_ªadtime
(
fd
, c⁄° *
∑th
)

153 
syncmsg
 
msg
;

154 
Àn
 = 
	`°æí
(
∑th
);

156 
msg
.
ªq
.
id
 = 
ID_STAT
;

157 
msg
.
ªq
.
«mñí
 = 
	`htﬁl
(
Àn
);

159 if(
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req)) ||

160 
	`wrôex
(
fd
, 
∑th
, 
Àn
)) {

165 
	}
}

167 
	$sync_föish_ªadtime
(
fd
, *
time°amp
,

168 *
mode
, *
size
)

170 
syncmsg
 
msg
;

172 if(
	`ªadx
(
fd
, &
msg
.
°©
, (msg.stat)))

175 if(
msg
.
°©
.
id
 !
ID_STAT
)

178 *
time°amp
 = 
	`…ohl
(
msg
.
°©
.
time
);

179 *
mode
 = 
	`…ohl
(
msg
.
°©
.mode);

180 *
size
 = 
	`…ohl
(
msg
.
°©
.size);

183 
	}
}

185 
	$sync_ªadmode
(
fd
, c⁄° *
∑th
, *
mode
)

187 
syncmsg
 
msg
;

188 
Àn
 = 
	`°æí
(
∑th
);

190 
msg
.
ªq
.
id
 = 
ID_STAT
;

191 
msg
.
ªq
.
«mñí
 = 
	`htﬁl
(
Àn
);

193 if(
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req)) ||

194 
	`wrôex
(
fd
, 
∑th
, 
Àn
)) {

198 if(
	`ªadx
(
fd
, &
msg
.
°©
, (msg.stat))) {

202 if(
msg
.
°©
.
id
 !
ID_STAT
) {

206 *
mode
 = 
	`…ohl
(
msg
.
°©
.mode);

208 
	}
}

210 
	$wrôe_d©a_fûe
(
fd
, c⁄° *
∑th
, 
sync£ndbuf
 *
sbuf
)

212 
lfd
, 
îr
 = 0;

214 
lfd
 = 
	`adb_›í
(
∑th
, 
O_RDONLY
);

215 if(
lfd
 < 0) {

216 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ o≥¿'%s': %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

220 
sbuf
->
id
 = 
ID_DATA
;

222 
ªt
;

224 
ªt
 = 
	`adb_ªad
(
lfd
, 
sbuf
->
d©a
, 
SYNC_DATA_MAX
);

225 if(!
ªt
)

228 if(
ªt
 < 0) {

229 if(
î∫o
 =
EINTR
)

231 
	`Ârötf
(
°dîr
,"ˇ¬ŸÑód '%s': %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

235 
sbuf
->
size
 = 
	`htﬁl
(
ªt
);

236 if(
	`wrôex
(
fd
, 
sbuf
, (Ë* 2 + 
ªt
)){

237 
îr
 = -1;

240 
tŸÆ_byãs
 +
ªt
;

243 
	`adb_˛o£
(
lfd
);

244  
îr
;

245 
	}
}

247 
	$wrôe_d©a_buf„r
(
fd
, * 
fûe_buf„r
, 
size
, 
sync£ndbuf
 *
sbuf
)

249 
îr
 = 0;

250 
tŸÆ
 = 0;

252 
sbuf
->
id
 = 
ID_DATA
;

253 
tŸÆ
 < 
size
) {

254 
cou¡
 = 
size
 - 
tŸÆ
;

255 i‡(
cou¡
 > 
SYNC_DATA_MAX
) {

256 
cou¡
 = 
SYNC_DATA_MAX
;

259 
	`mem˝y
(
sbuf
->
d©a
, &
fûe_buf„r
[
tŸÆ
], 
cou¡
);

260 
sbuf
->
size
 = 
	`htﬁl
(
cou¡
);

261 if(
	`wrôex
(
fd
, 
sbuf
, (Ë* 2 + 
cou¡
)){

262 
îr
 = -1;

265 
tŸÆ
 +
cou¡
;

266 
tŸÆ_byãs
 +
cou¡
;

269  
îr
;

270 
	}
}

272 #ifde‡
HAVE_SYMLINKS


273 
	$wrôe_d©a_lök
(
fd
, c⁄° *
∑th
, 
sync£ndbuf
 *
sbuf
)

275 
Àn
, 
ªt
;

277 
Àn
 = 
	`ªadlök
(
∑th
, 
sbuf
->
d©a
, 
SYNC_DATA_MAX
-1);

278 if(
Àn
 < 0) {

279 
	`Ârötf
(
°dîr
, "îr‹ÑódögÜök '%s': %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

282 
sbuf
->
d©a
[
Àn
] = '\0';

284 
sbuf
->
size
 = 
	`htﬁl
(
Àn
 + 1);

285 
sbuf
->
id
 = 
ID_DATA
;

287 
ªt
 = 
	`wrôex
(
fd
, 
sbuf
, (Ë* 2 + 
Àn
 + 1);

288 if(
ªt
)

291 
tŸÆ_byãs
 +
Àn
 + 1;

294 
	}
}

297 
	$sync_£nd
(
fd
, c⁄° *
Õ©h
, c⁄° *
Ω©h
,

298 
mtime
, 
mode_t
 
mode
, 
vîifyApk
)

300 
syncmsg
 
msg
;

301 
Àn
, 
r
;

302 
sync£ndbuf
 *
sbuf
 = &
£nd_buf„r
;

303 * 
fûe_buf„r
 = 
NULL
;

304 
size
 = 0;

305 
tmp
[64];

307 
Àn
 = 
	`°æí
(
Ω©h
);

308 if(
Àn
 > 1024Ë
Áû
;

310 
	`¢¥ötf
(
tmp
, —mp), ",%d", 
mode
);

311 
r
 = 
	`°æí
(
tmp
);

313 i‡(
vîifyApk
) {

314 
lfd
;

315 
zùfûe_t
 
zù
;

316 
zùíåy_t
 
íåy
;

317 
amt
;

322 
lfd
 = 
	`adb_›í
(
Õ©h
, 
O_RDONLY
);

323 if(
lfd
 < 0) {

324 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ o≥¿'%s': %s\n", 
Õ©h
, 
	`°ªº‹
(
î∫o
));

328 
size
 = 
	`adb_l£ek
(
lfd
, 0, 
SEEK_END
);

329 i‡(
size
 =-1 || -1 =
	`adb_l£ek
(
lfd
, 0, 
SEEK_SET
)) {

330 
	`Ârötf
(
°dîr
, "îr‹ sìkög i¿fûê'%s'\n", 
Õ©h
);

331 
	`adb_˛o£
(
lfd
);

335 
fûe_buf„r
 = (*)
	`mÆloc
(
size
);

336 i‡(
fûe_buf„r
 =
NULL
) {

337 
	`Ârötf
(
°dîr
, "couldÇotállocate buffer for '%s'\n",

338 
Õ©h
);

339 
	`adb_˛o£
(
lfd
);

342 
amt
 = 
	`adb_ªad
(
lfd
, 
fûe_buf„r
, 
size
);

343 i‡(
amt
 !
size
) {

344 
	`Ârötf
(
°dîr
, "îr‹Ñódög from fûe: '%s'\n", 
Õ©h
);

345 
	`adb_˛o£
(
lfd
);

346 
	`‰ì
(
fûe_buf„r
);

350 
	`adb_˛o£
(
lfd
);

352 
zù
 = 
	`öô_zùfûe
(
fûe_buf„r
, 
size
);

353 i‡(
zù
 =
NULL
) {

354 
	`Ârötf
(
°dîr
, "file '%s' isÇotá valid zip file\n",

355 
Õ©h
);

356 
	`‰ì
(
fûe_buf„r
);

360 
íåy
 = 
	`lookup_zùíåy
(
zù
, "AndroidManifest.xml");

361 
	`ªÀa£_zùfûe
(
zù
);

362 i‡(
íåy
 =
NULL
) {

363 
	`Ârötf
(
°dîr
, "file '%s' doesÇot contain AndroidManifest.xml\n",

364 
Õ©h
);

365 
	`‰ì
(
fûe_buf„r
);

370 
msg
.
ªq
.
id
 = 
ID_SEND
;

371 
msg
.
ªq
.
«mñí
 = 
	`htﬁl
(
Àn
 + 
r
);

373 if(
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req)) ||

374 
	`wrôex
(
fd
, 
Ω©h
, 
Àn
Ë|| wrôex(fd, 
tmp
, 
r
)) {

375 
	`‰ì
(
fûe_buf„r
);

376 
Áû
;

379 i‡(
fûe_buf„r
) {

380 
	`wrôe_d©a_buf„r
(
fd
, 
fûe_buf„r
, 
size
, 
sbuf
);

381 
	`‰ì
(
fûe_buf„r
);

382 } i‡(
	`S_ISREG
(
mode
))

383 
	`wrôe_d©a_fûe
(
fd
, 
Õ©h
, 
sbuf
);

384 #ifde‡
HAVE_SYMLINKS


385 i‡(
	`S_ISLNK
(
mode
))

386 
	`wrôe_d©a_lök
(
fd
, 
Õ©h
, 
sbuf
);

389 
Áû
;

391 
msg
.
d©a
.
id
 = 
ID_DONE
;

392 
msg
.
d©a
.
size
 = 
	`htﬁl
(
mtime
);

393 if(
	`wrôex
(
fd
, &
msg
.
d©a
, (msg.data)))

394 
Áû
;

396 if(
	`ªadx
(
fd
, &
msg
.
°©us
, (msg.status)))

399 if(
msg
.
°©us
.
id
 !
ID_OKAY
) {

400 if(
msg
.
°©us
.
id
 =
ID_FAIL
) {

401 
Àn
 = 
	`…ohl
(
msg
.
°©us
.
msgÀn
);

402 if(
Àn
 > 256)Üen = 256;

403 if(
	`ªadx
(
fd
, 
sbuf
->
d©a
, 
Àn
)) {

406 
sbuf
->
d©a
[
Àn
] = 0;

408 
	`°r˝y
(
sbuf
->
d©a
, "unknownÑeason");

410 
	`Ârötf
(
°dîr
,"ÁûedÅÿc›y '%s'Åÿ'%s': %s\n", 
Õ©h
, 
Ω©h
, 
sbuf
->
d©a
);

416 
Áû
:

417 
	`Ârötf
(
°dîr
,"protocol failure\n");

418 
	`adb_˛o£
(
fd
);

420 
	}
}

422 
	$mkdús
(*
«me
)

424 
ªt
;

425 *
x
 = 
«me
 + 1;

428 
x
 = 
	`adb_dú°¨t
(x);

429 if(
x
 == 0)  0;

430 *
x
 = 0;

431 
ªt
 = 
	`adb_mkdú
(
«me
, 0775);

432 *
x
 = 
OS_PATH_SEPARATOR
;

433 if((
ªt
 < 0Ë&& (
î∫o
 !
EEXIST
)) {

434  
ªt
;

436 
x
++;

439 
	}
}

441 
	$sync_ªcv
(
fd
, c⁄° *
Ω©h
, c⁄° *
Õ©h
)

443 
syncmsg
 
msg
;

444 
Àn
;

445 
lfd
 = -1;

446 *
buf„r
 = 
£nd_buf„r
.
d©a
;

447 
id
;

449 
Àn
 = 
	`°æí
(
Ω©h
);

450 if(
Àn
 > 1024)  -1;

452 
msg
.
ªq
.
id
 = 
ID_RECV
;

453 
msg
.
ªq
.
«mñí
 = 
	`htﬁl
(
Àn
);

454 if(
	`wrôex
(
fd
, &
msg
.
ªq
, (msg.req)) ||

455 
	`wrôex
(
fd
, 
Ω©h
, 
Àn
)) {

459 if(
	`ªadx
(
fd
, &
msg
.
d©a
, (msg.data))) {

462 
id
 = 
msg
.
d©a
.id;

464 if((
id
 =
ID_DATA
Ë|| (id =
ID_DONE
)) {

465 
	`adb_u∆ök
(
Õ©h
);

466 
	`mkdús
((*)
Õ©h
);

467 
lfd
 = 
	`adb_¸ót
(
Õ©h
, 0644);

468 if(
lfd
 < 0) {

469 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ cª©ê'%s': %s\n", 
Õ©h
, 
	`°ªº‹
(
î∫o
));

472 
h™dÀ_d©a
;

474 
ªmŸe_îr‹
;

478 if(
	`ªadx
(
fd
, &
msg
.
d©a
, (msg.data))) {

481 
id
 = 
msg
.
d©a
.id;

483 
h™dÀ_d©a
:

484 
Àn
 = 
	`…ohl
(
msg
.
d©a
.
size
);

485 if(
id
 =
ID_DONE
) ;

486 if(
id
 !
ID_DATA
Ë
ªmŸe_îr‹
;

487 if(
Àn
 > 
SYNC_DATA_MAX
) {

488 
	`Ârötf
(
°dîr
,"data overrun\n");

489 
	`adb_˛o£
(
lfd
);

493 if(
	`ªadx
(
fd
, 
buf„r
, 
Àn
)) {

494 
	`adb_˛o£
(
lfd
);

498 if(
	`wrôex
(
lfd
, 
buf„r
, 
Àn
)) {

499 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ wrôê'%s': %s\n", 
Ω©h
, 
	`°ªº‹
(
î∫o
));

500 
	`adb_˛o£
(
lfd
);

504 
tŸÆ_byãs
 +
Àn
;

507 
	`adb_˛o£
(
lfd
);

510 
ªmŸe_îr‹
:

511 
	`adb_˛o£
(
lfd
);

512 
	`adb_u∆ök
(
Õ©h
);

514 if(
id
 =
ID_FAIL
) {

515 
Àn
 = 
	`…ohl
(
msg
.
d©a
.
size
);

516 if(
Àn
 > 256)Üen = 256;

517 if(
	`ªadx
(
fd
, 
buf„r
, 
Àn
)) {

520 
buf„r
[
Àn
] = 0;

522 
	`mem˝y
(
buf„r
, &
id
, 4);

523 
buf„r
[4] = 0;

526 
	`Ârötf
(
°dîr
,"ÁûedÅÿc›y '%s'Åÿ'%s': %s\n", 
Ω©h
, 
Õ©h
, 
buf„r
);

528 
	}
}

535 
	$do_sync_ls_cb
(
mode
, 
size
, 
time
,

536 c⁄° *
«me
, *
cookõ
)

538 
	`¥ötf
("%08x %08x %08x %s\n", 
mode
, 
size
, 
time
, 
«me
);

539 
	}
}

541 
	$do_sync_ls
(c⁄° *
∑th
)

543 
fd
 = 
	`adb_c⁄√˘
("sync:");

544 if(
fd
 < 0) {

545 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

549 if(
	`sync_ls
(
fd
, 
∑th
, 
do_sync_ls_cb
, 0)) {

552 
	`sync_quô
(
fd
);

555 
	}
}

557 
c›yöfo
 
	tc›yöfo
;

559 
	sc›yöfo


561 
c›yöfo
 *
	m√xt
;

562 c⁄° *
	m§c
;

563 c⁄° *
	md°
;

564 
	mtime
;

565 
	mmode
;

566 
	msize
;

567 
	mÊag
;

571 
c›yöfo
 *
	$mkc›yöfo
(c⁄° *
•©h
, c⁄° *
d∑th
,

572 c⁄° *
«me
, 
isdú
)

574 
¶í
 = 
	`°æí
(
•©h
);

575 
dÀn
 = 
	`°æí
(
d∑th
);

576 
∆í
 = 
	`°æí
(
«me
);

577 
ssize
 = 
¶í
 + 
∆í
 + 2;

578 
dsize
 = 
dÀn
 + 
∆í
 + 2;

580 
c›yöfo
 *
ci
 = 
	`mÆloc
((c›yöfoË+ 
ssize
 + 
dsize
);

581 if(
ci
 == 0) {

582 
	`Ârötf
(
°dîr
,"out of memory\n");

583 
	`ab‹t
();

586 
ci
->
√xt
 = 0;

587 
ci
->
time
 = 0;

588 
ci
->
mode
 = 0;

589 
ci
->
size
 = 0;

590 
ci
->
Êag
 = 0;

591 
ci
->
§c
 = (const *)(ci + 1);

592 
ci
->
d°
 = ci->
§c
 + 
ssize
;

593 
	`¢¥ötf
((*Ë
ci
->
§c
, 
ssize
, 
isdú
 ? "%s%s/" : "%s%s", 
•©h
, 
«me
);

594 
	`¢¥ötf
((*Ë
ci
->
d°
, 
dsize
, 
isdú
 ? "%s%s/" : "%s%s", 
d∑th
, 
«me
);

597  
ci
;

598 
	}
}

601 
	$loˇl_buûd_li°
(
c›yöfo
 **
fûñi°
,

602 c⁄° *
Õ©h
, c⁄° *
Ω©h
)

604 
DIR
 *
d
;

605 
dúít
 *
de
;

606 
°©
 
°
;

607 
c›yöfo
 *
dúli°
 = 0;

608 
c›yöfo
 *
ci
, *
√xt
;

612 
d
 = 
	`›ídú
(
Õ©h
);

613 if(
d
 == 0) {

614 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ o≥¿'%s': %s\n", 
Õ©h
, 
	`°ªº‹
(
î∫o
));

618 (
de
 = 
	`ªaddú
(
d
))) {

619 
°©_∑th
[
PATH_MAX
];

620 *
«me
 = 
de
->
d_«me
;

622 if(
«me
[0] == '.') {

623 if(
«me
[1] == 0) ;

624 if((
«me
[1] == '.') && (name[2] == 0)) ;

631 i‡(
	`°æí
(
Õ©h
Ë+ såÀn(
de
->
d_«me
Ë+ 1 > (
°©_∑th
))

633 
	`°r˝y
(
°©_∑th
, 
Õ©h
);

634 
	`°rˇt
(
°©_∑th
, 
de
->
d_«me
);

635 
	`°©
(
°©_∑th
, &
°
);

637 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

638 
ci
 = 
	`mkc›yöfo
(
Õ©h
, 
Ω©h
, 
«me
, 1);

639 
ci
->
√xt
 = 
dúli°
;

640 
dúli°
 = 
ci
;

642 
ci
 = 
	`mkc›yöfo
(
Õ©h
, 
Ω©h
, 
«me
, 0);

643 if(
	`l°©
(
ci
->
§c
, &
°
)) {

644 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ sèà'%s': %s\n", 
ci
->
§c
, 
	`°ªº‹
(
î∫o
));

645 
	`˛o£dú
(
d
);

649 if(!
	`S_ISREG
(
°
.
°_mode
Ë&& !
	`S_ISLNK
(st.st_mode)) {

650 
	`Ârötf
(
°dîr
, "skùpög s≥cü»fûê'%s'\n", 
ci
->
§c
);

651 
	`‰ì
(
ci
);

653 
ci
->
time
 = 
°
.
°_mtime
;

654 
ci
->
mode
 = 
°
.
°_mode
;

655 
ci
->
size
 = 
°
.
°_size
;

656 
ci
->
√xt
 = *
fûñi°
;

657 *
fûñi°
 = 
ci
;

662 
	`˛o£dú
(
d
);

664 
ci
 = 
dúli°
; cò!0; cò
√xt
) {

665 
√xt
 = 
ci
->next;

666 
	`loˇl_buûd_li°
(
fûñi°
, 
ci
->
§c
, ci->
d°
);

667 
	`‰ì
(
ci
);

671 
	}
}

674 
	$c›y_loˇl_dú_ªmŸe
(
fd
, c⁄° *
Õ©h
, c⁄° *
Ω©h
, 
checktime°amps
, 
li°⁄ly
)

676 
c›yöfo
 *
fûñi°
 = 0;

677 
c›yöfo
 *
ci
, *
√xt
;

678 
pushed
 = 0;

679 
skù≥d
 = 0;

681 if((
Õ©h
[0] =0Ë|| (
Ω©h
[0] == 0))  -1;

682 if(
Õ©h
[
	`°æí
(lpath) - 1] != '/') {

683 
tm∂í
 = 
	`°æí
(
Õ©h
)+2;

684 *
tmp
 = 
	`mÆloc
(
tm∂í
);

685 if(
tmp
 == 0)  -1;

686 
	`¢¥ötf
(
tmp
, 
tm∂í
, "%s/",
Õ©h
);

687 
Õ©h
 = 
tmp
;

689 if(
Ω©h
[
	`°æí
(rpath) - 1] != '/') {

690 
tm∂í
 = 
	`°æí
(
Ω©h
)+2;

691 *
tmp
 = 
	`mÆloc
(
tm∂í
);

692 if(
tmp
 == 0)  -1;

693 
	`¢¥ötf
(
tmp
, 
tm∂í
, "%s/",
Ω©h
);

694 
Ω©h
 = 
tmp
;

697 if(
	`loˇl_buûd_li°
(&
fûñi°
, 
Õ©h
, 
Ω©h
)) {

701 if(
checktime°amps
){

702 
ci
 = 
fûñi°
; cò!0; còci->
√xt
) {

703 if(
	`sync_°¨t_ªadtime
(
fd
, 
ci
->
d°
)) {

707 
ci
 = 
fûñi°
; cò!0; còci->
√xt
) {

708 
time°amp
, 
mode
, 
size
;

709 if(
	`sync_föish_ªadtime
(
fd
, &
time°amp
, &
mode
, &
size
))

711 if(
size
 =
ci
->size) {

713 if((
	`S_ISREG
(
ci
->
mode
 & modeË&& 
time°amp
 =ci->
time
) ||

714 (
	`S_ISLNK
(
ci
->
mode
 & modeË&& 
time°amp
 >ci->
time
))

715 
ci
->
Êag
 = 1;

719 
ci
 = 
fûñi°
; cò!0; cò
√xt
) {

720 
√xt
 = 
ci
->next;

721 if(
ci
->
Êag
 == 0) {

722 
	`Ârötf
(
°dîr
,"%•ush: %†-> %s\n", 
li°⁄ly
 ? "would " : "", 
ci
->
§c
, ci->
d°
);

723 if(!
li°⁄ly
 &&

724 
	`sync_£nd
(
fd
, 
ci
->
§c
, ci->
d°
, ci->
time
, ci->
mode
, 0 )){

727 
pushed
++;

729 
skù≥d
++;

731 
	`‰ì
(
ci
);

734 
	`Ârötf
(
°dîr
,"%d file%sÖushed. %d file%s skipped.\n",

735 
pushed
, (pushed == 1) ? "" : "s",

736 
skù≥d
, (skipped == 1) ? "" : "s");

739 
	}
}

742 
	$do_sync_push
(c⁄° *
Õ©h
, c⁄° *
Ω©h
, 
vîifyApk
)

744 
°©
 
°
;

745 
mode
;

746 
fd
;

748 
fd
 = 
	`adb_c⁄√˘
("sync:");

749 if(
fd
 < 0) {

750 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

754 if(
	`°©
(
Õ©h
, &
°
)) {

755 
	`Ârötf
(
°dîr
,"ˇ¬Ÿ sèà'%s': %s\n", 
Õ©h
, 
	`°ªº‹
(
î∫o
));

756 
	`sync_quô
(
fd
);

760 if(
	`S_ISDIR
(
°
.
°_mode
)) {

761 
	`BEGIN
();

762 if(
	`c›y_loˇl_dú_ªmŸe
(
fd
, 
Õ©h
, 
Ω©h
, 0, 0)) {

765 
	`END
();

766 
	`sync_quô
(
fd
);

769 if(
	`sync_ªadmode
(
fd
, 
Ω©h
, &
mode
)) {

772 if((
mode
 !0Ë&& 
	`S_ISDIR
(mode)) {

776 c⁄° *
«me
 = 
	`adb_dú°›
(
Õ©h
);

777 if(
«me
 == 0) {

778 
«me
 = 
Õ©h
;

780 
«me
++;

782 
tm∂í
 = 
	`°æí
(
«me
Ë+ såÀn(
Ω©h
) + 2;

783 *
tmp
 = 
	`mÆloc
(
	`°æí
(
«me
Ë+ såÀn(
Ω©h
) + 2);

784 if(
tmp
 == 0)  1;

785 
	`¢¥ötf
(
tmp
, 
tm∂í
, "%s/%s", 
Ω©h
, 
«me
);

786 
Ω©h
 = 
tmp
;

788 
	`BEGIN
();

789 if(
	`sync_£nd
(
fd
, 
Õ©h
, 
Ω©h
, 
°
.
°_mtime
, st.
°_mode
, 
vîifyApk
)) {

792 
	`END
();

793 
	`sync_quô
(
fd
);

799 
	}
}

803 
c›yöfo
 **
	mfûñi°
;

804 
c›yöfo
 **
	mdúli°
;

805 c⁄° *
	mΩ©h
;

806 c⁄° *
	mÕ©h
;

807 } 
	tsync_ls_buûd_li°_cb_¨gs
;

810 
	$sync_ls_buûd_li°_cb
(
mode
, 
size
, 
time
,

811 c⁄° *
«me
, *
cookõ
)

813 
sync_ls_buûd_li°_cb_¨gs
 *
¨gs
 = (sync_ls_buûd_li°_cb_¨g†*)
cookõ
;

814 
c›yöfo
 *
ci
;

816 i‡(
	`S_ISDIR
(
mode
)) {

817 
c›yöfo
 **
dúli°
 = 
¨gs
->dirlist;

820 i‡(
«me
[0] == '.') {

821 i‡(
«me
[1] == '\0') ;

822 i‡((
«me
[1] == '.') && (name[2] == '\0')) ;

825 
ci
 = 
	`mkc›yöfo
(
¨gs
->
Ω©h
,árgs->
Õ©h
, 
«me
, 1);

826 
ci
->
√xt
 = *
dúli°
;

827 *
dúli°
 = 
ci
;

828 } i‡(
	`S_ISREG
(
mode
Ë|| 
	`S_ISLNK
(mode)) {

829 
c›yöfo
 **
fûñi°
 = 
¨gs
->filelist;

831 
ci
 = 
	`mkc›yöfo
(
¨gs
->
Ω©h
,árgs->
Õ©h
, 
«me
, 0);

832 
ci
->
time
 =Åime;

833 
ci
->
mode
 = mode;

834 
ci
->
size
 = size;

835 
ci
->
√xt
 = *
fûñi°
;

836 *
fûñi°
 = 
ci
;

838 
	`Ârötf
(
°dîr
, "skùpög s≥cü»fûê'%s'\n", 
«me
);

840 
	}
}

842 
	$ªmŸe_buûd_li°
(
syncfd
, 
c›yöfo
 **
fûñi°
,

843 c⁄° *
Ω©h
, c⁄° *
Õ©h
)

845 
c›yöfo
 *
dúli°
 = 
NULL
;

846 
sync_ls_buûd_li°_cb_¨gs
 
¨gs
;

848 
¨gs
.
fûñi°
 = filelist;

849 
¨gs
.
dúli°
 = &dirlist;

850 
¨gs
.
Ω©h
 =Ñpath;

851 
¨gs
.
Õ©h
 =Üpath;

854 i‡(
	`sync_ls
(
syncfd
, 
Ω©h
, 
sync_ls_buûd_li°_cb
, (*)&
¨gs
)) {

859 
dúli°
 !
NULL
) {

860 
c›yöfo
 *
√xt
 = 
dúli°
->next;

861 i‡(
	`ªmŸe_buûd_li°
(
syncfd
, 
fûñi°
, 
dúli°
->
§c
, dúli°->
d°
)) {

864 
	`‰ì
(
dúli°
);

865 
dúli°
 = 
√xt
;

869 
	}
}

871 
	$c›y_ªmŸe_dú_loˇl
(
fd
, c⁄° *
Ω©h
, c⁄° *
Õ©h
,

872 
checktime°amps
)

874 
c›yöfo
 *
fûñi°
 = 0;

875 
c›yöfo
 *
ci
, *
√xt
;

876 
puŒed
 = 0;

877 
skù≥d
 = 0;

880 i‡(
Ω©h
[0] =0 || 
Õ©h
[0] == 0)  -1;

881 i‡(
Ω©h
[
	`°æí
(rpath) - 1] != '/') {

882 
tm∂í
 = 
	`°æí
(
Ω©h
) + 2;

883 *
tmp
 = 
	`mÆloc
(
tm∂í
);

884 i‡(
tmp
 == 0)  -1;

885 
	`¢¥ötf
(
tmp
, 
tm∂í
, "%s/", 
Ω©h
);

886 
Ω©h
 = 
tmp
;

888 i‡(
Õ©h
[
	`°æí
(lpath) - 1] != '/') {

889 
tm∂í
 = 
	`°æí
(
Õ©h
) + 2;

890 *
tmp
 = 
	`mÆloc
(
tm∂í
);

891 i‡(
tmp
 == 0)  -1;

892 
	`¢¥ötf
(
tmp
, 
tm∂í
, "%s/", 
Õ©h
);

893 
Õ©h
 = 
tmp
;

896 
	`Ârötf
(
°dîr
, "pull: building fileÜist...\n");

898 i‡(
	`ªmŸe_buûd_li°
(
fd
, &
fûñi°
, 
Ω©h
, 
Õ©h
)) {

903 i‡(
checktime°amps
) {

904 
ci
 = 
fûñi°
; cò!0; còci->
√xt
) {

905 i‡(
	`sync_°¨t_ªadtime
(
fd
, 
ci
->
d°
)) {

909 
ci
 = 
fûñi°
; cò!0; còci->
√xt
) {

910 
time°amp
, 
mode
, 
size
;

911 i‡(
	`sync_föish_ªadtime
(
fd
, &
time°amp
, &
mode
, &
size
))

913 i‡(
size
 =
ci
->size) {

915 i‡((
	`S_ISREG
(
ci
->
mode
 & modeË&& 
time°amp
 =ci->
time
) ||

916 (
	`S_ISLNK
(
ci
->
mode
 & modeË&& 
time°amp
 >ci->
time
))

917 
ci
->
Êag
 = 1;

922 
ci
 = 
fûñi°
; cò!0; cò
√xt
) {

923 
√xt
 = 
ci
->next;

924 i‡(
ci
->
Êag
 == 0) {

925 
	`Ârötf
(
°dîr
, "puŒ: %†-> %s\n", 
ci
->
§c
, ci->
d°
);

926 i‡(
	`sync_ªcv
(
fd
, 
ci
->
§c
, ci->
d°
)) {

929 
puŒed
++;

931 
skù≥d
++;

933 
	`‰ì
(
ci
);

936 
	`Ârötf
(
°dîr
, "%d file%sÖulled. %d file%s skipped.\n",

937 
puŒed
, (pulled == 1) ? "" : "s",

938 
skù≥d
, (skipped == 1) ? "" : "s");

941 
	}
}

943 
	$do_sync_puŒ
(c⁄° *
Ω©h
, c⁄° *
Õ©h
)

945 
mode
;

946 
°©
 
°
;

948 
fd
;

950 
fd
 = 
	`adb_c⁄√˘
("sync:");

951 if(
fd
 < 0) {

952 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

956 if(
	`sync_ªadmode
(
fd
, 
Ω©h
, &
mode
)) {

959 if(
mode
 == 0) {

960 
	`Ârötf
(
°dîr
,"ªmŸêobje˘ '%s' d€†nŸÉxi°\n", 
Ω©h
);

964 if(
	`S_ISREG
(
mode
Ë|| 
	`S_ISLNK
(modeË|| 
	`S_ISCHR
(modeË|| 
	`S_ISBLK
(mode)) {

965 if(
	`°©
(
Õ©h
, &
°
) == 0) {

966 if(
	`S_ISDIR
(
°
.
°_mode
)) {

970 c⁄° *
«me
 = 
	`adb_dú°›
(
Ω©h
);

971 if(
«me
 == 0) {

972 
«me
 = 
Ω©h
;

974 
«me
++;

976 
tm∂í
 = 
	`°æí
(
«me
Ë+ såÀn(
Õ©h
) + 2;

977 *
tmp
 = 
	`mÆloc
(
tm∂í
);

978 if(
tmp
 == 0)  1;

979 
	`¢¥ötf
(
tmp
, 
tm∂í
, "%s/%s", 
Õ©h
, 
«me
);

980 
Õ©h
 = 
tmp
;

983 
	`BEGIN
();

984 if(
	`sync_ªcv
(
fd
, 
Ω©h
, 
Õ©h
)) {

987 
	`END
();

988 
	`sync_quô
(
fd
);

991 } if(
	`S_ISDIR
(
mode
)) {

992 
	`BEGIN
();

993 i‡(
	`c›y_ªmŸe_dú_loˇl
(
fd
, 
Ω©h
, 
Õ©h
, 0)) {

996 
	`END
();

997 
	`sync_quô
(
fd
);

1001 
	`Ârötf
(
°dîr
,"ªmŸêobje˘ '%s'ÇŸá fûê‹ dúe˘‹y\n", 
Ω©h
);

1004 
	}
}

1006 
	$do_sync_sync
(c⁄° *
Õ©h
, c⁄° *
Ω©h
, 
li°⁄ly
)

1008 
	`Ârötf
(
°dîr
,"syncög %s...\n",
Ω©h
);

1010 
fd
 = 
	`adb_c⁄√˘
("sync:");

1011 if(
fd
 < 0) {

1012 
	`Ârötf
(
°dîr
,"îr‹: %s\n", 
	`adb_îr‹
());

1016 
	`BEGIN
();

1017 if(
	`c›y_loˇl_dú_ªmŸe
(
fd
, 
Õ©h
, 
Ω©h
, 1, 
li°⁄ly
)){

1020 
	`END
();

1021 
	`sync_quô
(
fd
);

1024 
	}
}

	@file_sync_service.c

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

21 
	~<sys/°©.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<dúít.h
>

24 
	~<utime.h
>

26 
	~<î∫o.h
>

28 
	~"sysdïs.h
"

30 
	#TRACE_TAG
 
TRACE_SYNC


	)

31 
	~"adb.h
"

32 
	~"fûe_sync_£rvi˚.h
"

34 
	$mkdús
(*
«me
)

36 
ªt
;

37 *
x
 = 
«me
 + 1;

39 if(
«me
[0] != '/')  -1;

42 
x
 = 
	`adb_dú°¨t
(x);

43 if(
x
 == 0)  0;

44 *
x
 = 0;

45 
ªt
 = 
	`adb_mkdú
(
«me
, 0775);

46 if((
ªt
 < 0Ë&& (
î∫o
 !
EEXIST
)) {

47 
	`D
("mkdú(\"%s\"Ë-> %s\n", 
«me
, 
	`°ªº‹
(
î∫o
));

48 *
x
 = '/';

49  
ªt
;

51 *
x
++ = '/';

54 
	}
}

56 
	$do_°©
(
s
, c⁄° *
∑th
)

58 
syncmsg
 
msg
;

59 
°©
 
°
;

61 
msg
.
°©
.
id
 = 
ID_STAT
;

63 if(
	`l°©
(
∑th
, &
°
)) {

64 
msg
.
°©
.
mode
 = 0;

65 
msg
.
°©
.
size
 = 0;

66 
msg
.
°©
.
time
 = 0;

68 
msg
.
°©
.
mode
 = 
	`htﬁl
(
°
.
°_mode
);

69 
msg
.
°©
.
size
 = 
	`htﬁl
(
°
.
°_size
);

70 
msg
.
°©
.
time
 = 
	`htﬁl
(
°
.
°_mtime
);

73  
	`wrôex
(
s
, &
msg
.
°©
, (msg.stat));

74 
	}
}

76 
	$do_li°
(
s
, c⁄° *
∑th
)

78 
DIR
 *
d
;

79 
dúít
 *
de
;

80 
°©
 
°
;

81 
syncmsg
 
msg
;

82 
Àn
;

84 
tmp
[1024 + 256 + 1];

85 *
‚ame
;

87 
Àn
 = 
	`°æí
(
∑th
);

88 
	`mem˝y
(
tmp
, 
∑th
, 
Àn
);

89 
tmp
[
Àn
] = '/';

90 
‚ame
 = 
tmp
 + 
Àn
 + 1;

92 
msg
.
dít
.
id
 = 
ID_DENT
;

94 
d
 = 
	`›ídú
(
∑th
);

95 if(
d
 =0Ë
d⁄e
;

97 (
de
 = 
	`ªaddú
(
d
))) {

98 
Àn
 = 
	`°æí
(
de
->
d_«me
);

102 if(
Àn
 > 256) ;

104 
	`°r˝y
(
‚ame
, 
de
->
d_«me
);

105 if(
	`l°©
(
tmp
, &
°
) == 0) {

106 
msg
.
dít
.
mode
 = 
	`htﬁl
(
°
.
°_mode
);

107 
msg
.
dít
.
size
 = 
	`htﬁl
(
°
.
°_size
);

108 
msg
.
dít
.
time
 = 
	`htﬁl
(
°
.
°_mtime
);

109 
msg
.
dít
.
«mñí
 = 
	`htﬁl
(
Àn
);

111 if(
	`wrôex
(
s
, &
msg
.
dít
, (msg.dent)) ||

112 
	`wrôex
(
s
, 
de
->
d_«me
, 
Àn
)) {

118 
	`˛o£dú
(
d
);

120 
d⁄e
:

121 
msg
.
dít
.
id
 = 
ID_DONE
;

122 
msg
.
dít
.
mode
 = 0;

123 
msg
.
dít
.
size
 = 0;

124 
msg
.
dít
.
time
 = 0;

125 
msg
.
dít
.
«mñí
 = 0;

126  
	`wrôex
(
s
, &
msg
.
dít
, (msg.dent));

127 
	}
}

129 
	$Áû_mesßge
(
s
, c⁄° *
ªas⁄
)

131 
syncmsg
 
msg
;

132 
Àn
 = 
	`°æí
(
ªas⁄
);

134 
	`D
("sync: faûuª: %s\n", 
ªas⁄
);

136 
msg
.
d©a
.
id
 = 
ID_FAIL
;

137 
msg
.
d©a
.
size
 = 
	`htﬁl
(
Àn
);

138 if(
	`wrôex
(
s
, &
msg
.
d©a
, (msg.data)) ||

139 
	`wrôex
(
s
, 
ªas⁄
, 
Àn
)) {

144 
	}
}

146 
	$Áû_î∫o
(
s
)

148  
	`Áû_mesßge
(
s
, 
	`°ªº‹
(
î∫o
));

149 
	}
}

151 
	$h™dÀ_£nd_fûe
(
s
, *
∑th
, 
mode_t
 
mode
, *
buf„r
)

153 
syncmsg
 
msg
;

154 
time°amp
 = 0;

155 
fd
;

157 
fd
 = 
	`adb_›í_mode
(
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_EXCL
, 
mode
);

158 if(
fd
 < 0 && 
î∫o
 =
ENOENT
) {

159 
	`mkdús
(
∑th
);

160 
fd
 = 
	`adb_›í_mode
(
∑th
, 
O_WRONLY
 | 
O_CREAT
 | 
O_EXCL
, 
mode
);

162 if(
fd
 < 0 && 
î∫o
 =
EEXIST
) {

163 
fd
 = 
	`adb_›í_mode
(
∑th
, 
O_WRONLY
, 
mode
);

165 if(
fd
 < 0) {

166 if(
	`Áû_î∫o
(
s
))

168 
fd
 = -1;

172 
Àn
;

174 if(
	`ªadx
(
s
, &
msg
.
d©a
, (msg.data)))

175 
Áû
;

177 if(
msg
.
d©a
.
id
 !
ID_DATA
) {

178 if(
msg
.
d©a
.
id
 =
ID_DONE
) {

179 
time°amp
 = 
	`…ohl
(
msg
.
d©a
.
size
);

182 
	`Áû_mesßge
(
s
, "invalid data message");

183 
Áû
;

185 
Àn
 = 
	`…ohl
(
msg
.
d©a
.
size
);

186 if(
Àn
 > 
SYNC_DATA_MAX
) {

187 
	`Áû_mesßge
(
s
, "oversize data message");

188 
Áû
;

190 if(
	`ªadx
(
s
, 
buf„r
, 
Àn
))

191 
Áû
;

193 if(
fd
 < 0)

195 if(
	`wrôex
(
fd
, 
buf„r
, 
Àn
)) {

196 
ßved_î∫o
 = 
î∫o
;

197 
	`adb_˛o£
(
fd
);

198 
	`adb_u∆ök
(
∑th
);

199 
fd
 = -1;

200 
î∫o
 = 
ßved_î∫o
;

201 if(
	`Áû_î∫o
(
s
))  -1;

205 if(
fd
 >= 0) {

206 
utimbuf
 
u
;

207 
	`adb_˛o£
(
fd
);

208 
u
.
a˘ime
 = 
time°amp
;

209 
u
.
modtime
 = 
time°amp
;

210 
	`utime
(
∑th
, &
u
);

212 
msg
.
°©us
.
id
 = 
ID_OKAY
;

213 
msg
.
°©us
.
msgÀn
 = 0;

214 if(
	`wrôex
(
s
, &
msg
.
°©us
, (msg.status)))

219 
Áû
:

220 if(
fd
 >= 0)

221 
	`adb_˛o£
(
fd
);

222 
	`adb_u∆ök
(
∑th
);

224 
	}
}

226 #ifde‡
HAVE_SYMLINKS


227 
	$h™dÀ_£nd_lök
(
s
, *
∑th
, *
buf„r
)

229 
syncmsg
 
msg
;

230 
Àn
;

231 
ªt
;

233 if(
	`ªadx
(
s
, &
msg
.
d©a
, (msg.data)))

236 if(
msg
.
d©a
.
id
 !
ID_DATA
) {

237 
	`Áû_mesßge
(
s
, "invalid data message:Éxpected ID_DATA");

241 
Àn
 = 
	`…ohl
(
msg
.
d©a
.
size
);

242 if(
Àn
 > 
SYNC_DATA_MAX
) {

243 
	`Áû_mesßge
(
s
, "oversize data message");

246 if(
	`ªadx
(
s
, 
buf„r
, 
Àn
))

249 
ªt
 = 
	`symlök
(
buf„r
, 
∑th
);

250 if(
ªt
 && 
î∫o
 =
ENOENT
) {

251 
	`mkdús
(
∑th
);

252 
ªt
 = 
	`symlök
(
buf„r
, 
∑th
);

254 if(
ªt
) {

255 
	`Áû_î∫o
(
s
);

259 if(
	`ªadx
(
s
, &
msg
.
d©a
, (msg.data)))

262 if(
msg
.
d©a
.
id
 =
ID_DONE
) {

263 
msg
.
°©us
.
id
 = 
ID_OKAY
;

264 
msg
.
°©us
.
msgÀn
 = 0;

265 if(
	`wrôex
(
s
, &
msg
.
°©us
, (msg.status)))

268 
	`Áû_mesßge
(
s
, "invalid data message:Éxpected ID_DONE");

273 
	}
}

276 
	$do_£nd
(
s
, *
∑th
, *
buf„r
)

278 *
tmp
;

279 
mode_t
 
mode
;

280 
is_lök
, 
ªt
;

282 
tmp
 = 
	`°ºchr
(
∑th
,',');

283 if(
tmp
) {

284 *
tmp
 = 0;

285 
î∫o
 = 0;

286 
mode
 = 
	`°πoul
(
tmp
 + 1, 
NULL
, 0);

287 #i‚de‡
HAVE_SYMLINKS


288 
is_lök
 = 0;

290 
is_lök
 = 
	`S_ISLNK
(
mode
);

292 
mode
 &= 0777;

294 if(!
tmp
 || 
î∫o
) {

295 
mode
 = 0644;

296 
is_lök
 = 0;

299 
	`adb_u∆ök
(
∑th
);

302 #ifde‡
HAVE_SYMLINKS


303 if(
is_lök
)

304 
ªt
 = 
	`h™dÀ_£nd_lök
(
s
, 
∑th
, 
buf„r
);

310 
mode
 |= ((mode >> 3) & 0070);

311 
mode
 |= ((mode >> 3) & 0007);

313 
ªt
 = 
	`h™dÀ_£nd_fûe
(
s
, 
∑th
, 
mode
, 
buf„r
);

316  
ªt
;

317 
	}
}

319 
	$do_ªcv
(
s
, c⁄° *
∑th
, *
buf„r
)

321 
syncmsg
 
msg
;

322 
fd
, 
r
;

324 
fd
 = 
	`adb_›í
(
∑th
, 
O_RDONLY
);

325 if(
fd
 < 0) {

326 if(
	`Áû_î∫o
(
s
))  -1;

330 
msg
.
d©a
.
id
 = 
ID_DATA
;

332 
r
 = 
	`adb_ªad
(
fd
, 
buf„r
, 
SYNC_DATA_MAX
);

333 if(
r
 <= 0) {

334 if(
r
 == 0) ;

335 if(
î∫o
 =
EINTR
) ;

336 
r
 = 
	`Áû_î∫o
(
s
);

337 
	`adb_˛o£
(
fd
);

338  
r
;

340 
msg
.
d©a
.
size
 = 
	`htﬁl
(
r
);

341 if(
	`wrôex
(
s
, &
msg
.
d©a
, (msg.data)) ||

342 
	`wrôex
(
s
, 
buf„r
, 
r
)) {

343 
	`adb_˛o£
(
fd
);

348 
	`adb_˛o£
(
fd
);

350 
msg
.
d©a
.
id
 = 
ID_DONE
;

351 
msg
.
d©a
.
size
 = 0;

352 if(
	`wrôex
(
s
, &
msg
.
d©a
, (msg.data))) {

357 
	}
}

359 
	$fûe_sync_£rvi˚
(
fd
, *
cookõ
)

361 
syncmsg
 
msg
;

362 
«me
[1025];

363 
«mñí
;

365 *
buf„r
 = 
	`mÆloc
(
SYNC_DATA_MAX
);

366 if(
buf„r
 =0Ë
Áû
;

369 
	`D
("sync: waiting for command\n");

371 if(
	`ªadx
(
fd
, &
msg
.
ªq
, (msg.req))) {

372 
	`Áû_mesßge
(
fd
, "commandÑead failure");

375 
«mñí
 = 
	`…ohl
(
msg
.
ªq
.namelen);

376 if(
«mñí
 > 1024) {

377 
	`Áû_mesßge
(
fd
, "invalidÇamelen");

380 if(
	`ªadx
(
fd
, 
«me
, 
«mñí
)) {

381 
	`Áû_mesßge
(
fd
, "filenameÑead failure");

384 
«me
[
«mñí
] = 0;

386 
msg
.
ªq
.
«mñí
 = 0;

387 
	`D
("sync: '%s' '%s'\n", (*Ë&
msg
.
ªq
, 
«me
);

389 
msg
.
ªq
.
id
) {

390 
ID_STAT
:

391 if(
	`do_°©
(
fd
, 
«me
)Ë
Áû
;

393 
ID_LIST
:

394 if(
	`do_li°
(
fd
, 
«me
)Ë
Áû
;

396 
ID_SEND
:

397 if(
	`do_£nd
(
fd
, 
«me
, 
buf„r
)Ë
Áû
;

399 
ID_RECV
:

400 if(
	`do_ªcv
(
fd
, 
«me
, 
buf„r
)Ë
Áû
;

402 
ID_QUIT
:

403 
Áû
;

405 
	`Áû_mesßge
(
fd
, "unknown command");

406 
Áû
;

410 
Áû
:

411 if(
buf„r
 !0Ë
	`‰ì
(buffer);

412 
	`D
("sync: done\n");

413 
	`adb_˛o£
(
fd
);

414 
	}
}

	@file_sync_service.h

17 #i‚de‡
_FILE_SYNC_SERVICE_H_


18 
	#_FILE_SYNC_SERVICE_H_


	)

20 #ifde‡
HAVE_BIG_ENDIAN


21 
ölöe
 
	$__sw≠_uöt32
(
x
)

23  (((
x
) & 0xFF000000) >> 24)

24 | (((
x
) & 0x00FF0000) >> 8)

25 | (((
x
) & 0x0000FF00) << 8)

26 | (((
x
) & 0x000000FF) << 24);

27 
	}
}

28 
	#htﬁl
(
x
Ë
	`__sw≠_uöt32
(x)

	)

29 
	#…ohl
(
x
Ë
	`__sw≠_uöt32
(x)

	)

30 
	#MKID
(
a
,
b
,
c
,
d
Ë((dË| ((cË<< 8Ë| ((bË<< 16Ë| (◊Ë<< 24))

	)

32 
	#htﬁl
(
x
Ë(x)

	)

33 
	#…ohl
(
x
Ë(x)

	)

34 
	#MKID
(
a
,
b
,
c
,
d
Ë(◊Ë| ((bË<< 8Ë| ((cË<< 16Ë| ((dË<< 24))

	)

37 
	#ID_STAT
 
	`MKID
('S','T','A','T')

	)

38 
	#ID_LIST
 
	`MKID
('L','I','S','T')

	)

39 
	#ID_ULNK
 
	`MKID
('U','L','N','K')

	)

40 
	#ID_SEND
 
	`MKID
('S','E','N','D')

	)

41 
	#ID_RECV
 
	`MKID
('R','E','C','V')

	)

42 
	#ID_DENT
 
	`MKID
('D','E','N','T')

	)

43 
	#ID_DONE
 
	`MKID
('D','O','N','E')

	)

44 
	#ID_DATA
 
	`MKID
('D','A','T','A')

	)

45 
	#ID_OKAY
 
	`MKID
('O','K','A','Y')

	)

46 
	#ID_FAIL
 
	`MKID
('F','A','I','L')

	)

47 
	#ID_QUIT
 
	`MKID
('Q','U','I','T')

	)

50 
	mid
;

52 
	mid
;

53 
	m«mñí
;

54 } 
	mªq
;

56 
	mid
;

57 
	mmode
;

58 
	msize
;

59 
	mtime
;

60 } 
	m°©
;

62 
	mid
;

63 
	mmode
;

64 
	msize
;

65 
	mtime
;

66 
	m«mñí
;

67 } 
	mdít
;

69 
	mid
;

70 
	msize
;

71 } 
	md©a
;

73 
	mid
;

74 
	mmsgÀn
;

75 } 
	m°©us
;

76 } 
	tsyncmsg
;

79 
fûe_sync_£rvi˚
(
fd
, *
cookõ
);

80 
do_sync_ls
(c⁄° *
∑th
);

81 
do_sync_push
(c⁄° *
Õ©h
, c⁄° *
Ω©h
, 
vîifyApk
);

82 
do_sync_sync
(c⁄° *
Õ©h
, c⁄° *
Ω©h
, 
li°⁄ly
);

83 
do_sync_puŒ
(c⁄° *
Ω©h
, c⁄° *
Õ©h
);

85 
	#SYNC_DATA_MAX
 (64*1024)

	)

	@framebuffer_service.c

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~<°rög.h
>

21 
	~<f˙é.h
>

22 
	~<î∫o.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/waô.h
>

26 
	~"fdevít.h
"

27 
	~"adb.h
"

29 
	~<löux/fb.h
>

30 
	~<sys/io˘l.h
>

31 
	~<sys/mm™.h
>

38 #i‚de‡
TEMP_FAILURE_RETRY


40 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

41 
	`ty≥of
 (
exp
Ë
_rc
; \

43 
_rc
 = (
exp
); \

44 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

45 
_rc
; })

	)

53 
	#DDMS_RAWIMAGE_VERSION
 1

	)

54 
	sfböfo
 {

55 
	mvîsi⁄
;

56 
	mbµ
;

57 
	msize
;

58 
	mwidth
;

59 
	mheight
;

60 
	mªd_off£t
;

61 
	mªd_Àngth
;

62 
	mblue_off£t
;

63 
	mblue_Àngth
;

64 
	mgªí_off£t
;

65 
	mgªí_Àngth
;

66 
	mÆpha_off£t
;

67 
	mÆpha_Àngth
;

68 } 
__©åibuã__
((
∑cked
));

70 
	$‰amebuf„r_£rvi˚
(
fd
, *
cookõ
)

72 
fböfo
 fbinfo;

73 
i
;

74 
buf
[1024];

75 
fd_s¸ìnˇp
;

76 
w
, 
h
, 
f
;

77 
fds
[2];

79 i‡(
	`pùe
(
fds
Ë< 0Ë
d⁄e
;

81 
pid_t
 
pid
 = 
	`f‹k
();

82 i‡(
pid
 < 0Ë
d⁄e
;

84 i‡(
pid
 == 0) {

85 
	`dup2
(
fds
[1], 
STDOUT_FILENO
);

86 
	`˛o£
(
fds
[0]);

87 
	`˛o£
(
fds
[1]);

88 c⁄° * 
comm™d
 = "screencap";

89 c⁄° *
¨gs
[2] = {
comm™d
, 
NULL
};

90 
	`execvp
(
comm™d
, (**)
¨gs
);

91 
	`exô
(1);

94 
fd_s¸ìnˇp
 = 
fds
[0];

97 if(
	`ªadx
(
fd_s¸ìnˇp
, &
w
, 4)Ë
d⁄e
;

98 if(
	`ªadx
(
fd_s¸ìnˇp
, &
h
, 4)Ë
d⁄e
;

99 if(
	`ªadx
(
fd_s¸ìnˇp
, &
f
, 4)Ë
d⁄e
;

101 
fböfo
.
vîsi⁄
 = 
DDMS_RAWIMAGE_VERSION
;

103 
f
) {

105 
fböfo
.
bµ
 = 32;

106 
fböfo
.
size
 = 
w
 * 
h
 * 4;

107 
fböfo
.
width
 = 
w
;

108 
fböfo
.
height
 = 
h
;

109 
fböfo
.
ªd_off£t
 = 0;

110 
fböfo
.
ªd_Àngth
 = 8;

111 
fböfo
.
gªí_off£t
 = 8;

112 
fböfo
.
gªí_Àngth
 = 8;

113 
fböfo
.
blue_off£t
 = 16;

114 
fböfo
.
blue_Àngth
 = 8;

115 
fböfo
.
Æpha_off£t
 = 24;

116 
fböfo
.
Æpha_Àngth
 = 8;

119 
fböfo
.
bµ
 = 32;

120 
fböfo
.
size
 = 
w
 * 
h
 * 4;

121 
fböfo
.
width
 = 
w
;

122 
fböfo
.
height
 = 
h
;

123 
fböfo
.
ªd_off£t
 = 0;

124 
fböfo
.
ªd_Àngth
 = 8;

125 
fböfo
.
gªí_off£t
 = 8;

126 
fböfo
.
gªí_Àngth
 = 8;

127 
fböfo
.
blue_off£t
 = 16;

128 
fböfo
.
blue_Àngth
 = 8;

129 
fböfo
.
Æpha_off£t
 = 24;

130 
fböfo
.
Æpha_Àngth
 = 0;

133 
fböfo
.
bµ
 = 24;

134 
fböfo
.
size
 = 
w
 * 
h
 * 3;

135 
fböfo
.
width
 = 
w
;

136 
fböfo
.
height
 = 
h
;

137 
fböfo
.
ªd_off£t
 = 0;

138 
fböfo
.
ªd_Àngth
 = 8;

139 
fböfo
.
gªí_off£t
 = 8;

140 
fböfo
.
gªí_Àngth
 = 8;

141 
fböfo
.
blue_off£t
 = 16;

142 
fböfo
.
blue_Àngth
 = 8;

143 
fböfo
.
Æpha_off£t
 = 24;

144 
fböfo
.
Æpha_Àngth
 = 0;

147 
fböfo
.
bµ
 = 16;

148 
fböfo
.
size
 = 
w
 * 
h
 * 2;

149 
fböfo
.
width
 = 
w
;

150 
fböfo
.
height
 = 
h
;

151 
fböfo
.
ªd_off£t
 = 11;

152 
fböfo
.
ªd_Àngth
 = 5;

153 
fböfo
.
gªí_off£t
 = 5;

154 
fböfo
.
gªí_Àngth
 = 6;

155 
fböfo
.
blue_off£t
 = 0;

156 
fböfo
.
blue_Àngth
 = 5;

157 
fböfo
.
Æpha_off£t
 = 0;

158 
fböfo
.
Æpha_Àngth
 = 0;

161 
fböfo
.
bµ
 = 32;

162 
fböfo
.
size
 = 
w
 * 
h
 * 4;

163 
fböfo
.
width
 = 
w
;

164 
fböfo
.
height
 = 
h
;

165 
fböfo
.
ªd_off£t
 = 16;

166 
fböfo
.
ªd_Àngth
 = 8;

167 
fböfo
.
gªí_off£t
 = 8;

168 
fböfo
.
gªí_Àngth
 = 8;

169 
fböfo
.
blue_off£t
 = 0;

170 
fböfo
.
blue_Àngth
 = 8;

171 
fböfo
.
Æpha_off£t
 = 24;

172 
fböfo
.
Æpha_Àngth
 = 8;

175 
d⁄e
;

179 if(
	`wrôex
(
fd
, &
fböfo
, (fböfo))Ë
d⁄e
;

182 
i
 = 0; i < 
fböfo
.
size
; i +(
buf
)) {

183 if(
	`ªadx
(
fd_s¸ìnˇp
, 
buf
, (buf))Ë
d⁄e
;

184 if(
	`wrôex
(
fd
, 
buf
, (buf))Ë
d⁄e
;

186 if(
	`ªadx
(
fd_s¸ìnˇp
, 
buf
, 
fböfo
.
size
 % (buf))Ë
d⁄e
;

187 if(
	`wrôex
(
fd
, 
buf
, 
fböfo
.
size
 % (buf))Ë
d⁄e
;

189 
d⁄e
:

190 
	`TEMP_FAILURE_RETRY
(
	`waôpid
(
pid
, 
NULL
, 0));

192 
	`˛o£
(
fds
[0]);

193 
	`˛o£
(
fds
[1]);

194 
	`˛o£
(
fd
);

195 
	}
}

	@get_my_path_darwin.c

17 #imp‹à<
C¨b⁄
/C¨b⁄.
h
>

18 
	~<uni°d.h
>

20 
	$gë_my_∑th
(*
s
, 
size_t
 
maxLí
)

22 
Pro˚ssSîülNumbî
 
p¢
;

23 
	`GëCuºítPro˚ss
(&
p¢
);

24 
CFDi˘i⁄¨yRef
 
di˘
;

25 
di˘
 = 
	`Pro˚ssInf‹m©i⁄C›yDi˘i⁄¨y
(&
p¢
, 0xffffffff);

26 
CFSåögRef
 
vÆue
 = (CFSåögRef)
	`CFDi˘i⁄¨yGëVÆue
(
di˘
,

27 
	`CFSTR
("CFBundleExecutable"));

28 
	`CFSåögGëCSåög
(
vÆue
, 
s
, 
maxLí
, 
kCFSåögEncodögUTF8
);

29 
	}
}

	@get_my_path_freebsd.c

20 
	~<sys/ty≥s.h
>

21 
	~<uni°d.h
>

22 
	~<limôs.h
>

23 
	~<°dio.h
>

26 
	$gë_my_∑th
(*
exe
, 
size_t
 
maxLí
)

28 
¥oc
[64];

30 
	`¢¥ötf
(
¥oc
, ’roc), "/¥oc/%d/fûe", 
	`gëpid
());

32 
îr
 = 
	`ªadlök
(
¥oc
, 
exe
, 
maxLí
 - 1);

34 
exe
[
îr
 > 0 ?Érr : 0] = '\0';

35 
	}
}

	@get_my_path_linux.c

17 
	~<sys/ty≥s.h
>

18 
	~<uni°d.h
>

19 
	~<limôs.h
>

20 
	~<°dio.h
>

22 
	$gë_my_∑th
(*
exe
, 
size_t
 
maxLí
)

24 
¥oc
[64];

25 
	`¢¥ötf
(
¥oc
, Öroc, "/¥oc/%d/exe", 
	`gëpid
());

26 
îr
 = 
	`ªadlök
(
¥oc
, 
exe
, 
maxLí
 - 1);

27 if(
îr
 > 0) {

28 
exe
[
îr
] = '\0';

30 
exe
[0] = '\0';

32 
	}
}

	@get_my_path_windows.c

17 
	~<limôs.h
>

18 
	~<as£π.h
>

19 
	~<wödows.h
>

21 
	$gë_my_∑th
(*
exe
, 
size_t
 
maxLí
)

23 *
r
;

26 i‡(
	`GëModuÀFûeName
(
NULL
, 
exe
, 
maxLí
) > 0) {

27 
r
 = 
	`°ºchr
(
exe
, '\\');

28 i‡(
r
 !
NULL
)

29 *
r
 = '\0';

31 
exe
[0] = '\0';

33 
	}
}

	@jdwp_service.c

2 
	~"sysdïs.h
"

3 
	#TRACE_TAG
 
TRACE_JDWP


	)

4 
	~"adb.h
"

5 
	~<î∫o.h
>

6 
	~<°dio.h
>

7 
	~<°rög.h
>

8 
	~<uni°d.h
>

97 
	#MAX_OUT_FDS
 4

	)

99 #i‡!
ADB_HOST


101 
	~<sys/sockë.h
>

102 
	~<sys/un.h
>

104 
JdwpPro˚ss
 
	tJdwpPro˚ss
;

105 
	sJdwpPro˚ss
 {

106 
JdwpPro˚ss
* 
	m√xt
;

107 
JdwpPro˚ss
* 
	m¥ev
;

108 
	mpid
;

109 
	msockë
;

110 
fdevít
* 
	mfde
;

112 
	mö_buff
[4];

113 
	mö_Àn
;

115 
	mout_fds
[
MAX_OUT_FDS
];

116 
	mout_cou¡
;

119 
JdwpPro˚ss
 
	g_jdwp_li°
;

122 
	$jdwp_¥o˚ss_li°
–* 
buf„r
, 
buf„æí
 )

124 * 
íd
 = 
buf„r
 + 
buf„æí
;

125 * 
p
 = 
buf„r
;

126 
JdwpPro˚ss
* 
¥oc
 = 
_jdwp_li°
.
√xt
;

128  ; 
¥oc
 !&
_jdwp_li°
;Öro¯¥oc->
√xt
 ) {

129 
Àn
;

132 i‡(
¥oc
->
pid
 < 0)

135 
Àn
 = 
	`¢¥ötf
(
p
, 
íd
-p, "%d\n", 
¥oc
->
pid
);

136 i‡(
p
 + 
Àn
 >
íd
)

138 
p
 +
Àn
;

140 
p
[0] = 0;

141  (
p
 - 
buf„r
);

142 
	}
}

146 
	$jdwp_¥o˚ss_li°_msg
–* 
buf„r
, 
buf„æí
 )

148 
hód
[5];

149 
Àn
 = 
	`jdwp_¥o˚ss_li°
–
buf„r
+4, 
buf„æí
-4 );

150 
	`¢¥ötf
(
hód
,  hód, "%04x", 
Àn
);

151 
	`mem˝y
(
buf„r
, 
hód
, 4);

152  
Àn
 + 4;

153 
	}
}

156 
jdwp_¥o˚ss_li°_upd©ed
();

159 
	$jdwp_¥o˚ss_‰ì
–
JdwpPro˚ss
* 
¥oc
 )

161 i‡(
¥oc
) {

162 
n
;

164 
¥oc
->
¥ev
->
√xt
 =Öroc->next;

165 
¥oc
->
√xt
->
¥ev
 =Öroc->prev;

167 i‡(
¥oc
->
sockë
 >= 0) {

168 
	`adb_shutdown
(
¥oc
->
sockë
);

169 
	`adb_˛o£
(
¥oc
->
sockë
);

170 
¥oc
->
sockë
 = -1;

173 i‡(
¥oc
->
fde
 !
NULL
) {

174 
	`fdevít_de°roy
(
¥oc
->
fde
);

175 
¥oc
->
fde
 = 
NULL
;

177 
¥oc
->
pid
 = -1;

179 
n
 = 0;Ç < 
¥oc
->
out_cou¡
;Ç++) {

180 
	`adb_˛o£
(
¥oc
->
out_fds
[
n
]);

182 
¥oc
->
out_cou¡
 = 0;

184 
	`‰ì
(
¥oc
);

186 
	`jdwp_¥o˚ss_li°_upd©ed
();

188 
	}
}

191 
jdwp_¥o˚ss_evít
(, , *);

194 
JdwpPro˚ss
*

195 
	$jdwp_¥o˚ss_Æloc
–
sockë
 )

197 
JdwpPro˚ss
* 
¥oc
 = 
	`ˇŒoc
(1,(*proc));

199 i‡(
¥oc
 =
NULL
) {

200 
	`D
("notÉnough memoryÅo createÇew JDWPÖrocess\n");

201  
NULL
;

204 
¥oc
->
sockë
 = socket;

205 
¥oc
->
pid
 = -1;

206 
¥oc
->
√xt
 =Öroc;

207 
¥oc
->
¥ev
 =Öroc;

209 
¥oc
->
fde
 = 
	`fdevít_¸óã
–
sockë
, 
jdwp_¥o˚ss_evít
,Öroc );

210 i‡(
¥oc
->
fde
 =
NULL
) {

211 
	`D
("couldÇot create fdevent forÇew JDWPÖrocess\n" );

212 
	`‰ì
(
¥oc
);

213  
NULL
;

216 
¥oc
->
fde
->
°©e
 |
FDE_DONT_CLOSE
;

217 
¥oc
->
ö_Àn
 = 0;

218 
¥oc
->
out_cou¡
 = 0;

221 
¥oc
->
√xt
 = &
_jdwp_li°
;

222 
¥oc
->
¥ev
 =Öroc->
√xt
->prev;

224 
¥oc
->
¥ev
->
√xt
 =Öroc;

225 
¥oc
->
√xt
->
¥ev
 =Öroc;

228 
	`fdevít_add
(
¥oc
->
fde
, 
FDE_READ
);

230  
¥oc
;

231 
	}
}

235 
	$jdwp_¥o˚ss_evít
–
sockë
, 
evíts
, * 
_¥oc
 )

237 
JdwpPro˚ss
* 
¥oc
 = 
_¥oc
;

239 i‡(
evíts
 & 
FDE_READ
) {

240 i‡(
¥oc
->
pid
 < 0) {

242 * 
p
 = 
¥oc
->
ö_buff
 +Öroc->
ö_Àn
;

243 
size
 = 4 - 
¥oc
->
ö_Àn
;

244 
ãmp
[5];

245 
size
 > 0) {

246 
Àn
 = 
	`ªcv
–
sockë
, 
p
, 
size
, 0 );

247 i‡(
Àn
 < 0) {

248 i‡(
î∫o
 =
EINTR
)

250 i‡(
î∫o
 =
EAGAIN
)

253 
	`D
("weird unknown JDWPÖrocess failure: %s\n",

254 
	`°ªº‹
(
î∫o
));

256 
Clo£Pro˚ss
;

258 i‡(
Àn
 == 0) {

259 
	`D
("weirdÉnd-of-stream from unknown JDWPÖrocess\n");

260 
Clo£Pro˚ss
;

262 
p
 +
Àn
;

263 
¥oc
->
ö_Àn
 +
Àn
;

264 
size
 -
Àn
;

267 
	`mem˝y
(
ãmp
, 
¥oc
->
ö_buff
, 4);

268 
ãmp
[4] = 0;

270 i‡(
	`ssˇnf
–
ãmp
, "%04x", &
¥oc
->
pid
 ) != 1) {

271 
	`D
("couldÇŸ decodêJDWP %∞PIDÇumbî: '%s'\n", 
¥oc
, 
ãmp
);

272 
Clo£Pro˚ss
;

276 
	`D
("AddögÖid %dÅÿjdw∞¥o˚s†li°\n", 
¥oc
->
pid
);

277 
	`jdwp_¥o˚ss_li°_upd©ed
();

283 
buf
[32];

286 
Àn
 = 
	`ªcv
(
sockë
, 
buf
, (buf), 0);

288 i‡(
Àn
 <= 0) {

289 i‡(
Àn
 < 0 && 
î∫o
 =
EINTR
)

291 i‡(
Àn
 < 0 && 
î∫o
 =
EAGAIN
)

294 
	`D
("ãrmö©ög JDWP %d c⁄√˘i⁄: %s\n", 
¥oc
->
pid
,

295 
	`°ªº‹
(
î∫o
));

300 
	`D
( "ignoring unexpected JDWP %d control socketáctivity (%d bytes)\n",

301 
¥oc
->
pid
, 
Àn
 );

305 
Clo£Pro˚ss
:

306 i‡(
¥oc
->
pid
 >= 0)

307 
	`D
–"ªmovêpid %dÅÿjdw∞¥o˚s†li°\n", 
¥oc
->
pid
 );

308 
	`jdwp_¥o˚ss_‰ì
(
¥oc
);

313 i‡(
evíts
 & 
FDE_WRITE
) {

314 
	`D
("tryingÅo writeÅo JDWPÖid controli (count=%d first=%d) %d\n",

315 
¥oc
->
pid
,Öroc->
out_cou¡
,Öroc->
out_fds
[0]);

316 i‡(
¥oc
->
out_cou¡
 > 0) {

317 
fd
 = 
¥oc
->
out_fds
[0];

318 
n
, 
ªt
;

319 
cmsghdr
* 
cmsg
;

320 
msghdr
 
msg
;

321 
iovec
 
iov
;

322 
dummy
 = '!';

323 
buf„r
[(
cmsghdr
) + ()];

324 
Êags
;

326 
iov
.
iov_ba£
 = &
dummy
;

327 
iov
.
iov_Àn
 = 1;

328 
msg
.
msg_«me
 = 
NULL
;

329 
msg
.
msg_«mñí
 = 0;

330 
msg
.
msg_iov
 = &
iov
;

331 
msg
.
msg_iovÀn
 = 1;

332 
msg
.
msg_Êags
 = 0;

333 
msg
.
msg_c⁄åﬁ
 = 
buf„r
;

334 
msg
.
msg_c⁄åﬁÀn
 = (
buf„r
);

336 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

337 
cmsg
->
cmsg_Àn
 = 
msg
.
msg_c⁄åﬁÀn
;

338 
cmsg
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

339 
cmsg
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

340 ((*)
	`CMSG_DATA
(
cmsg
))[0] = 
fd
;

342 
Êags
 = 
	`f˙é
(
¥oc
->
sockë
,
F_GETFL
,0);

344 i‡(
Êags
 == -1) {

345 
	`D
("failedÅo get cntl flags for socket %d: %s\n",

346 
¥oc
->
pid
, 
	`°ªº‹
(
î∫o
));

347 
Clo£Pro˚ss
;

351 i‡(
	`f˙é
(
¥oc
->
sockë
, 
F_SETFL
, 
Êags
 & ~
O_NONBLOCK
) == -1) {

352 
	`D
("failedÅoÑemove O_NONBLOCK flag for socket %d: %s\n",

353 
¥oc
->
pid
, 
	`°ªº‹
(
î∫o
));

354 
Clo£Pro˚ss
;

358 
ªt
 = 
	`£ndmsg
(
¥oc
->
sockë
, &
msg
, 0);

359 i‡(
ªt
 >= 0) {

360 
	`adb_˛o£
(
fd
);

363 i‡(
î∫o
 =
EINTR
)

365 
	`D
("sendingÇew file descriptorÅo JDWP %d failed: %s\n",

366 
¥oc
->
pid
, 
	`°ªº‹
(
î∫o
));

367 
Clo£Pro˚ss
;

370 
	`D
("sent file descriptor %dÅo JDWPÖrocess %d\n",

371 
fd
, 
¥oc
->
pid
);

373 
n
 = 1;Ç < 
¥oc
->
out_cou¡
;Ç++)

374 
¥oc
->
out_fds
[
n
-1] =Öroc->out_fds[n];

376 i‡(
	`f˙é
(
¥oc
->
sockë
, 
F_SETFL
, 
Êags
) == -1) {

377 
	`D
("failedÅo set O_NONBLOCK flag for socket %d: %s\n",

378 
¥oc
->
pid
, 
	`°ªº‹
(
î∫o
));

379 
Clo£Pro˚ss
;

382 i‡(--
¥oc
->
out_cou¡
 == 0)

383 
	`fdevít_dñ
–
¥oc
->
fde
, 
FDE_WRITE
 );

386 
	}
}

390 
	$¸óã_jdwp_c⁄√˘i⁄_fd
(
pid
)

392 
JdwpPro˚ss
* 
¥oc
 = 
_jdwp_li°
.
√xt
;

394 
	`D
("lookög f‹Öid %d i¿JDWPÖro˚s†li°\n", 
pid
);

395  ; 
¥oc
 !&
_jdwp_li°
;Öro¯¥oc->
√xt
 ) {

396 i‡(
¥oc
->
pid
 ==Öid) {

397 
FoundIt
;

400 
	`D
("search failed !!\n");

403 
FoundIt
:

405 
fds
[2];

407 i‡(
¥oc
->
out_cou¡
 >
MAX_OUT_FDS
) {

408 
	`D
("%s:Åoo manyÖending JDWP connection forÖid %d\n",

409 
__FUNCTION__
, 
pid
);

413 i‡(
	`adb_sockë∑ú
(
fds
) < 0) {

414 
	`D
("%s: socketÖair creation failed: %s\n",

415 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

419 
¥oc
->
out_fds
[Öroc->
out_cou¡
 ] = 
fds
[1];

420 i‡(++
¥oc
->
out_cou¡
 == 1)

421 
	`fdevít_add
–
¥oc
->
fde
, 
FDE_WRITE
 );

423  
fds
[0];

425 
	}
}

433 
	#JDWP_CONTROL_NAME
 "\0jdwp-c⁄åﬁ"

	)

434 
	#JDWP_CONTROL_NAME_LEN
 ((
JDWP_CONTROL_NAME
)-1)

	)

437 
	mli°í_sockë
;

438 
fdevít
* 
	mfde
;

440 } 
	tJdwpC⁄åﬁ
;

444 
jdwp_c⁄åﬁ_evít
(
s
, 
evíts
, * 
u£r
);

448 
	$jdwp_c⁄åﬁ_öô
–
JdwpC⁄åﬁ
* 
c⁄åﬁ
,

449 c⁄° * 
sock«me
,

450 
sock«mñí
 )

452 
sockaddr_un
 
addr
;

453 
sockÀn_t
 
addæí
;

454 
s
;

455 
max∑th
 = (
addr
.
sun_∑th
);

456 
∑thÀn
 = 
sock«mñí
;

458 i‡(
∑thÀn
 >
max∑th
) {

459 
	`D
( "vm debug control socketÇameÅooÜong (%dÉxtra chars)\n",

460 
∑thÀn
+1-
max∑th
 );

464 
	`mem£t
(&
addr
, 0, (addr));

465 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

466 
	`mem˝y
(
addr
.
sun_∑th
, 
sock«me
, 
sock«mñí
);

468 
s
 = 
	`sockë
–
AF_UNIX
, 
SOCK_STREAM
, 0 );

469 i‡(
s
 < 0) {

470 
	`D
( "couldÇot create vm debug control socket. %d: %s\n",

471 
î∫o
, 
	`°ªº‹
(errno));

475 
addæí
 = (
∑thÀn
 + (
addr
.
sun_Ámûy
));

477 i‡(
	`böd
(
s
, (
sockaddr
*)&
addr
, 
addæí
) < 0) {

478 
	`D
( "couldÇot bind vm debug control socket: %d: %s\n",

479 
î∫o
, 
	`°ªº‹
(errno) );

480 
	`adb_˛o£
(
s
);

484 i‡–
	`li°í
(
s
, 4) < 0 ) {

485 
	`D
("listen failed in jdwp control socket: %d: %s\n",

486 
î∫o
, 
	`°ªº‹
(errno));

487 
	`adb_˛o£
(
s
);

491 
c⁄åﬁ
->
li°í_sockë
 = 
s
;

493 
c⁄åﬁ
->
fde
 = 
	`fdevít_¸óã
(
s
, 
jdwp_c⁄åﬁ_evít
, control);

494 i‡(
c⁄åﬁ
->
fde
 =
NULL
) {

495 
	`D
( "couldÇot create fdevent for jdwp control socket\n" );

496 
	`adb_˛o£
(
s
);

501 
	`fdevít_add
(
c⁄åﬁ
->
fde
, 
FDE_READ
);

502 
	`˛o£_⁄_exec
(
s
);

504 
	`D
("jdw∞c⁄åﬁ sockë sèπed (%d)\n", 
c⁄åﬁ
->
li°í_sockë
);

506 
	}
}

510 
	$jdwp_c⁄åﬁ_evít
–
s
, 
evíts
, * 
_c⁄åﬁ
 )

512 
JdwpC⁄åﬁ
* 
c⁄åﬁ
 = (JdwpC⁄åﬁ*Ë
_c⁄åﬁ
;

514 i‡(
evíts
 & 
FDE_READ
) {

515 
sockaddr
 
addr
;

516 
sockÀn_t
 
addæí
 = (
addr
);

517 
s
 = -1;

518 
JdwpPro˚ss
* 
¥oc
;

521 
s
 = 
	`adb_sockë_ac˚±
–
c⁄åﬁ
->
li°í_sockë
, &
addr
, &
addæí
 );

522 i‡(
s
 < 0) {

523 i‡(
î∫o
 =
EINTR
)

525 i‡(
î∫o
 =
ECONNABORTED
) {

527 
	`D
("oops,Åhe JDWPÖrocess diedÑeally quick\n");

531 
	`D
( "weirdáccept() failed on jdwp control socket: %s\n",

532 
	`°ªº‹
(
î∫o
) );

536 
s
 < 0);

538 
¥oc
 = 
	`jdwp_¥o˚ss_Æloc
–
s
 );

539 i‡(
¥oc
 =
NULL
)

542 
	}
}

545 
JdwpC⁄åﬁ
 
	g_jdwp_c⁄åﬁ
;

552 
asockë
 
	msockë
;

553 
	m∑ss
;

554 } 
	tJdwpSockë
;

557 
	$jdwp_sockë_˛o£
–
asockë
* 
s
 )

559 
asockë
* 
≥î
 = 
s
->peer;

561 
	`ªmove_sockë
(
s
);

563 i‡(
≥î
) {

564 
≥î
->≥î = 
NULL
;

565 
≥î
->
	`˛o£
(peer);

567 
	`‰ì
(
s
);

568 
	}
}

571 
	$jdwp_sockë_íqueue
–
asockë
* 
s
, 
≠ackë
* 
p
 )

574 
	`put_≠ackë
(
p
);

575 
s
->
≥î
->
	`˛o£
(s->peer);

577 
	}
}

581 
	$jdwp_sockë_ªady
–
asockë
* 
s
 )

583 
JdwpSockë
* 
jdwp
 = (JdwpSockë*)
s
;

584 
asockë
* 
≥î
 = 
jdwp
->
sockë
.peer;

589 i‡(
jdwp
->
∑ss
 == 0) {

590 
≠ackë
* 
p
 = 
	`gë_≠ackë
();

591 
p
->
Àn
 = 
	`jdwp_¥o˚ss_li°
((*Ì->
d©a
, 
MAX_PAYLOAD
);

592 
≥î
->
	`íqueue
’ìr, 
p
);

593 
jdwp
->
∑ss
 = 1;

596 
≥î
->
	`˛o£
(peer);

598 
	}
}

600 
asockë
*

601 
	$¸óã_jdwp_£rvi˚_sockë
( )

603 
JdwpSockë
* 
s
 = 
	`ˇŒoc
((*s),1);

605 i‡(
s
 =
NULL
)

606  
NULL
;

608 
	`ö°Æl_loˇl_sockë
(&
s
->
sockë
);

610 
s
->
sockë
.
ªady
 = 
jdwp_sockë_ªady
;

611 
s
->
sockë
.
íqueue
 = 
jdwp_sockë_íqueue
;

612 
s
->
sockë
.
˛o£
 = 
jdwp_sockë_˛o£
;

613 
s
->
∑ss
 = 0;

615  &
s
->
sockë
;

616 
	}
}

623 
JdwpTøckî
 
	tJdwpTøckî
;

625 
	sJdwpTøckî
 {

626 
asockë
 
	msockë
;

627 
JdwpTøckî
* 
	m√xt
;

628 
JdwpTøckî
* 
	m¥ev
;

629 
	m√ed_upd©e
;

632 
JdwpTøckî
 
	g_jdwp_åackîs_li°
;

636 
	$jdwp_¥o˚ss_li°_upd©ed
()

638 
buf„r
[1024];

639 
Àn
;

640 
JdwpTøckî
* 
t
 = 
_jdwp_åackîs_li°
.
√xt
;

642 
Àn
 = 
	`jdwp_¥o˚ss_li°_msg
(
buf„r
, (buffer));

644  ; 
t
 !&
_jdwp_åackîs_li°
;Å =Å->
√xt
 ) {

645 
≠ackë
* 
p
 = 
	`gë_≠ackë
();

646 
asockë
* 
≥î
 = 
t
->
sockë
.peer;

647 
	`mem˝y
(
p
->
d©a
, 
buf„r
, 
Àn
);

648 
p
->
Àn
 =Üen;

649 
≥î
->
	`íqueue
–≥î, 
p
 );

651 
	}
}

654 
	$jdwp_åackî_˛o£
–
asockë
* 
s
 )

656 
JdwpTøckî
* 
åackî
 = (JdwpTøckî*Ë
s
;

657 
asockë
* 
≥î
 = 
s
->peer;

659 i‡(
≥î
) {

660 
≥î
->≥î = 
NULL
;

661 
≥î
->
	`˛o£
(peer);

664 
	`ªmove_sockë
(
s
);

666 
åackî
->
¥ev
->
√xt
 =Åracker->next;

667 
åackî
->
√xt
->
¥ev
 =Åracker->prev;

669 
	`‰ì
(
s
);

670 
	}
}

673 
	$jdwp_åackî_ªady
–
asockë
* 
s
 )

675 
JdwpTøckî
* 
t
 = (JdwpTøckî*Ë
s
;

677 i‡(
t
->
√ed_upd©e
) {

678 
≠ackë
* 
p
 = 
	`gë_≠ackë
();

679 
t
->
√ed_upd©e
 = 0;

680 
p
->
Àn
 = 
	`jdwp_¥o˚ss_li°_msg
((*Ì->
d©a
, (p->data));

681 
s
->
≥î
->
	`íqueue
(s->≥î, 
p
);

683 
	}
}

686 
	$jdwp_åackî_íqueue
–
asockë
* 
s
, 
≠ackë
* 
p
 )

689 
	`put_≠ackë
(
p
);

690 
s
->
≥î
->
	`˛o£
(s->peer);

692 
	}
}

695 
asockë
*

696 
	$¸óã_jdwp_åackî_£rvi˚_sockë
( )

698 
JdwpTøckî
* 
t
 = 
	`ˇŒoc
((*t),1);

700 i‡(
t
 =
NULL
)

701  
NULL
;

703 
t
->
√xt
 = &
_jdwp_åackîs_li°
;

704 
t
->
¥ev
 =Å->
√xt
->prev;

706 
t
->
√xt
->
¥ev
 =Å;

707 
t
->
¥ev
->
√xt
 =Å;

709 
	`ö°Æl_loˇl_sockë
(&
t
->
sockë
);

711 
t
->
sockë
.
ªady
 = 
jdwp_åackî_ªady
;

712 
t
->
sockë
.
íqueue
 = 
jdwp_åackî_íqueue
;

713 
t
->
sockë
.
˛o£
 = 
jdwp_åackî_˛o£
;

714 
t
->
√ed_upd©e
 = 1;

716  &
t
->
sockë
;

717 
	}
}

721 
	$öô_jdwp
()

723 
_jdwp_li°
.
√xt
 = &_jdwp_list;

724 
_jdwp_li°
.
¥ev
 = &_jdwp_list;

726 
_jdwp_åackîs_li°
.
√xt
 = &_jdwp_trackers_list;

727 
_jdwp_åackîs_li°
.
¥ev
 = &_jdwp_trackers_list;

729  
	`jdwp_c⁄åﬁ_öô
–&
_jdwp_c⁄åﬁ
,

730 
JDWP_CONTROL_NAME
,

731 
JDWP_CONTROL_NAME_LEN
 );

732 
	}
}

	@libs/libcutils/abort_socket.c

17 
	~<°dlib.h
>

18 
	~<î∫o.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

21 
	~<sys/sockë.h
>

22 
	~<pﬁl.h
>

24 
	~"cutûs/ab‹t_sockë.h
"

26 
asockë
 *
	$asockë_öô
(
fd
) {

27 
ab‹t_fd
[2];

28 
Êags
;

29 
asockë
 *
s
;

32 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

33 i‡(
Êags
 == -1)

34  
NULL
;

35 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
))

36  
NULL
;

40 i‡(
	`pùe
(
ab‹t_fd
))

41  
NULL
;

42 
Êags
 = 
	`f˙é
(
ab‹t_fd
[1], 
F_GETFL
);

43 i‡(
Êags
 == -1)

44  
NULL
;

45 i‡(
	`f˙é
(
ab‹t_fd
[1], 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
))

46  
NULL
;

48 
s
 = 
	`mÆloc
((
asockë
));

49 i‡(!
s
)

50  
NULL
;

52 
s
->
fd
 = fd;

53 
s
->
ab‹t_fd
[0] =ábort_fd[0];

54 
s
->
ab‹t_fd
[1] =ábort_fd[1];

56  
s
;

57 
	}
}

59 
	$asockë_c⁄√˘
(
asockë
 *
s
, c⁄° 
sockaddr
 *
addr
,

60 
sockÀn_t
 
addæí
, 
timeout
) {

62 
ªt
;

65 
ªt
 = 
	`c⁄√˘
(
s
->
fd
, 
addr
, 
addæí
);

66 } 
ªt
 && 
î∫o
 =
EINTR
);

68 i‡(
ªt
 && 
î∫o
 =
EINPROGRESS
) {

70 
sockÀn_t
 
ªéí
;

71 
pﬁlfd
 
pfd
[2];

73 
pfd
[0].
fd
 = 
s
->fd;

74 
pfd
[0].
evíts
 = 
POLLOUT
;

75 
pfd
[0].
ªvíts
 = 0;

76 
pfd
[1].
fd
 = 
s
->
ab‹t_fd
[0];

77 
pfd
[1].
evíts
 = 
POLLIN
;

78 
pfd
[1].
ªvíts
 = 0;

81 
ªt
 = 
	`pﬁl
(
pfd
, 2, 
timeout
);

82 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

84 i‡(
ªt
 < 0)

86 i‡(
ªt
 == 0) {

88 
î∫o
 = 
ETIMEDOUT
;

92 i‡(
pfd
[1].
ªvíts
) {

94 
î∫o
 = 
ECANCELED
;

98 i‡(
pfd
[0].
ªvíts
) {

99 i‡(
pfd
[0].
ªvíts
 & 
POLLOUT
) {

101 
ªéí
 = (
ªt
);

102 i‡(
	`gësock›t
(
s
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, &
ªt
, &
ªéí
))

105 i‡(
ªt
) {

106 
î∫o
 = 
ªt
;

110 
î∫o
 = 
ECONNABORTED
;

116  
ªt
;

117 
	}
}

119 
	$asockë_ac˚±
(
asockë
 *
s
, 
sockaddr
 *
addr
,

120 
sockÀn_t
 *
addæí
, 
timeout
) {

122 
ªt
;

123 
pﬁlfd
 
pfd
[2];

125 
pfd
[0].
fd
 = 
s
->fd;

126 
pfd
[0].
evíts
 = 
POLLIN
;

127 
pfd
[0].
ªvíts
 = 0;

128 
pfd
[1].
fd
 = 
s
->
ab‹t_fd
[0];

129 
pfd
[1].
evíts
 = 
POLLIN
;

130 
pfd
[1].
ªvíts
 = 0;

133 
ªt
 = 
	`pﬁl
(
pfd
, 2, 
timeout
);

134 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

136 i‡(
ªt
 < 0)

138 i‡(
ªt
 == 0) {

140 
î∫o
 = 
ETIMEDOUT
;

144 i‡(
pfd
[1].
ªvíts
) {

146 
î∫o
 = 
ECANCELED
;

150 i‡(
pfd
[0].
ªvíts
) {

151 i‡(
pfd
[0].
ªvíts
 & 
POLLIN
) {

154 
ªt
 = 
	`ac˚±
(
s
->
fd
, 
addr
, 
addæí
);

155 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

158 
î∫o
 = 
ECONNABORTED
;

163  
ªt
;

164 
	}
}

166 
	$asockë_ªad
(
asockë
 *
s
, *
buf
, 
size_t
 
cou¡
, 
timeout
) {

167 
ªt
;

168 
pﬁlfd
 
pfd
[2];

170 
pfd
[0].
fd
 = 
s
->fd;

171 
pfd
[0].
evíts
 = 
POLLIN
;

172 
pfd
[0].
ªvíts
 = 0;

173 
pfd
[1].
fd
 = 
s
->
ab‹t_fd
[0];

174 
pfd
[1].
evíts
 = 
POLLIN
;

175 
pfd
[1].
ªvíts
 = 0;

178 
ªt
 = 
	`pﬁl
(
pfd
, 2, 
timeout
);

179 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

181 i‡(
ªt
 < 0)

183 i‡(
ªt
 == 0) {

185 
î∫o
 = 
ETIMEDOUT
;

189 i‡(
pfd
[1].
ªvíts
) {

191 
î∫o
 = 
ECANCELED
;

195 i‡(
pfd
[0].
ªvíts
) {

196 i‡(
pfd
[0].
ªvíts
 & 
POLLIN
) {

199 
ªt
 = 
	`ªad
(
s
->
fd
, 
buf
, 
cou¡
);

200 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

203 
î∫o
 = 
ECONNABORTED
;

208  
ªt
;

209 
	}
}

211 
	$asockë_wrôe
(
asockë
 *
s
, c⁄° *
buf
, 
size_t
 
cou¡
,

212 
timeout
) {

213 
ªt
;

214 
pﬁlfd
 
pfd
[2];

216 
pfd
[0].
fd
 = 
s
->fd;

217 
pfd
[0].
evíts
 = 
POLLOUT
;

218 
pfd
[0].
ªvíts
 = 0;

219 
pfd
[1].
fd
 = 
s
->
ab‹t_fd
[0];

220 
pfd
[1].
evíts
 = 
POLLIN
;

221 
pfd
[1].
ªvíts
 = 0;

224 
ªt
 = 
	`pﬁl
(
pfd
, 2, 
timeout
);

225 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

227 i‡(
ªt
 < 0)

229 i‡(
ªt
 == 0) {

231 
î∫o
 = 
ETIMEDOUT
;

235 i‡(
pfd
[1].
ªvíts
) {

237 
î∫o
 = 
ECANCELED
;

241 i‡(
pfd
[0].
ªvíts
) {

242 i‡(
pfd
[0].
ªvíts
 & 
POLLOUT
) {

245 
ªt
 = 
	`wrôe
(
s
->
fd
, 
buf
, 
cou¡
);

246 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

249 
î∫o
 = 
ECONNABORTED
;

254  
ªt
;

255 
	}
}

257 
	$asockë_ab‹t
(
asockë
 *
s
) {

258 
ªt
;

259 
buf
 = 0;

262 
	`shutdown
(
s
->
fd
, 
SHUT_RDWR
);

266 
ªt
 = 
	`wrôe
(
s
->
ab‹t_fd
[1], &
buf
, 1);

267 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

268 
	}
}

270 
	$asockë_de°roy
(
asockë
 *
s
) {

271 
asockë
 
s_c›y
 = *
s
;

276 
s
->
fd
 = -1;

277 
s
->
ab‹t_fd
[0] = -1;

278 
s
->
ab‹t_fd
[1] = -1;

285 
	`asockë_ab‹t
(&
s_c›y
);

288 
	`˛o£
(
s_c›y
.
ab‹t_fd
[1]);

289 
	`˛o£
(
s_c›y
.
ab‹t_fd
[0]);

290 
	`˛o£
(
s_c›y
.
fd
);

292 
	`‰ì
(
s
);

293 
	}
}

	@libs/libcutils/android_reboot.c

17 
	~<uni°d.h
>

18 
	~<sys/ªboŸ.h
>

19 
	~<sys/ty≥s.h
>

20 
	~<sys/°©.h
>

21 
	~<f˙é.h
>

22 
	~<°dio.h
>

23 
	~<°rög.h
>

25 
	~<cutûs/™droid_ªboŸ.h
>

31 
	$ªmou¡_ro_d⁄e
()

33 
FILE
 *
f
;

34 
mou¡_dev
[256];

35 
mou¡_dú
[256];

36 
mou¡_ty≥
[256];

37 
mou¡_›ts
[256];

38 
mou¡_‰eq
;

39 
mou¡_∑s¢o
;

40 
m©ch
;

41 
found_rw_fs
 = 0;

43 
f
 = 
	`f›í
("/proc/mounts", "r");

44 i‡(! 
f
) {

50 
m©ch
 = 
	`fsˇnf
(
f
, "%255s %255s %255s %255s %d %d\n",

51 
mou¡_dev
, 
mou¡_dú
, 
mou¡_ty≥
,

52 
mou¡_›ts
, &
mou¡_‰eq
, &
mou¡_∑s¢o
);

53 
mou¡_dev
[255] = 0;

54 
mou¡_dú
[255] = 0;

55 
mou¡_ty≥
[255] = 0;

56 
mou¡_›ts
[255] = 0;

57 i‡((
m©ch
 =6Ë&& !
	`°∫cmp
(
mou¡_dev
, "/dev/block", 10Ë&& 
	`°r°r
(
mou¡_›ts
, "rw")) {

58 
found_rw_fs
 = 1;

61 } 
m©ch
 !
EOF
);

63 
	`f˛o£
(
f
);

65  !
found_rw_fs
;

66 
	}
}

79 
	$ªmou¡_ro
()

81 
fd
, 
˙t
 = 0;

86 
fd
 = 
	`›í
("/¥oc/sy§q-åiggî", 
O_WRONLY
);

87 i‡(
fd
 < 0) {

90 
	`wrôe
(
fd
, "u", 1);

91 
	`˛o£
(
fd
);

95 !
	`ªmou¡_ro_d⁄e
(Ë&& (
˙t
 < 50)) {

96 
	`u¶ìp
(100000);

97 
˙t
++;

101 
	}
}

103 
wrôe_misc
(*
ªas⁄
);

105 
	$™droid_ªboŸ
(
cmd
, 
Êags
, *
¨g
)

107 
ªt
;

109 i‡(!(
Êags
 & 
ANDROID_RB_FLAG_NO_SYNC
))

110 
	`sync
();

112 i‡(!(
Êags
 & 
ANDROID_RB_FLAG_NO_REMOUNT_RO
))

113 
	`ªmou¡_ro
();

115 
cmd
) {

116 
ANDROID_RB_RESTART
:

117 
ªt
 = 
	`ªboŸ
(
RB_AUTOBOOT
);

120 
ANDROID_RB_POWEROFF
:

121 
ªt
 = 
	`ªboŸ
(
RB_POWER_OFF
);

124 
ANDROID_RB_RESTART2
:

127 
	`wrôe_misc
(
¨g
);

128 
ªt
 = 
	`ªboŸ
(
RB_AUTOBOOT
);

132 
ªt
 = -1;

135  
ªt
;

136 
	}
}

	@libs/libcutils/arch-arm/memset32.S

21 .
	gãxt


22 .
	gÆign


24 .
globÆ
 
	g™droid_mem£t32


25 .
ty≥
 
	g™droid_mem£t32
, %
	gfun˘i⁄


26 .
globÆ
 
	g™droid_mem£t16


27 .
ty≥
 
	g™droid_mem£t16
, %
fun˘i⁄


37 
	g™droid_mem£t16
:

38 .
‚°¨t


39 
cmp
 
r2
, #1

40 
bxÀ
 
Ã


43 
mov
 
	gr1
,Ñ1, 
	gl¶
 #16

44 
‹r
 
	gr1
,Ñ1,Ñ1, 
	gl§
 #16

47 
t°
 
	gr0
, #2

48 
°∫eh
 
	gr1
, [
r0
], #2

49 
sub√
 
	gr2
,Ñ2, #2

50 .
‚íd


52 
	g™droid_mem£t32
:

53 .
‚°¨t


54 .
ßve
 {
Ã
}

55 
°r
 
Ã
, [
•
, #-4]!

58 
mov
 
	gr12
, 
r1


59 
mov
 
	gÃ
, 
r1


60 
rsb
 
	gr3
, 
	gr0
, #0

61 
™ds
 
	gr3
,Ñ3, #0
x1C


62 
	gbeq
 .
LÆig√d32


63 
cmp
 
	gr3
, 
r2


64 
™dhi
 
	gr3
, 
	gr2
, #0
x1C


65 
sub
 
	gr2
,Ñ2, 
r3


68 
movs
 
	gr3
,Ñ3, 
	gl¶
 #28

69 
°mcsü
 
	gr0
!, {
	gr1
, 
	gÃ
}

70 
°mcsü
 
	gr0
!, {
	gr1
, 
	gÃ
}

71 
°mmiü
 
	gr0
!, {
	gr1
, 
	gÃ
}

72 
movs
 
	gr3
,Ñ3, 
	gl¶
 #2

73 
°rcs
 
	gr1
, [
r0
], #4

75 .
	gLÆig√d32
:

76 
mov
 
r3
, 
	gr1


77 1: 
subs
 
r2
, 
	gr2
, #32

78 
°mhsü
 
	gr0
!, {
	gr1
,
	gr3
,
	gr12
,
	gÃ
}

79 
°mhsü
 
	gr0
!, {
	gr1
,
	gr3
,
	gr12
,
	gÃ
}

80 
	gbhs
 1b

81 
add
 
	gr2
,Ñ2, #32

84 
movs
 
	gr2
,Ñ2, 
	gl¶
 #28

85 
°mcsü
 
	gr0
!, {
	gr1
,
	gr3
,
	gr12
,
	gÃ
}

86 
°mmiü
 
	gr0
!, {
	gr1
,
	gÃ
}

87 
movs
 
	gr2
,Ñ2, 
	gl¶
 #2

88 
°rcs
 
	gr1
, [
r0
], #4

89 
°rmih
 
	gÃ
, [
r0
], #2

91 
ldr
 
	gÃ
, [
•
], #4

92 
bx
 
	gÃ


93 .
	g‚íd


	@libs/libcutils/arch-x86/android_memset16.S

20 #i‡
deföed
(
USE_SSE2
)

22 
	~"ˇche_wøµî.S
"

23 #unde‡
__i686


24 
	#USE_AS_ANDROID


	)

25 
	#s£2_mem£t16_©om
 
™droid_mem£t16


	)

26 
	~"s£2-mem£t16-©om.S
"

30 
	~"mem£t16.S
"

	@libs/libcutils/arch-x86/android_memset32.S

20 #i‡
deföed
(
USE_SSE2
)

22 
	~"ˇche_wøµî.S
"

23 #unde‡
__i686


24 
	#USE_AS_ANDROID


	)

25 
	#s£2_mem£t32_©om
 
™droid_mem£t32


	)

26 
	~"s£2-mem£t32-©om.S
"

30 
	~"mem£t32.S
"

	@libs/libcutils/arch-x86/cache_wrapper.S

21 
	#SHARED_CACHE_SIZE
 (512*1024Ë

	)

22 
	#DATA_CACHE_SIZE
 (24*1024Ë

	)

23 
	#SHARED_CACHE_SIZE_HALF
 (
SHARED_CACHE_SIZE
 / 2)

	)

24 
	#DATA_CACHE_SIZE_HALF
 (
DATA_CACHE_SIZE
 / 2)

	)

	@libs/libcutils/arch-x86/sse2-memset16-atom.S

20 #i‚de‡
L


21 
	#L
(
œbñ
Ë.
L
##
	)
label

24 #i‚de‡
ALIGN


25 
	#ALIGN
(
n
Ë.
p2Æign
 
	)
n

28 #i‚de‡
cfi_°¨çroc


29 
	#cfi_°¨çroc
 .
cfi_°¨çroc


	)

32 #i‚de‡
cfi_íd¥oc


33 
	#cfi_íd¥oc
 .
cfi_íd¥oc


	)

36 #i‚de‡
cfi_ªl_off£t


37 
	#cfi_ªl_off£t
(
ªg
, 
off
Ë.
cfi_ªl_off£t
Ñeg, 
	)
off

40 #i‚de‡
cfi_ª°‹e


41 
	#cfi_ª°‹e
(
ªg
Ë.
cfi_ª°‹e
 
	)
reg

44 #i‚de‡
cfi_adju°_cÁ_off£t


45 
	#cfi_adju°_cÁ_off£t
(
off
Ë.
cfi_adju°_cÁ_off£t
 
	)
off

48 #i‚de‡
ENTRY


49 
	#ENTRY
(
«me
) \

50 .
ty≥
 
«me
, @
fun˘i⁄
; \

51 .
globl
 
«me
; \

52 .
p2Æign
 4; \

53 
«me
: \

54 
cfi_°¨çroc


	)

57 #i‚de‡
END


58 
	#END
(
«me
) \

59 
cfi_íd¥oc
; \

60 .
size
 
«me
, .-
	)
name

63 
	#CFI_PUSH
(
REG
) \

64 
	`cfi_adju°_cÁ_off£t
 (4); \

65 
	`cfi_ªl_off£t
 (
REG
, 0)

	)

67 
	#CFI_POP
(
REG
) \

68 
	`cfi_adju°_cÁ_off£t
 (-4); \

69 
	`cfi_ª°‹e
 (
REG
)

	)

71 
	#PUSH
(
REG
Ë
pushl
 REG; 
	`CFI_PUSH
 (REG)

	)

72 
	#POP
(
REG
Ë
p›l
 REG; 
	`CFI_POP
 (REG)

	)

74 #ifde‡
USE_AS_BZERO16


75 
	#DEST
 
PARMS


	)

76 
	#LEN
 
DEST
+4

	)

78 
	#DEST
 
PARMS


	)

79 
	#CHR
 
DEST
+4

	)

80 
	#LEN
 
CHR
+4

	)

84 
	#SETRTNVAL


	)

86 
	#SETRTNVAL
 
movl
 
	`DEST
(%
e•
), %
óx


	)

89 #ifde‡
SHARED


90 
	#ENTRANCE
 
	`PUSH
 (%
ebx
);

	)

91 
	#RETURN_END
 
	`POP
 (%
ebx
); 
ªt


	)

92 
	#RETURN
 
RETURN_END
; 
	`CFI_PUSH
 (%
ebx
)

	)

93 
	#PARMS
 8

	)

94 
	#JMPTBL
(
I
, 
B
ËI - 
	)
B

98 
	#BRANCH_TO_JMPTBL_ENTRY
(
TABLE
) \

100 
ˇŒ
 
__i686
.
gë_pc_thunk
.
bx
; \

102 
add
 
	`$
(
TABLE
 - .), %
ebx
; \

105 
	`add
 (%
ebx
,%
ecx
,4), %ebx; \

107 
jmp
 *%
ebx


	)

109 .
	g£˘i⁄
 .
	ggnu
.
	glök⁄˚
.
	gt
.
	g__i686
.
	ggë_pc_thunk
.
	gbx
,"ax",@
	g¥ogbôs


110 .
globl
 
	g__i686
.
	ggë_pc_thunk
.
	gbx


111 .
hiddí
 
	g__i686
.
	ggë_pc_thunk
.
bx


112 
ALIGN
 (4)

113 .
ty≥
 
	g__i686
.
	ggë_pc_thunk
.
	gbx
,@
fun˘i⁄


114 
	g__i686
.
	ggë_pc_thunk
.
	gbx
:

115 
movl
 (%
e•
), %
ebx


116 
	gªt


118 
	#ENTRANCE


	)

119 
	#RETURN_END
 
ªt


	)

120 
	#RETURN
 
RETURN_END


	)

121 
	#PARMS
 4

	)

122 
	#JMPTBL
(
I
, 
B
Ë
	)
I

126 
	#BRANCH_TO_JMPTBL_ENTRY
(
TABLE
) \

127 
jmp
 *
	`TABLE
(,%
ecx
,4)

	)

130 .
	g£˘i⁄
 .
	gãxt
.
	gs£2
,"ax",@
¥ogbôs


131 
	$ALIGN
 (4)

132 
	$ENTRY
 (
s£2_mem£t16_©om
)

133 
ENTRANCE


135 
movl
 
	`LEN
(%
e•
), %
ecx


136 #ifde‡
USE_AS_ANDROID


137 
shr
 
$1
, %
ecx


139 #ifde‡
USE_AS_BZERO16


140 
x‹
 %
óx
, %eax

142 
movzwl
 
	`CHR
(%
e•
), %
óx


143 
mov
 %
óx
, %
edx


144 
shl
 
$16
, %
óx


145 
‹
 %
edx
, %
óx


147 
movl
 
	`DEST
(%
e•
), %
edx


148 
cmp
 
$32
, %
ecx


149 
j´
 
	$L
(32
w‹ds‹m‹e
)

151 
	$L
(
wrôe_Àss32w‹ds
):

152 
	`Àa
 (%
edx
, %
ecx
, 2), %edx

153 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	`L
(
èbÀ_Àss32w‹ds
))

156 .
push£˘i⁄
 .
rod©a
.
s£2
,"a",@
¥ogbôs


157 
	$ALIGN
 (2)

158 
	$L
(
èbÀ_Àss32w‹ds
):

159 .
	`JMPTBL
 (
	`L
(
wrôe_0w‹ds
), L(
èbÀ_Àss32w‹ds
))

160 .
	`JMPTBL
 (
	`L
(
wrôe_1w‹ds
), L(
èbÀ_Àss32w‹ds
))

161 .
	`JMPTBL
 (
	`L
(
wrôe_2w‹ds
), L(
èbÀ_Àss32w‹ds
))

162 .
	`JMPTBL
 (
	`L
(
wrôe_3w‹ds
), L(
èbÀ_Àss32w‹ds
))

163 .
	`JMPTBL
 (
	`L
(
wrôe_4w‹ds
), L(
èbÀ_Àss32w‹ds
))

164 .
	`JMPTBL
 (
	`L
(
wrôe_5w‹ds
), L(
èbÀ_Àss32w‹ds
))

165 .
	`JMPTBL
 (
	`L
(
wrôe_6w‹ds
), L(
èbÀ_Àss32w‹ds
))

166 .
	`JMPTBL
 (
	`L
(
wrôe_7w‹ds
), L(
èbÀ_Àss32w‹ds
))

167 .
	`JMPTBL
 (
	`L
(
wrôe_8w‹ds
), L(
èbÀ_Àss32w‹ds
))

168 .
	`JMPTBL
 (
	`L
(
wrôe_9w‹ds
), L(
èbÀ_Àss32w‹ds
))

169 .
	`JMPTBL
 (
	`L
(
wrôe_10w‹ds
), L(
èbÀ_Àss32w‹ds
))

170 .
	`JMPTBL
 (
	`L
(
wrôe_11w‹ds
), L(
èbÀ_Àss32w‹ds
))

171 .
	`JMPTBL
 (
	`L
(
wrôe_12w‹ds
), L(
èbÀ_Àss32w‹ds
))

172 .
	`JMPTBL
 (
	`L
(
wrôe_13w‹ds
), L(
èbÀ_Àss32w‹ds
))

173 .
	`JMPTBL
 (
	`L
(
wrôe_14w‹ds
), L(
èbÀ_Àss32w‹ds
))

174 .
	`JMPTBL
 (
	`L
(
wrôe_15w‹ds
), L(
èbÀ_Àss32w‹ds
))

175 .
	`JMPTBL
 (
	`L
(
wrôe_16w‹ds
), L(
èbÀ_Àss32w‹ds
))

176 .
	`JMPTBL
 (
	`L
(
wrôe_17w‹ds
), L(
èbÀ_Àss32w‹ds
))

177 .
	`JMPTBL
 (
	`L
(
wrôe_18w‹ds
), L(
èbÀ_Àss32w‹ds
))

178 .
	`JMPTBL
 (
	`L
(
wrôe_19w‹ds
), L(
èbÀ_Àss32w‹ds
))

179 .
	`JMPTBL
 (
	`L
(
wrôe_20w‹ds
), L(
èbÀ_Àss32w‹ds
))

180 .
	`JMPTBL
 (
	`L
(
wrôe_21w‹ds
), L(
èbÀ_Àss32w‹ds
))

181 .
	`JMPTBL
 (
	`L
(
wrôe_22w‹ds
), L(
èbÀ_Àss32w‹ds
))

182 .
	`JMPTBL
 (
	`L
(
wrôe_23w‹ds
), L(
èbÀ_Àss32w‹ds
))

183 .
	`JMPTBL
 (
	`L
(
wrôe_24w‹ds
), L(
èbÀ_Àss32w‹ds
))

184 .
	`JMPTBL
 (
	`L
(
wrôe_25w‹ds
), L(
èbÀ_Àss32w‹ds
))

185 .
	`JMPTBL
 (
	`L
(
wrôe_26w‹ds
), L(
èbÀ_Àss32w‹ds
))

186 .
	`JMPTBL
 (
	`L
(
wrôe_27w‹ds
), L(
èbÀ_Àss32w‹ds
))

187 .
	`JMPTBL
 (
	`L
(
wrôe_28w‹ds
), L(
èbÀ_Àss32w‹ds
))

188 .
	`JMPTBL
 (
	`L
(
wrôe_29w‹ds
), L(
èbÀ_Àss32w‹ds
))

189 .
	`JMPTBL
 (
	`L
(
wrôe_30w‹ds
), L(
èbÀ_Àss32w‹ds
))

190 .
	`JMPTBL
 (
	`L
(
wrôe_31w‹ds
), L(
èbÀ_Àss32w‹ds
))

191 .
p›£˘i⁄


193 
	$ALIGN
 (4)

194 
	$L
(
wrôe_28w‹ds
):

195 
movl
 %
óx
, -56(%
edx
)

196 
movl
 %
óx
, -52(%
edx
)

197 
	$L
(
wrôe_24w‹ds
):

198 
movl
 %
óx
, -48(%
edx
)

199 
movl
 %
óx
, -44(%
edx
)

200 
	$L
(
wrôe_20w‹ds
):

201 
movl
 %
óx
, -40(%
edx
)

202 
movl
 %
óx
, -36(%
edx
)

203 
	$L
(
wrôe_16w‹ds
):

204 
movl
 %
óx
, -32(%
edx
)

205 
movl
 %
óx
, -28(%
edx
)

206 
	$L
(
wrôe_12w‹ds
):

207 
movl
 %
óx
, -24(%
edx
)

208 
movl
 %
óx
, -20(%
edx
)

209 
	$L
(
wrôe_8w‹ds
):

210 
movl
 %
óx
, -16(%
edx
)

211 
movl
 %
óx
, -12(%
edx
)

212 
	$L
(
wrôe_4w‹ds
):

213 
movl
 %
óx
, -8(%
edx
)

214 
movl
 %
óx
, -4(%
edx
)

215 
	$L
(
wrôe_0w‹ds
):

216 
SETRTNVAL


217 
RETURN


219 
	$ALIGN
 (4)

220 
	$L
(
wrôe_29w‹ds
):

221 
movl
 %
óx
, -58(%
edx
)

222 
movl
 %
óx
, -54(%
edx
)

223 
	$L
(
wrôe_25w‹ds
):

224 
movl
 %
óx
, -50(%
edx
)

225 
movl
 %
óx
, -46(%
edx
)

226 
	$L
(
wrôe_21w‹ds
):

227 
movl
 %
óx
, -42(%
edx
)

228 
movl
 %
óx
, -38(%
edx
)

229 
	$L
(
wrôe_17w‹ds
):

230 
movl
 %
óx
, -34(%
edx
)

231 
movl
 %
óx
, -30(%
edx
)

232 
	$L
(
wrôe_13w‹ds
):

233 
movl
 %
óx
, -26(%
edx
)

234 
movl
 %
óx
, -22(%
edx
)

235 
	$L
(
wrôe_9w‹ds
):

236 
movl
 %
óx
, -18(%
edx
)

237 
movl
 %
óx
, -14(%
edx
)

238 
	$L
(
wrôe_5w‹ds
):

239 
movl
 %
óx
, -10(%
edx
)

240 
movl
 %
óx
, -6(%
edx
)

241 
	$L
(
wrôe_1w‹ds
):

242 
mov
 %
ax
, -2(%
edx
)

243 
SETRTNVAL


244 
RETURN


246 
	$ALIGN
 (4)

247 
	$L
(
wrôe_30w‹ds
):

248 
movl
 %
óx
, -60(%
edx
)

249 
movl
 %
óx
, -56(%
edx
)

250 
	$L
(
wrôe_26w‹ds
):

251 
movl
 %
óx
, -52(%
edx
)

252 
movl
 %
óx
, -48(%
edx
)

253 
	$L
(
wrôe_22w‹ds
):

254 
movl
 %
óx
, -44(%
edx
)

255 
movl
 %
óx
, -40(%
edx
)

256 
	$L
(
wrôe_18w‹ds
):

257 
movl
 %
óx
, -36(%
edx
)

258 
movl
 %
óx
, -32(%
edx
)

259 
	$L
(
wrôe_14w‹ds
):

260 
movl
 %
óx
, -28(%
edx
)

261 
movl
 %
óx
, -24(%
edx
)

262 
	$L
(
wrôe_10w‹ds
):

263 
movl
 %
óx
, -20(%
edx
)

264 
movl
 %
óx
, -16(%
edx
)

265 
	$L
(
wrôe_6w‹ds
):

266 
movl
 %
óx
, -12(%
edx
)

267 
movl
 %
óx
, -8(%
edx
)

268 
	$L
(
wrôe_2w‹ds
):

269 
movl
 %
óx
, -4(%
edx
)

270 
SETRTNVAL


271 
RETURN


273 
	$ALIGN
 (4)

274 
	$L
(
wrôe_31w‹ds
):

275 
movl
 %
óx
, -62(%
edx
)

276 
movl
 %
óx
, -58(%
edx
)

277 
	$L
(
wrôe_27w‹ds
):

278 
movl
 %
óx
, -54(%
edx
)

279 
movl
 %
óx
, -50(%
edx
)

280 
	$L
(
wrôe_23w‹ds
):

281 
movl
 %
óx
, -46(%
edx
)

282 
movl
 %
óx
, -42(%
edx
)

283 
	$L
(
wrôe_19w‹ds
):

284 
movl
 %
óx
, -38(%
edx
)

285 
movl
 %
óx
, -34(%
edx
)

286 
	$L
(
wrôe_15w‹ds
):

287 
movl
 %
óx
, -30(%
edx
)

288 
movl
 %
óx
, -26(%
edx
)

289 
	$L
(
wrôe_11w‹ds
):

290 
movl
 %
óx
, -22(%
edx
)

291 
movl
 %
óx
, -18(%
edx
)

292 
	$L
(
wrôe_7w‹ds
):

293 
movl
 %
óx
, -14(%
edx
)

294 
movl
 %
óx
, -10(%
edx
)

295 
	$L
(
wrôe_3w‹ds
):

296 
movl
 %
óx
, -6(%
edx
)

297 
movw
 %
ax
, -2(%
edx
)

298 
SETRTNVAL


299 
RETURN


301 
	$ALIGN
 (4)

303 
	$L
(32
w‹ds‹m‹e
):

304 
shl
 
$1
, %
ecx


305 
ã°
 
$0x01
, %
edx


306 
jz
 
	$L
(
Æig√d2byãs
)

307 
mov
 %
óx
, (%
edx
)

308 
mov
 %
óx
, -4(%
edx
, %
ecx
)

309 
sub
 
$2
, %
ecx


310 
add
 
$1
, %
edx


311 
rﬁ
 
$8
, %
óx


312 
	$L
(
Æig√d2byãs
):

313 #ifde‡
USE_AS_BZERO16


314 
px‹
 %
xmm0
, %xmm0

316 
movd
 %
óx
, %
xmm0


317 
pshufd
 
$0
, %
xmm0
, %xmm0

319 
ã°l
 
$0xf
, %
edx


320 
jz
 
	$L
(
Æig√d_16
)

322 
	$L
(
nŸ_Æig√d_16
):

323 
movdqu
 %
xmm0
, (%
edx
)

324 
movl
 %
edx
, %
óx


325 
™d
 
$
-16, %
edx


326 
add
 
$16
, %
edx


327 
sub
 %
edx
, %
óx


328 
add
 %
óx
, %
ecx


329 
movd
 %
xmm0
, %
óx


331 
	$ALIGN
 (4)

332 
	$L
(
Æig√d_16
):

333 
cmp
 
$128
, %
ecx


334 
j´
 
	$L
(128b
yãs‹m‹e
)

336 
	$L
(
Æig√d_16_Àss128byãs
):

337 
add
 %
ecx
, %
edx


338 
shr
 
$1
, %
ecx


339 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	$L
(
èbÀ_16_128byãs
))

341 
	$ALIGN
 (4)

342 
	$L
(128b
yãs‹m‹e
):

343 #ifde‡
SHARED_CACHE_SIZE


344 
	`PUSH
 (%
ebx
)

345 
mov
 
$SHARED_CACHE_SIZE
, %
ebx


347 #ifde‡
SHARED


348 
ˇŒ
 
__i686
.
gë_pc_thunk
.
bx


349 
add
 
$_GLOBAL_OFFSET_TABLE_
, %
ebx


350 
mov
 
__x86_sh¨ed_ˇche_size
@
	`GOTOFF
(%
ebx
), %ebx

352 
	`PUSH
 (%
ebx
)

353 
mov
 
__x86_sh¨ed_ˇche_size
, %
ebx


356 
cmp
 %
ebx
, %
ecx


357 
j´
 
	$L
(128b
yãs‹m‹e_¡_°¨t
)

360 #ifde‡
DATA_CACHE_SIZE


361 
	`POP
 (%
ebx
)

362 
	#RESTORE_EBX_STATE
 
	`CFI_PUSH
 (%
ebx
)

	)

363 
cmp
 
$DATA_CACHE_SIZE
, %
ecx


365 #ifde‡
SHARED


366 
	#RESTORE_EBX_STATE


	)

367 
ˇŒ
 
__i686
.
gë_pc_thunk
.
bx


368 
add
 
$_GLOBAL_OFFSET_TABLE_
, %
ebx


369 
cmp
 
__x86_d©a_ˇche_size
@
	`GOTOFF
(%
ebx
), %
ecx


371 
	`POP
 (%
ebx
)

372 
	#RESTORE_EBX_STATE
 
	`CFI_PUSH
 (%
ebx
)

	)

373 
cmp
 
__x86_d©a_ˇche_size
, %
ecx


377 
j´
 
	$L
(128b
yãs_L2_n‹mÆ
)

378 
subl
 
$128
, %
ecx


379 
	$L
(128b
yãs‹m‹e_n‹mÆ
):

380 
sub
 
$128
, %
ecx


381 
movdqa
 %
xmm0
, (%
edx
)

382 
movdqa
 %
xmm0
, 0x10(%
edx
)

383 
movdqa
 %
xmm0
, 0x20(%
edx
)

384 
movdqa
 %
xmm0
, 0x30(%
edx
)

385 
movdqa
 %
xmm0
, 0x40(%
edx
)

386 
movdqa
 %
xmm0
, 0x50(%
edx
)

387 
movdqa
 %
xmm0
, 0x60(%
edx
)

388 
movdqa
 %
xmm0
, 0x70(%
edx
)

389 
Àa
 128(%
edx
), %edx

390 
jb
 
	$L
(128b
yã¶ess_n‹mÆ
)

393 
sub
 
$128
, %
ecx


394 
movdqa
 %
xmm0
, (%
edx
)

395 
movdqa
 %
xmm0
, 0x10(%
edx
)

396 
movdqa
 %
xmm0
, 0x20(%
edx
)

397 
movdqa
 %
xmm0
, 0x30(%
edx
)

398 
movdqa
 %
xmm0
, 0x40(%
edx
)

399 
movdqa
 %
xmm0
, 0x50(%
edx
)

400 
movdqa
 %
xmm0
, 0x60(%
edx
)

401 
movdqa
 %
xmm0
, 0x70(%
edx
)

402 
Àa
 128(%
edx
), %edx

403 
j´
 
	$L
(128b
yãs‹m‹e_n‹mÆ
)

405 
	$L
(128b
yã¶ess_n‹mÆ
):

406 
Àa
 128(%
ecx
), %ecx

407 
add
 %
ecx
, %
edx


408 
shr
 
$1
, %
ecx


409 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	$L
(
èbÀ_16_128byãs
))

411 
	$ALIGN
 (4)

412 
	$L
(128b
yãs_L2_n‹mÆ
):

413 
¥e„tcht0
 0x380(%
edx
)

414 
¥e„tcht0
 0x3c0(%
edx
)

415 
sub
 
$128
, %
ecx


416 
movdqa
 %
xmm0
, (%
edx
)

417 
mov≠s
 %
xmm0
, 0x10(%
edx
)

418 
mov≠s
 %
xmm0
, 0x20(%
edx
)

419 
mov≠s
 %
xmm0
, 0x30(%
edx
)

420 
mov≠s
 %
xmm0
, 0x40(%
edx
)

421 
mov≠s
 %
xmm0
, 0x50(%
edx
)

422 
mov≠s
 %
xmm0
, 0x60(%
edx
)

423 
mov≠s
 %
xmm0
, 0x70(%
edx
)

424 
add
 
$128
, %
edx


425 
cmp
 
$128
, %
ecx


426 
j´
 
	$L
(128b
yãs_L2_n‹mÆ
)

428 
	$L
(128b
yã¶ess_L2_n‹mÆ
):

429 
add
 %
ecx
, %
edx


430 
shr
 
$1
, %
ecx


431 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	$L
(
èbÀ_16_128byãs
))

433 
RESTORE_EBX_STATE


434 
	$L
(128b
yãs‹m‹e_¡_°¨t
):

435 
sub
 %
ebx
, %
ecx


436 
mov
 %
ebx
, %
óx


437 
™d
 
$0x7f
, %
óx


438 
add
 %
óx
, %
ecx


439 
movd
 %
xmm0
, %
óx


440 
	$ALIGN
 (4)

441 
	$L
(128b
yãs‹m‹e_sh¨ed_ˇche_lo›
):

442 
¥e„tcht0
 0x3c0(%
edx
)

443 
¥e„tcht0
 0x380(%
edx
)

444 
sub
 
$0x80
, %
ebx


445 
movdqa
 %
xmm0
, (%
edx
)

446 
movdqa
 %
xmm0
, 0x10(%
edx
)

447 
movdqa
 %
xmm0
, 0x20(%
edx
)

448 
movdqa
 %
xmm0
, 0x30(%
edx
)

449 
movdqa
 %
xmm0
, 0x40(%
edx
)

450 
movdqa
 %
xmm0
, 0x50(%
edx
)

451 
movdqa
 %
xmm0
, 0x60(%
edx
)

452 
movdqa
 %
xmm0
, 0x70(%
edx
)

453 
add
 
$0x80
, %
edx


454 
cmp
 
$0x80
, %
ebx


455 
j´
 
	$L
(128b
yãs‹m‹e_sh¨ed_ˇche_lo›
)

456 
cmp
 
$0x80
, %
ecx


457 
jb
 
	$L
(
sh¨ed_ˇche_lo›_íd
)

458 
	$ALIGN
 (4)

459 
	$L
(128b
yãs‹m‹e_¡
):

460 
sub
 
$0x80
, %
ecx


461 
mov¡dq
 %
xmm0
, (%
edx
)

462 
mov¡dq
 %
xmm0
, 0x10(%
edx
)

463 
mov¡dq
 %
xmm0
, 0x20(%
edx
)

464 
mov¡dq
 %
xmm0
, 0x30(%
edx
)

465 
mov¡dq
 %
xmm0
, 0x40(%
edx
)

466 
mov¡dq
 %
xmm0
, 0x50(%
edx
)

467 
mov¡dq
 %
xmm0
, 0x60(%
edx
)

468 
mov¡dq
 %
xmm0
, 0x70(%
edx
)

469 
add
 
$0x80
, %
edx


470 
cmp
 
$0x80
, %
ecx


471 
j´
 
	$L
(128b
yãs‹m‹e_¡
)

472 
s„n˚


473 
	$L
(
sh¨ed_ˇche_lo›_íd
):

474 #i‡
deföed
 
DATA_CACHE_SIZE
 || !deföed 
SHARED


475 
	`POP
 (%
ebx
)

477 
add
 %
ecx
, %
edx


478 
shr
 
$1
, %
ecx


479 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	`L
(
èbÀ_16_128byãs
))

482 .
push£˘i⁄
 .
rod©a
.
s£2
,"a",@
¥ogbôs


483 
	$ALIGN
 (2)

484 
	$L
(
èbÀ_16_128byãs
):

485 .
	`JMPTBL
 (
	`L
(
Æig√d_16_0byãs
), L(
èbÀ_16_128byãs
))

486 .
	`JMPTBL
 (
	`L
(
Æig√d_16_2byãs
), L(
èbÀ_16_128byãs
))

487 .
	`JMPTBL
 (
	`L
(
Æig√d_16_4byãs
), L(
èbÀ_16_128byãs
))

488 .
	`JMPTBL
 (
	`L
(
Æig√d_16_6byãs
), L(
èbÀ_16_128byãs
))

489 .
	`JMPTBL
 (
	`L
(
Æig√d_16_8byãs
), L(
èbÀ_16_128byãs
))

490 .
	`JMPTBL
 (
	`L
(
Æig√d_16_10byãs
), L(
èbÀ_16_128byãs
))

491 .
	`JMPTBL
 (
	`L
(
Æig√d_16_12byãs
), L(
èbÀ_16_128byãs
))

492 .
	`JMPTBL
 (
	`L
(
Æig√d_16_14byãs
), L(
èbÀ_16_128byãs
))

493 .
	`JMPTBL
 (
	`L
(
Æig√d_16_16byãs
), L(
èbÀ_16_128byãs
))

494 .
	`JMPTBL
 (
	`L
(
Æig√d_16_18byãs
), L(
èbÀ_16_128byãs
))

495 .
	`JMPTBL
 (
	`L
(
Æig√d_16_20byãs
), L(
èbÀ_16_128byãs
))

496 .
	`JMPTBL
 (
	`L
(
Æig√d_16_22byãs
), L(
èbÀ_16_128byãs
))

497 .
	`JMPTBL
 (
	`L
(
Æig√d_16_24byãs
), L(
èbÀ_16_128byãs
))

498 .
	`JMPTBL
 (
	`L
(
Æig√d_16_26byãs
), L(
èbÀ_16_128byãs
))

499 .
	`JMPTBL
 (
	`L
(
Æig√d_16_28byãs
), L(
èbÀ_16_128byãs
))

500 .
	`JMPTBL
 (
	`L
(
Æig√d_16_30byãs
), L(
èbÀ_16_128byãs
))

501 .
	`JMPTBL
 (
	`L
(
Æig√d_16_32byãs
), L(
èbÀ_16_128byãs
))

502 .
	`JMPTBL
 (
	`L
(
Æig√d_16_34byãs
), L(
èbÀ_16_128byãs
))

503 .
	`JMPTBL
 (
	`L
(
Æig√d_16_36byãs
), L(
èbÀ_16_128byãs
))

504 .
	`JMPTBL
 (
	`L
(
Æig√d_16_38byãs
), L(
èbÀ_16_128byãs
))

505 .
	`JMPTBL
 (
	`L
(
Æig√d_16_40byãs
), L(
èbÀ_16_128byãs
))

506 .
	`JMPTBL
 (
	`L
(
Æig√d_16_42byãs
), L(
èbÀ_16_128byãs
))

507 .
	`JMPTBL
 (
	`L
(
Æig√d_16_44byãs
), L(
èbÀ_16_128byãs
))

508 .
	`JMPTBL
 (
	`L
(
Æig√d_16_46byãs
), L(
èbÀ_16_128byãs
))

509 .
	`JMPTBL
 (
	`L
(
Æig√d_16_48byãs
), L(
èbÀ_16_128byãs
))

510 .
	`JMPTBL
 (
	`L
(
Æig√d_16_50byãs
), L(
èbÀ_16_128byãs
))

511 .
	`JMPTBL
 (
	`L
(
Æig√d_16_52byãs
), L(
èbÀ_16_128byãs
))

512 .
	`JMPTBL
 (
	`L
(
Æig√d_16_54byãs
), L(
èbÀ_16_128byãs
))

513 .
	`JMPTBL
 (
	`L
(
Æig√d_16_56byãs
), L(
èbÀ_16_128byãs
))

514 .
	`JMPTBL
 (
	`L
(
Æig√d_16_58byãs
), L(
èbÀ_16_128byãs
))

515 .
	`JMPTBL
 (
	`L
(
Æig√d_16_60byãs
), L(
èbÀ_16_128byãs
))

516 .
	`JMPTBL
 (
	`L
(
Æig√d_16_62byãs
), L(
èbÀ_16_128byãs
))

517 .
	`JMPTBL
 (
	`L
(
Æig√d_16_64byãs
), L(
èbÀ_16_128byãs
))

518 .
	`JMPTBL
 (
	`L
(
Æig√d_16_66byãs
), L(
èbÀ_16_128byãs
))

519 .
	`JMPTBL
 (
	`L
(
Æig√d_16_68byãs
), L(
èbÀ_16_128byãs
))

520 .
	`JMPTBL
 (
	`L
(
Æig√d_16_70byãs
), L(
èbÀ_16_128byãs
))

521 .
	`JMPTBL
 (
	`L
(
Æig√d_16_72byãs
), L(
èbÀ_16_128byãs
))

522 .
	`JMPTBL
 (
	`L
(
Æig√d_16_74byãs
), L(
èbÀ_16_128byãs
))

523 .
	`JMPTBL
 (
	`L
(
Æig√d_16_76byãs
), L(
èbÀ_16_128byãs
))

524 .
	`JMPTBL
 (
	`L
(
Æig√d_16_78byãs
), L(
èbÀ_16_128byãs
))

525 .
	`JMPTBL
 (
	`L
(
Æig√d_16_80byãs
), L(
èbÀ_16_128byãs
))

526 .
	`JMPTBL
 (
	`L
(
Æig√d_16_82byãs
), L(
èbÀ_16_128byãs
))

527 .
	`JMPTBL
 (
	`L
(
Æig√d_16_84byãs
), L(
èbÀ_16_128byãs
))

528 .
	`JMPTBL
 (
	`L
(
Æig√d_16_86byãs
), L(
èbÀ_16_128byãs
))

529 .
	`JMPTBL
 (
	`L
(
Æig√d_16_88byãs
), L(
èbÀ_16_128byãs
))

530 .
	`JMPTBL
 (
	`L
(
Æig√d_16_90byãs
), L(
èbÀ_16_128byãs
))

531 .
	`JMPTBL
 (
	`L
(
Æig√d_16_92byãs
), L(
èbÀ_16_128byãs
))

532 .
	`JMPTBL
 (
	`L
(
Æig√d_16_94byãs
), L(
èbÀ_16_128byãs
))

533 .
	`JMPTBL
 (
	`L
(
Æig√d_16_96byãs
), L(
èbÀ_16_128byãs
))

534 .
	`JMPTBL
 (
	`L
(
Æig√d_16_98byãs
), L(
èbÀ_16_128byãs
))

535 .
	`JMPTBL
 (
	`L
(
Æig√d_16_100byãs
), L(
èbÀ_16_128byãs
))

536 .
	`JMPTBL
 (
	`L
(
Æig√d_16_102byãs
), L(
èbÀ_16_128byãs
))

537 .
	`JMPTBL
 (
	`L
(
Æig√d_16_104byãs
), L(
èbÀ_16_128byãs
))

538 .
	`JMPTBL
 (
	`L
(
Æig√d_16_106byãs
), L(
èbÀ_16_128byãs
))

539 .
	`JMPTBL
 (
	`L
(
Æig√d_16_108byãs
), L(
èbÀ_16_128byãs
))

540 .
	`JMPTBL
 (
	`L
(
Æig√d_16_110byãs
), L(
èbÀ_16_128byãs
))

541 .
	`JMPTBL
 (
	`L
(
Æig√d_16_112byãs
), L(
èbÀ_16_128byãs
))

542 .
	`JMPTBL
 (
	`L
(
Æig√d_16_114byãs
), L(
èbÀ_16_128byãs
))

543 .
	`JMPTBL
 (
	`L
(
Æig√d_16_116byãs
), L(
èbÀ_16_128byãs
))

544 .
	`JMPTBL
 (
	`L
(
Æig√d_16_118byãs
), L(
èbÀ_16_128byãs
))

545 .
	`JMPTBL
 (
	`L
(
Æig√d_16_120byãs
), L(
èbÀ_16_128byãs
))

546 .
	`JMPTBL
 (
	`L
(
Æig√d_16_122byãs
), L(
èbÀ_16_128byãs
))

547 .
	`JMPTBL
 (
	`L
(
Æig√d_16_124byãs
), L(
èbÀ_16_128byãs
))

548 .
	`JMPTBL
 (
	`L
(
Æig√d_16_126byãs
), L(
èbÀ_16_128byãs
))

549 .
p›£˘i⁄


552 
	$ALIGN
 (4)

553 
	$L
(
Æig√d_16_112byãs
):

554 
movdqa
 %
xmm0
, -112(%
edx
)

555 
	$L
(
Æig√d_16_96byãs
):

556 
movdqa
 %
xmm0
, -96(%
edx
)

557 
	$L
(
Æig√d_16_80byãs
):

558 
movdqa
 %
xmm0
, -80(%
edx
)

559 
	$L
(
Æig√d_16_64byãs
):

560 
movdqa
 %
xmm0
, -64(%
edx
)

561 
	$L
(
Æig√d_16_48byãs
):

562 
movdqa
 %
xmm0
, -48(%
edx
)

563 
	$L
(
Æig√d_16_32byãs
):

564 
movdqa
 %
xmm0
, -32(%
edx
)

565 
	$L
(
Æig√d_16_16byãs
):

566 
movdqa
 %
xmm0
, -16(%
edx
)

567 
	$L
(
Æig√d_16_0byãs
):

568 
SETRTNVAL


569 
RETURN


572 
	$ALIGN
 (4)

573 
	$L
(
Æig√d_16_114byãs
):

574 
movdqa
 %
xmm0
, -114(%
edx
)

575 
	$L
(
Æig√d_16_98byãs
):

576 
movdqa
 %
xmm0
, -98(%
edx
)

577 
	$L
(
Æig√d_16_82byãs
):

578 
movdqa
 %
xmm0
, -82(%
edx
)

579 
	$L
(
Æig√d_16_66byãs
):

580 
movdqa
 %
xmm0
, -66(%
edx
)

581 
	$L
(
Æig√d_16_50byãs
):

582 
movdqa
 %
xmm0
, -50(%
edx
)

583 
	$L
(
Æig√d_16_34byãs
):

584 
movdqa
 %
xmm0
, -34(%
edx
)

585 
	$L
(
Æig√d_16_18byãs
):

586 
movdqa
 %
xmm0
, -18(%
edx
)

587 
	$L
(
Æig√d_16_2byãs
):

588 
movw
 %
ax
, -2(%
edx
)

589 
SETRTNVAL


590 
RETURN


592 
	$ALIGN
 (4)

593 
	$L
(
Æig√d_16_116byãs
):

594 
movdqa
 %
xmm0
, -116(%
edx
)

595 
	$L
(
Æig√d_16_100byãs
):

596 
movdqa
 %
xmm0
, -100(%
edx
)

597 
	$L
(
Æig√d_16_84byãs
):

598 
movdqa
 %
xmm0
, -84(%
edx
)

599 
	$L
(
Æig√d_16_68byãs
):

600 
movdqa
 %
xmm0
, -68(%
edx
)

601 
	$L
(
Æig√d_16_52byãs
):

602 
movdqa
 %
xmm0
, -52(%
edx
)

603 
	$L
(
Æig√d_16_36byãs
):

604 
movdqa
 %
xmm0
, -36(%
edx
)

605 
	$L
(
Æig√d_16_20byãs
):

606 
movdqa
 %
xmm0
, -20(%
edx
)

607 
	$L
(
Æig√d_16_4byãs
):

608 
movl
 %
óx
, -4(%
edx
)

609 
SETRTNVAL


610 
RETURN


613 
	$ALIGN
 (4)

614 
	$L
(
Æig√d_16_118byãs
):

615 
movdqa
 %
xmm0
, -118(%
edx
)

616 
	$L
(
Æig√d_16_102byãs
):

617 
movdqa
 %
xmm0
, -102(%
edx
)

618 
	$L
(
Æig√d_16_86byãs
):

619 
movdqa
 %
xmm0
, -86(%
edx
)

620 
	$L
(
Æig√d_16_70byãs
):

621 
movdqa
 %
xmm0
, -70(%
edx
)

622 
	$L
(
Æig√d_16_54byãs
):

623 
movdqa
 %
xmm0
, -54(%
edx
)

624 
	$L
(
Æig√d_16_38byãs
):

625 
movdqa
 %
xmm0
, -38(%
edx
)

626 
	$L
(
Æig√d_16_22byãs
):

627 
movdqa
 %
xmm0
, -22(%
edx
)

628 
	$L
(
Æig√d_16_6byãs
):

629 
movl
 %
óx
, -6(%
edx
)

630 
movw
 %
ax
, -2(%
edx
)

631 
SETRTNVAL


632 
RETURN


635 
	$ALIGN
 (4)

636 
	$L
(
Æig√d_16_120byãs
):

637 
movdqa
 %
xmm0
, -120(%
edx
)

638 
	$L
(
Æig√d_16_104byãs
):

639 
movdqa
 %
xmm0
, -104(%
edx
)

640 
	$L
(
Æig√d_16_88byãs
):

641 
movdqa
 %
xmm0
, -88(%
edx
)

642 
	$L
(
Æig√d_16_72byãs
):

643 
movdqa
 %
xmm0
, -72(%
edx
)

644 
	$L
(
Æig√d_16_56byãs
):

645 
movdqa
 %
xmm0
, -56(%
edx
)

646 
	$L
(
Æig√d_16_40byãs
):

647 
movdqa
 %
xmm0
, -40(%
edx
)

648 
	$L
(
Æig√d_16_24byãs
):

649 
movdqa
 %
xmm0
, -24(%
edx
)

650 
	$L
(
Æig√d_16_8byãs
):

651 
movq
 %
xmm0
, -8(%
edx
)

652 
SETRTNVAL


653 
RETURN


656 
	$ALIGN
 (4)

657 
	$L
(
Æig√d_16_122byãs
):

658 
movdqa
 %
xmm0
, -122(%
edx
)

659 
	$L
(
Æig√d_16_106byãs
):

660 
movdqa
 %
xmm0
, -106(%
edx
)

661 
	$L
(
Æig√d_16_90byãs
):

662 
movdqa
 %
xmm0
, -90(%
edx
)

663 
	$L
(
Æig√d_16_74byãs
):

664 
movdqa
 %
xmm0
, -74(%
edx
)

665 
	$L
(
Æig√d_16_58byãs
):

666 
movdqa
 %
xmm0
, -58(%
edx
)

667 
	$L
(
Æig√d_16_42byãs
):

668 
movdqa
 %
xmm0
, -42(%
edx
)

669 
	$L
(
Æig√d_16_26byãs
):

670 
movdqa
 %
xmm0
, -26(%
edx
)

671 
	$L
(
Æig√d_16_10byãs
):

672 
movq
 %
xmm0
, -10(%
edx
)

673 
movw
 %
ax
, -2(%
edx
)

674 
SETRTNVAL


675 
RETURN


678 
	$ALIGN
 (4)

679 
	$L
(
Æig√d_16_124byãs
):

680 
movdqa
 %
xmm0
, -124(%
edx
)

681 
	$L
(
Æig√d_16_108byãs
):

682 
movdqa
 %
xmm0
, -108(%
edx
)

683 
	$L
(
Æig√d_16_92byãs
):

684 
movdqa
 %
xmm0
, -92(%
edx
)

685 
	$L
(
Æig√d_16_76byãs
):

686 
movdqa
 %
xmm0
, -76(%
edx
)

687 
	$L
(
Æig√d_16_60byãs
):

688 
movdqa
 %
xmm0
, -60(%
edx
)

689 
	$L
(
Æig√d_16_44byãs
):

690 
movdqa
 %
xmm0
, -44(%
edx
)

691 
	$L
(
Æig√d_16_28byãs
):

692 
movdqa
 %
xmm0
, -28(%
edx
)

693 
	$L
(
Æig√d_16_12byãs
):

694 
movq
 %
xmm0
, -12(%
edx
)

695 
movl
 %
óx
, -4(%
edx
)

696 
SETRTNVAL


697 
RETURN


700 
	$ALIGN
 (4)

701 
	$L
(
Æig√d_16_126byãs
):

702 
movdqa
 %
xmm0
, -126(%
edx
)

703 
	$L
(
Æig√d_16_110byãs
):

704 
movdqa
 %
xmm0
, -110(%
edx
)

705 
	$L
(
Æig√d_16_94byãs
):

706 
movdqa
 %
xmm0
, -94(%
edx
)

707 
	$L
(
Æig√d_16_78byãs
):

708 
movdqa
 %
xmm0
, -78(%
edx
)

709 
	$L
(
Æig√d_16_62byãs
):

710 
movdqa
 %
xmm0
, -62(%
edx
)

711 
	$L
(
Æig√d_16_46byãs
):

712 
movdqa
 %
xmm0
, -46(%
edx
)

713 
	$L
(
Æig√d_16_30byãs
):

714 
movdqa
 %
xmm0
, -30(%
edx
)

715 
	$L
(
Æig√d_16_14byãs
):

716 
movq
 %
xmm0
, -14(%
edx
)

717 
movl
 %
óx
, -6(%
edx
)

718 
movw
 %
ax
, -2(%
edx
)

719 
SETRTNVAL


720 
RETURN


722 
	`END
 (
s£2_mem£t16_©om
)

	@libs/libcutils/arch-x86/sse2-memset32-atom.S

20 #i‚de‡
L


21 
	#L
(
œbñ
Ë.
L
##
	)
label

24 #i‚de‡
ALIGN


25 
	#ALIGN
(
n
Ë.
p2Æign
 
	)
n

28 #i‚de‡
cfi_°¨çroc


29 
	#cfi_°¨çroc
 .
cfi_°¨çroc


	)

32 #i‚de‡
cfi_íd¥oc


33 
	#cfi_íd¥oc
 .
cfi_íd¥oc


	)

36 #i‚de‡
cfi_ªl_off£t


37 
	#cfi_ªl_off£t
(
ªg
, 
off
Ë.
cfi_ªl_off£t
Ñeg, 
	)
off

40 #i‚de‡
cfi_ª°‹e


41 
	#cfi_ª°‹e
(
ªg
Ë.
cfi_ª°‹e
 
	)
reg

44 #i‚de‡
cfi_adju°_cÁ_off£t


45 
	#cfi_adju°_cÁ_off£t
(
off
Ë.
cfi_adju°_cÁ_off£t
 
	)
off

48 #i‚de‡
ENTRY


49 
	#ENTRY
(
«me
) \

50 .
ty≥
 
«me
, @
fun˘i⁄
; \

51 .
globl
 
«me
; \

52 .
p2Æign
 4; \

53 
«me
: \

54 
cfi_°¨çroc


	)

57 #i‚de‡
END


58 
	#END
(
«me
) \

59 
cfi_íd¥oc
; \

60 .
size
 
«me
, .-
	)
name

63 
	#CFI_PUSH
(
REG
) \

64 
	`cfi_adju°_cÁ_off£t
 (4); \

65 
	`cfi_ªl_off£t
 (
REG
, 0)

	)

67 
	#CFI_POP
(
REG
) \

68 
	`cfi_adju°_cÁ_off£t
 (-4); \

69 
	`cfi_ª°‹e
 (
REG
)

	)

71 
	#PUSH
(
REG
Ë
pushl
 REG; 
	`CFI_PUSH
 (REG)

	)

72 
	#POP
(
REG
Ë
p›l
 REG; 
	`CFI_POP
 (REG)

	)

74 #ifde‡
USE_AS_BZERO32


75 
	#DEST
 
PARMS


	)

76 
	#LEN
 
DEST
+4

	)

78 
	#DEST
 
PARMS


	)

79 
	#DWDS
 
DEST
+4

	)

80 
	#LEN
 
DWDS
+4

	)

83 #ifde‡
USE_AS_WMEMSET32


84 
	#SETRTNVAL
 
movl
 
	`DEST
(%
e•
), %
óx


	)

86 
	#SETRTNVAL


	)

89 #ifde‡
SHARED


90 
	#ENTRANCE
 
	`PUSH
 (%
ebx
);

	)

91 
	#RETURN_END
 
	`POP
 (%
ebx
); 
ªt


	)

92 
	#RETURN
 
RETURN_END
; 
	`CFI_PUSH
 (%
ebx
)

	)

93 
	#PARMS
 8

	)

94 
	#JMPTBL
(
I
, 
B
ËI - 
	)
B

98 
	#BRANCH_TO_JMPTBL_ENTRY
(
TABLE
) \

100 
ˇŒ
 
__i686
.
gë_pc_thunk
.
bx
; \

102 
add
 
	`$
(
TABLE
 - .), %
ebx
; \

105 
	`add
 (%
ebx
,%
ecx
,4), %ebx; \

107 
jmp
 *%
ebx


	)

109 .
	g£˘i⁄
 .
	ggnu
.
	glök⁄˚
.
	gt
.
	g__i686
.
	ggë_pc_thunk
.
	gbx
,"ax",@
	g¥ogbôs


110 .
globl
 
	g__i686
.
	ggë_pc_thunk
.
	gbx


111 .
hiddí
 
	g__i686
.
	ggë_pc_thunk
.
bx


112 
ALIGN
 (4)

113 .
ty≥
 
	g__i686
.
	ggë_pc_thunk
.
	gbx
,@
fun˘i⁄


114 
	g__i686
.
	ggë_pc_thunk
.
	gbx
:

115 
movl
 (%
e•
), %
ebx


116 
	gªt


118 
	#ENTRANCE


	)

119 
	#RETURN_END
 
ªt


	)

120 
	#RETURN
 
RETURN_END


	)

121 
	#PARMS
 4

	)

122 
	#JMPTBL
(
I
, 
B
Ë
	)
I

126 
	#BRANCH_TO_JMPTBL_ENTRY
(
TABLE
) \

127 
jmp
 *
	`TABLE
(,%
ecx
,4)

	)

130 .
	g£˘i⁄
 .
	gãxt
.
	gs£2
,"ax",@
¥ogbôs


131 
	$ALIGN
 (4)

132 
	$ENTRY
 (
s£2_mem£t32_©om
)

133 
ENTRANCE


135 
movl
 
	`LEN
(%
e•
), %
ecx


136 #ifde‡
USE_AS_ANDROID


137 
shr
 
$2
, %
ecx


139 #ifde‡
USE_AS_BZERO32


140 
x‹
 %
óx
, %eax

142 
mov
 
	`DWDS
(%
e•
), %
óx


143 
mov
 %
óx
, %
edx


145 
movl
 
	`DEST
(%
e•
), %
edx


146 
cmp
 
$16
, %
ecx


147 
j´
 
	$L
(16db
w‹ds‹m‹e
)

149 
	$L
(
wrôe_Àss16dbw‹ds
):

150 
	`Àa
 (%
edx
, %
ecx
, 4), %edx

151 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	`L
(
èbÀ_Àss16dbw‹ds
))

153 .
push£˘i⁄
 .
rod©a
.
s£2
,"a",@
¥ogbôs


154 
	$ALIGN
 (2)

155 
	$L
(
èbÀ_Àss16dbw‹ds
):

156 .
	`JMPTBL
 (
	`L
(
wrôe_0dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

157 .
	`JMPTBL
 (
	`L
(
wrôe_1dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

158 .
	`JMPTBL
 (
	`L
(
wrôe_2dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

159 .
	`JMPTBL
 (
	`L
(
wrôe_3dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

160 .
	`JMPTBL
 (
	`L
(
wrôe_4dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

161 .
	`JMPTBL
 (
	`L
(
wrôe_5dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

162 .
	`JMPTBL
 (
	`L
(
wrôe_6dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

163 .
	`JMPTBL
 (
	`L
(
wrôe_7dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

164 .
	`JMPTBL
 (
	`L
(
wrôe_8dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

165 .
	`JMPTBL
 (
	`L
(
wrôe_9dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

166 .
	`JMPTBL
 (
	`L
(
wrôe_10dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

167 .
	`JMPTBL
 (
	`L
(
wrôe_11dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

168 .
	`JMPTBL
 (
	`L
(
wrôe_12dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

169 .
	`JMPTBL
 (
	`L
(
wrôe_13dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

170 .
	`JMPTBL
 (
	`L
(
wrôe_14dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

171 .
	`JMPTBL
 (
	`L
(
wrôe_15dbw‹ds
), L(
èbÀ_Àss16dbw‹ds
))

172 .
p›£˘i⁄


174 
	$ALIGN
 (4)

175 
	$L
(
wrôe_15dbw‹ds
):

176 
movl
 %
óx
, -60(%
edx
)

177 
	$L
(
wrôe_14dbw‹ds
):

178 
movl
 %
óx
, -56(%
edx
)

179 
	$L
(
wrôe_13dbw‹ds
):

180 
movl
 %
óx
, -52(%
edx
)

181 
	$L
(
wrôe_12dbw‹ds
):

182 
movl
 %
óx
, -48(%
edx
)

183 
	$L
(
wrôe_11dbw‹ds
):

184 
movl
 %
óx
, -44(%
edx
)

185 
	$L
(
wrôe_10dbw‹ds
):

186 
movl
 %
óx
, -40(%
edx
)

187 
	$L
(
wrôe_9dbw‹ds
):

188 
movl
 %
óx
, -36(%
edx
)

189 
	$L
(
wrôe_8dbw‹ds
):

190 
movl
 %
óx
, -32(%
edx
)

191 
	$L
(
wrôe_7dbw‹ds
):

192 
movl
 %
óx
, -28(%
edx
)

193 
	$L
(
wrôe_6dbw‹ds
):

194 
movl
 %
óx
, -24(%
edx
)

195 
	$L
(
wrôe_5dbw‹ds
):

196 
movl
 %
óx
, -20(%
edx
)

197 
	$L
(
wrôe_4dbw‹ds
):

198 
movl
 %
óx
, -16(%
edx
)

199 
	$L
(
wrôe_3dbw‹ds
):

200 
movl
 %
óx
, -12(%
edx
)

201 
	$L
(
wrôe_2dbw‹ds
):

202 
movl
 %
óx
, -8(%
edx
)

203 
	$L
(
wrôe_1dbw‹ds
):

204 
movl
 %
óx
, -4(%
edx
)

205 
	$L
(
wrôe_0dbw‹ds
):

206 
SETRTNVAL


207 
RETURN


209 
	$ALIGN
 (4)

210 
	$L
(16db
w‹ds‹m‹e
):

211 
ã°
 
$3
, %
edx


212 
jz
 
	$L
(
Æig√d4byãs
)

213 
mov
 %
óx
, (%
edx
)

214 
mov
 %
óx
, -4(%
edx
, %
ecx
, 4)

215 
sub
 
$1
, %
ecx


216 
rﬁ
 
$24
, %
óx


217 
add
 
$1
, %
edx


218 
ã°
 
$3
, %
edx


219 
jz
 
	$L
(
Æig√d4byãs
)

220 
r‹
 
$8
, %
óx


221 
add
 
$1
, %
edx


222 
ã°
 
$3
, %
edx


223 
jz
 
	$L
(
Æig√d4byãs
)

224 
r‹
 
$8
, %
óx


225 
add
 
$1
, %
edx


226 
	$L
(
Æig√d4byãs
):

227 
shl
 
$2
, %
ecx


229 #ifde‡
USE_AS_BZERO32


230 
px‹
 %
xmm0
, %xmm0

232 
movd
 %
óx
, %
xmm0


233 
pshufd
 
$0
, %
xmm0
, %xmm0

235 
ã°l
 
$0xf
, %
edx


236 
jz
 
	$L
(
Æig√d_16
)

238 
	$L
(
nŸ_Æig√d_16
):

239 
movdqu
 %
xmm0
, (%
edx
)

240 
movl
 %
edx
, %
óx


241 
™d
 
$
-16, %
edx


242 
add
 
$16
, %
edx


243 
sub
 %
edx
, %
óx


244 
add
 %
óx
, %
ecx


245 
movd
 %
xmm0
, %
óx


246 
	$ALIGN
 (4)

247 
	$L
(
Æig√d_16
):

248 
cmp
 
$128
, %
ecx


249 
j´
 
	$L
(128b
yãs‹m‹e
)

251 
	$L
(
Æig√d_16_Àss128byãs
):

252 
add
 %
ecx
, %
edx


253 
shr
 
$2
, %
ecx


254 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	$L
(
èbÀ_16_128byãs
))

256 
	$ALIGN
 (4)

257 
	$L
(128b
yãs‹m‹e
):

258 #ifde‡
SHARED_CACHE_SIZE


259 
	`PUSH
 (%
ebx
)

260 
mov
 
$SHARED_CACHE_SIZE
, %
ebx


262 #ifde‡
SHARED


263 
ˇŒ
 
__i686
.
gë_pc_thunk
.
bx


264 
add
 
$_GLOBAL_OFFSET_TABLE_
, %
ebx


265 
mov
 
__x86_sh¨ed_ˇche_size
@
	`GOTOFF
(%
ebx
), %ebx

267 
	`PUSH
 (%
ebx
)

268 
mov
 
__x86_sh¨ed_ˇche_size
, %
ebx


271 
cmp
 %
ebx
, %
ecx


272 
j´
 
	$L
(128b
yãs‹m‹e_¡_°¨t
)

274 #ifde‡
DATA_CACHE_SIZE


275 
	`POP
 (%
ebx
)

276 
	#RESTORE_EBX_STATE
 
	`CFI_PUSH
 (%
ebx
)

	)

277 
cmp
 
$DATA_CACHE_SIZE
, %
ecx


279 #ifde‡
SHARED


280 
	#RESTORE_EBX_STATE


	)

281 
ˇŒ
 
__i686
.
gë_pc_thunk
.
bx


282 
add
 
$_GLOBAL_OFFSET_TABLE_
, %
ebx


283 
cmp
 
__x86_d©a_ˇche_size
@
	`GOTOFF
(%
ebx
), %
ecx


285 
	`POP
 (%
ebx
)

286 
	#RESTORE_EBX_STATE
 
	`CFI_PUSH
 (%
ebx
)

	)

287 
cmp
 
__x86_d©a_ˇche_size
, %
ecx


291 
j´
 
	$L
(128b
yãs_L2_n‹mÆ
)

292 
subl
 
$128
, %
ecx


293 
	$L
(128b
yãs‹m‹e_n‹mÆ
):

294 
sub
 
$128
, %
ecx


295 
movdqa
 %
xmm0
, (%
edx
)

296 
movdqa
 %
xmm0
, 0x10(%
edx
)

297 
movdqa
 %
xmm0
, 0x20(%
edx
)

298 
movdqa
 %
xmm0
, 0x30(%
edx
)

299 
movdqa
 %
xmm0
, 0x40(%
edx
)

300 
movdqa
 %
xmm0
, 0x50(%
edx
)

301 
movdqa
 %
xmm0
, 0x60(%
edx
)

302 
movdqa
 %
xmm0
, 0x70(%
edx
)

303 
Àa
 128(%
edx
), %edx

304 
jb
 
	$L
(128b
yã¶ess_n‹mÆ
)

307 
sub
 
$128
, %
ecx


308 
movdqa
 %
xmm0
, (%
edx
)

309 
movdqa
 %
xmm0
, 0x10(%
edx
)

310 
movdqa
 %
xmm0
, 0x20(%
edx
)

311 
movdqa
 %
xmm0
, 0x30(%
edx
)

312 
movdqa
 %
xmm0
, 0x40(%
edx
)

313 
movdqa
 %
xmm0
, 0x50(%
edx
)

314 
movdqa
 %
xmm0
, 0x60(%
edx
)

315 
movdqa
 %
xmm0
, 0x70(%
edx
)

316 
Àa
 128(%
edx
), %edx

317 
j´
 
	$L
(128b
yãs‹m‹e_n‹mÆ
)

319 
	$L
(128b
yã¶ess_n‹mÆ
):

320 
Àa
 128(%
ecx
), %ecx

321 
add
 %
ecx
, %
edx


322 
shr
 
$2
, %
ecx


323 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	$L
(
èbÀ_16_128byãs
))

325 
	$ALIGN
 (4)

326 
	$L
(128b
yãs_L2_n‹mÆ
):

327 
¥e„tcht0
 0x380(%
edx
)

328 
¥e„tcht0
 0x3c0(%
edx
)

329 
sub
 
$128
, %
ecx


330 
movdqa
 %
xmm0
, (%
edx
)

331 
mov≠s
 %
xmm0
, 0x10(%
edx
)

332 
mov≠s
 %
xmm0
, 0x20(%
edx
)

333 
mov≠s
 %
xmm0
, 0x30(%
edx
)

334 
mov≠s
 %
xmm0
, 0x40(%
edx
)

335 
mov≠s
 %
xmm0
, 0x50(%
edx
)

336 
mov≠s
 %
xmm0
, 0x60(%
edx
)

337 
mov≠s
 %
xmm0
, 0x70(%
edx
)

338 
add
 
$128
, %
edx


339 
cmp
 
$128
, %
ecx


340 
j´
 
	$L
(128b
yãs_L2_n‹mÆ
)

342 
	$L
(128b
yã¶ess_L2_n‹mÆ
):

343 
add
 %
ecx
, %
edx


344 
shr
 
$2
, %
ecx


345 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	$L
(
èbÀ_16_128byãs
))

347 
RESTORE_EBX_STATE


348 
	$L
(128b
yãs‹m‹e_¡_°¨t
):

349 
sub
 %
ebx
, %
ecx


350 
mov
 %
ebx
, %
óx


351 
™d
 
$0x7f
, %
óx


352 
add
 %
óx
, %
ecx


353 
movd
 %
xmm0
, %
óx


354 
	$ALIGN
 (4)

355 
	$L
(128b
yãs‹m‹e_sh¨ed_ˇche_lo›
):

356 
¥e„tcht0
 0x3c0(%
edx
)

357 
¥e„tcht0
 0x380(%
edx
)

358 
sub
 
$0x80
, %
ebx


359 
movdqa
 %
xmm0
, (%
edx
)

360 
movdqa
 %
xmm0
, 0x10(%
edx
)

361 
movdqa
 %
xmm0
, 0x20(%
edx
)

362 
movdqa
 %
xmm0
, 0x30(%
edx
)

363 
movdqa
 %
xmm0
, 0x40(%
edx
)

364 
movdqa
 %
xmm0
, 0x50(%
edx
)

365 
movdqa
 %
xmm0
, 0x60(%
edx
)

366 
movdqa
 %
xmm0
, 0x70(%
edx
)

367 
add
 
$0x80
, %
edx


368 
cmp
 
$0x80
, %
ebx


369 
j´
 
	$L
(128b
yãs‹m‹e_sh¨ed_ˇche_lo›
)

370 
cmp
 
$0x80
, %
ecx


371 
jb
 
	$L
(
sh¨ed_ˇche_lo›_íd
)

373 
	$ALIGN
 (4)

374 
	$L
(128b
yãs‹m‹e_¡
):

375 
sub
 
$0x80
, %
ecx


376 
mov¡dq
 %
xmm0
, (%
edx
)

377 
mov¡dq
 %
xmm0
, 0x10(%
edx
)

378 
mov¡dq
 %
xmm0
, 0x20(%
edx
)

379 
mov¡dq
 %
xmm0
, 0x30(%
edx
)

380 
mov¡dq
 %
xmm0
, 0x40(%
edx
)

381 
mov¡dq
 %
xmm0
, 0x50(%
edx
)

382 
mov¡dq
 %
xmm0
, 0x60(%
edx
)

383 
mov¡dq
 %
xmm0
, 0x70(%
edx
)

384 
add
 
$0x80
, %
edx


385 
cmp
 
$0x80
, %
ecx


386 
j´
 
	$L
(128b
yãs‹m‹e_¡
)

387 
s„n˚


388 
	$L
(
sh¨ed_ˇche_lo›_íd
):

389 #i‡
deföed
 
DATA_CACHE_SIZE
 || !deföed 
SHARED


390 
	`POP
 (%
ebx
)

392 
add
 %
ecx
, %
edx


393 
shr
 
$2
, %
ecx


394 
	`BRANCH_TO_JMPTBL_ENTRY
 (
	`L
(
èbÀ_16_128byãs
))

396 .
push£˘i⁄
 .
rod©a
.
s£2
,"a",@
¥ogbôs


397 
	$ALIGN
 (2)

398 
	$L
(
èbÀ_16_128byãs
):

399 .
	`JMPTBL
 (
	`L
(
Æig√d_16_0byãs
), L(
èbÀ_16_128byãs
))

400 .
	`JMPTBL
 (
	`L
(
Æig√d_16_4byãs
), L(
èbÀ_16_128byãs
))

401 .
	`JMPTBL
 (
	`L
(
Æig√d_16_8byãs
), L(
èbÀ_16_128byãs
))

402 .
	`JMPTBL
 (
	`L
(
Æig√d_16_12byãs
), L(
èbÀ_16_128byãs
))

403 .
	`JMPTBL
 (
	`L
(
Æig√d_16_16byãs
), L(
èbÀ_16_128byãs
))

404 .
	`JMPTBL
 (
	`L
(
Æig√d_16_20byãs
), L(
èbÀ_16_128byãs
))

405 .
	`JMPTBL
 (
	`L
(
Æig√d_16_24byãs
), L(
èbÀ_16_128byãs
))

406 .
	`JMPTBL
 (
	`L
(
Æig√d_16_28byãs
), L(
èbÀ_16_128byãs
))

407 .
	`JMPTBL
 (
	`L
(
Æig√d_16_32byãs
), L(
èbÀ_16_128byãs
))

408 .
	`JMPTBL
 (
	`L
(
Æig√d_16_36byãs
), L(
èbÀ_16_128byãs
))

409 .
	`JMPTBL
 (
	`L
(
Æig√d_16_40byãs
), L(
èbÀ_16_128byãs
))

410 .
	`JMPTBL
 (
	`L
(
Æig√d_16_44byãs
), L(
èbÀ_16_128byãs
))

411 .
	`JMPTBL
 (
	`L
(
Æig√d_16_48byãs
), L(
èbÀ_16_128byãs
))

412 .
	`JMPTBL
 (
	`L
(
Æig√d_16_52byãs
), L(
èbÀ_16_128byãs
))

413 .
	`JMPTBL
 (
	`L
(
Æig√d_16_56byãs
), L(
èbÀ_16_128byãs
))

414 .
	`JMPTBL
 (
	`L
(
Æig√d_16_60byãs
), L(
èbÀ_16_128byãs
))

415 .
	`JMPTBL
 (
	`L
(
Æig√d_16_64byãs
), L(
èbÀ_16_128byãs
))

416 .
	`JMPTBL
 (
	`L
(
Æig√d_16_68byãs
), L(
èbÀ_16_128byãs
))

417 .
	`JMPTBL
 (
	`L
(
Æig√d_16_72byãs
), L(
èbÀ_16_128byãs
))

418 .
	`JMPTBL
 (
	`L
(
Æig√d_16_76byãs
), L(
èbÀ_16_128byãs
))

419 .
	`JMPTBL
 (
	`L
(
Æig√d_16_80byãs
), L(
èbÀ_16_128byãs
))

420 .
	`JMPTBL
 (
	`L
(
Æig√d_16_84byãs
), L(
èbÀ_16_128byãs
))

421 .
	`JMPTBL
 (
	`L
(
Æig√d_16_88byãs
), L(
èbÀ_16_128byãs
))

422 .
	`JMPTBL
 (
	`L
(
Æig√d_16_92byãs
), L(
èbÀ_16_128byãs
))

423 .
	`JMPTBL
 (
	`L
(
Æig√d_16_96byãs
), L(
èbÀ_16_128byãs
))

424 .
	`JMPTBL
 (
	`L
(
Æig√d_16_100byãs
), L(
èbÀ_16_128byãs
))

425 .
	`JMPTBL
 (
	`L
(
Æig√d_16_104byãs
), L(
èbÀ_16_128byãs
))

426 .
	`JMPTBL
 (
	`L
(
Æig√d_16_108byãs
), L(
èbÀ_16_128byãs
))

427 .
	`JMPTBL
 (
	`L
(
Æig√d_16_112byãs
), L(
èbÀ_16_128byãs
))

428 .
	`JMPTBL
 (
	`L
(
Æig√d_16_116byãs
), L(
èbÀ_16_128byãs
))

429 .
	`JMPTBL
 (
	`L
(
Æig√d_16_120byãs
), L(
èbÀ_16_128byãs
))

430 .
	`JMPTBL
 (
	`L
(
Æig√d_16_124byãs
), L(
èbÀ_16_128byãs
))

431 .
p›£˘i⁄


433 
	$ALIGN
 (4)

434 
	$L
(
Æig√d_16_112byãs
):

435 
movdqa
 %
xmm0
, -112(%
edx
)

436 
	$L
(
Æig√d_16_96byãs
):

437 
movdqa
 %
xmm0
, -96(%
edx
)

438 
	$L
(
Æig√d_16_80byãs
):

439 
movdqa
 %
xmm0
, -80(%
edx
)

440 
	$L
(
Æig√d_16_64byãs
):

441 
movdqa
 %
xmm0
, -64(%
edx
)

442 
	$L
(
Æig√d_16_48byãs
):

443 
movdqa
 %
xmm0
, -48(%
edx
)

444 
	$L
(
Æig√d_16_32byãs
):

445 
movdqa
 %
xmm0
, -32(%
edx
)

446 
	$L
(
Æig√d_16_16byãs
):

447 
movdqa
 %
xmm0
, -16(%
edx
)

448 
	$L
(
Æig√d_16_0byãs
):

449 
SETRTNVAL


450 
RETURN


452 
	$ALIGN
 (4)

453 
	$L
(
Æig√d_16_116byãs
):

454 
movdqa
 %
xmm0
, -116(%
edx
)

455 
	$L
(
Æig√d_16_100byãs
):

456 
movdqa
 %
xmm0
, -100(%
edx
)

457 
	$L
(
Æig√d_16_84byãs
):

458 
movdqa
 %
xmm0
, -84(%
edx
)

459 
	$L
(
Æig√d_16_68byãs
):

460 
movdqa
 %
xmm0
, -68(%
edx
)

461 
	$L
(
Æig√d_16_52byãs
):

462 
movdqa
 %
xmm0
, -52(%
edx
)

463 
	$L
(
Æig√d_16_36byãs
):

464 
movdqa
 %
xmm0
, -36(%
edx
)

465 
	$L
(
Æig√d_16_20byãs
):

466 
movdqa
 %
xmm0
, -20(%
edx
)

467 
	$L
(
Æig√d_16_4byãs
):

468 
movl
 %
óx
, -4(%
edx
)

469 
SETRTNVAL


470 
RETURN


472 
	$ALIGN
 (4)

473 
	$L
(
Æig√d_16_120byãs
):

474 
movdqa
 %
xmm0
, -120(%
edx
)

475 
	$L
(
Æig√d_16_104byãs
):

476 
movdqa
 %
xmm0
, -104(%
edx
)

477 
	$L
(
Æig√d_16_88byãs
):

478 
movdqa
 %
xmm0
, -88(%
edx
)

479 
	$L
(
Æig√d_16_72byãs
):

480 
movdqa
 %
xmm0
, -72(%
edx
)

481 
	$L
(
Æig√d_16_56byãs
):

482 
movdqa
 %
xmm0
, -56(%
edx
)

483 
	$L
(
Æig√d_16_40byãs
):

484 
movdqa
 %
xmm0
, -40(%
edx
)

485 
	$L
(
Æig√d_16_24byãs
):

486 
movdqa
 %
xmm0
, -24(%
edx
)

487 
	$L
(
Æig√d_16_8byãs
):

488 
movq
 %
xmm0
, -8(%
edx
)

489 
SETRTNVAL


490 
RETURN


492 
	$ALIGN
 (4)

493 
	$L
(
Æig√d_16_124byãs
):

494 
movdqa
 %
xmm0
, -124(%
edx
)

495 
	$L
(
Æig√d_16_108byãs
):

496 
movdqa
 %
xmm0
, -108(%
edx
)

497 
	$L
(
Æig√d_16_92byãs
):

498 
movdqa
 %
xmm0
, -92(%
edx
)

499 
	$L
(
Æig√d_16_76byãs
):

500 
movdqa
 %
xmm0
, -76(%
edx
)

501 
	$L
(
Æig√d_16_60byãs
):

502 
movdqa
 %
xmm0
, -60(%
edx
)

503 
	$L
(
Æig√d_16_44byãs
):

504 
movdqa
 %
xmm0
, -44(%
edx
)

505 
	$L
(
Æig√d_16_28byãs
):

506 
movdqa
 %
xmm0
, -28(%
edx
)

507 
	$L
(
Æig√d_16_12byãs
):

508 
movq
 %
xmm0
, -12(%
edx
)

509 
movl
 %
óx
, -4(%
edx
)

510 
SETRTNVAL


511 
RETURN


513 
	`END
 (
s£2_mem£t32_©om
)

	@libs/libcutils/array.c

17 
	~<cutûs/¨øy.h
>

18 
	~<as£π.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<limôs.h
>

23 
	#INITIAL_CAPACITY
 (4)

	)

24 
	#MAX_CAPACITY
 (()(
UINT_MAX
/(*)))

	)

26 
	sAºay
 {

27 ** 
	mc⁄ã¡s
;

28 
	msize
;

29 
	mˇ∑côy
;

32 
Aºay
* 
	$¨øyCª©e
() {

33  
	`ˇŒoc
(1, (
Aºay
));

34 
	}
}

36 
	$¨øyFªe
(
Aºay
* 
¨øy
) {

37 
	`as£π
(
¨øy
 !
NULL
);

40 
	`‰ì
(
¨øy
->
c⁄ã¡s
);

43 
	`‰ì
(
¨øy
);

44 
	}
}

47 
	$ísuªC≠acôy
(
Aºay
* 
¨øy
, 
ˇ∑côy
) {

48 
ﬁdC≠acôy
 = 
¨øy
->
ˇ∑côy
;

49 i‡(
ˇ∑côy
 > 
ﬁdC≠acôy
) {

50 
√wC≠acôy
 = (
ﬁdC≠acôy
 =0Ë? 
INITIAL_CAPACITY
 : oldCapacity;

53 i‡(
ˇ∑côy
 > 
MAX_CAPACITY
)

57 
√wC≠acôy
 < 
ˇ∑côy
) {

58 
√wC≠
 = 
√wC≠acôy
*2;

60 i‡(
√wC≠
 < 
√wC≠acôy
 ||ÇewC≠ > 
MAX_CAPACITY
) {

61 
√wC≠
 = 
MAX_CAPACITY
;

63 
√wC≠acôy
 = 
√wC≠
;

67 i‡(
√wC≠acôy
 < 0 ||ÇewC≠acôy > 
MAX_CAPACITY
)

70 ** 
√wC⁄ã¡s
;

71 i‡(
¨øy
->
c⁄ã¡s
 =
NULL
) {

73 
√wC⁄ã¡s
 = 
	`mÆloc
(
√wC≠acôy
 * (*));

74 i‡(
√wC⁄ã¡s
 =
NULL
) {

79 
√wC⁄ã¡s
 = 
	`ªÆloc
(
¨øy
->
c⁄ã¡s
, (*Ë* 
√wC≠acôy
);

80 i‡(
√wC⁄ã¡s
 =
NULL
) {

85 
¨øy
->
ˇ∑côy
 = 
√wC≠acôy
;

86 
¨øy
->
c⁄ã¡s
 = 
√wC⁄ã¡s
;

90 
	}
}

92 
	$¨øyAdd
(
Aºay
* 
¨øy
, * 
poöãr
) {

93 
	`as£π
(
¨øy
 !
NULL
);

94 
size
 = 
¨øy
->size;

95 
ªsu…
 = 
	`ísuªC≠acôy
(
¨øy
, 
size
 + 1);

96 i‡(
ªsu…
 < 0) {

97  
ªsu…
;

99 
¨øy
->
c⁄ã¡s
[
size
] = 
poöãr
;

100 
¨øy
->
size
++;

102 
	}
}

104 
ölöe
 
	$checkBounds
(
Aºay
* 
¨øy
, 
ödex
) {

105 
	`as£π
(
¨øy
 !
NULL
);

106 
	`as£π
(
ödex
 < 
¨øy
->
size
);

107 
	`as£π
(
ödex
 >= 0);

108 
	}
}

110 * 
	$¨øyGë
(
Aºay
* 
¨øy
, 
ödex
) {

111 
	`checkBounds
(
¨øy
, 
ödex
);

112  
¨øy
->
c⁄ã¡s
[
ödex
];

113 
	}
}

115 * 
	$¨øyRemove
(
Aºay
* 
¨øy
, 
ödex
) {

116 
	`checkBounds
(
¨øy
, 
ödex
);

118 * 
poöãr
 = 
¨øy
->
c⁄ã¡s
[
ödex
];

120 
√wSize
 = 
¨øy
->
size
 - 1;

123 i‡(
ödex
 !
√wSize
) {

124 
	`memmove
(
¨øy
->
c⁄ã¡s
 + 
ödex
,árray->contents + index + 1,

125 ((*)Ë* (
√wSize
 - 
ödex
));

128 
¨øy
->
size
 = 
√wSize
;

130  
poöãr
;

131 
	}
}

133 * 
	$¨øySë
(
Aºay
* 
¨øy
, 
ödex
, * 
poöãr
) {

134 
	`checkBounds
(
¨øy
, 
ödex
);

135 * 
ﬁd
 = 
¨øy
->
c⁄ã¡s
[
ödex
];

136 
¨øy
->
c⁄ã¡s
[
ödex
] = 
poöãr
;

137  
ﬁd
;

138 
	}
}

140 
	$¨øySëSize
(
Aºay
* 
¨øy
, 
√wSize
) {

141 
	`as£π
(
¨øy
 !
NULL
);

142 
	`as£π
(
√wSize
 >= 0);

144 
ﬁdSize
 = 
¨øy
->
size
;

146 i‡(
√wSize
 > 
ﬁdSize
) {

148 
ªsu…
 = 
	`ísuªC≠acôy
(
¨øy
, 
√wSize
);

149 i‡(
ªsu…
 < 0) {

150  
ªsu…
;

154 
	`mem£t
(
¨øy
->
c⁄ã¡s
 + (*Ë* 
ﬁdSize
, 0,

155 (*Ë* (
√wSize
 - 
ﬁdSize
));

158 
¨øy
->
size
 = 
√wSize
;

161 
	}
}

163 
	$¨øySize
(
Aºay
* 
¨øy
) {

164 
	`as£π
(
¨øy
 !
NULL
);

165  
¨øy
->
size
;

166 
	}
}

168 c⁄° ** 
	$¨øyUnwøp
(
Aºay
* 
¨øy
) {

169  (c⁄° **)
¨øy
->
c⁄ã¡s
;

170 
	}
}

	@libs/libcutils/ashmem-dev.c

23 
	~<uni°d.h
>

24 
	~<°rög.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/io˘l.h
>

28 
	~<f˙é.h
>

31 
	~<ashmem.h
>

33 
	~<cutûs/ashmem.h
>

35 
	#ASHMEM_DEVICE
 "/dev/ashmem"

	)

44 
	$ashmem_¸óã_ªgi⁄
(c⁄° *
«me
, 
size_t
 
size
)

46 
fd
, 
ªt
;

48 
fd
 = 
	`›í
(
ASHMEM_DEVICE
, 
O_RDWR
);

49 i‡(
fd
 < 0)

50  
fd
;

52 i‡(
«me
) {

53 
buf
[
ASHMEM_NAME_LEN
];

55 
	`°æ˝y
(
buf
, 
«me
, (buf));

56 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_NAME
, 
buf
);

57 i‡(
ªt
 < 0)

58 
îr‹
;

61 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_SIZE
, 
size
);

62 i‡(
ªt
 < 0)

63 
îr‹
;

65  
fd
;

67 
îr‹
:

68 
	`˛o£
(
fd
);

69  
ªt
;

70 
	}
}

72 
	$ashmem_£t_¥Ÿ_ªgi⁄
(
fd
, 
¥Ÿ
)

74  
	`io˘l
(
fd
, 
ASHMEM_SET_PROT_MASK
, 
¥Ÿ
);

75 
	}
}

77 
	$ashmem_pö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
)

79 
ashmem_pö
 
pö
 = { 
off£t
, 
Àn
 };

80  
	`io˘l
(
fd
, 
ASHMEM_PIN
, &
pö
);

81 
	}
}

83 
	$ashmem_u≈ö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
)

85 
ashmem_pö
 
pö
 = { 
off£t
, 
Àn
 };

86  
	`io˘l
(
fd
, 
ASHMEM_UNPIN
, &
pö
);

87 
	}
}

89 
	$ashmem_gë_size_ªgi⁄
(
fd
)

91  
	`io˘l
(
fd
, 
ASHMEM_GET_SIZE
, 
NULL
);

92 
	}
}

	@libs/libcutils/ashmem-host.c

22 
	~<uni°d.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<î∫o.h
>

30 
	~<time.h
>

31 
	~<limôs.h
>

33 
	~<cutûs/ashmem.h
>

35 
	$ashmem_¸óã_ªgi⁄
(c⁄° *
ign‹ed
, 
size_t
 
size
)

37 c⁄° 
txt
[] = "abcdefghijklmnopqrstuvwxyz"

39 
«me
[64];

40 
ªåõs
 = 0;

41 
pid_t
 
pid
 = 
	`gëpid
();

42 
fd
;

44 
	`§™d
(
	`time
(
NULL
Ë+ 
pid
);

46 
ªåy
:

48 
	`¢¥ötf
(
«me
, (name), "/tmp/android-ashmem-%d-%c%c%c%c%c%c%c%c",

49 
pid
,

50 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

51 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

52 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

53 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

54 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

55 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

56 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))],

57 
txt
[(Ë((—xtË- 1Ë* (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)))]);

60 
fd
 = 
	`›í
(
«me
, 
O_RDWR
 | 
O_CREAT
 | 
O_EXCL
, 0600);

61 i‡(
fd
 == -1) {

63 i‡(
î∫o
 =
EEXIST
 && ++
ªåõs
 < 6)

64 
ªåy
;

69 i‡(
	`·runˇã
(
fd
, 
size
) == -1)

70 
îr‹
;

72 i‡(
	`u∆ök
(
«me
) == -1)

73 
îr‹
;

75  
fd
;

76 
îr‹
:

77 
	`˛o£
(
fd
);

79 
	}
}

81 
	$ashmem_£t_¥Ÿ_ªgi⁄
(
fd
, 
¥Ÿ
)

84 
	}
}

86 
	$ashmem_pö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
)

88  
ASHMEM_NOT_PURGED
;

89 
	}
}

91 
	$ashmem_u≈ö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
)

93  
ASHMEM_IS_UNPINNED
;

94 
	}
}

96 
	$ashmem_gë_size_ªgi⁄
(
fd
)

98 
°©
 
buf
;

99 
ªsu…
;

101 
ªsu…
 = 
	`f°©
(
fd
, &
buf
);

102 i‡(
ªsu…
 == -1) {

108 i‡(!(
buf
.
°_∆ök
 =0 && 
	`S_ISREG
(buf.
°_mode
))) {

109 
î∫o
 = 
ENOTTY
;

113  ()
buf
.
°_size
;

114 
	}
}

	@libs/libcutils/atomic.c

17 
	#ölöe


	)

19 
	~<cutûs/©omic-ölöe.h
>

	@libs/libcutils/buffer.c

17 
	#LOG_TAG
 "buf„r"

	)

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

24 
	~"buf„r.h
"

25 
	~"loghack.h
"

27 
Buf„r
* 
	$buf„rCª©e
(
size_t
 
ˇ∑côy
) {

28 
Buf„r
* 
buf„r
 = 
	`mÆloc
((Buffer));

29 i‡(
buf„r
 =
NULL
) {

30  
NULL
;

32 
buf„r
->
ˇ∑côy
 = capacity;

33 
buf„r
->
ex≥˘ed
 = 0;

34 
buf„r
->
d©a
 = 
	`mÆloc
(
ˇ∑côy
);

35 i‡(
buf„r
->
d©a
 =
NULL
) {

36 
	`‰ì
(
buf„r
);

37  
NULL
;

39  
buf„r
;

40 
	}
}

42 
	$buf„rFªe
(
Buf„r
* 
buf„r
) {

43 
	`‰ì
(
buf„r
->
d©a
);

44 
	`‰ì
(
buf„r
);

45 
	}
}

47 
Buf„r
* 
	$buf„rWøp
(* 
d©a
, 
size_t
 
ˇ∑côy
, size_à
size
) {

48 
Buf„r
* 
buf„r
 = 
	`mÆloc
((Buffer));

49 i‡(
buf„r
 =
NULL
) {

50  
NULL
;

53 
buf„r
->
d©a
 = data;

54 
buf„r
->
ˇ∑côy
 = capacity;

55 
buf„r
->
size
 = size;

56 
buf„r
->
ex≥˘ed
 = 0;

57  
buf„r
;

58 
	}
}

60 
	$buf„rPª∑ªF‹Ród
(
Buf„r
* 
buf„r
, 
size_t
 
ex≥˘ed
) {

61 i‡(
ex≥˘ed
 > 
buf„r
->
ˇ∑côy
) {

63 * 
ex∑nded
 = 
	`ªÆloc
(
buf„r
->
d©a
, 
ex≥˘ed
);

64 i‡(
ex∑nded
 =
NULL
) {

65 
î∫o
 = 
ENOMEM
;

68 
buf„r
->
ˇ∑côy
 = 
ex≥˘ed
;

69 
buf„r
->
d©a
 = 
ex∑nded
;

72 
buf„r
->
size
 = 0;

73 
buf„r
->
ex≥˘ed
 =Éxpected;

75 
	}
}

77 
ssize_t
 
	$buf„rRód
(
Buf„r
* 
buf„r
, 
fd
) {

78 
	`as£π
(
buf„r
->
size
 < buf„r->
ex≥˘ed
);

80 
ssize_t
 
byãsRód
 = 
	`ªad
(
fd
,

81 
buf„r
->
d©a
 + buf„r->
size
,

82 
buf„r
->
ex≥˘ed
 - buf„r->
size
);

84 i‡(
byãsRód
 > 0) {

85 
buf„r
->
size
 +
byãsRód
;

86  
buf„r
->
size
;

89  
byãsRód
;

90 
	}
}

92 
	$buf„rPª∑ªF‹Wrôe
(
Buf„r
* 
buf„r
) {

93 
buf„r
->
ªmaöög
 = buf„r->
size
;

94 
	}
}

96 
ssize_t
 
	$buf„rWrôe
(
Buf„r
* 
buf„r
, 
fd
) {

97 
	`as£π
(
buf„r
->
ªmaöög
 > 0);

98 
	`as£π
(
buf„r
->
ªmaöög
 <buf„r->
size
);

100 
ssize_t
 
byãsWrôãn
 = 
	`wrôe
(
fd
,

101 
buf„r
->
d©a
 + buf„r->
size
 - buf„r->
ªmaöög
,

102 
buf„r
->
ªmaöög
);

104 i‡(
byãsWrôãn
 >= 0) {

105 
buf„r
->
ªmaöög
 -
byãsWrôãn
;

107 
	`ALOGD
("Buf„∏byã†wrôãn: %d", (Ë
byãsWrôãn
);

108 
	`ALOGD
("Buf„∏size: %d", (Ë
buf„r
->
size
);

109 
	`ALOGD
("Buf„∏ªmaöög: %d", (Ë
buf„r
->
ªmaöög
);

111  
buf„r
->
ªmaöög
;

114  
byãsWrôãn
;

115 
	}
}

	@libs/libcutils/buffer.h

21 #i‚de‡
__BUFFER_H


22 
	#__BUFFER_H


	)

24 #ifde‡
__˝lu•lus


28 
	~<°dlib.h
>

36 * 
d©a
;

40 
size_t
 
ex≥˘ed
;

43 
size_t
 
ªmaöög
;

47 
size_t
 
size
;

50 
size_t
 
ˇ∑côy
;

51 } 
	tBuf„r
;

56 
	#buf„rRódCom∂ëe
(
buf„r
Ë(buf„r->
ex≥˘ed
 =buf„r->
size
)

	)

61 
	#buf„rWrôeCom∂ëe
(
buf„r
Ë(buf„r->
ªmaöög
 =0)

	)

66 
Buf„r
* 
buf„rCª©e
(
size_t
 
öôülC≠acôy
);

71 
Buf„r
* 
buf„rWøp
(* 
d©a
, 
size_t
 
ˇ∑côy
, size_à
size
);

76 
buf„rFªe
(
Buf„r
* 
buf„r
);

83 
buf„rPª∑ªF‹Ród
(
Buf„r
* 
buf„r
, 
size_t
 
ex≥˘ed
);

92 
ssize_t
 
buf„rRód
(
Buf„r
* 
buf„r
, 
fd
);

97 
buf„rPª∑ªF‹Wrôe
(
Buf„r
* 
buf„r
);

106 
ssize_t
 
buf„rWrôe
(
Buf„r
* 
buf„r
, 
fd
);

108 #ifde‡
__˝lu•lus


	@libs/libcutils/config_utils.c

17 
	~<°rög.h
>

18 
	~<˘y≥.h
>

19 
	~<°dlib.h
>

20 
	~<f˙é.h
>

21 
	~<uni°d.h
>

23 
	~<cutûs/c⁄fig_utûs.h
>

24 
	~<cutûs/misc.h
>

26 
˙ode
* 
	$c⁄fig_node
(c⁄° *
«me
, c⁄° *
vÆue
)

28 
˙ode
 *
node
;

30 
node
 = 
	`ˇŒoc
((
˙ode
), 1);

31 if(
node
) {

32 
node
->
«me
 =Çame ?Çame : "";

33 
node
->
vÆue
 = value ? value : "";

36  
node
;

37 
	}
}

39 
˙ode
* 
	$c⁄fig_föd
(
˙ode
 *
roŸ
, c⁄° *
«me
)

41 
˙ode
 *
node
, *
m©ch
 = 
NULL
;

44 
node
 = 
roŸ
->
fú°_chûd
;Çode;Çodênode->
√xt
)

45 if(!
	`°rcmp
(
node
->
«me
,Çame))

46 
m©ch
 = 
node
;

48  
m©ch
;

49 
	}
}

51 
˙ode
* 
	$_c⁄fig_¸óã
(
˙ode
 *
roŸ
, c⁄° *
«me
)

53 
˙ode
 *
node
;

55 
node
 = 
	`c⁄fig_node
(
«me
, 
NULL
);

57 if(
roŸ
->
œ°_chûd
)

58 
roŸ
->
œ°_chûd
->
√xt
 = 
node
;

60 
roŸ
->
fú°_chûd
 = 
node
;

62 
roŸ
->
œ°_chûd
 = 
node
;

64  
node
;

65 
	}
}

67 
	$c⁄fig_boﬁ
(
˙ode
 *
roŸ
, c⁄° *
«me
, 
_deÁu…
)

69 
˙ode
 *
node
;

71 
node
 = 
	`c⁄fig_föd
(
roŸ
, 
«me
);

72 if(!
node
)

73  
_deÁu…
;

75 
node
->
vÆue
[0]) {

83 
	}
}

85 c⁄° * 
	$c⁄fig_°r
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
_deÁu…
)

87 
˙ode
 *
node
;

89 
node
 = 
	`c⁄fig_föd
(
roŸ
, 
«me
);

90 if(!
node
)

91  
_deÁu…
;

92  
node
->
vÆue
;

93 
	}
}

95 
	$c⁄fig_£t
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
vÆue
)

97 
˙ode
 *
node
;

99 
node
 = 
	`c⁄fig_föd
(
roŸ
, 
«me
);

100 if(
node
)

101 
node
->
vÆue
 = value;

103 
node
 = 
	`_c⁄fig_¸óã
(
roŸ
, 
«me
);

104 
node
->
vÆue
 = value;

106 
	}
}

108 
	#T_EOF
 0

	)

109 
	#T_TEXT
 1

	)

110 
	#T_DOT
 2

	)

111 
	#T_OBRACE
 3

	)

112 
	#T_CBRACE
 4

	)

116 *
	md©a
;

117 *
	mãxt
;

118 
	mÀn
;

119 
	m√xt
;

120 } 
	tc°©e
;

122 
	$_Àx
(
c°©e
 *
cs
, 
vÆue
)

124 
c
;

125 *
s
;

126 *
d©a
;

128 
d©a
 = 
cs
->data;

130 if(
cs
->
√xt
 != 0) {

131 
c
 = 
cs
->
√xt
;

132 
cs
->
√xt
 = 0;

133 
gŸ_c
;

136 
ª°¨t
:

138 
c
 = *
d©a
++;

139 
gŸ_c
:

140 if(
	`is•a˚
(
c
))

143 
c
) {

145  
T_EOF
;

149 *
d©a
) {

151 
cs
->
d©a
 = data;

152  
T_EOF
;

154 
cs
->
d©a
 = data + 1;

155 
ª°¨t
;

157 
d©a
++;

163 
cs
->
d©a
 = data;

164  
T_DOT
;

167 
cs
->
d©a
 = data;

168  
T_OBRACE
;

171 
cs
->
d©a
 = data;

172  
T_CBRACE
;

175 
s
 = 
d©a
 - 1;

177 if(
vÆue
) {

179 if(*
d©a
 == 0) {

180 
cs
->
d©a
 = data;

183 if(*
d©a
 == '\n') {

184 
cs
->
d©a
 = data + 1;

185 *
d©a
-- = 0;

188 
d©a
++;

192 
d©a
 > 
s
){

193 if(!
	`is•a˚
(*
d©a
)) ;

194 *
d©a
-- = 0;

197 
gŸ_ãxt
;

200 if(
	`is•a˚
(*
d©a
)) {

201 *
d©a
 = 0;

202 
cs
->
d©a
 = data + 1;

203 
gŸ_ãxt
;

205 *
d©a
) {

207 
cs
->
d©a
 = data;

208 
gŸ_ãxt
;

212 
cs
->
√xt
 = *
d©a
;

213 *
d©a
 = 0;

214 
cs
->
d©a
 = data + 1;

215 
gŸ_ãxt
;

217 
d©a
++;

224 
gŸ_ãxt
:

225 
cs
->
ãxt
 = 
s
;

226  
T_TEXT
;

227 
	}
}

230 *
	gTOKENNAMES
[] = { "EOF", "TEXT", "DOT", "OBRACE", "CBRACE" };

232 
	$Àx
(
c°©e
 *
cs
, 
vÆue
)

234 
tok
 = 
	`_Àx
(
cs
, 
vÆue
);

235 
	`¥ötf
("TOKEN(%dË%†%s\n", 
vÆue
, 
TOKENNAMES
[
tok
],

236 
tok
 =
T_TEXT
 ? 
cs
->
ãxt
 : "");

237  
tok
;

238 
	}
}

240 
	#Àx
(
cs
,
v
Ë
	`_Àx
(cs,v)

	)

243 
∑r£_ex¥
(
c°©e
 *
cs
, 
˙ode
 *
node
);

245 
	$∑r£_block
(
c°©e
 *
cs
, 
˙ode
 *
node
)

248 
	`Àx
(
cs
, 0)){

249 
T_TEXT
:

250 if(
	`∑r£_ex¥
(
cs
, 
node
))  -1;

253 
T_CBRACE
:

260 
	}
}

262 
	$∑r£_ex¥
(
c°©e
 *
cs
, 
˙ode
 *
roŸ
)

264 
˙ode
 *
node
;

267 
node
 = 
	`c⁄fig_föd
(
roŸ
, 
cs
->
ãxt
);

268 if(!
node
 || *node->
vÆue
)

269 
node
 = 
	`_c⁄fig_¸óã
(
roŸ
, 
cs
->
ãxt
);

272 
	`Àx
(
cs
, 1)) {

273 
T_DOT
:

274 if(
	`Àx
(
cs
, 0Ë!
T_TEXT
)

276 
node
 = 
	`_c⁄fig_¸óã
“ode, 
cs
->
ãxt
);

279 
T_TEXT
:

280 
node
->
vÆue
 = 
cs
->
ãxt
;

283 
T_OBRACE
:

284  
	`∑r£_block
(
cs
, 
node
);

290 
	}
}

292 
	$c⁄fig_lﬂd
(
˙ode
 *
roŸ
, *
d©a
)

294 if(
d©a
 != 0) {

295 
c°©e
 
cs
;

296 
cs
.
d©a
 = data;

297 
cs
.
√xt
 = 0;

300 
	`Àx
(&
cs
, 0)) {

301 
T_TEXT
:

302 if(
	`∑r£_ex¥
(&
cs
, 
roŸ
))

310 
	}
}

312 
	$c⁄fig_lﬂd_fûe
(
˙ode
 *
roŸ
, c⁄° *
‚
)

314 *
d©a
;

315 
d©a
 = 
	`lﬂd_fûe
(
‚
, 0);

316 
	`c⁄fig_lﬂd
(
roŸ
, 
d©a
);

317 
	}
}

319 
	$c⁄fig_‰ì
(
˙ode
 *
roŸ
)

321 
˙ode
 *
cur
 = 
roŸ
->
fú°_chûd
;

323 
cur
) {

324 
˙ode
 *
¥ev
 = 
cur
;

325 
	`c⁄fig_‰ì
(
cur
);

326 
cur
 = cur->
√xt
;

327 
	`‰ì
(
¥ev
);

329 
	}
}

	@libs/libcutils/cpu_info.c

18 
	~<cutûs/˝u_öfo.h
>

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

25 
	g£rül_numbî
[100] = { 0 };

27 c⁄° * 
	$gë_˝u_£rül_numbî
()

29 i‡(
£rül_numbî
[0] == 0)

31 
FILE
* 
fûe
;

32 * 
chp
, *
íd
;

33 * 
whôe•a˚
;

34 
Àngth
;

37 
fûe
 = 
	`f›í
("proc/cpuinfo", "r");

38 i‡(! 
fûe
)

39  
NULL
;

41 (
chp
 = 
	`fgës
(
£rül_numbî
, (£rül_numbî), 
fûe
)Ë!
NULL
)

45 i‡(
	`°∫cmp
(
chp
, "Serial", 6) != 0)

48 
chp
 = 
	`°rchr
(chp, ':');

49 i‡(!
chp
)

53  *(++
chp
) == ' ') {}

56 
íd
 = 
chp
;

57 *
íd
 && *end != ' ' && *end != '\t' && *end != '\n' && *end != '\r')

58 ++
íd
;

59 *
íd
 = 0;

61 
whôe•a˚
 = 
	`°rchr
(
chp
, ' ');

62 i‡(
whôe•a˚
)

63 *
whôe•a˚
 = 0;

64 
whôe•a˚
 = 
	`°rchr
(
chp
, '\t');

65 i‡(
whôe•a˚
)

66 *
whôe•a˚
 = 0;

67 
whôe•a˚
 = 
	`°rchr
(
chp
, '\r');

68 i‡(
whôe•a˚
)

69 *
whôe•a˚
 = 0;

70 
whôe•a˚
 = 
	`°rchr
(
chp
, '\n');

71 i‡(
whôe•a˚
)

72 *
whôe•a˚
 = 0;

75 
	`memmove
(
£rül_numbî
, 
chp
, 
	`°æí
(chp) + 1);

79 
	`f˛o£
(
fûe
);

82  (
£rül_numbî
[0] ? sîül_numbî : 
NULL
);

83 
	}
}

	@libs/libcutils/cutils/abort_socket.h

49 
	~<°dlib.h
>

50 
	~<sys/sockë.h
>

52 #i‚de‡
__CUTILS_ABORT_SOCKET_H__


53 
	#__CUTILS_ABORT_SOCKET_H__


	)

54 #ifde‡
__˝lu•lus


58 
	sasockë
 {

59 
fd
;

60 
ab‹t_fd
[2];

67 
asockë
 *
asockë_öô
(
fd
);

77 
asockë_c⁄√˘
(
asockë
 *
s
, c⁄° 
sockaddr
 *
addr
,

78 
sockÀn_t
 
addæí
, 
timeout
);

80 
asockë_ac˚±
(
asockë
 *
s
, 
sockaddr
 *
addr
,

81 
sockÀn_t
 *
addæí
, 
timeout
);

83 
asockë_ªad
(
asockë
 *
s
, *
buf
, 
size_t
 
cou¡
, 
timeout
);

85 
asockë_wrôe
(
asockë
 *
s
, c⁄° *
buf
, 
size_t
 
cou¡
,

86 
timeout
);

93 
asockë_ab‹t
(
asockë
 *
s
);

98 
asockë_de°roy
(
asockë
 *
s
);

100 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/android_reboot.h

17 #i‚de‡
__CUTILS_ANDROID_REBOOT_H__


18 
	#__CUTILS_ANDROID_REBOOT_H__


	)

20 
	g__BEGIN_DECLS


23 
	#ANDROID_RB_RESTART
 0xDEAD0001

	)

24 
	#ANDROID_RB_POWEROFF
 0xDEAD0002

	)

25 
	#ANDROID_RB_RESTART2
 0xDEAD0003

	)

28 
	#ANDROID_RB_FLAG_NO_SYNC
 0x1

	)

29 
	#ANDROID_RB_FLAG_NO_REMOUNT_RO
 0x2

	)

31 
™droid_ªboŸ
(
cmd
, 
Êags
, *
¨g
);

33 
	g__END_DECLS


	@libs/libcutils/cutils/array.h

21 #i‚de‡
__ARRAY_H


22 
	#__ARRAY_H


	)

24 #ifde‡
__˝lu•lus


28 
	~<°dlib.h
>

31 
Aºay
 
	tAºay
;

34 
Aºay
* 
¨øyCª©e
();

37 
¨øyFªe
(
Aºay
* 
¨øy
);

40 
¨øyAdd
(
Aºay
* 
¨øy
, * 
poöãr
);

43 * 
¨øyGë
(
Aºay
* 
¨øy
, 
ödex
);

46 * 
¨øyRemove
(
Aºay
* 
¨øy
, 
ödex
);

49 * 
¨øySë
(
Aºay
* 
¨øy
, 
ödex
, * 
poöãr
);

52 
¨øySëSize
(
Aºay
* 
¨øy
, 
size
);

55 
¨øySize
(
Aºay
* 
¨øy
);

61 c⁄° ** 
¨øyUnwøp
(
Aºay
* 
¨øy
);

63 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/ashmem.h

10 #i‚de‡
_CUTILS_ASHMEM_H


11 
	#_CUTILS_ASHMEM_H


	)

13 
	~<°ddef.h
>

15 #ifde‡
__˝lu•lus


19 
ashmem_¸óã_ªgi⁄
(c⁄° *
«me
, 
size_t
 
size
);

20 
ashmem_£t_¥Ÿ_ªgi⁄
(
fd
, 
¥Ÿ
);

21 
ashmem_pö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
);

22 
ashmem_u≈ö_ªgi⁄
(
fd
, 
size_t
 
off£t
, size_à
Àn
);

23 
ashmem_gë_size_ªgi⁄
(
fd
);

25 #ifde‡
__˝lu•lus


29 #i‚de‡
__ASHMEMIOC


31 
	#ASHMEM_NAME_LEN
 256

	)

33 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

36 
	#ASHMEM_NOT_PURGED
 0

	)

37 
	#ASHMEM_WAS_PURGED
 1

	)

40 
	#ASHMEM_IS_UNPINNED
 0

	)

41 
	#ASHMEM_IS_PINNED
 1

	)

	@libs/libcutils/cutils/atomic-arm.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_ARM_H


18 
	#ANDROID_CUTILS_ATOMIC_ARM_H


	)

20 
	~<°döt.h
>

21 
	~<machöe/˝u-„©uªs.h
>

23 
ölöe
 
	$™droid_compûî_b¨rõr
()

25 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "memory");

26 
	}
}

28 #i‡
ANDROID_SMP
 == 0

29 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

31 
	`™droid_compûî_b¨rõr
();

32 
	}
}

33 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

35 
	`™droid_compûî_b¨rõr
();

36 
	}
}

37 #ñi‡
deföed
(
__ARM_HAVE_DMB
)

38 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

40 
__asm__
 
	`__vﬁ©ûe__
 ("dmb" : : : "memory");

41 
	}
}

42 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

44 
__asm__
 
	`__vﬁ©ûe__
 ("dmb st" : : : "memory");

45 
	}
}

46 #ñi‡
deföed
(
__ARM_HAVE_LDREX_STREX
)

47 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

49 
__asm__
 
	`__vﬁ©ûe__
 ("mcrÖ15, 0, %0, c7, c10, 5" : : "r" (0) : "memory");

50 
	}
}

51 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

53 
	`™droid_mem‹y_b¨rõr
();

54 
	}
}

56 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

58 (
	tku£r_mem‹y_b¨rõr
)();

59 (*(
ku£r_mem‹y_b¨rõr
 *)0xffff0fa0)();

60 
	}
}

61 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

63 
	`™droid_mem‹y_b¨rõr
();

64 
	}
}

67 
ölöe
 
öt32_t
 
	$™droid_©omic_acquúe_lﬂd
(vﬁ©ûêc⁄° 
öt32_t
 *
±r
)

69 
öt32_t
 
vÆue
 = *
±r
;

70 
	`™droid_mem‹y_b¨rõr
();

71  
vÆue
;

72 
	}
}

74 
ölöe
 
öt32_t
 
	$™droid_©omic_ªÀa£_lﬂd
(vﬁ©ûêc⁄° 
öt32_t
 *
±r
)

76 
	`™droid_mem‹y_b¨rõr
();

77  *
±r
;

78 
	}
}

80 
ölöe
 
	$™droid_©omic_acquúe_°‹e
(
öt32_t
 
vÆue
,

81 vﬁ©ûê
öt32_t
 *
±r
)

83 *
±r
 = 
vÆue
;

84 
	`™droid_mem‹y_b¨rõr
();

85 
	}
}

87 
ölöe
 
	$™droid_©omic_ªÀa£_°‹e
(
öt32_t
 
vÆue
,

88 vﬁ©ûê
öt32_t
 *
±r
)

90 
	`™droid_mem‹y_b¨rõr
();

91 *
±r
 = 
vÆue
;

92 
	}
}

94 #i‡
deföed
(
__thumb__
)

95 
™droid_©omic_ˇs
(
öt32_t
 
ﬁd_vÆue
, i¡32_à
√w_vÆue
,

96 vﬁ©ûê
öt32_t
 *
±r
);

97 #ñi‡
deföed
(
__ARM_HAVE_LDREX_STREX
)

98 
ölöe
 
	$™droid_©omic_ˇs
(
öt32_t
 
ﬁd_vÆue
, i¡32_à
√w_vÆue
,

99 vﬁ©ûê
öt32_t
 *
±r
)

101 
öt32_t
 
¥ev
, 
°©us
;

103 
__asm__
 
	`__vﬁ©ûe__
 ("ldrex %0, [%3]\n"

107 : "=&r" (
¥ev
), "=&r" (
°©us
), "+m"(*
±r
)

108 : "r" (
±r
), "Ir" (
ﬁd_vÆue
), "r" (
√w_vÆue
)

110 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

111  
¥ev
 !
ﬁd_vÆue
;

112 
	}
}

114 
ölöe
 
	$™droid_©omic_ˇs
(
öt32_t
 
ﬁd_vÆue
, i¡32_à
√w_vÆue
,

115 vﬁ©ûê
öt32_t
 *
±r
)

117 (
	tku£r_cmpxchg
)(
	töt32_t
, int32_t, volatile int32_t *);

118 
öt32_t
 
¥ev
, 
°©us
;

119 
¥ev
 = *
±r
;

121 
°©us
 = (*(
ku£r_cmpxchg
 *)0xffff0fc0)(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

122 i‡(
	`__buûtö_ex≥˘
(
°©us
 == 0, 1))

124 
¥ev
 = *
±r
;

125 } 
¥ev
 =
ﬁd_vÆue
);

127 
	}
}

130 
ölöe
 
	$™droid_©omic_acquúe_ˇs
(
öt32_t
 
ﬁd_vÆue
,

131 
öt32_t
 
√w_vÆue
,

132 vﬁ©ûê
öt32_t
 *
±r
)

134 
°©us
 = 
	`™droid_©omic_ˇs
(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

135 
	`™droid_mem‹y_b¨rõr
();

136  
°©us
;

137 
	}
}

139 
ölöe
 
	$™droid_©omic_ªÀa£_ˇs
(
öt32_t
 
ﬁd_vÆue
,

140 
öt32_t
 
√w_vÆue
,

141 vﬁ©ûê
öt32_t
 *
±r
)

143 
	`™droid_mem‹y_b¨rõr
();

144  
	`™droid_©omic_ˇs
(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

145 
	}
}

148 #i‡
deföed
(
__thumb__
)

149 
öt32_t
 
™droid_©omic_add
(öt32_à
ö¸emít
,

150 vﬁ©ûê
öt32_t
 *
±r
);

151 #ñi‡
deföed
(
__ARM_HAVE_LDREX_STREX
)

152 
ölöe
 
öt32_t
 
	$™droid_©omic_add
(
öt32_t
 
ö¸emít
,

153 vﬁ©ûê
öt32_t
 *
±r
)

155 
öt32_t
 
¥ev
, 
tmp
, 
°©us
;

156 
	`™droid_mem‹y_b¨rõr
();

158 
__asm__
 
	`__vﬁ©ûe__
 ("ldrex %0, [%4]\n"

161 : "=&r" (
¥ev
), "=&r" (
tmp
),

162 "=&r" (
°©us
), "+m" (*
±r
)

163 : "r" (
±r
), "Ir" (
ö¸emít
)

165 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

166  
¥ev
;

167 
	}
}

169 
ölöe
 
öt32_t
 
	$™droid_©omic_add
(
öt32_t
 
ö¸emít
,

170 vﬁ©ûê
öt32_t
 *
±r
)

172 
öt32_t
 
¥ev
, 
°©us
;

173 
	`™droid_mem‹y_b¨rõr
();

175 
¥ev
 = *
±r
;

176 
°©us
 = 
	`™droid_©omic_ˇs
(
¥ev
,Öªv + 
ö¸emít
, 
±r
);

177 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

178  
¥ev
;

179 
	}
}

182 
ölöe
 
öt32_t
 
	$™droid_©omic_öc
(vﬁ©ûê
öt32_t
 *
addr
)

184  
	`™droid_©omic_add
(1, 
addr
);

185 
	}
}

187 
ölöe
 
öt32_t
 
	$™droid_©omic_dec
(vﬁ©ûê
öt32_t
 *
addr
)

189  
	`™droid_©omic_add
(-1, 
addr
);

190 
	}
}

192 #i‡
deföed
(
__thumb__
)

193 
öt32_t
 
™droid_©omic_™d
(öt32_à
vÆue
, vﬁ©ûêöt32_à*
±r
);

194 #ñi‡
deföed
(
__ARM_HAVE_LDREX_STREX
)

195 
ölöe
 
öt32_t
 
	$™droid_©omic_™d
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

197 
öt32_t
 
¥ev
, 
tmp
, 
°©us
;

198 
	`™droid_mem‹y_b¨rõr
();

200 
__asm__
 
	`__vﬁ©ûe__
 ("ldrex %0, [%4]\n"

203 : "=&r" (
¥ev
), "=&r" (
tmp
),

204 "=&r" (
°©us
), "+m" (*
±r
)

205 : "r" (
±r
), "Ir" (
vÆue
)

207 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

208  
¥ev
;

209 
	}
}

211 
ölöe
 
öt32_t
 
	$™droid_©omic_™d
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

213 
öt32_t
 
¥ev
, 
°©us
;

214 
	`™droid_mem‹y_b¨rõr
();

216 
¥ev
 = *
±r
;

217 
°©us
 = 
	`™droid_©omic_ˇs
(
¥ev
,Öªv & 
vÆue
, 
±r
);

218 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

219  
¥ev
;

220 
	}
}

223 #i‡
deföed
(
__thumb__
)

224 
öt32_t
 
™droid_©omic_‹
(öt32_à
vÆue
, vﬁ©ûêöt32_à*
±r
);

225 #ñi‡
deföed
(
__ARM_HAVE_LDREX_STREX
)

226 
ölöe
 
öt32_t
 
	$™droid_©omic_‹
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

228 
öt32_t
 
¥ev
, 
tmp
, 
°©us
;

229 
	`™droid_mem‹y_b¨rõr
();

231 
__asm__
 
	`__vﬁ©ûe__
 ("ldrex %0, [%4]\n"

234 : "=&r" (
¥ev
), "=&r" (
tmp
),

235 "=&r" (
°©us
), "+m" (*
±r
)

236 : "r" (
±r
), "Ir" (
vÆue
)

238 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

239  
¥ev
;

240 
	}
}

242 
ölöe
 
öt32_t
 
	$™droid_©omic_‹
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

244 
öt32_t
 
¥ev
, 
°©us
;

245 
	`™droid_mem‹y_b¨rõr
();

247 
¥ev
 = *
±r
;

248 
°©us
 = 
	`™droid_©omic_ˇs
(
¥ev
,Öªv | 
vÆue
, 
±r
);

249 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

250  
¥ev
;

251 
	}
}

	@libs/libcutils/cutils/atomic-inline.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_INLINE_H


18 
	#ANDROID_CUTILS_ATOMIC_INLINE_H


	)

20 #ifde‡
__˝lu•lus


42 #i‡!
deföed
(
ANDROID_SMP
)

46 #i‡
deföed
(
__¨m__
)

47 
	~<cutûs/©omic-¨m.h
>

48 #ñi‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

49 
	~<cutûs/©omic-x86.h
>

50 #ñi‡
deföed
(
__mùs__
)

51 
	~<cutûs/©omic-mùs.h
>

53 #îr‹ 
©omic
 
›î©i⁄s
 
¨e
 
unsuµ‹ãd


56 #i‡
ANDROID_SMP
 == 0

57 
	#ANDROID_MEMBAR_FULL
 
™droid_compûî_b¨rõr


	)

59 
	#ANDROID_MEMBAR_FULL
 
™droid_mem‹y_b¨rõr


	)

62 #i‡
ANDROID_SMP
 == 0

63 
	#ANDROID_MEMBAR_STORE
 
™droid_compûî_b¨rõr


	)

65 
	#ANDROID_MEMBAR_STORE
 
™droid_mem‹y_°‹e_b¨rõr


	)

68 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/atomic-mips.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_MIPS_H


18 
	#ANDROID_CUTILS_ATOMIC_MIPS_H


	)

20 
	~<°döt.h
>

22 
ölöe
 
	$™droid_compûî_b¨rõr
()

24 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "memory");

25 
	}
}

27 #i‡
ANDROID_SMP
 == 0

28 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

30 
	`™droid_compûî_b¨rõr
();

31 
	}
}

32 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

34 
	`™droid_compûî_b¨rõr
();

35 
	}
}

37 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

39 
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "memory");

40 
	}
}

41 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

43 
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "memory");

44 
	}
}

47 
ölöe
 
öt32_t
 
	$™droid_©omic_acquúe_lﬂd
(vﬁ©ûêc⁄° 
öt32_t
 *
±r
)

49 
öt32_t
 
vÆue
 = *
±r
;

50 
	`™droid_mem‹y_b¨rõr
();

51  
vÆue
;

52 
	}
}

54 
ölöe
 
öt32_t
 
	$™droid_©omic_ªÀa£_lﬂd
(vﬁ©ûêc⁄° 
öt32_t
 *
±r
)

56 
	`™droid_mem‹y_b¨rõr
();

57  *
±r
;

58 
	}
}

60 
ölöe
 
	$™droid_©omic_acquúe_°‹e
(
öt32_t
 
vÆue
,

61 vﬁ©ûê
öt32_t
 *
±r
)

63 *
±r
 = 
vÆue
;

64 
	`™droid_mem‹y_b¨rõr
();

65 
	}
}

67 
ölöe
 
	$™droid_©omic_ªÀa£_°‹e
(
öt32_t
 
vÆue
,

68 vﬁ©ûê
öt32_t
 *
±r
)

70 
	`™droid_mem‹y_b¨rõr
();

71 *
±r
 = 
vÆue
;

72 
	}
}

74 
ölöe
 
	$™droid_©omic_ˇs
(
öt32_t
 
ﬁd_vÆue
, i¡32_à
√w_vÆue
,

75 vﬁ©ûê
öt32_t
 *
±r
)

77 
öt32_t
 
¥ev
, 
°©us
;

79 
__asm__
 
	`__vﬁ©ûe__
 (

86 : [
¥ev
] "=&r" (¥ev), [
°©us
] "=&r" (status)

87 : [
±r
] "r" (±r), [
ﬁd
] "r" (
ﬁd_vÆue
), [
√w_vÆue
] "r" (new_value)

89 } 
	`__buûtö_ex≥˘
(
°©us
 == 0, 0));

90  
¥ev
 !
ﬁd_vÆue
;

91 
	}
}

93 
ölöe
 
	$™droid_©omic_acquúe_ˇs
(
öt32_t
 
ﬁd_vÆue
,

94 
öt32_t
 
√w_vÆue
,

95 vﬁ©ûê
öt32_t
 *
±r
)

97 
°©us
 = 
	`™droid_©omic_ˇs
(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

98 
	`™droid_mem‹y_b¨rõr
();

99  
°©us
;

100 
	}
}

102 
ölöe
 
	$™droid_©omic_ªÀa£_ˇs
(
öt32_t
 
ﬁd_vÆue
,

103 
öt32_t
 
√w_vÆue
,

104 vﬁ©ûê
öt32_t
 *
±r
)

106 
	`™droid_mem‹y_b¨rõr
();

107  
	`™droid_©omic_ˇs
(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

108 
	}
}

111 
ölöe
 
öt32_t
 
	$™droid_©omic_sw≠
(
öt32_t
 
√w_vÆue
,

112 vﬁ©ûê
öt32_t
 *
±r
)

114 
öt32_t
 
¥ev
, 
°©us
;

116 
__asm__
 
	`__vﬁ©ûe__
 (

120 : [
¥ev
] "=&r" (¥ev), [
°©us
] "=&r" (status)

121 : [
±r
] "r" (±r), [
√w_vÆue
] "r" (new_value)

123 } 
	`__buûtö_ex≥˘
(
°©us
 == 0, 0));

124 
	`™droid_mem‹y_b¨rõr
();

125  
¥ev
;

126 
	}
}

128 
ölöe
 
öt32_t
 
	$™droid_©omic_add
(
öt32_t
 
ö¸emít
,

129 vﬁ©ûê
öt32_t
 *
±r
)

131 
öt32_t
 
¥ev
, 
°©us
;

132 
	`™droid_mem‹y_b¨rõr
();

134 
__asm__
 
	`__vﬁ©ûe__
 (

138 : [
°©us
] "=&r" (°©us), [
¥ev
] "=&r" (prev)

139 : [
±r
] "r" (±r), [
öc
] "Ir" (
ö¸emít
)

141 } 
	`__buûtö_ex≥˘
(
°©us
 == 0, 0));

142  
¥ev
;

143 
	}
}

145 
ölöe
 
öt32_t
 
	$™droid_©omic_öc
(vﬁ©ûê
öt32_t
 *
addr
)

147  
	`™droid_©omic_add
(1, 
addr
);

148 
	}
}

150 
ölöe
 
öt32_t
 
	$™droid_©omic_dec
(vﬁ©ûê
öt32_t
 *
addr
)

152  
	`™droid_©omic_add
(-1, 
addr
);

153 
	}
}

155 
ölöe
 
öt32_t
 
	$™droid_©omic_™d
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

157 
öt32_t
 
¥ev
, 
°©us
;

158 
	`™droid_mem‹y_b¨rõr
();

160 
__asm__
 
	`__vﬁ©ûe__
 (

164 : [
¥ev
] "=&r" (¥ev), [
°©us
] "=&r" (status)

165 : [
±r
] "r" (±r), [
vÆue
] "Ir" (value)

167 } 
	`__buûtö_ex≥˘
(
°©us
 == 0, 0));

168  
¥ev
;

169 
	}
}

171 
ölöe
 
öt32_t
 
	$™droid_©omic_‹
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

173 
öt32_t
 
¥ev
, 
°©us
;

174 
	`™droid_mem‹y_b¨rõr
();

176 
__asm__
 
	`__vﬁ©ûe__
 (

180 : [
¥ev
] "=&r" (¥ev), [
°©us
] "=&r" (status)

181 : [
±r
] "r" (±r), [
vÆue
] "Ir" (value)

183 } 
	`__buûtö_ex≥˘
(
°©us
 == 0, 0));

184  
¥ev
;

185 
	}
}

	@libs/libcutils/cutils/atomic-x86.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_X86_H


18 
	#ANDROID_CUTILS_ATOMIC_X86_H


	)

20 
	~<°döt.h
>

22 
ölöe
 
	$™droid_compûî_b¨rõr
()

24 
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "memory");

25 
	}
}

27 #i‡
ANDROID_SMP
 == 0

28 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

30 
	`™droid_compûî_b¨rõr
();

31 
	}
}

32 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

34 
	`™droid_compûî_b¨rõr
();

35 
	}
}

37 
ölöe
 
	$™droid_mem‹y_b¨rõr
()

39 
__asm__
 
	`__vﬁ©ûe__
 ("mfence" : : : "memory");

40 
	}
}

41 
ölöe
 
	$™droid_mem‹y_°‹e_b¨rõr
()

43 
	`™droid_compûî_b¨rõr
();

44 
	}
}

47 
ölöe
 
öt32_t
 
	$™droid_©omic_acquúe_lﬂd
(vﬁ©ûêc⁄° 
öt32_t
 *
±r
)

49 
öt32_t
 
vÆue
 = *
±r
;

50 
	`™droid_compûî_b¨rõr
();

51  
vÆue
;

52 
	}
}

54 
ölöe
 
öt32_t
 
	$™droid_©omic_ªÀa£_lﬂd
(vﬁ©ûêc⁄° 
öt32_t
 *
±r
)

56 
	`™droid_mem‹y_b¨rõr
();

57  *
±r
;

58 
	}
}

60 
ölöe
 
	$™droid_©omic_acquúe_°‹e
(
öt32_t
 
vÆue
,

61 vﬁ©ûê
öt32_t
 *
±r
)

63 *
±r
 = 
vÆue
;

64 
	`™droid_mem‹y_b¨rõr
();

65 
	}
}

67 
ölöe
 
	$™droid_©omic_ªÀa£_°‹e
(
öt32_t
 
vÆue
,

68 vﬁ©ûê
öt32_t
 *
±r
)

70 
	`™droid_compûî_b¨rõr
();

71 *
±r
 = 
vÆue
;

72 
	}
}

74 
ölöe
 
	$™droid_©omic_ˇs
(
öt32_t
 
ﬁd_vÆue
, i¡32_à
√w_vÆue
,

75 vﬁ©ûê
öt32_t
 *
±r
)

77 
öt32_t
 
¥ev
;

78 
__asm__
 
	`__vﬁ©ûe__
 ("lock; cmpxchgl %1, %2"

79 : "˜" (
¥ev
)

80 : "q" (
√w_vÆue
), "m" (*
±r
), "0" (
ﬁd_vÆue
)

82  
¥ev
 !
ﬁd_vÆue
;

83 
	}
}

85 
ölöe
 
	$™droid_©omic_acquúe_ˇs
(
öt32_t
 
ﬁd_vÆue
,

86 
öt32_t
 
√w_vÆue
,

87 vﬁ©ûê
öt32_t
 *
±r
)

90  
	`™droid_©omic_ˇs
(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

91 
	}
}

93 
ölöe
 
	$™droid_©omic_ªÀa£_ˇs
(
öt32_t
 
ﬁd_vÆue
,

94 
öt32_t
 
√w_vÆue
,

95 vﬁ©ûê
öt32_t
 *
±r
)

98  
	`™droid_©omic_ˇs
(
ﬁd_vÆue
, 
√w_vÆue
, 
±r
);

99 
	}
}

101 
ölöe
 
öt32_t
 
	$™droid_©omic_add
(
öt32_t
 
ö¸emít
,

102 vﬁ©ûê
öt32_t
 *
±r
)

104 
__asm__
 
	`__vﬁ©ûe__
 ("lock; xaddl %0, %1"

105 : "+r" (
ö¸emít
), "+m" (*
±r
)

108  
ö¸emít
;

109 
	}
}

111 
ölöe
 
öt32_t
 
	$™droid_©omic_öc
(vﬁ©ûê
öt32_t
 *
addr
)

113  
	`™droid_©omic_add
(1, 
addr
);

114 
	}
}

116 
ölöe
 
öt32_t
 
	$™droid_©omic_dec
(vﬁ©ûê
öt32_t
 *
addr
)

118  
	`™droid_©omic_add
(-1, 
addr
);

119 
	}
}

121 
ölöe
 
öt32_t
 
	$™droid_©omic_™d
(
öt32_t
 
vÆue
,

122 vﬁ©ûê
öt32_t
 *
±r
)

124 
öt32_t
 
¥ev
, 
°©us
;

126 
¥ev
 = *
±r
;

127 
°©us
 = 
	`™droid_©omic_ˇs
(
¥ev
,Öªv & 
vÆue
, 
±r
);

128 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

129  
¥ev
;

130 
	}
}

132 
ölöe
 
öt32_t
 
	$™droid_©omic_‹
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_à*
±r
)

134 
öt32_t
 
¥ev
, 
°©us
;

136 
¥ev
 = *
±r
;

137 
°©us
 = 
	`™droid_©omic_ˇs
(
¥ev
,Öªv | 
vÆue
, 
±r
);

138 } 
	`__buûtö_ex≥˘
(
°©us
 != 0, 0));

139  
¥ev
;

140 
	}
}

	@libs/libcutils/cutils/atomic.h

17 #i‚de‡
ANDROID_CUTILS_ATOMIC_H


18 
	#ANDROID_CUTILS_ATOMIC_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


68 
öt32_t
 
™droid_©omic_öc
(vﬁ©ûêöt32_t* 
addr
);

69 
öt32_t
 
™droid_©omic_dec
(vﬁ©ûêöt32_t* 
addr
);

70 
öt32_t
 
™droid_©omic_add
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

71 
öt32_t
 
™droid_©omic_™d
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

72 
öt32_t
 
™droid_©omic_‹
(öt32_à
vÆue
, vﬁ©ûêöt32_t* 
addr
);

80 
öt32_t
 
™droid_©omic_acquúe_lﬂd
(vﬁ©ûêc⁄° i¡32_t* 
addr
);

81 
öt32_t
 
™droid_©omic_ªÀa£_lﬂd
(vﬁ©ûêc⁄° i¡32_t* 
addr
);

89 
™droid_©omic_acquúe_°‹e
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_t* 
addr
);

90 
™droid_©omic_ªÀa£_°‹e
(
öt32_t
 
vÆue
, vﬁ©ûêöt32_t* 
addr
);

104 
™droid_©omic_acquúe_ˇs
(
öt32_t
 
ﬁdvÆue
, i¡32_à
√wvÆue
,

105 vﬁ©ûê
öt32_t
* 
addr
);

106 
™droid_©omic_ªÀa£_ˇs
(
öt32_t
 
ﬁdvÆue
, i¡32_à
√wvÆue
,

107 vﬁ©ûê
öt32_t
* 
addr
);

114 
	#™droid_©omic_wrôe
 
™droid_©omic_ªÀa£_°‹e


	)

115 
	#™droid_©omic_cmpxchg
 
™droid_©omic_ªÀa£_ˇs


	)

117 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/bitops.h

17 #i‚de‡
__CUTILS_BITOPS_H


18 
	#__CUTILS_BITOPS_H


	)

20 
	~<sys/cdefs.h
>

22 
__BEGIN_DECLS


24 
ölöe
 
	$p›cou¡
(
x
)

26  
	`__buûtö_p›cou¡
(
x
);

27 
	}
}

29 
ölöe
 
	$p›cou¡l
(
x
)

31  
	`__buûtö_p›cou¡l
(
x
);

32 
	}
}

34 
ölöe
 
	$p›cou¡Œ
(
x
)

36  
	`__buûtö_p›cou¡Œ
(
x
);

37 
	}
}

39 
	g__END_DECLS


	@libs/libcutils/cutils/compiler.h

17 #i‚de‡
ANDROID_CUTILS_COMPILER_H


18 
	#ANDROID_CUTILS_COMPILER_H


	)

24 #ifde‡
__˝lu•lus


25 
	#CC_LIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 
åue
 ))

	)

26 
	#CC_UNLIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 
Ál£
 ))

	)

28 
	#CC_LIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 1 ))

	)

29 
	#CC_UNLIKELY
–
exp
 ) (
	`__buûtö_ex≥˘
–!!”xp), 0 ))

	)

42 
	#ANDROID_API
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

	@libs/libcutils/cutils/config_utils.h

17 #i‚de‡
__CUTILS_CONFIG_UTILS_H


18 
	#__CUTILS_CONFIG_UTILS_H


	)

20 #ifde‡
__˝lu•lus


24 
˙ode
 
	t˙ode
;

27 
	s˙ode


29 
˙ode
 *
√xt
;

30 
˙ode
 *
fú°_chûd
;

31 
˙ode
 *
œ°_chûd
;

32 c⁄° *
«me
;

33 c⁄° *
vÆue
;

37 
c⁄fig_lﬂd
(
˙ode
 *
roŸ
, *
d©a
);

40 
c⁄fig_lﬂd_fûe
(
˙ode
 *
roŸ
, c⁄° *
‚
);

43 
˙ode
* 
c⁄fig_node
(c⁄° *
«me
, c⁄° *
vÆue
);

46 
˙ode
* 
c⁄fig_föd
(˙odê*
roŸ
, c⁄° *
«me
);

49 
c⁄fig_boﬁ
(
˙ode
 *
roŸ
, c⁄° *
«me
, 
_deÁu…
);

52 c⁄° * 
c⁄fig_°r
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
_deÁu…
);

55 
c⁄fig_£t
(
˙ode
 *
roŸ
, c⁄° *
«me
, c⁄° *
vÆue
);

58 
c⁄fig_‰ì
(
˙ode
 *
roŸ
);

60 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/cpu_info.h

17 #i‚de‡
__CUTILS_CPU_INFO_H


18 
	#__CUTILS_CPU_INFO_H


	)

20 #ifde‡
__˝lu•lus


28 c⁄° * 
gë_˝u_£rül_numbî
();

30 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/debugger.h

17 #i‚de‡
__CUTILS_DEBUGGER_H


18 
	#__CUTILS_DEBUGGER_H


	)

20 
	~<sys/ty≥s.h
>

22 #ifde‡
__˝lu•lus


26 
	#DEBUGGER_SOCKET_NAME
 "™droid:debuggîd"

	)

30 
DEBUGGER_ACTION_CRASH
,

32 
DEBUGGER_ACTION_DUMP_TOMBSTONE
,

34 
DEBUGGER_ACTION_DUMP_BACKTRACE
,

35 } 
	tdebuggî_a˘i⁄_t
;

39 
debuggî_a˘i⁄_t
 
a˘i⁄
;

40 
pid_t
 
tid
;

41 } 
	tdebuggî_msg_t
;

47 
dump_tomb°⁄e
(
pid_t
 
tid
, * 
∑thbuf
, 
size_t
 
∑thÀn
);

52 
dump_backåa˚_to_fûe
(
pid_t
 
tid
, 
fd
);

54 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/dir_hash.h

18 
	mSHA_1
,

19 } 
	tHashAlg‹ôhm
;

21 
gë_fûe_hash
(
HashAlg‹ôhm
 
Æg‹ôhm
, c⁄° *
∑th
,

22 *
ouçut_°rög
, 
size_t
 
max_ouçut_°rög
);

24 
gë_ªcursive_hash_m™i„°
(
HashAlg‹ôhm
 
Æg‹ôhm
,

25 c⁄° *
dúe˘‹y_∑th
,

26 **
ouçut_°rög
);

	@libs/libcutils/cutils/event_tag_map.h

17 #i‚de‡
_LIBS_CUTILS_EVENTTAGMAP_H


18 
	#_LIBS_CUTILS_EVENTTAGMAP_H


	)

20 #ifde‡
__˝lu•lus


24 
	#EVENT_TAG_MAP_FILE
 "/sy°em/ëc/evít-log-ègs"

	)

26 
EvítTagM≠
;

27 
EvítTagM≠
 
	tEvítTagM≠
;

34 
EvítTagM≠
* 
™droid_›íEvítTagM≠
(c⁄° * 
fûeName
);

39 
™droid_˛o£EvítTagM≠
(
EvítTagM≠
* 
m≠
);

44 c⁄° * 
™droid_lookupEvítTag
(c⁄° 
EvítTagM≠
* 
m≠
, 
èg
);

46 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/fs.h

17 #i‚de‡
__CUTILS_FS_H


18 
	#__CUTILS_FS_H


	)

20 
	~<sys/ty≥s.h
>

27 #i‚de‡
TEMP_FAILURE_RETRY


29 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

30 
	`ty≥of
 (
exp
Ë
_rc
; \

32 
_rc
 = (
exp
); \

33 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

34 
_rc
; })

	)

37 #ifde‡
__˝lu•lus


44 
fs_¥ï¨e_dú
(c⁄° * 
∑th
, 
mode_t
 
mode
, 
uid_t
 
uid
, 
gid_t
 
gid
);

50 
fs_ªad_©omic_öt
(c⁄° * 
∑th
, * 
vÆue
);

56 
fs_wrôe_©omic_öt
(c⁄° * 
∑th
, 
vÆue
);

58 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/hashmap.h

21 #i‚de‡
__HASHMAP_H


22 
	#__HASHMAP_H


	)

24 
	~<°dboﬁ.h
>

25 
	~<°dlib.h
>

27 #ifde‡
__˝lu•lus


32 
Hashm≠
 
	tHashm≠
;

41 
Hashm≠
* 
hashm≠Cª©e
(
size_t
 
öôülC≠acôy
,

42 (*
hash
)(* 
key
), 
boﬁ
 (*
equÆs
)(* 
keyA
, * 
keyB
));

47 
hashm≠Fªe
(
Hashm≠
* 
m≠
);

53 
hashm≠Hash
(* 
key
, 
size_t
 
keySize
);

62 * 
hashm≠Put
(
Hashm≠
* 
m≠
, * 
key
, * 
vÆue
);

68 * 
hashm≠Gë
(
Hashm≠
* 
m≠
, * 
key
);

73 
boﬁ
 
hashm≠C⁄èösKey
(
Hashm≠
* 
m≠
, * 
key
);

82 * 
hashm≠Memoize
(
Hashm≠
* 
m≠
, * 
key
,

83 * (*
öôülVÆue
)(* 
key
, * 
c⁄ãxt
), * context);

89 * 
hashm≠Remove
(
Hashm≠
* 
m≠
, * 
key
);

94 
size_t
 
hashm≠Size
(
Hashm≠
* 
m≠
);

100 
hashm≠F‹Each
(
Hashm≠
* 
m≠
,

101 
boﬁ
 (*
ˇŒback
)(* 
key
, * 
vÆue
, * 
c⁄ãxt
),

102 * 
c⁄ãxt
);

111 
hashm≠Lock
(
Hashm≠
* 
m≠
);

116 
hashm≠U∆ock
(
Hashm≠
* 
m≠
);

125 
hashm≠I¡Hash
(* 
key
);

130 
boﬁ
 
hashm≠I¡EquÆs
(* 
keyA
, * 
keyB
);

139 
size_t
 
hashm≠CuºítC≠acôy
(
Hashm≠
* 
m≠
);

144 
size_t
 
hashm≠Cou¡Cﬁlisi⁄s
(
Hashm≠
* 
m≠
);

146 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/iosched_policy.h

17 #i‚de‡
__CUTILS_IOSCHED_POLICY_H


18 
	#__CUTILS_IOSCHED_POLICY_H


	)

20 #ifde‡
__˝lu•lus


25 
IoSchedCœss_NONE
,

26 
IoSchedCœss_RT
,

27 
IoSchedCœss_BE
,

28 
IoSchedCœss_IDLE
,

29 } 
	tIoSchedCœss
;

31 
™droid_£t_i›rio
(
pid
, 
IoSchedCœss
 
˛azz
, 
i›rio
);

32 
™droid_gë_i›rio
(
pid
, 
IoSchedCœss
 *
˛azz
, *
i›rio
);

34 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/jstring.h

17 #i‚de‡
__CUTILS_STRING16_H


18 
	#__CUTILS_STRING16_H


	)

20 
	~<°döt.h
>

21 
	~<°ddef.h
>

23 #ifde‡
__˝lu•lus


27 
uöt16_t
 
	tch¨16_t
;

29 * 
°∫dup16to8
 (c⁄° 
ch¨16_t
* 
s
, 
size_t
 
n
);

30 
size_t
 
°∫Àn16to8
 (c⁄° 
ch¨16_t
* 
s
, size_à
n
);

31 * 
°∫˝y16to8
 (*
de°
, c⁄° 
ch¨16_t
*
s
, 
size_t
 
n
);

33 
ch¨16_t
 * 
°rdup8to16
 (c⁄° * 
s
, 
size_t
 *
out_Àn
);

34 
size_t
 
°æí8to16
 (c⁄° * 
utf8Så
);

35 
ch¨16_t
 * 
°r˝y8to16
 (ch¨16_à*
de°
, c⁄° *
s
, 
size_t
 *
out_Àn
);

36 
ch¨16_t
 * 
°r˝yÀn8to16
 (ch¨16_à*
de°
, c⁄° *
s
, 
Àngth
,

37 
size_t
 *
out_Àn
);

39 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/klog.h

17 #i‚de‡
_CUTILS_KLOG_H_


18 
	#_CUTILS_KLOG_H_


	)

20 
klog_öô
();

21 
klog_£t_Àvñ
(
Àvñ
);

22 
klog_˛o£
();

23 
	$klog_wrôe
(
Àvñ
, c⁄° *
fmt
, ...)

24 
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

26 
	#KLOG_ERROR
(
èg
,
x
...Ë
	`klog_wrôe
(3, "<3>"Åag ": " x)

	)

27 
	#KLOG_WARNING
(
èg
,
x
...Ë
	`klog_wrôe
(4, "<4>"Åag ": " x)

	)

28 
	#KLOG_NOTICE
(
èg
,
x
...Ë
	`klog_wrôe
(5, "<5>"Åag ": " x)

	)

29 
	#KLOG_INFO
(
èg
,
x
...Ë
	`klog_wrôe
(6, "<6>"Åag ": " x)

	)

30 
	#KLOG_DEBUG
(
èg
,
x
...Ë
	`klog_wrôe
(7, "<7>"Åag ": " x)

	)

32 
	#KLOG_DEFAULT_LEVEL
 3

	)

	@libs/libcutils/cutils/list.h

17 #i‚de‡
_CUTILS_LIST_H_


18 
	#_CUTILS_LIST_H_


	)

20 
	~<°ddef.h
>

22 #ifde‡
__˝lu•lus


26 
	sli°node


28 
li°node
 *
√xt
;

29 
li°node
 *
¥ev
;

32 
	#node_to_ôem
(
node
, 
c⁄èöî
, 
membî
) \

33 (
c⁄èöî
 *Ë(((*Ë(
node
)Ë- 
	`off£tof
(c⁄èöî, 
membî
))

	)

35 
	#li°_de˛¨e
(
«me
) \

36 
li°node
 
«me
 = { \

37 .
√xt
 = &
«me
, \

38 .
¥ev
 = &
«me
, \

39 }

	)

41 
	#li°_f‹_óch
(
node
, 
li°
) \

42 
node
 = (
li°
)->
√xt
;Çodê!÷i°);Çodênode->√xt)

	)

44 
	#li°_f‹_óch_ªvî£
(
node
, 
li°
) \

45 
node
 = (
li°
)->
¥ev
;Çodê!÷i°);Çodênode->¥ev)

	)

47 
li°_öô
(
li°node
 *
li°
);

48 
li°_add_èû
(
li°node
 *
li°
, li°nodê*
ôem
);

49 
li°_ªmove
(
li°node
 *
ôem
);

51 
	#li°_em±y
(
li°
Ë(÷i°Ë=÷i°)->
√xt
)

	)

52 
	#li°_hód
(
li°
Ë(÷i°)->
√xt
)

	)

53 
	#li°_èû
(
li°
Ë(÷i°)->
¥ev
)

	)

55 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/log.h

28 #i‚de‡
_LIBS_CUTILS_LOG_H


29 
	#_LIBS_CUTILS_LOG_H


	)

31 
	~<°dio.h
>

32 
	~<time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<uni°d.h
>

35 #ifde‡
HAVE_PTHREADS


36 
	~<±hªad.h
>

38 
	~<°d¨g.h
>

40 #ifde‡
__˝lu•lus


44 
	#ALOGV
(
x
,
¨g
...Ë
	`¥ötf
("[V] "x,##¨g)

	)

45 
	#ALOGD
(
x
,
¨g
...Ë
	`¥ötf
("[D] "x,##¨g)

	)

46 
	#ALOGI
(
x
,
¨g
...Ë
	`¥ötf
("[I] "x,##¨g)

	)

47 
	#ALOGW
(
x
,
¨g
...Ë
	`¥ötf
("[W] "x,##¨g)

	)

50 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/log_bak_for_android.h

28 #i‚de‡
_LIBS_CUTILS_LOG_H


29 
	#_LIBS_CUTILS_LOG_H


	)

31 
	~<°dio.h
>

32 
	~<time.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<uni°d.h
>

35 #ifde‡
HAVE_PTHREADS


36 
	~<±hªad.h
>

38 
	~<°d¨g.h
>

40 
	~<cutûs/uio.h
>

41 
	~<cutûs/logd.h
>

43 #ifde‡
__˝lu•lus


55 #i‚de‡
LOG_NDEBUG


56 #ifde‡
NDEBUG


57 
	#LOG_NDEBUG
 1

	)

59 
	#LOG_NDEBUG
 0

	)

68 #i‚de‡
LOG_TAG


69 
	#LOG_TAG
 
NULL


	)

77 #i‚de‡
ALOGV


78 #i‡
LOG_NDEBUG


79 
	#ALOGV
(...Ë(()0)

	)

81 
	#ALOGV
(...Ë(()
	`ALOG
(
LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

85 
	#CONDITION
(
c⁄d
Ë(
	`__buûtö_ex≥˘
((c⁄d)!=0, 0))

	)

87 #i‚de‡
ALOGV_IF


88 #i‡
LOG_NDEBUG


89 
	#ALOGV_IF
(
c⁄d
, ...Ë(()0)

	)

91 
	#ALOGV_IF
(
c⁄d
, ...) \

92 –(
	`CONDITION
(
c⁄d
)) \

93 ? (()
	`ALOG
(
LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
)) \

94 : ()0 )

	)

101 #i‚de‡
ALOGD


102 
	#ALOGD
(...Ë(()
	`ALOG
(
LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

105 #i‚de‡
ALOGD_IF


106 
	#ALOGD_IF
(
c⁄d
, ...) \

107 –(
	`CONDITION
(
c⁄d
)) \

108 ? (()
	`ALOG
(
LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
)) \

109 : ()0 )

	)

115 #i‚de‡
ALOGI


116 
	#ALOGI
(...Ë(()
	`ALOG
(
LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

119 #i‚de‡
ALOGI_IF


120 
	#ALOGI_IF
(
c⁄d
, ...) \

121 –(
	`CONDITION
(
c⁄d
)) \

122 ? (()
	`ALOG
(
LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
)) \

123 : ()0 )

	)

129 #i‚de‡
ALOGW


130 
	#ALOGW
(...Ë(()
	`ALOG
(
LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

133 #i‚de‡
ALOGW_IF


134 
	#ALOGW_IF
(
c⁄d
, ...) \

135 –(
	`CONDITION
(
c⁄d
)) \

136 ? (()
	`ALOG
(
LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
)) \

137 : ()0 )

	)

143 #i‚de‡
ALOGE


144 
	#ALOGE
(...Ë(()
	`ALOG
(
LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

147 #i‚de‡
ALOGE_IF


148 
	#ALOGE_IF
(
c⁄d
, ...) \

149 –(
	`CONDITION
(
c⁄d
)) \

150 ? (()
	`ALOG
(
LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
)) \

151 : ()0 )

	)

160 #i‚de‡
IF_ALOGV


161 #i‡
LOG_NDEBUG


162 
	#IF_ALOGV
(Ëi‡(
Ál£
)

	)

164 
	#IF_ALOGV
(Ë
	`IF_ALOG
(
LOG_VERBOSE
, 
LOG_TAG
)

	)

172 #i‚de‡
IF_ALOGD


173 
	#IF_ALOGD
(Ë
	`IF_ALOG
(
LOG_DEBUG
, 
LOG_TAG
)

	)

180 #i‚de‡
IF_ALOGI


181 
	#IF_ALOGI
(Ë
	`IF_ALOG
(
LOG_INFO
, 
LOG_TAG
)

	)

188 #i‚de‡
IF_ALOGW


189 
	#IF_ALOGW
(Ë
	`IF_ALOG
(
LOG_WARN
, 
LOG_TAG
)

	)

196 #i‚de‡
IF_ALOGE


197 
	#IF_ALOGE
(Ë
	`IF_ALOG
(
LOG_ERROR
, 
LOG_TAG
)

	)

206 #i‚de‡
SLOGV


207 #i‡
LOG_NDEBUG


208 
	#SLOGV
(...Ë(()0)

	)

210 
	#SLOGV
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

214 
	#CONDITION
(
c⁄d
Ë(
	`__buûtö_ex≥˘
((c⁄d)!=0, 0))

	)

216 #i‚de‡
SLOGV_IF


217 #i‡
LOG_NDEBUG


218 
	#SLOGV_IF
(
c⁄d
, ...Ë(()0)

	)

220 
	#SLOGV_IF
(
c⁄d
, ...) \

221 –(
	`CONDITION
(
c⁄d
)) \

222 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_VERBOSE
, 
LOG_TAG
, 
__VA_ARGS__
)) \

223 : ()0 )

	)

230 #i‚de‡
SLOGD


231 
	#SLOGD
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

234 #i‚de‡
SLOGD_IF


235 
	#SLOGD_IF
(
c⁄d
, ...) \

236 –(
	`CONDITION
(
c⁄d
)) \

237 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_DEBUG
, 
LOG_TAG
, 
__VA_ARGS__
)) \

238 : ()0 )

	)

244 #i‚de‡
SLOGI


245 
	#SLOGI
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

248 #i‚de‡
SLOGI_IF


249 
	#SLOGI_IF
(
c⁄d
, ...) \

250 –(
	`CONDITION
(
c⁄d
)) \

251 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_INFO
, 
LOG_TAG
, 
__VA_ARGS__
)) \

252 : ()0 )

	)

258 #i‚de‡
SLOGW


259 
	#SLOGW
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

262 #i‚de‡
SLOGW_IF


263 
	#SLOGW_IF
(
c⁄d
, ...) \

264 –(
	`CONDITION
(
c⁄d
)) \

265 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_WARN
, 
LOG_TAG
, 
__VA_ARGS__
)) \

266 : ()0 )

	)

272 #i‚de‡
SLOGE


273 
	#SLOGE
(...Ë(()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
))

	)

276 #i‚de‡
SLOGE_IF


277 
	#SLOGE_IF
(
c⁄d
, ...) \

278 –(
	`CONDITION
(
c⁄d
)) \

279 ? (()
	`__™droid_log_buf_¥öt
(
LOG_ID_SYSTEM
, 
ANDROID_LOG_ERROR
, 
LOG_TAG
, 
__VA_ARGS__
)) \

280 : ()0 )

	)

293 #i‚de‡
LOG_ALWAYS_FATAL_IF


294 
	#LOG_ALWAYS_FATAL_IF
(
c⁄d
, ...) \

295 –(
	`CONDITION
(
c⁄d
)) \

296 ? (()
	`™droid_¥ötAs£π
(#c⁄d, 
LOG_TAG
, ## 
__VA_ARGS__
)) \

297 : ()0 )

	)

300 #i‚de‡
LOG_ALWAYS_FATAL


301 
	#LOG_ALWAYS_FATAL
(...) \

302 –(()
	`™droid_¥ötAs£π
(
NULL
, 
LOG_TAG
, ## 
__VA_ARGS__
)Ë)

	)

309 #i‡
LOG_NDEBUG


311 #i‚de‡
LOG_FATAL_IF


312 
	#LOG_FATAL_IF
(
c⁄d
, ...Ë(()0)

	)

314 #i‚de‡
LOG_FATAL


315 
	#LOG_FATAL
(...Ë(()0)

	)

320 #i‚de‡
LOG_FATAL_IF


321 
	#LOG_FATAL_IF
(
c⁄d
, ...Ë
	`LOG_ALWAYS_FATAL_IF
(c⁄d, ## 
__VA_ARGS__
)

	)

323 #i‚de‡
LOG_FATAL


324 
	#LOG_FATAL
(...Ë
	`LOG_ALWAYS_FATAL
(
__VA_ARGS__
)

	)

333 #i‚de‡
ALOG_ASSERT


334 
	#ALOG_ASSERT
(
c⁄d
, ...Ë
	`LOG_FATAL_IF
(!(c⁄d), ## 
__VA_ARGS__
)

	)

348 #i‚de‡
ALOG


349 
	#ALOG
(
¥i‹ôy
, 
èg
, ...) \

350 
	`LOG_PRI
(
ANDROID_
##
¥i‹ôy
, 
èg
, 
__VA_ARGS__
)

	)

356 #i‚de‡
LOG_PRI


357 
	#LOG_PRI
(
¥i‹ôy
, 
èg
, ...) \

358 
	`™droid_¥ötLog
(
¥i‹ôy
, 
èg
, 
__VA_ARGS__
)

	)

364 #i‚de‡
LOG_PRI_VA


365 
	#LOG_PRI_VA
(
¥i‹ôy
, 
èg
, 
fmt
, 
¨gs
) \

366 
	`™droid_v¥ötLog
(
¥i‹ôy
, 
NULL
, 
èg
, 
fmt
, 
¨gs
)

	)

372 #i‚de‡
IF_ALOG


373 
	#IF_ALOG
(
¥i‹ôy
, 
èg
) \

374 i‡(
	`™droid_ã°Log
(
ANDROID_
##
¥i‹ôy
, 
èg
))

	)

388 
EVENT_TYPE_INT
 = 0,

389 
EVENT_TYPE_LONG
 = 1,

390 
EVENT_TYPE_STRING
 = 2,

391 
EVENT_TYPE_LIST
 = 3,

392 } 
	tAndroidEvítLogTy≥
;

395 #i‚de‡
LOG_EVENT_INT


396 
	#LOG_EVENT_INT
(
_èg
, 
_vÆue
) { \

397 
ötBuf
 = 
_vÆue
; \

398 (Ë
	`™droid_btWrôeLog
(
_èg
, 
EVENT_TYPE_INT
, &
ötBuf
, \

399 (
ötBuf
)); \

400 }

	)

402 #i‚de‡
LOG_EVENT_LONG


403 
	#LOG_EVENT_LONG
(
_èg
, 
_vÆue
) { \

404 
l⁄gBuf
 = 
_vÆue
; \

405 (Ë
	`™droid_btWrôeLog
(
_èg
, 
EVENT_TYPE_LONG
, &
l⁄gBuf
, \

406 (
l⁄gBuf
)); \

407 }

	)

409 #i‚de‡
LOG_EVENT_STRING


410 
	#LOG_EVENT_STRING
(
_èg
, 
_vÆue
) \

411 ((Ë0Ë

	)

421 
	#™droid_¥ötLog
(
¥io
, 
èg
, 
fmt
...) \

422 
	`__™droid_log_¥öt
(
¥io
, 
èg
, 
fmt
)

	)

424 
	#™droid_v¥ötLog
(
¥io
, 
c⁄d
, 
èg
, 
fmt
...) \

425 
	`__™droid_log_v¥öt
(
¥io
, 
èg
, 
fmt
)

	)

435 
	#__™droid_£c⁄d
(
dummy
, 
£c⁄d
, ...Ë
	)
second

440 
	#__™droid_ª°
(
fú°
, ...Ë, ## 
__VA_ARGS__


	)

442 
	#™droid_¥ötAs£π
(
c⁄d
, 
èg
, 
fmt
...) \

443 
	`__™droid_log_as£π
(
c⁄d
, 
èg
, \

444 
	`__™droid_£c⁄d
(0, ## 
fmt
, 
NULL
Ë
	`__™droid_ª°
(fmt))

	)

446 
	#™droid_wrôeLog
(
¥io
, 
èg
, 
ãxt
) \

447 
	`__™droid_log_wrôe
(
¥io
, 
èg
, 
ãxt
)

	)

449 
	#™droid_bWrôeLog
(
èg
, 
∑ylﬂd
, 
Àn
) \

450 
	`__™droid_log_bwrôe
(
èg
, 
∑ylﬂd
, 
Àn
)

	)

451 
	#™droid_btWrôeLog
(
èg
, 
ty≥
, 
∑ylﬂd
, 
Àn
) \

452 
	`__™droid_log_btwrôe
(
èg
, 
ty≥
, 
∑ylﬂd
, 
Àn
)

	)

455 
	#™droid_ã°Log
(
¥io
, 
èg
Ë(1)

	)

456 
	#™droid_wrôevLog
(
vec
,
num
Ëdo{}0)

	)

457 
	#™droid_wrôe1Log
(
°r
,
Àn
Ëdo{}0)

	)

458 
	#™droid_£tMöPri‹ôy
(
èg
, 
¥io
Ëdo{}0)

	)

460 
	#™droid_logToFûe
(
èg
, 
fûe
Ë(0)

	)

461 
	#™droid_logToFd
(
èg
, 
fd
Ë(0)

	)

464 
LOG_ID_MAIN
 = 0,

465 
LOG_ID_RADIO
 = 1,

466 
LOG_ID_EVENTS
 = 2,

467 
LOG_ID_SYSTEM
 = 3,

469 
LOG_ID_MAX


470 } 
	tlog_id_t
;

475 
__™droid_log_buf_wrôe
(
bufID
, 
¥io
, c⁄° *
èg
, c⁄° *
ãxt
);

476 
__™droid_log_buf_¥öt
(
bufID
, 
¥io
, c⁄° *
èg
, c⁄° *
fmt
, ...);

479 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/logd.h

17 #i‚de‡
_ANDROID_CUTILS_LOGD_H


18 
	#_ANDROID_CUTILS_LOGD_H


	)

23 
	~<™droid/log.h
>

26 
	~<time.h
>

27 
	~<°dio.h
>

28 
	~<uni°d.h
>

29 
	~<°döt.h
>

30 
	~<sys/ty≥s.h
>

31 #ifde‡
HAVE_PTHREADS


32 
	~<±hªad.h
>

34 
	~<cutûs/uio.h
>

35 
	~<°d¨g.h
>

37 #ifde‡
__˝lu•lus


41 
__™droid_log_bwrôe
(
öt32_t
 
èg
, c⁄° *
∑ylﬂd
, 
size_t
 
Àn
);

42 
__™droid_log_btwrôe
(
öt32_t
 
èg
, 
ty≥
, c⁄° *
∑ylﬂd
,

43 
size_t
 
Àn
);

45 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/logger.h

10 #i‚de‡
_UTILS_LOGGER_H


11 
	#_UTILS_LOGGER_H


	)

13 
	~<°döt.h
>

20 
	sloggî_íåy
 {

21 
uöt16_t
 
	mÀn
;

22 
uöt16_t
 
	m__∑d
;

23 
öt32_t
 
	mpid
;

24 
öt32_t
 
	mtid
;

25 
öt32_t
 
	m£c
;

26 
öt32_t
 
	mn£c
;

27 
	mmsg
[0];

35 
	sloggî_íåy_v2
 {

36 
uöt16_t
 
	mÀn
;

37 
uöt16_t
 
	mhdr_size
;

38 
öt32_t
 
	mpid
;

39 
öt32_t
 
	mtid
;

40 
öt32_t
 
	m£c
;

41 
öt32_t
 
	mn£c
;

42 
uöt32_t
 
	meuid
;

43 
	mmsg
[0];

46 
	#LOGGER_LOG_MAIN
 "log/maö"

	)

47 
	#LOGGER_LOG_RADIO
 "log/ødio"

	)

48 
	#LOGGER_LOG_EVENTS
 "log/evíts"

	)

49 
	#LOGGER_LOG_SYSTEM
 "log/sy°em"

	)

57 
	#LOGGER_ENTRY_MAX_PAYLOAD
 4076

	)

64 
	#LOGGER_ENTRY_MAX_LEN
 (5*1024)

	)

66 #ifde‡
HAVE_IOCTL


68 
	~<sys/io˘l.h
>

70 
	#__LOGGERIO
 0xAE

	)

72 
	#LOGGER_GET_LOG_BUF_SIZE
 
	`_IO
(
__LOGGERIO
, 1Ë

	)

73 
	#LOGGER_GET_LOG_LEN
 
	`_IO
(
__LOGGERIO
, 2Ë

	)

74 
	#LOGGER_GET_NEXT_ENTRY_LEN
 
	`_IO
(
__LOGGERIO
, 3Ë

	)

75 
	#LOGGER_FLUSH_LOG
 
	`_IO
(
__LOGGERIO
, 4Ë

	)

76 
	#LOGGER_GET_VERSION
 
	`_IO
(
__LOGGERIO
, 5Ë

	)

77 
	#LOGGER_SET_VERSION
 
	`_IO
(
__LOGGERIO
, 6Ë

	)

	@libs/libcutils/cutils/logprint.h

17 #i‚de‡
_LOGPRINT_H


18 
	#_LOGPRINT_H


	)

20 
	~<cutûs/log.h
>

21 
	~<cutûs/loggî.h
>

22 
	~<cutûs/evít_èg_m≠.h
>

23 
	~<±hªad.h
>

25 #ifde‡
__˝lu•lus


30 
FORMAT_OFF
 = 0,

31 
FORMAT_BRIEF
,

32 
FORMAT_PROCESS
,

33 
FORMAT_TAG
,

34 
FORMAT_THREAD
,

35 
FORMAT_RAW
,

36 
FORMAT_TIME
,

37 
FORMAT_THREADTIME
,

38 
FORMAT_LONG
,

39 } 
	tAndroidLogPrötF‹m©
;

41 
AndroidLogF‹m©_t
 
	tAndroidLogF‹m©
;

43 
	sAndroidLogE¡ry_t
 {

44 
time_t
 
tv_£c
;

45 
tv_n£c
;

46 
™droid_LogPri‹ôy
 
¥i‹ôy
;

47 
öt32_t
 
pid
;

48 
öt32_t
 
tid
;

49 c⁄° * 
èg
;

50 
size_t
 
mesßgeLí
;

51 c⁄° * 
mesßge
;

52 } 
	tAndroidLogE¡ry
;

54 
AndroidLogF‹m©
 *
™droid_log_f‹m©_√w
();

56 
™droid_log_f‹m©_‰ì
(
AndroidLogF‹m©
 *
p_f‹m©
);

58 
™droid_log_£tPrötF‹m©
(
AndroidLogF‹m©
 *
p_f‹m©
,

59 
AndroidLogPrötF‹m©
 
f‹m©
);

64 
AndroidLogPrötF‹m©
 
™droid_log_f‹m©FromSåög
(c⁄° *
s
);

76 
™droid_log_addFûãrRuÀ
(
AndroidLogF‹m©
 *
p_f‹m©
,

77 c⁄° *
fûãrEx¥essi⁄
);

90 
™droid_log_addFûãrSåög
(
AndroidLogF‹m©
 *
p_f‹m©
,

91 c⁄° *
fûãrSåög
);

98 
™droid_log_shouldPrötLöe
 (

99 
AndroidLogF‹m©
 *
p_f‹m©
, c⁄° *
èg
, 
™droid_LogPri‹ôy
 
¥i
);

109 
™droid_log_¥o˚ssLogBuf„r
(
loggî_íåy
 *
buf
,

110 
AndroidLogE¡ry
 *
íåy
);

118 
™droid_log_¥o˚ssBö¨yLogBuf„r
(
loggî_íåy
 *
buf
,

119 
AndroidLogE¡ry
 *
íåy
, c⁄° 
EvítTagM≠
* 
m≠
, * 
mesßgeBuf
,

120 
mesßgeBufLí
);

131 *
™droid_log_f‹m©LogLöe
 (

132 
AndroidLogF‹m©
 *
p_f‹m©
,

133 *
deÁu…Buf„r
,

134 
size_t
 
deÁu…Buf„rSize
,

135 c⁄° 
AndroidLogE¡ry
 *
p_löe
,

136 
size_t
 *
p_outLígth
);

145 
™droid_log_¥ötLogLöe
(

146 
AndroidLogF‹m©
 *
p_f‹m©
,

147 
fd
,

148 c⁄° 
AndroidLogE¡ry
 *
íåy
);

151 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/memory.h

17 #i‚de‡
ANDROID_CUTILS_MEMORY_H


18 
	#ANDROID_CUTILS_MEMORY_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

23 #ifde‡
__˝lu•lus


28 
™droid_mem£t16
(
uöt16_t
* 
d°
, uöt16_à
vÆue
, 
size_t
 
size
);

31 
™droid_mem£t32
(
uöt32_t
* 
d°
, uöt32_à
vÆue
, 
size_t
 
size
);

33 #i‡!
HAVE_STRLCPY


35 
size_t
 
°æ˝y
(*
d°
, c⁄° *
§c
, size_à
size
);

38 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/misc.h

17 #i‚de‡
__CUTILS_MISC_H


18 
	#__CUTILS_MISC_H


	)

20 #ifde‡
__˝lu•lus


29 *
lﬂd_fûe
(c⁄° *
‚
, *
sz
);

35 
debuggîd_c⁄√˘
();

41 
	#FIRST_APPLICATION_UID
 10000

	)

42 
	#LAST_APPLICATION_UID
 99999

	)

44 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/mq.h

21 #i‚de‡
__MQ_H


22 
	#__MQ_H


	)

24 #ifde‡
__˝lu•lus


29 
MqMesßge
 
	tMqMesßge
;

32 
MqDe°ö©i⁄
 
	tMqDe°ö©i⁄
;

35 
MqByãs
 
	tMqByãs
;

43 
	tMqMesßgeLi°íî
(
	tMqDe°ö©i⁄
* 
	tde°ö©i⁄
, 
	tMqMesßge
* 
	tmesßge
);

50 
	tMqClo£Li°íî
(
	tMqDe°ö©i⁄
* 
	tde°ö©i⁄
);

61 
MqMesßge
* 
mqCª©eMesßge
(
MqByãs
 
hódî
, MqByã†
body
,

62 
MqDe°ö©i⁄
* 
ª∂yTo
);

65 
mqSídMesßge
(
MqMesßge
* 
mesßge
, 
MqDe°ö©i⁄
* 
de°ö©i⁄
);

77 
MqDe°ö©i⁄
* 
mqCª©eDe°ö©i⁄
(
MqMesßgeLi°íî
* 
mesßgeLi°íî
,

78 
MqClo£Li°íî
* 
˛o£Li°íî
, * 
u£rD©a
);

89 * 
mqGëU£rD©a
(
MqDe°ö©i⁄
* 
de°ö©i⁄
);

96 
mqIsDe°ö©i⁄Loˇl
(
MqDe°ö©i⁄
* 
de°ö©i⁄
);

101 
mqKìpDe°ö©i⁄
(
MqDesöèti⁄
* 
de°ö©i⁄
);

106 
mqFªeDe°ö©i⁄
(
MqDe°ö©i⁄
* 
desöèti⁄
);

113 
MqDe°ö©i⁄
* 
mqGëDe°ö©i⁄
(* 
«me
);

118 
mqPutDe°ö©i⁄
(* 
«me
, 
MqDe°ö©i⁄
* 
desöèti⁄
);

120 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/multiuser.h

17 #i‚de‡
__CUTILS_MULTIUSER_H


18 
	#__CUTILS_MULTIUSER_H


	)

20 
	~<sys/ty≥s.h
>

22 #ifde‡
__˝lu•lus


28 
	#MULTIUSER_APP_PER_USER_RANGE
 100000

	)

30 
uid_t
 
	tu£rid_t
;

31 
uid_t
 
	t≠pid_t
;

33 
u£rid_t
 
mu…iu£r_gë_u£r_id
(
uid_t
 
uid
);

34 
≠pid_t
 
mu…iu£r_gë_≠p_id
(
uid_t
 
uid
);

35 
uid_t
 
mu…iu£r_gë_uid
(
u£rid_t
 
u£rId
, 
≠pid_t
 
≠pId
);

37 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/native_handle.h

17 #i‚de‡
NATIVE_HANDLE_H_


18 
	#NATIVE_HANDLE_H_


	)

20 #ifde‡
__˝lu•lus


24 
	s«tive_h™dÀ


26 
vîsi⁄
;

27 
numFds
;

28 
numI¡s
;

29 
d©a
[0];

30 } 
	t«tive_h™dÀ_t
;

40 
«tive_h™dÀ_˛o£
(c⁄° 
«tive_h™dÀ_t
* 
h
);

50 
«tive_h™dÀ_t
* 
«tive_h™dÀ_¸óã
(
numFds
, 
numI¡s
);

62 
«tive_h™dÀ_dñëe
(
«tive_h™dÀ_t
* 
h
);

65 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/open_memstream.h

17 #i‚de‡
__CUTILS_OPEN_MEMSTREAM_H__


18 
	#__CUTILS_OPEN_MEMSTREAM_H__


	)

20 
	~<°dio.h
>

22 #i‚de‡
HAVE_OPEN_MEMSTREAM


24 #ifde‡
__˝lu•lus


28 
FILE
* 
›í_mem°ªam
(** 
buÂ
, 
size_t
* 
sizï
);

30 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/partition_utils.h

17 #i‚de‡
__CUTILS_PARTITION_WIPED_H__


18 
	#__CUTILS_PARTITION_WIPED_H__


	)

20 
__BEGIN_DECLS


22 
∑πôi⁄_wùed
(*
sour˚
);

23 
îa£_foŸî
(c⁄° *
dev_∑th
, 
size
);

25 
	g__END_DECLS


	@libs/libcutils/cutils/process_name.h

21 #i‚de‡
__PROCESS_NAME_H


22 
	#__PROCESS_NAME_H


	)

24 #ifde‡
__˝lu•lus


33 
£t_¥o˚ss_«me
(c⁄° * 
¥o˚ss_«me
);

36 c⁄° * 
gë_¥o˚ss_«me
();

38 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/properties.h

17 #i‚de‡
__CUTILS_PROPERTIES_H


18 
	#__CUTILS_PROPERTIES_H


	)

20 #ifde‡
__˝lu•lus


31 
	#PROPERTY_KEY_MAX
 32

	)

32 
	#PROPERTY_VALUE_MAX
 92

	)

41 
¥›îty_gë
(c⁄° *
key
, *
vÆue
, c⁄° *
deÁu…_vÆue
);

45 
¥›îty_£t
(c⁄° *
key
, c⁄° *
vÆue
);

47 
¥›îty_li°
((*
¥›‚
)(c⁄° *
key
, c⁄° *
vÆue
, *
cookõ
), *cookie);

50 #ifde‡
HAVE_SYSTEM_PROPERTY_SERVER


55 
	#SYSTEM_PROPERTY_PIPE_NAME
 "/tmp/™droid-sy•r›"

	)

58 
kSy°emPr›îtyUnknown
 = 0,

59 
kSy°emPr›îtyGë
,

60 
kSy°emPr›îtySë
,

61 
kSy°emPr›îtyLi°


66 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/qsort_r_compat.h

23 #i‚de‡
_LIBS_CUTILS_QSORT_R_COMPAT_H


24 
	#_LIBS_CUTILS_QSORT_R_COMPAT_H


	)

26 
	~<°dlib.h
>

28 #ifde‡
__˝lu•lus


32 
qs‹t_r_com∑t
(* 
ba£
, 
size_t
 
√l
, size_à
width
, * 
thunk
,

33 (*
com∑r
)(*, const * , const * ));

35 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/qtaguid.h

17 #i‚de‡
__CUTILS_QTAGUID_H


18 
	#__CUTILS_QTAGUID_H


	)

20 
	~<°döt.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<uni°d.h
>

24 #ifde‡
__˝lu•lus


31 
qèguid_ègSockë
(
sockfd
, 
èg
, 
uid_t
 
uid
);

36 
qèguid_u¡agSockë
(
sockfd
);

43 
qèguid_£tCou¡îSë
(
cou¡îSëNum
, 
uid_t
 
uid
);

54 
qèguid_dñëeTagD©a
(
èg
, 
uid_t
 
uid
);

60 
qèguid_£tPacifõr
(
⁄
);

62 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/record_stream.h

21 #i‚de‡
_CUTILS_RECORD_STREAM_H


22 
	#_CUTILS_RECORD_STREAM_H


	)

24 #ifde‡
__˝lu•lus


29 
Rec‹dSåóm
 
	tRec‹dSåóm
;

31 
Rec‹dSåóm
 *
ªc‹d_°ªam_√w
(
fd
, 
size_t
 
maxRec‹dLí
);

32 
ªc‹d_°ªam_‰ì
(
Rec‹dSåóm
 *
p_rs
);

34 
ªc‹d_°ªam_gë_√xt
 (
Rec‹dSåóm
 *
p_rs
, ** 
p_outRec‹d
,

35 
size_t
 *
p_outRec‹dLí
);

37 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/sched_policy.h

17 #i‚de‡
__CUTILS_SCHED_POLICY_H


18 
	#__CUTILS_SCHED_POLICY_H


	)

20 #ifde‡
__˝lu•lus


26 
SP_DEFAULT
 = -1,

27 
SP_BACKGROUND
 = 0,

28 
SP_FOREGROUND
 = 1,

29 
SP_SYSTEM
 = 2,

30 
SP_AUDIO_APP
 = 3,

31 
SP_AUDIO_SYS
 = 4,

32 
SP_CNT
,

33 
SP_MAX
 = 
SP_CNT
 - 1,

34 
SP_SYSTEM_DEFAULT
 = 
SP_FOREGROUND
,

35 } 
	tSchedPﬁicy
;

43 
£t_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 
pﬁicy
);

49 
gë_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 *
pﬁicy
);

55 c⁄° *
gë_sched_pﬁicy_«me
(
SchedPﬁicy
 
pﬁicy
);

57 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/selector.h

23 #i‚de‡
__SELECTOR_H


24 
	#__SELECTOR_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<°dboﬁ.h
>

35 
Sñe˘‹
 
	tSñe˘‹
;

49 
Sñe˘abÀFd
 
	tSñe˘abÀFd
;

50 
	sSñe˘abÀFd
 {

53 
fd
;

56 * 
d©a
;

62 
boﬁ
 
ªmove
;

68 (*
bef‹eSñe˘
)(
Sñe˘abÀFd
* 
£lf
);

74 (*
⁄RódabÀ
)(
Sñe˘abÀFd
* 
£lf
);

80 (*
⁄WrôabÀ
)(
Sñe˘abÀFd
* 
£lf
);

86 (*
⁄Ex˚±
)(
Sñe˘abÀFd
* 
£lf
);

92 (*
⁄Remove
)(
Sñe˘abÀFd
* 
£lf
);

97 
Sñe˘‹
* 
£À˘‹
;

103 
Sñe˘‹
* 
£À˘‹Cª©e
();

112 
Sñe˘abÀFd
* 
£À˘‹Add
(
Sñe˘‹
* 
£À˘‹
, 
fd
);

118 
£À˘‹WakeUp
(
Sñe˘‹
* 
£À˘‹
);

124 
£À˘‹Lo›
(
Sñe˘‹
* 
£À˘‹
);

126 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/sockets.h

17 #i‚de‡
__CUTILS_SOCKETS_H


18 
	#__CUTILS_SOCKETS_H


	)

20 
	~<î∫o.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<°dboﬁ.h
>

25 #ifde‡
HAVE_WINSOCK


26 
	~<wösock2.h
>

27 
	tsockÀn_t
;

28 #ñi‡
HAVE_SYS_SOCKET_H


29 
	~<sys/sockë.h
>

32 
	#ANDROID_SOCKET_ENV_PREFIX
 "ANDROID_SOCKET_"

	)

33 
	#ANDROID_SOCKET_DIR
 "/dev/sockë"

	)

35 #ifde‡
__˝lu•lus


47 
ölöe
 
™droid_gë_c⁄åﬁ_sockë
(c⁄° *
«me
)

49 
key
[64] = 
ANDROID_SOCKET_ENV_PREFIX
;

50 c⁄° *
vÆ
;

51 
fd
;

54 #i‡
HAVE_STRLCPY


55 
°æ˝y
(
key
 + (
ANDROID_SOCKET_ENV_PREFIX
) - 1,

56 
«me
,

57 (
key
Ë- (
ANDROID_SOCKET_ENV_PREFIX
));

59 
°∫˝y
(
key
 + (
ANDROID_SOCKET_ENV_PREFIX
) - 1,

60 
«me
,

61 (
key
Ë- (
ANDROID_SOCKET_ENV_PREFIX
));

62 
key
[(key)-1] = '\0';

65 
vÆ
 = 
gëív
(
key
);

66 i‡(!
vÆ
)

69 
î∫o
 = 0;

70 
fd
 = 
°πﬁ
(
vÆ
, 
NULL
, 10);

71 i‡(
î∫o
)

74  
fd
;

81 
	#ANDROID_SOCKET_NAMESPACE_ABSTRACT
 0

	)

83 
	#ANDROID_SOCKET_NAMESPACE_RESERVED
 1

	)

85 
	#ANDROID_SOCKET_NAMESPACE_FILESYSTEM
 2

	)

87 
sockë_lo›back_˛õ¡
(
p‹t
, 
ty≥
);

88 
sockë_√tw‹k_˛õ¡
(c⁄° *
ho°
, 
p‹t
, 
ty≥
);

89 
sockë_lo›back_£rvî
(
p‹t
, 
ty≥
);

90 
sockë_loˇl_£rvî
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

91 
sockë_loˇl_£rvî_böd
(
s
, c⁄° *
«me
, 
«me•a˚Id
);

92 
sockë_loˇl_˛õ¡_c⁄√˘
(
fd
,

93 c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

94 
sockë_loˇl_˛õ¡
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
);

95 
sockë_öaddr_™y_£rvî
(
p‹t
, 
ty≥
);

106 
boﬁ
 
sockë_≥î_is_åu°ed
(
fd
);

108 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/str_parms.h

17 #i‚de‡
__CUTILS_STR_PARMS_H


18 
	#__CUTILS_STR_PARMS_H


	)

20 
	~<°döt.h
>

22 
	g°r_∑rms
;

24 
°r_∑rms
 *
°r_∑rms_¸óã
();

25 
°r_∑rms
 *
°r_∑rms_¸óã_°r
(c⁄° *
_°rög
);

26 
°r_∑rms_de°roy
(
°r_∑rms
 *str_parms);

28 
°r_∑rms_dñ
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
);

30 
°r_∑rms_add_°r
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

31 c⁄° *
vÆue
);

32 
°r_∑rms_add_öt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
, 
vÆue
);

34 
°r_∑rms_add_Êﬂt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

35 
vÆue
);

37 
°r_∑rms_gë_°r
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

38 *
out_vÆ
, 
Àn
);

39 
°r_∑rms_gë_öt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

40 *
out_vÆ
);

41 
°r_∑rms_gë_Êﬂt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

42 *
out_vÆ
);

44 *
°r_∑rms_to_°r
(
°r_∑rms
 *str_parms);

47 
°r_∑rms_dump
(
°r_∑rms
 *str_parms);

	@libs/libcutils/cutils/threads.h

17 #i‚de‡
_LIBS_CUTILS_THREADS_H


18 
	#_LIBS_CUTILS_THREADS_H


	)

20 #ifde‡
__˝lu•lus


32 #ifde‡
HAVE_PTHREADS


34 
	~<±hªad.h
>

37 
±hªad_muãx_t
 
lock
;

38 
has_és
;

39 
±hªad_key_t
 
és
;

41 } 
	tthªad_°‹e_t
;

43 
	#THREAD_STORE_INITIALIZER
 { 
PTHREAD_MUTEX_INITIALIZER
, 0, 0 }

	)

45 #ñi‡
deföed
 
HAVE_WIN32_THREADS


47 
	~<wödows.h
>

50 
lock_öô
;

51 
has_és
;

52 
DWORD
 
és
;

53 
CRITICAL_SECTION
 
lock
;

55 } 
	tthªad_°‹e_t
;

57 
	#THREAD_STORE_INITIALIZER
 { 0, 0, 0, {0, 0, 0, 0, 0, 0} }

	)

63 (*
thªad_°‹e_de°ru˘_t
)(* 
	tvÆue
);

65 * 
thªad_°‹e_gë
(
thªad_°‹e_t
* 
°‹e
);

67 
thªad_°‹e_£t
(
thªad_°‹e_t
* 
°‹e
,

68 * 
vÆue
,

69 
thªad_°‹e_de°ru˘_t
 
de°roy
);

79 #ifde‡
HAVE_PTHREADS


81 
±hªad_muãx_t
 
	tmuãx_t
;

83 
	#MUTEX_INITIALIZER
 
PTHREAD_MUTEX_INITIALIZER


	)

85 
__ölöe__
 
muãx_lock
(
muãx_t
* 
lock
)

87 
±hªad_muãx_lock
(
lock
);

89 
__ölöe__
 
muãx_u∆ock
(
muãx_t
* 
lock
)

91 
±hªad_muãx_u∆ock
(
lock
);

93 
__ölöe__
 
muãx_öô
(
muãx_t
* 
lock
)

95  
±hªad_muãx_öô
(
lock
, 
NULL
);

97 
__ölöe__
 
muãx_de°roy
(
muãx_t
* 
lock
)

99 
±hªad_muãx_de°roy
(
lock
);

103 #ifde‡
HAVE_WIN32_THREADS


105 
	göô
;

106 
CRITICAL_SECTION
 
	glock
[1];

107 } 
	tmuãx_t
;

109 
	#MUTEX_INITIALIZER
 { 0, {{ 
NULL
, 0, 0, NULL, NULL, 0 }} }

	)

111 
__ölöe__
 
muãx_lock
(
muãx_t
* 
lock
)

113 i‡(!
	glock
->
	göô
) {

114 
	glock
->
	göô
 = 1;

115 
InôülizeCrôiˇlSe˘i⁄
–
lock
->lock );

116 
	glock
->
	göô
 = 2;

117 } 
	glock
->
	göô
 != 2)

118 
SÀï
(10);

120 
E¡îCrôiˇlSe˘i⁄
(
lock
->lock);

123 
__ölöe__
 
muãx_u∆ock
(
muãx_t
* 
lock
)

125 
LóveCrôiˇlSe˘i⁄
(
lock
->lock);

127 
__ölöe__
 
muãx_öô
(
muãx_t
* 
lock
)

129 
InôülizeCrôiˇlSe˘i⁄
(
lock
->lock);

130 
	glock
->
	göô
 = 2;

133 
__ölöe__
 
muãx_de°roy
(
muãx_t
* 
lock
)

135 i‡(
	glock
->
	göô
) {

136 
	glock
->
	göô
 = 0;

137 
DñëeCrôiˇlSe˘i⁄
(
lock
->lock);

142 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/tztime.h

17 #i‚de‡
_CUTILS_TZTIME_H


18 
	#_CUTILS_TZTIME_H


	)

20 
	~<time.h
>

22 #ifde‡
__˝lu•lus


26 
time_t
 
mktime_tz
(
tm
 * c⁄° 
tmp
, c⁄° * 
tz
);

27 
loˇ…ime_tz
(c⁄° 
time_t
 * c⁄° 
timï
, 
tm
 * 
tmp
, c⁄° * 
tz
);

29 #ifde‡
HAVE_ANDROID_OS


34 
	~<bi⁄ic_time.h
>

38 
	s°r·ime_loˇÀ
 {

39 c⁄° *
m⁄
[12];

40 c⁄° *
m⁄th
[12];

41 c⁄° *
°™dÆ⁄e_m⁄th
[12];

42 c⁄° *
wday
[7];

43 c⁄° *
wìkday
[7];

44 c⁄° *
X_fmt
;

45 c⁄° *
x_fmt
;

46 c⁄° *
c_fmt
;

47 c⁄° *
am
;

48 c⁄° *
pm
;

49 c⁄° *
d©e_fmt
;

52 
size_t
 
°r·ime_tz
(*
s
, size_à
max
, c⁄° *
f‹m©
, c⁄° 
tm
 *tm, c⁄° 
°r·ime_loˇÀ
 *
loˇÀ
);

56 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/uevent.h

17 #i‚de‡
__CUTILS_UEVENT_H


18 
	#__CUTILS_UEVENT_H


	)

20 
	~<°dboﬁ.h
>

21 
	~<sys/sockë.h
>

23 #ifde‡
__˝lu•lus


27 
uevít_›í_sockë
(
buf_sz
, 
boﬁ
 
∑ss¸ed
);

28 
ssize_t
 
uevít_kî√l_mu…iˇ°_ªcv
(
sockë
, *
buf„r
, 
size_t
 
Àngth
);

29 
ssize_t
 
uevít_kî√l_mu…iˇ°_uid_ªcv
(
sockë
, *
buf„r
, 
size_t
 
Àngth
, 
uid_t
 *
uid
);

31 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/uio.h

20 #i‚de‡
_LIBS_CUTILS_UIO_H


21 
	#_LIBS_CUTILS_UIO_H


	)

23 #ifde‡
HAVE_SYS_UIO_H


24 
	~<sys/uio.h
>

27 #ifde‡
__˝lu•lus


31 
	~<°ddef.h
>

33 
	siovec
 {

34 c⁄° * 
iov_ba£
;

35 
size_t
 
iov_Àn
;

38 
ªadv
–
fd
, 
iovec
* 
vecs
, 
cou¡
 );

39 
wrôev
–
fd
, c⁄° 
iovec
* 
vecs
, 
cou¡
 );

41 #ifde‡
__˝lu•lus


	@libs/libcutils/cutils/zygote.h

17 #i‚de‡
__CUTILS_ZYGOTE_H


18 
	#__CUTILS_ZYGOTE_H


	)

20 #ifde‡
__˝lu•lus


24 
zygŸe_run_⁄eshŸ
(
£ndStdio
, 
¨gc
, c⁄° **
¨gv
);

25 
zygŸe_run
(
¨gc
, c⁄° **
¨gv
);

26 
zygŸe_run_waô
(
¨gc
, c⁄° **
¨gv
, (*
po°_run_func
)());

28 #ifde‡
__˝lu•lus


	@libs/libcutils/debugger.c

17 
	~<°dlib.h
>

18 
	~<uni°d.h
>

20 
	~<cutûs/debuggî.h
>

21 
	~<cutûs/sockës.h
>

23 
	$dump_tomb°⁄e
(
pid_t
 
tid
, * 
∑thbuf
, 
size_t
 
∑thÀn
) {

24 
s
 = 
	`sockë_loˇl_˛õ¡
(
DEBUGGER_SOCKET_NAME
,

25 
ANDROID_SOCKET_NAMESPACE_ABSTRACT
, 
SOCK_STREAM
);

26 i‡(
s
 < 0) {

30 
debuggî_msg_t
 
msg
;

31 
msg
.
tid
 =Åid;

32 
msg
.
a˘i⁄
 = 
DEBUGGER_ACTION_DUMP_TOMBSTONE
;

34 
ªsu…
 = 0;

35 i‡(
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
s
, &
msg
, (msg))) != (msg)) {

36 
ªsu…
 = -1;

38 
ack
;

39 i‡(
	`TEMP_FAILURE_RETRY
(
	`ªad
(
s
, &
ack
, 1)) != 1) {

40 
ªsu…
 = -1;

42 i‡(
∑thbuf
 && 
∑thÀn
) {

43 
ssize_t
 
n
 = 
	`TEMP_FAILURE_RETRY
(
	`ªad
(
s
, 
∑thbuf
, 
∑thÀn
 - 1));

44 i‡(
n
 <= 0) {

45 
ªsu…
 = -1;

47 
∑thbuf
[
n
] = '\0';

52 
	`TEMP_FAILURE_RETRY
(
	`˛o£
(
s
));

53  
ªsu…
;

54 
	}
}

56 
	$dump_backåa˚_to_fûe
(
pid_t
 
tid
, 
fd
) {

57 
s
 = 
	`sockë_loˇl_˛õ¡
(
DEBUGGER_SOCKET_NAME
,

58 
ANDROID_SOCKET_NAMESPACE_ABSTRACT
, 
SOCK_STREAM
);

59 i‡(
s
 < 0) {

63 
debuggî_msg_t
 
msg
;

64 
msg
.
tid
 =Åid;

65 
msg
.
a˘i⁄
 = 
DEBUGGER_ACTION_DUMP_BACKTRACE
;

67 
ªsu…
 = 0;

68 i‡(
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
s
, &
msg
, (msg))) != (msg)) {

69 
ªsu…
 = -1;

71 
ack
;

72 i‡(
	`TEMP_FAILURE_RETRY
(
	`ªad
(
s
, &
ack
, 1)) != 1) {

73 
ªsu…
 = -1;

75 
buf„r
[4096];

76 
ssize_t
 
n
;

77 (
n
 = 
	`TEMP_FAILURE_RETRY
(
	`ªad
(
s
, 
buf„r
, (buffer)))) > 0) {

78 i‡(
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
fd
, 
buf„r
, 
n
)) !=Ç) {

79 
ªsu…
 = -1;

85 
	`TEMP_FAILURE_RETRY
(
	`˛o£
(
s
));

86  
ªsu…
;

87 
	}
}

	@libs/libcutils/dir_hash.c

17 
	~<dúít.h
>

18 
	~<î∫o.h
>

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<sha1.h
>

23 
	~<uni°d.h
>

24 
	~<limôs.h
>

26 
	~<sys/°©.h
>

28 
	~<√töë/ö.h
>

29 
	~<ªsﬁv.h
>

31 
	~<cutûs/dú_hash.h
>

39 
	$gë_fûe_hash
(
HashAlg‹ôhm
 
Æg‹ôhm
, c⁄° *
∑th
,

40 *
ouçut_°rög
, 
size_t
 
max_ouçut_°rög
) {

41 
SHA1_CTX
 
c⁄ãxt
;

42 
°©
 
sb
;

43 
md
[
SHA1_DIGEST_LENGTH
];

44 
u£d
;

45 
size_t
 
n
;

47 i‡(
Æg‹ôhm
 !
SHA_1
) {

48 
î∫o
 = 
EINVAL
;

52 i‡(
	`°©
(
∑th
, &
sb
) != 0) {

56 i‡(
	`S_ISLNK
(
sb
.
°_mode
)) {

57 
buf
[
PATH_MAX
];

58 
Àn
;

60 
Àn
 = 
	`ªadlök
(
∑th
, 
buf
, (buf));

61 i‡(
Àn
 < 0) {

65 
	`SHA1Inô
(&
c⁄ãxt
);

66 
	`SHA1Upd©e
(&
c⁄ãxt
, (*Ë
buf
, 
Àn
);

67 
	`SHA1FöÆ
(
md
, &
c⁄ãxt
);

68 } i‡(
	`S_ISREG
(
sb
.
°_mode
)) {

69 
buf
[10000];

70 
FILE
 *
f
 = 
	`f›í
(
∑th
, "rb");

71 
Àn
;

73 i‡(
f
 =
NULL
) {

77 
	`SHA1Inô
(&
c⁄ãxt
);

79 (
Àn
 = 
	`‰ód
(
buf
, 1, (buf), 
f
)) > 0) {

80 
	`SHA1Upd©e
(&
c⁄ãxt
, (*Ë
buf
, 
Àn
);

83 i‡(
	`„º‹
(
f
)) {

84 
	`f˛o£
(
f
);

88 
	`f˛o£
(
f
);

89 
	`SHA1FöÆ
(
md
, &
c⁄ãxt
);

92 i‡(
	`S_ISLNK
(
sb
.
°_mode
Ë|| 
	`S_ISREG
(sb.st_mode)) {

93 
u£d
 = 
	`b64_¡›
(
md
, 
SHA1_DIGEST_LENGTH
,

94 
ouçut_°rög
, 
max_ouçut_°rög
);

95 i‡(
u£d
 < 0) {

96 
î∫o
 = 
ENOSPC
;

100 
n
 = 
	`¢¥ötf
(
ouçut_°rög
 + 
u£d
, 
max_ouçut_°rög
 - used,

101 " %d 0%ÿ%d %d", (Ë
sb
.
°_size
, sb.
°_mode
,

102 (Ë
sb
.
°_uid
, (Ësb.
°_gid
);

104 
n
 = 
	`¢¥ötf
(
ouçut_°rög
, 
max_ouçut_°rög
,

105 "- - 0%ÿ%d %d", 
sb
.
°_mode
,

106 (Ë
sb
.
°_uid
, (Ësb.
°_gid
);

109 i‡(
n
 >
max_ouçut_°rög
 - 
u£d
) {

110 
î∫o
 = 
ENOSPC
;

111  -(
u£d
 + 
n
);

114  
u£d
 + 
n
;

115 
	}
}

117 
	sli°
 {

118 *
	m«me
;

119 
li°
 *
	m√xt
;

122 
	$cmp
(c⁄° *
a
, c⁄° *
b
) {

123 
li°
 *c⁄° *
ø
 = 
a
;

124 
li°
 *c⁄° *
rb
 = 
b
;

126  
	`°rcmp
((*
ø
)->
«me
, (*
rb
)->name);

127 
	}
}

129 
	$ªcur£
(
HashAlg‹ôhm
 
Æg‹ôhm
, c⁄° *
dúe˘‹y_∑th
,

130 
li°
 **
out
) {

131 
li°
 *li° = 
NULL
;

132 
li°
 *
f
;

134 
dúít
 *
de
;

135 
DIR
 *
d
 = 
	`›ídú
(
dúe˘‹y_∑th
);

137 i‡(
d
 =
NULL
) {

141 (
de
 = 
	`ªaddú
(
d
)Ë!
NULL
) {

142 i‡(
	`°rcmp
(
de
->
d_«me
, ".") == 0) {

145 i‡(
	`°rcmp
(
de
->
d_«me
, "..") == 0) {

149 *
«me
 = 
	`mÆloc
(
	`°æí
(
de
->
d_«me
) + 1);

150 
li°
 *
node
 = 
	`mÆloc
((list));

152 i‡(
«me
 =
NULL
 || 
node
 == NULL) {

153 
li°
 *
√xt
;

154 
f
 = 
li°
; f !
NULL
; f = 
√xt
) {

155 
√xt
 = 
f
->next;

156 
	`‰ì
(
f
->
«me
);

157 
	`‰ì
(
f
);

160 
	`‰ì
(
«me
);

161 
	`‰ì
(
node
);

165 
	`°r˝y
(
«me
, 
de
->
d_«me
);

167 
node
->
«me
 =Çame;

168 
node
->
√xt
 = 
li°
;

169 
li°
 = 
node
;

172 
	`˛o£dú
(
d
);

174 
f
 = 
li°
; f !
NULL
; f = f->
√xt
) {

175 
°©
 
sb
;

176 *
«me
;

177 
out°r
[
NAME_MAX
 + 100];

178 *
kìp
;

179 
li°
 *
ªs
;

181 
«me
 = 
	`mÆloc
(
	`°æí
(
f
->«meË+ såÀn(
dúe˘‹y_∑th
) + 2);

182 i‡(
«me
 =
NULL
) {

183 
li°
 *
√xt
;

184 
f
 = 
li°
; f !
NULL
; f = f->
√xt
) {

185 
√xt
 = 
f
->next;

186 
	`‰ì
(
f
->
«me
);

187 
	`‰ì
(
f
);

189 
f
 = *
out
; f !
NULL
; f = f->
√xt
) {

190 
√xt
 = 
f
->next;

191 
	`‰ì
(
f
->
«me
);

192 
	`‰ì
(
f
);

194 *
out
 = 
NULL
;

198 
	`•rötf
(
«me
, "%s/%s", 
dúe˘‹y_∑th
, 
f
->name);

200 
Àn
 = 
	`gë_fûe_hash
(
Æg‹ôhm
, 
«me
,

201 
out°r
, (outstr));

202 i‡(
Àn
 < 0) {

207 
kìp
 = 
	`mÆloc
(
Àn
 + 
	`°æí
(
«me
) + 3);

208 
ªs
 = 
	`mÆloc
((
li°
));

210 i‡(
kìp
 =
NULL
 || 
ªs
 == NULL) {

211 
li°
 *
√xt
;

212 
f
 = 
li°
; f !
NULL
; f = f->
√xt
) {

213 
√xt
 = 
f
->next;

214 
	`‰ì
(
f
->
«me
);

215 
	`‰ì
(
f
);

217 
f
 = *
out
; f !
NULL
; f = f->
√xt
) {

218 
√xt
 = 
f
->next;

219 
	`‰ì
(
f
->
«me
);

220 
	`‰ì
(
f
);

222 *
out
 = 
NULL
;

224 
	`‰ì
(
kìp
);

225 
	`‰ì
(
ªs
);

229 
	`•rötf
(
kìp
, "%†%s\n", 
«me
, 
out°r
);

231 
ªs
->
«me
 = 
kìp
;

232 
ªs
->
√xt
 = *
out
;

233 *
out
 = 
ªs
;

235 i‡((
	`°©
(
«me
, &
sb
Ë=0Ë&& 
	`S_ISDIR
(sb.
°_mode
)) {

236 i‡(
	`ªcur£
(
Æg‹ôhm
, 
«me
, 
out
) < 0) {

237 
li°
 *
√xt
;

238 
f
 = 
li°
; f !
NULL
; f = 
√xt
) {

239 
√xt
 = 
f
->next;

240 
	`‰ì
(
f
->
«me
);

241 
	`‰ì
(
f
);

249 
li°
 *
√xt
;

250 
f
 = 
li°
; f !
NULL
; f = 
√xt
) {

251 
√xt
 = 
f
->next;

253 
	`‰ì
(
f
->
«me
);

254 
	`‰ì
(
f
);

256 
	}
}

264 
	$gë_ªcursive_hash_m™i„°
(
HashAlg‹ôhm
 
Æg‹ôhm
,

265 c⁄° *
dúe˘‹y_∑th
,

266 **
ouçut_°rög
) {

267 
li°
 *
out
 = 
NULL
;

268 
li°
 *
r
;

269 
li°
 **list;

270 
cou¡
 = 0;

271 
Àn
 = 0;

272 
ªéí
 = 0;

273 
i
;

274 *
buf
;

276 i‡(
	`ªcur£
(
Æg‹ôhm
, 
dúe˘‹y_∑th
, &
out
) < 0) {

280 
r
 = 
out
;Ñ !
NULL
;Ñ =Ñ->
√xt
) {

281 
cou¡
++;

282 
Àn
 +
	`°æí
(
r
->
«me
);

285 
li°
 = 
	`mÆloc
(
cou¡
 * (list *));

286 i‡(
li°
 =
NULL
) {

287 
li°
 *
√xt
;

288 
r
 = 
out
;Ñ !
NULL
;Ñ = 
√xt
) {

289 
√xt
 = 
r
->next;

290 
	`‰ì
(
r
->
«me
);

291 
	`‰ì
(
r
);

296 
cou¡
 = 0;

297 
r
 = 
out
;Ñ !
NULL
;Ñ =Ñ->
√xt
) {

298 
li°
[
cou¡
++] = 
r
;

301 
	`qs‹t
(
li°
, 
cou¡
, (li° *), 
cmp
);

303 
buf
 = 
	`mÆloc
(
Àn
 + 1);

304 i‡(
buf
 =
NULL
) {

305 
li°
 *
√xt
;

306 
r
 = 
out
;Ñ !
NULL
;Ñ = 
√xt
) {

307 
√xt
 = 
r
->next;

308 
	`‰ì
(
r
->
«me
);

309 
	`‰ì
(
r
);

311 
	`‰ì
(
li°
);

315 
i
 = 0; i < 
cou¡
; i++) {

316 
n
 = 
	`°æí
(
li°
[
i
]->
«me
);

318 
	`°r˝y
(
buf
 + 
ªéí
, 
li°
[
i
]->
«me
);

319 
ªéí
 +
n
;

322 
	`‰ì
(
li°
);

324 
li°
 *
√xt
;

325 
r
 = 
out
;Ñ !
NULL
;Ñ = 
√xt
) {

326 
√xt
 = 
r
->next;

328 
	`‰ì
(
r
->
«me
);

329 
	`‰ì
(
r
);

332 *
ouçut_°rög
 = 
buf
;

333  
ªéí
;

334 
	}
}

	@libs/libcutils/dlmalloc_stubs.c

17 
	~"../../../bi⁄ic/libc/bi⁄ic/dlmÆloc.h
"

18 
	~"cutûs/log.h
"

25 
dlmÆloc_ö•e˘_Æl
((*
h™dÀr
)(*, *, 
size_t
, *),

26 * 
¨g
)

28 
	`ALOGW
("Called host unimplemented stub: dlmalloc_inspect_all");

29 
	}
}

31 
	$dlmÆloc_åim
(
size_t
 
unu£d
)

33 
	`ALOGW
("Called host unimplemented stub: dlmalloc_trim");

35 
	}
}

	@libs/libcutils/fs.c

17 
	#LOG_TAG
 "cutûs"

	)

19 
	~<cutûs/fs.h
>

20 
	~<cutûs/log.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

25 
	~<uni°d.h
>

26 
	~<î∫o.h
>

27 
	~<°rög.h
>

28 
	~<limôs.h
>

30 
	#ALL_PERMS
 (
S_ISUID
 | 
S_ISGID
 | 
S_ISVTX
 | 
S_IRWXU
 | 
S_IRWXG
 | 
S_IRWXO
)

	)

31 
	#BUF_SIZE
 64

	)

33 
	$fs_¥ï¨e_dú
(c⁄° * 
∑th
, 
mode_t
 
mode
, 
uid_t
 
uid
, 
gid_t
 
gid
) {

35 
°©
 
sb
;

36 i‡(
	`TEMP_FAILURE_RETRY
(
	`l°©
(
∑th
, &
sb
)) == -1) {

37 i‡(
î∫o
 =
ENOENT
) {

38 
¸óã
;

40 
	`ALOGE
("FaûedÅÿl°©(%s): %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

46 i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

47 
	`ALOGE
("NŸá dúe˘‹y: %s", 
∑th
);

50 i‡(((
sb
.
°_mode
 & 
ALL_PERMS
Ë=
mode
Ë&& (sb.
°_uid
 =
uid
Ë&& (sb.
°_gid
 =
gid
)) {

53 
fixup
;

56 
¸óã
:

57 i‡(
	`TEMP_FAILURE_RETRY
(
	`mkdú
(
∑th
, 
mode
)) == -1) {

58 i‡(
î∫o
 !
EEXIST
) {

59 
	`ALOGE
("FaûedÅÿmkdú(%s): %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

64 
fixup
:

65 i‡(
	`TEMP_FAILURE_RETRY
(
	`chmod
(
∑th
, 
mode
)) == -1) {

66 
	`ALOGE
("FaûedÅÿchmod(%s, %d): %s", 
∑th
, 
mode
, 
	`°ªº‹
(
î∫o
));

69 i‡(
	`TEMP_FAILURE_RETRY
(
	`chown
(
∑th
, 
uid
, 
gid
)) == -1) {

70 
	`ALOGE
("FaûedÅÿchown(%s, %d, %d): %s", 
∑th
, 
uid
, 
gid
, 
	`°ªº‹
(
î∫o
));

75 
	}
}

77 
	$fs_ªad_©omic_öt
(c⁄° * 
∑th
, * 
out_vÆue
) {

78 
fd
 = 
	`TEMP_FAILURE_RETRY
(
	`›í
(
∑th
, 
O_RDONLY
));

79 i‡(
fd
 == -1) {

80 
	`ALOGE
("FaûedÅÿªad %s: %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

84 
buf
[
BUF_SIZE
];

85 i‡(
	`TEMP_FAILURE_RETRY
(
	`ªad
(
fd
, 
buf
, 
BUF_SIZE
)) == -1) {

86 
	`ALOGE
("FaûedÅÿªad %s: %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

87 
Áû
;

89 i‡(
	`ssˇnf
(
buf
, "%d", 
out_vÆue
) != 1) {

90 
	`ALOGE
("FaûedÅÿ∑r£ %s: %s", 
∑th
, 
	`°ªº‹
(
î∫o
));

91 
Áû
;

93 
	`˛o£
(
fd
);

96 
Áû
:

97 
	`˛o£
(
fd
);

98 *
out_vÆue
 = -1;

100 
	}
}

102 
	$fs_wrôe_©omic_öt
(c⁄° * 
∑th
, 
vÆue
) {

103 
ãmp
[
PATH_MAX
];

104 i‡(
	`¢¥ötf
(
ãmp
, 
PATH_MAX
, "%s.XXXXXX", 
∑th
) >= PATH_MAX) {

105 
	`ALOGE
("PathÅooÜong");

109 
fd
 = 
	`TEMP_FAILURE_RETRY
(
	`mk°emp
(
ãmp
));

110 i‡(
fd
 == -1) {

111 
	`ALOGE
("FaûedÅÿ›í %s: %s", 
ãmp
, 
	`°ªº‹
(
î∫o
));

115 
buf
[
BUF_SIZE
];

116 
Àn
 = 
	`¢¥ötf
(
buf
, 
BUF_SIZE
, "%d", 
vÆue
) + 1;

117 i‡(
Àn
 > 
BUF_SIZE
) {

118 
	`ALOGE
("VÆuê%dÅoÿœrge: %s", 
vÆue
, 
	`°ªº‹
(
î∫o
));

119 
Áû
;

121 i‡(
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
fd
, 
buf
, 
Àn
)) <Üen) {

122 
	`ALOGE
("FaûedÅÿwrôê%s: %s", 
ãmp
, 
	`°ªº‹
(
î∫o
));

123 
Áû
;

125 i‡(
	`˛o£
(
fd
) == -1) {

126 
	`ALOGE
("FaûedÅÿ˛o£ %s: %s", 
ãmp
, 
	`°ªº‹
(
î∫o
));

127 
Áû_˛o£d
;

130 i‡(
	`ª«me
(
ãmp
, 
∑th
) == -1) {

131 
	`ALOGE
("FaûedÅÿª«mê%†tÿ%s: %s", 
ãmp
, 
∑th
, 
	`°ªº‹
(
î∫o
));

132 
Áû_˛o£d
;

137 
Áû
:

138 
	`˛o£
(
fd
);

139 
Áû_˛o£d
:

140 
	`u∆ök
(
ãmp
);

142 
	}
}

	@libs/libcutils/hashmap.c

17 
	~<cutûs/hashm≠.h
>

18 
	~<as£π.h
>

19 
	~<î∫o.h
>

20 
	~<cutûs/thªads.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<°dboﬁ.h
>

24 
	~<sys/ty≥s.h
>

26 
E¡ry
 
	tE¡ry
;

27 
	sE¡ry
 {

28 * 
	mkey
;

29 
	mhash
;

30 * 
	mvÆue
;

31 
E¡ry
* 
	m√xt
;

34 
	sHashm≠
 {

35 
E¡ry
** 
	mbuckës
;

36 
size_t
 
	mbuckëCou¡
;

37 (*
	mhash
)(* 
	mkey
);

38 
boﬁ
 (*
equÆs
)(* 
	mkeyA
, * 
	mkeyB
);

39 
muãx_t
 
	mlock
;

40 
size_t
 
	msize
;

43 
Hashm≠
* 
hashm≠Cª©e
(
size_t
 
öôülC≠acôy
,

44 (*
hash
)(* 
key
), 
	$boﬁ
 (*
equÆs
)(* 
keyA
, * 
keyB
)) {

45 
	`as£π
(
hash
 !
NULL
);

46 
	`as£π
(
equÆs
 !
NULL
);

48 
Hashm≠
* 
m≠
 = 
	`mÆloc
((Hashmap));

49 i‡(
m≠
 =
NULL
) {

50  
NULL
;

54 
size_t
 
möimumBuckëCou¡
 = 
öôülC≠acôy
 * 4 / 3;

55 
m≠
->
buckëCou¡
 = 1;

56 
m≠
->
buckëCou¡
 <
möimumBuckëCou¡
) {

58 
m≠
->
buckëCou¡
 <<= 1;

61 
m≠
->
buckës
 = 
	`ˇŒoc
(m≠->
buckëCou¡
, (
E¡ry
*));

62 i‡(
m≠
->
buckës
 =
NULL
) {

63 
	`‰ì
(
m≠
);

64  
NULL
;

67 
m≠
->
size
 = 0;

69 
m≠
->
hash
 = hash;

70 
m≠
->
equÆs
 =Équals;

72 
	`muãx_öô
(&
m≠
->
lock
);

74  
m≠
;

75 
	}
}

80 
ölöe
 
	$hashKey
(
Hashm≠
* 
m≠
, * 
key
) {

81 
h
 = 
m≠
->
	`hash
(
key
);

85 
h
 += ~(h << 9);

86 
h
 ^= ((() h) >> 14);

87 
h
 += (h << 4);

88 
h
 ^= ((() h) >> 10);

90  
h
;

91 
	}
}

93 
size_t
 
	$hashm≠Size
(
Hashm≠
* 
m≠
) {

94  
m≠
->
size
;

95 
	}
}

97 
ölöe
 
size_t
 
	$ˇlcuœãIndex
(
size_t
 
buckëCou¡
, 
hash
) {

98  ((
size_t
Ë
hash
Ë& (
buckëCou¡
 - 1);

99 
	}
}

101 
	$ex∑ndIfNe˚sßry
(
Hashm≠
* 
m≠
) {

103 i‡(
m≠
->
size
 > (m≠->
buckëCou¡
 * 3 / 4)) {

105 
size_t
 
√wBuckëCou¡
 = 
m≠
->
buckëCou¡
 << 1;

106 
E¡ry
** 
√wBuckës
 = 
	`ˇŒoc
(
√wBuckëCou¡
, (Entry*));

107 i‡(
√wBuckës
 =
NULL
) {

113 
size_t
 
i
;

114 
i
 = 0; i < 
m≠
->
buckëCou¡
; i++) {

115 
E¡ry
* 
íåy
 = 
m≠
->
buckës
[
i
];

116 
íåy
 !
NULL
) {

117 
E¡ry
* 
√xt
 = 
íåy
->next;

118 
size_t
 
ödex
 = 
	`ˇlcuœãIndex
(
√wBuckëCou¡
, 
íåy
->
hash
);

119 
íåy
->
√xt
 = 
√wBuckës
[
ödex
];

120 
√wBuckës
[
ödex
] = 
íåy
;

121 
íåy
 = 
√xt
;

126 
	`‰ì
(
m≠
->
buckës
);

127 
m≠
->
buckës
 = 
√wBuckës
;

128 
m≠
->
buckëCou¡
 = 
√wBuckëCou¡
;

130 
	}
}

132 
	$hashm≠Lock
(
Hashm≠
* 
m≠
) {

133 
	`muãx_lock
(&
m≠
->
lock
);

134 
	}
}

136 
	$hashm≠U∆ock
(
Hashm≠
* 
m≠
) {

137 
	`muãx_u∆ock
(&
m≠
->
lock
);

138 
	}
}

140 
	$hashm≠Fªe
(
Hashm≠
* 
m≠
) {

141 
size_t
 
i
;

142 
i
 = 0; i < 
m≠
->
buckëCou¡
; i++) {

143 
E¡ry
* 
íåy
 = 
m≠
->
buckës
[
i
];

144 
íåy
 !
NULL
) {

145 
E¡ry
* 
√xt
 = 
íåy
->next;

146 
	`‰ì
(
íåy
);

147 
íåy
 = 
√xt
;

150 
	`‰ì
(
m≠
->
buckës
);

151 
	`muãx_de°roy
(&
m≠
->
lock
);

152 
	`‰ì
(
m≠
);

153 
	}
}

155 
	$hashm≠Hash
(* 
key
, 
size_t
 
keySize
) {

156 
h
 = 
keySize
;

157 * 
d©a
 = (*Ë
key
;

158 
size_t
 
i
;

159 
i
 = 0; i < 
keySize
; i++) {

160 
h
 = h * 31 + *
d©a
;

161 
d©a
++;

163  
h
;

164 
	}
}

166 
E¡ry
* 
	$¸óãE¡ry
(* 
key
, 
hash
, * 
vÆue
) {

167 
E¡ry
* 
íåy
 = 
	`mÆloc
((Entry));

168 i‡(
íåy
 =
NULL
) {

169  
NULL
;

171 
íåy
->
key
 = key;

172 
íåy
->
hash
 = hash;

173 
íåy
->
vÆue
 = value;

174 
íåy
->
√xt
 = 
NULL
;

175  
íåy
;

176 
	}
}

178 
ölöe
 
boﬁ
 
equÆKeys
(* 
keyA
, 
hashA
, * 
keyB
, 
hashB
,

179 
	$boﬁ
 (*
equÆs
)(*, *)) {

180 i‡(
keyA
 =
keyB
) {

181  
åue
;

183 i‡(
hashA
 !
hashB
) {

184  
Ál£
;

186  
	`equÆs
(
keyA
, 
keyB
);

187 
	}
}

189 * 
	$hashm≠Put
(
Hashm≠
* 
m≠
, * 
key
, * 
vÆue
) {

190 
hash
 = 
	`hashKey
(
m≠
, 
key
);

191 
size_t
 
ödex
 = 
	`ˇlcuœãIndex
(
m≠
->
buckëCou¡
, 
hash
);

193 
E¡ry
** 
p
 = &(
m≠
->
buckës
[
ödex
]);

194 
åue
) {

195 
E¡ry
* 
cuºít
 = *
p
;

198 i‡(
cuºít
 =
NULL
) {

199 *
p
 = 
	`¸óãE¡ry
(
key
, 
hash
, 
vÆue
);

200 i‡(*
p
 =
NULL
) {

201 
î∫o
 = 
ENOMEM
;

202  
NULL
;

204 
m≠
->
size
++;

205 
	`ex∑ndIfNe˚sßry
(
m≠
);

206  
NULL
;

210 i‡(
	`equÆKeys
(
cuºít
->
key
, cuºít->
hash
, key, hash, 
m≠
->
equÆs
)) {

211 * 
ﬁdVÆue
 = 
cuºít
->
vÆue
;

212 
cuºít
->
vÆue
 = value;

213  
ﬁdVÆue
;

217 
p
 = &
cuºít
->
√xt
;

219 
	}
}

221 * 
	$hashm≠Gë
(
Hashm≠
* 
m≠
, * 
key
) {

222 
hash
 = 
	`hashKey
(
m≠
, 
key
);

223 
size_t
 
ödex
 = 
	`ˇlcuœãIndex
(
m≠
->
buckëCou¡
, 
hash
);

225 
E¡ry
* 
íåy
 = 
m≠
->
buckës
[
ödex
];

226 
íåy
 !
NULL
) {

227 i‡(
	`equÆKeys
(
íåy
->
key
,É¡ry->
hash
, key, hash, 
m≠
->
equÆs
)) {

228  
íåy
->
vÆue
;

230 
íåy
 =É¡ry->
√xt
;

233  
NULL
;

234 
	}
}

236 
boﬁ
 
	$hashm≠C⁄èösKey
(
Hashm≠
* 
m≠
, * 
key
) {

237 
hash
 = 
	`hashKey
(
m≠
, 
key
);

238 
size_t
 
ödex
 = 
	`ˇlcuœãIndex
(
m≠
->
buckëCou¡
, 
hash
);

240 
E¡ry
* 
íåy
 = 
m≠
->
buckës
[
ödex
];

241 
íåy
 !
NULL
) {

242 i‡(
	`equÆKeys
(
íåy
->
key
,É¡ry->
hash
, key, hash, 
m≠
->
equÆs
)) {

243  
åue
;

245 
íåy
 =É¡ry->
√xt
;

248  
Ál£
;

249 
	}
}

251 * 
hashm≠Memoize
(
Hashm≠
* 
m≠
, * 
key
,

252 * (*
öôülVÆue
)(* 
key
, * 
c⁄ãxt
), * context) {

253 
	ghash
 = 
hashKey
(
m≠
, 
key
);

254 
size_t
 
	gödex
 = 
ˇlcuœãIndex
(
m≠
->
buckëCou¡
, 
hash
);

256 
E¡ry
** 
	gp
 = &(
m≠
->
buckës
[
ödex
]);

257 
	gåue
) {

258 
E¡ry
* 
	gcuºít
 = *
p
;

261 i‡(
	gcuºít
 =
NULL
) {

262 *
p
 = 
¸óãE¡ry
(
key
, 
hash
, 
NULL
);

263 i‡(*
	gp
 =
NULL
) {

264 
î∫o
 = 
ENOMEM
;

265  
	gNULL
;

267 * 
	gvÆue
 = 
öôülVÆue
(
key
, 
c⁄ãxt
);

268 (*
	gp
)->
	gvÆue
 = 
vÆue
;

269 
	gm≠
->
	gsize
++;

270 
ex∑ndIfNe˚sßry
(
m≠
);

271  
	gvÆue
;

275 i‡(
equÆKeys
(
cuºít
->
key
, cuºít->
hash
, key, hash, 
m≠
->
equÆs
)) {

276  
	gcuºít
->
	gvÆue
;

280 
	gp
 = &
cuºít
->
√xt
;

284 * 
	$hashm≠Remove
(
Hashm≠
* 
m≠
, * 
key
) {

285 
hash
 = 
	`hashKey
(
m≠
, 
key
);

286 
size_t
 
ödex
 = 
	`ˇlcuœãIndex
(
m≠
->
buckëCou¡
, 
hash
);

289 
E¡ry
** 
p
 = &(
m≠
->
buckës
[
ödex
]);

290 
E¡ry
* 
cuºít
;

291 (
cuºít
 = *
p
Ë!
NULL
) {

292 i‡(
	`equÆKeys
(
cuºít
->
key
, cuºít->
hash
, key, hash, 
m≠
->
equÆs
)) {

293 * 
vÆue
 = 
cuºít
->value;

294 *
p
 = 
cuºít
->
√xt
;

295 
	`‰ì
(
cuºít
);

296 
m≠
->
size
--;

297  
vÆue
;

300 
p
 = &
cuºít
->
√xt
;

303  
NULL
;

304 
	}
}

306 
hashm≠F‹Each
(
Hashm≠
* 
m≠
,

307 
	$boﬁ
 (*
ˇŒback
)(* 
key
, * 
vÆue
, * 
c⁄ãxt
),

308 * 
c⁄ãxt
) {

309 
size_t
 
i
;

310 
i
 = 0; i < 
m≠
->
buckëCou¡
; i++) {

311 
E¡ry
* 
íåy
 = 
m≠
->
buckës
[
i
];

312 
íåy
 !
NULL
) {

313 
E¡ry
 *
√xt
 = 
íåy
->next;

314 i‡(!
	`ˇŒback
(
íåy
->
key
,É¡ry->
vÆue
, 
c⁄ãxt
)) {

317 
íåy
 = 
√xt
;

320 
	}
}

322 
size_t
 
	$hashm≠CuºítC≠acôy
(
Hashm≠
* 
m≠
) {

323 
size_t
 
buckëCou¡
 = 
m≠
->bucketCount;

324  
buckëCou¡
 * 3 / 4;

325 
	}
}

327 
size_t
 
	$hashm≠Cou¡Cﬁlisi⁄s
(
Hashm≠
* 
m≠
) {

328 
size_t
 
cﬁlisi⁄s
 = 0;

329 
size_t
 
i
;

330 
i
 = 0; i < 
m≠
->
buckëCou¡
; i++) {

331 
E¡ry
* 
íåy
 = 
m≠
->
buckës
[
i
];

332 
íåy
 !
NULL
) {

333 i‡(
íåy
->
√xt
 !
NULL
) {

334 
cﬁlisi⁄s
++;

336 
íåy
 =É¡ry->
√xt
;

339  
cﬁlisi⁄s
;

340 
	}
}

342 
	$hashm≠I¡Hash
(* 
key
) {

344  *((*Ë
key
);

345 
	}
}

347 
boﬁ
 
	$hashm≠I¡EquÆs
(* 
keyA
, * 
keyB
) {

348 
a
 = *((*Ë
keyA
);

349 
b
 = *((*Ë
keyB
);

350  
a
 =
b
;

351 
	}
}

	@libs/libcutils/include/ashmem.h

12 #i‚de‡
_LINUX_ASHMEM_H


13 
	#_LINUX_ASHMEM_H


	)

15 
	~<löux/limôs.h
>

16 
	~<löux/io˘l.h
>

17 
	~<löux/ty≥s.h
>

18 
	#ASHMEM_NAME_LEN
 256

	)

20 
	#ASHMEM_NAME_DEF
 "dev/ashmem"

	)

23 
	#ASHMEM_NOT_PURGED
 0

	)

24 
	#ASHMEM_WAS_PURGED
 1

	)

27 
	#ASHMEM_IS_UNPINNED
 0

	)

28 
	#ASHMEM_IS_PINNED
 1

	)

30 
	sashmem_pö
 {

31 
__u32
 
	moff£t
;

32 
__u32
 
	mÀn
;

35 
	#__ASHMEMIOC
 0x77

	)

37 
	#ASHMEM_SET_NAME
 
	`_IOW
(
__ASHMEMIOC
, 1, [
ASHMEM_NAME_LEN
])

	)

38 
	#ASHMEM_GET_NAME
 
	`_IOR
(
__ASHMEMIOC
, 2, [
ASHMEM_NAME_LEN
])

	)

39 
	#ASHMEM_SET_SIZE
 
	`_IOW
(
__ASHMEMIOC
, 3, 
size_t
)

	)

40 
	#ASHMEM_GET_SIZE
 
	`_IO
(
__ASHMEMIOC
, 4)

	)

41 
	#ASHMEM_SET_PROT_MASK
 
	`_IOW
(
__ASHMEMIOC
, 5, )

	)

42 
	#ASHMEM_GET_PROT_MASK
 
	`_IO
(
__ASHMEMIOC
, 6)

	)

43 
	#ASHMEM_PIN
 
	`_IOW
(
__ASHMEMIOC
, 7, 
ashmem_pö
)

	)

44 
	#ASHMEM_UNPIN
 
	`_IOW
(
__ASHMEMIOC
, 8, 
ashmem_pö
)

	)

45 
	#ASHMEM_GET_PIN_STATUS
 
	`_IO
(
__ASHMEMIOC
, 9)

	)

46 
	#ASHMEM_PURGE_ALL_CACHES
 
	`_IO
(
__ASHMEMIOC
, 10)

	)

	@libs/libcutils/iosched_policy.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<uni°d.h
>

22 
	~<°rög.h
>

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

26 #ifde‡
HAVE_SCHED_H


28 
	~<cutûs/iosched_pﬁicy.h
>

30 
i›rio_£t
(
which
, 
who
, 
i›rio
);

33 
	mWHO_PROCESS
 = 1,

34 
	mWHO_PGRP
,

35 
	mWHO_USER
,

38 
	#CLASS_SHIFT
 13

	)

39 
	#IOPRIO_NORM
 4

	)

41 
	$™droid_£t_i›rio
(
pid
, 
IoSchedCœss
 
˛azz
, 
i›rio
) {

42 #ifde‡
HAVE_ANDROID_OS


43 i‡(
	`i›rio_£t
(
WHO_PROCESS
, 
pid
, 
i›rio
 | (
˛azz
 << 
CLASS_SHIFT
))) {

48 
	}
}

50 
	$™droid_gë_i›rio
(
pid
, 
IoSchedCœss
 *
˛azz
, *
i›rio
) {

51 #ifde‡
HAVE_ANDROID_OS


52 
rc
;

54 i‡((
rc
 = 
	`i›rio_gë
(
WHO_PROCESS
, 
pid
)) < 0) {

58 *
˛azz
 = (
rc
 >> 
CLASS_SHIFT
);

59 *
i›rio
 = (
rc
 & 0xff);

61 *
˛azz
 = 
IoSchedCœss_NONE
;

62 *
i›rio
 = 0;

65 
	}
}

	@libs/libcutils/klog.c

17 
	~<sys/°©.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<f˙é.h
>

20 
	~<°d¨g.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<uni°d.h
>

26 
	~<cutûs/klog.h
>

28 
	gklog_fd
 = -1;

29 
	gklog_Àvñ
 = 
KLOG_DEFAULT_LEVEL
;

31 
	$klog_£t_Àvñ
(
Àvñ
) {

32 
klog_Àvñ
 = 
Àvñ
;

33 
	}
}

35 
	$klog_öô
()

37 c⁄° *
«me
 = "/dev/__kmsg__";

38 i‡(
	`mknod
(
«me
, 
S_IFCHR
 | 0600, (1 << 8) | 11) == 0) {

39 
klog_fd
 = 
	`›í
(
«me
, 
O_WRONLY
);

40 
	`f˙é
(
klog_fd
, 
F_SETFD
, 
FD_CLOEXEC
);

41 
	`u∆ök
(
«me
);

43 
	}
}

45 
	#LOG_BUF_MAX
 512

	)

47 
	$klog_wrôe
(
Àvñ
, c⁄° *
fmt
, ...)

49 
buf
[
LOG_BUF_MAX
];

50 
va_li°
 
≠
;

52 i‡(
Àvñ
 > 
klog_Àvñ
) ;

53 i‡(
klog_fd
 < 0) ;

55 
	`va_°¨t
(
≠
, 
fmt
);

56 
	`v¢¥ötf
(
buf
, 
LOG_BUF_MAX
, 
fmt
, 
≠
);

57 
buf
[
LOG_BUF_MAX
 - 1] = 0;

58 
	`va_íd
(
≠
);

59 
	`wrôe
(
klog_fd
, 
buf
, 
	`°æí
(buf));

60 
	}
}

	@libs/libcutils/list.c

17 
	~<cutûs/li°.h
>

19 
	$li°_öô
(
li°node
 *
node
)

21 
node
->
√xt
 =Çode;

22 
node
->
¥ev
 =Çode;

23 
	}
}

25 
	$li°_add_èû
(
li°node
 *
hód
, li°nodê*
ôem
)

27 
ôem
->
√xt
 = 
hód
;

28 
ôem
->
¥ev
 = 
hód
->prev;

29 
hód
->
¥ev
->
√xt
 = 
ôem
;

30 
hód
->
¥ev
 = 
ôem
;

31 
	}
}

33 
	$li°_ªmove
(
li°node
 *
ôem
)

35 
ôem
->
√xt
->
¥ev
 = item->prev;

36 
ôem
->
¥ev
->
√xt
 = item->next;

37 
	}
}

	@libs/libcutils/load_file.c

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<f˙é.h
>

22 *
	$lﬂd_fûe
(c⁄° *
‚
, *
_sz
)

24 *
d©a
;

25 
sz
;

26 
fd
;

28 
d©a
 = 0;

29 
fd
 = 
	`›í
(
‚
, 
O_RDONLY
);

30 if(
fd
 < 0)  0;

32 
sz
 = 
	`l£ek
(
fd
, 0, 
SEEK_END
);

33 if(
sz
 < 0Ë
o›s
;

35 if(
	`l£ek
(
fd
, 0, 
SEEK_SET
Ë!0Ë
o›s
;

37 
d©a
 = (*Ë
	`mÆloc
(
sz
 + 1);

38 if(
d©a
 =0Ë
o›s
;

40 if(
	`ªad
(
fd
, 
d©a
, 
sz
Ë!szË
o›s
;

41 
	`˛o£
(
fd
);

42 
d©a
[
sz
] = 0;

44 if(
_sz
Ë*_sz = 
sz
;

45  
d©a
;

47 
o›s
:

48 
	`˛o£
(
fd
);

49 if(
d©a
 !0Ë
	`‰ì
(data);

51 
	}
}

	@libs/libcutils/loghack.h

21 #i‚de‡
_CUTILS_LOGHACK_H


22 
	#_CUTILS_LOGHACK_H


	)

24 #ifde‡
HAVE_ANDROID_OS


25 
	~<cutûs/log.h
>

27 
	~<°dio.h
>

28 
	#ALOG
(
Àvñ
, ...) \

29 (()
	`¥ötf
("cutûs:" 
Àvñ
 "/" 
LOG_TAG
 ": " 
__VA_ARGS__
))

	)

30 
	#ALOGV
(...Ë
	`ALOG
("V", 
__VA_ARGS__
)

	)

31 
	#ALOGD
(...Ë
	`ALOG
("D", 
__VA_ARGS__
)

	)

32 
	#ALOGI
(...Ë
	`ALOG
("I", 
__VA_ARGS__
)

	)

33 
	#ALOGW
(...Ë
	`ALOG
("W", 
__VA_ARGS__
)

	)

34 
	#ALOGE
(...Ë
	`ALOG
("E", 
__VA_ARGS__
)

	)

35 
	#LOG_ALWAYS_FATAL
(...Ëdÿ{ 
	`ALOGE
(
__VA_ARGS__
); 
	`exô
(1); } 0)

	)

	@libs/libcutils/memory.c

17 
	~<cutûs/mem‹y.h
>

19 #i‡!
HAVE_MEMSET16


20 
	$™droid_mem£t16
(
uöt16_t
* 
d°
, uöt16_à
vÆue
, 
size_t
 
size
)

22 
size
 >>= 1;

23 
size
--) {

24 *
d°
++ = 
vÆue
;

26 
	}
}

29 #i‡!
HAVE_MEMSET32


30 
	$™droid_mem£t32
(
uöt32_t
* 
d°
, uöt32_à
vÆue
, 
size_t
 
size
)

32 
size
 >>= 2;

33 
size
--) {

34 *
d°
++ = 
vÆue
;

36 
	}
}

39 #i‡!
HAVE_STRLCPY


56 
	~<sys/ty≥s.h
>

57 
	~<°rög.h
>

66 
size_t


67 
	$°æ˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
siz
)

69 *
d
 = 
d°
;

70 c⁄° *
s
 = 
§c
;

71 
size_t
 
n
 = 
siz
;

74 i‡(
n
 != 0) {

75 --
n
 != 0) {

76 i‡((*
d
++ = *
s
++) == '\0')

82 i‡(
n
 == 0) {

83 i‡(
siz
 != 0)

84 *
d
 = '\0';

85 *
s
++)

89 (
s
 - 
§c
 - 1);

90 
	}
}

	@libs/libcutils/misc_rw.c

2 
	#LOG_TAG
 "misc_rw"

	)

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<°dio.h
>

8 
	~<î∫o.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<f˙é.h
>

15 c⁄° *
	gMISC_DEVICE
 = "/dev/by-name/misc";

17 
	#LOGE
(...Ë
	`Ârötf
(
°dîr
, "E:" 
__VA_ARGS__
)

	)

21 
	sboŸlﬂdî_mesßge
 {

22 
	mcomm™d
[32];

23 
	m°©us
[32];

24 
	mªcovîy
[1024];

32 
	$gë_mtd_∑πôi⁄_ödex_by«me
(c⁄° * 
«me
)

34 * 
löe
 = 
NULL
;

35 
size_t
 
Àn
 = 0;

36 
ssize_t
 
ªad
;

37 
ödex
 = 0;

38 
FILE
* 
Â
;

39 
Â
 = 
	`f›í
("/proc/mtd","r");

40 if(
Â
 =
NULL
){

41 
	`LOGE
("›í /¥oc/mtd faûed(%s)\n",
	`°ªº‹
(
î∫o
));

44 (
ªad
 = 
	`gëlöe
(&
löe
, &
Àn
, 
Â
)) != -1) {

45 if–
	`°r°r
(
löe
,
«me
Ë=
NULL
 )

47 
ödex
 = 
löe
[3] - '0';

50 
	`‰ì
(
löe
);

51  
ödex
;

52 
	}
}

53 
	$is_mmc_‹_mtd
()

55 
∑π_ödex
 = 0;

56 
is_mtd
 = 
	`ac˚ss
("/dev/mtd0", 
F_OK
);

57 if(
is_mtd
 == -1)

59 
∑π_ödex
 = 
	`gë_mtd_∑πôi⁄_ödex_by«me
("misc");

60  
∑π_ödex
;

61 
	}
}

63 
	$gë_boŸlﬂdî_mesßge_block
(
boŸlﬂdî_mesßge
 *
out
,

64 c⁄° * 
misc
)

66 
devi˚
[50];

67 
FILE
* 
f
;

68 
id
 = 
	`is_mmc_‹_mtd
();

69 if(
id
 == 0){

70 
	`°r˝y
(
devi˚
,
misc
);

73 
	`•rötf
(
devi˚
,"/dev/mtd%d",
id
);

76 
f
 = 
	`f›í
(
devi˚
, "rb");

77 i‡(
f
 =
NULL
) {

78 
	`LOGE
("C™'à›í %s\n(%s)\n", 
devi˚
, 
	`°ªº‹
(
î∫o
));

81 
boŸlﬂdî_mesßge
 
ãmp
;

82 
cou¡
 = 
	`‰ód
(&
ãmp
, —emp), 1, 
f
);

83 i‡(
cou¡
 != 1) {

84 
	`LOGE
("FaûedÑódög %s\n(%s)\n", 
devi˚
, 
	`°ªº‹
(
î∫o
));

87 i‡(
	`f˛o£
(
f
) != 0) {

88 
	`LOGE
("Faûed closög %s\n(%s)\n", 
devi˚
, 
	`°ªº‹
(
î∫o
));

91 
	`mem˝y
(
out
, &
ãmp
, (temp));

93 
	}
}

95 
	$£t_boŸlﬂdî_mesßge_block
(c⁄° 
boŸlﬂdî_mesßge
 *
ö
,

96 c⁄° * 
misc
)

98 
devi˚
[50];

99 
FILE
* 
f
;

100 
id
 = 
	`is_mmc_‹_mtd
();

101 if(
id
 == 0){

102 
	`°r˝y
(
devi˚
,
misc
);

105 
	`•rötf
(
devi˚
,"/dev/mtd%d",
id
);

106 
	`sy°em
("mtdÉrase misc");

109 
f
 = 
	`f›í
(
devi˚
,"wb");

110 i‡(
f
 =
NULL
) {

111 
	`LOGE
("C™'à›í %s\n(%s)\n", 
devi˚
, 
	`°ªº‹
(
î∫o
));

114 
cou¡
 = 
	`fwrôe
(
ö
, (*ö), 1, 
f
);

115 i‡(
cou¡
 != 1) {

116 
	`LOGE
("Faûed wrôög %s\n(%s)\n", 
devi˚
, 
	`°ªº‹
(
î∫o
));

119 
	`fsync
(
f
);

120 i‡(
	`f˛o£
(
f
) != 0) {

121 
	`LOGE
("Faûed closög %s\n(%s)\n", 
devi˚
, 
	`°ªº‹
(
î∫o
));

125 
	}
}

127 
	$wrôe_misc
(*
ªas⁄
){

129 if(
	`°rcmp
(
ªas⁄
,"efex") != 0){

133 
boŸlﬂdî_mesßge
 
boŸ
, 
ãmp
;

135 
	`mem£t
(&
boŸ
, 0, (boot));

136 if(!
	`°rcmp
("ªcovîy",
ªas⁄
)){

137 
ªas⁄
 = "boot-recovery";

140 
	`°r˝y
(
boŸ
.
comm™d
,
ªas⁄
);

141 i‡(
	`£t_boŸlﬂdî_mesßge_block
(&
boŸ
, 
MISC_DEVICE
) )

145 
	`mem£t
(&
ãmp
, 0, (temp));

146 i‡(
	`gë_boŸlﬂdî_mesßge_block
(&
ãmp
, 
MISC_DEVICE
))

149 if–
	`memcmp
(&
boŸ
, &
ãmp
, (boot)) )

154 
	}
}

169 c⁄° *
	gCOMMAND_FILE
 = "/cache/recovery/command";

171 
	$go_upd©e_∑ckage
(c⁄° *
∑th
){

175 
	}
}

	@libs/libcutils/mq.c

17 
	#LOG_TAG
 "mq"

	)

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<±hªad.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

25 
	~<uni°d.h
>

27 
	~<sys/sockë.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/un.h
>

30 
	~<sys/uio.h
>

32 
	~<cutûs/¨øy.h
>

33 
	~<cutûs/hashm≠.h
>

34 
	~<cutûs/£À˘‹.h
>

36 
	~"loghack.h
"

37 
	~"buf„r.h
"

40 
	#PEER_HISTORY
 (16)

	)

42 
sockaddr
 
	tSockëAddªss
;

43 
sockaddr_un
 
	tUnixAddªss
;

50 
pid_t
 
	mpid
;

51 
uid_t
 
	muid
;

52 
gid_t
 
	mgid
;

53 } 
	tCªdítüls
;

56 
	tByãsLi°íî
(
	tCªdítüls
 
	t¸edítüls
, * 
	tbyãs
, 
	tsize_t
 
	tsize
);

59 
	tDóthLi°íî
(
	tpid_t
 
	tpid
);

64 
	mCONNECTION_REQUEST
,

67 
	mCONNECTION
,

70 
	mCONNECTION_ERROR
,

73 
	mBYTES
,

74 } 
	tPackëTy≥
;

78 
	mREADING_HEADER
,

81 
	mACCEPTING_CONNECTION
,

84 
	mREADING_BYTES
,

85 } 
	tI≈utSèã
;

90 
PackëTy≥
 
	mty≥
;

93 
size_t
 
	msize
;

96 
Cªdítüls
 
	m¸edítüls
;

98 } 
	tHódî
;

101 
OutgoögPackë
 
	tOutgoögPackë
;

102 
	sOutgoögPackë
 {

104 
Hódî
 
	mhódî
;

108 
	msockë
;

111 
Buf„r
* 
	mbyãs
;

115 (*
	m‰ì
)(
OutgoögPackë
* 
	m∑ckë
);

118 * 
	mc⁄ãxt
;

121 
OutgoögPackë
* 
	m√xtPackë
;

125 
PìrProxy
 
	tPìrProxy
;

130 
pid_t
 
	mpid
;

138 
Hashm≠
* 
	m≥îProxõs
;

141 
Sñe˘‹
* 
	m£À˘‹
;

144 
±hªad_muãx_t
 
	mmuãx
;

147 
boﬁ
 
	mma°î
;

150 
PìrProxy
* 
	mma°îProxy
;

153 
ByãsLi°íî
* 
	m⁄Byãs
;

156 
DóthLi°íî
* 
	m⁄Dóth
;

159 
pid_t
 
	mdódPìrs
[
PEER_HISTORY
];

160 
size_t
 
	mdódPìrCurs‹
;

161 } 
	tPìr
;

163 
	sPìrProxy
 {

165 
Cªdítüls
 
	m¸edítüls
;

168 
I≈utSèã
 
	möputSèã
;

169 
Buf„r
* 
	möputBuf„r
;

170 
PìrProxy
* 
	mc⁄√˘ög
;

173 
Sñe˘abÀFd
* 
	mfd
;

181 
OutgoögPackë
* 
	mcuºítPackë
;

182 
OutgoögPackë
* 
	mœ°Packë
;

185 
Buf„r
 
	moutgoögHódî
;

188 
boﬁ
 
	mma°î
;

191 
Pìr
* 
	m≥î
;

198 
Hashm≠
* 
	mc⁄√˘i⁄s
;

202 c⁄° * 
	gMASTER_PATH
 = "/master.peer";

205 c⁄° 
Cªdítüls
 
	gMASTER_CREDENTIALS
 = {0, 0, 0};

208 
PìrProxy
* 
≥îProxyCª©e
(
Pìr
* 
≥î
, 
Cªdítüls
 
¸edítüls
);

211 
	$£tN⁄Blockög
(
fd
) {

212 
Êags
;

213 i‡((
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
, 0)) < 0) {

214 
	`LOG_ALWAYS_FATAL
("f˙é(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

216 i‡(
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

217 
	`LOG_ALWAYS_FATAL
("f˙é(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

219 
	}
}

222 
	$˛o£WôhW¨nög
(
fd
) {

223 
ªsu…
 = 
	`˛o£
(
fd
);

224 i‡(
ªsu…
 == -1) {

225 
	`ALOGW
("˛o£(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

227 
	}
}

230 
	$pidHash
(* 
key
) {

231 
pid_t
* 
pid
 = (pid_t*Ë
key
;

232  (Ë(*
pid
);

233 
	}
}

236 
boﬁ
 
	$pidEquÆs
(* 
keyA
, * 
keyB
) {

237 
pid_t
* 
a
 = (pid_t*Ë
keyA
;

238 
pid_t
* 
b
 = (pid_t*Ë
keyB
;

239  *
a
 =*
b
;

240 
	}
}

243 
UnixAddªss
* 
	$gëMa°îAddªss
() {

244 
UnixAddªss
 
ma°îAddªss
;

245 
boﬁ
 
öôülized
 = 
Ál£
;

246 i‡(
öôülized
 =
Ál£
) {

247 
ma°îAddªss
.
sun_Ámûy
 = 
AF_LOCAL
;

248 
	`°r˝y
(
ma°îAddªss
.
sun_∑th
, 
MASTER_PATH
);

249 
öôülized
 = 
åue
;

251  &
ma°îAddªss
;

252 
	}
}

255 
	$≥îLock
(
Pìr
* 
≥î
) {

256 
	`±hªad_muãx_lock
(&
≥î
->
muãx
);

257 
	}
}

260 
	$≥îU∆ock
(
Pìr
* 
≥î
) {

261 
	`±hªad_muãx_u∆ock
(&
≥î
->
muãx
);

262 
	}
}

265 
	$outgoögPackëFªe
(
OutgoögPackë
* 
∑ckë
) {

266 
	`ALOGD
("Freeing outgoingÖacket.");

267 
	`‰ì
(
∑ckë
);

268 
	}
}

273 
	$≥îProxyEx≥˘Hódî
(
PìrProxy
* 
≥îProxy
) {

274 
≥îProxy
->
öputSèã
 = 
READING_HEADER
;

275 
	`buf„rPª∑ªF‹Ród
(
≥îProxy
->
öputBuf„r
, (
Hódî
));

276 
	}
}

279 
	$≥îProxyPª∑ªOutgoögHódî
(
PìrProxy
* 
≥îProxy
) {

280 
≥îProxy
->
outgoögHódî
.
d©a


281 (*Ë&(
≥îProxy
->
cuºítPackë
->
hódî
);

282 
≥îProxy
->
outgoögHódî
.
size
 = (
Hódî
);

283 
	`buf„rPª∑ªF‹Wrôe
(&
≥îProxy
->
outgoögHódî
);

284 
	}
}

287 
	$≥îProxyEnqueueOutgoögPackë
(
PìrProxy
* 
≥îProxy
,

288 
OutgoögPackë
* 
√wPackë
) {

289 
√wPackë
->
√xtPackë
 = 
NULL
;

290 i‡(
≥îProxy
->
cuºítPackë
 =
NULL
) {

292 
≥îProxy
->
cuºítPackë
 = 
√wPackë
;

293 
≥îProxy
->
œ°Packë
 = 
√wPackë
;

295 
	`≥îProxyPª∑ªOutgoögHódî
(
≥îProxy
);

297 
≥îProxy
->
œ°Packë
->
√xtPackë
 = 
√wPackë
;

299 
	}
}

302 
	$≥îProxyLockAndEnqueueOutgoögPackë
(
PìrProxy
* 
≥îProxy
,

303 
OutgoögPackë
* 
√wPackë
) {

304 
Pìr
* 
≥î
 = 
≥îProxy
->peer;

305 
	`≥îLock
(
≥î
);

306 
	`≥îProxyEnqueueOutgoögPackë
(
≥îProxy
, 
√wPackë
);

307 
	`≥îU∆ock
(
≥î
);

308 
	}
}

314 
boﬁ
 
	$≥îProxyNextPackë
(
PìrProxy
* 
≥îProxy
) {

315 
Pìr
* 
≥î
 = 
≥îProxy
->peer;

316 
	`≥îLock
(
≥î
);

318 
OutgoögPackë
* 
cuºít
 = 
≥îProxy
->
cuºítPackë
;

320 i‡(
cuºít
 =
NULL
) {

322 
	`≥îU∆ock
(
≥î
);

323  
Ál£
;

326 
OutgoögPackë
* 
√xt
 = 
cuºít
->
√xtPackë
;

327 
≥îProxy
->
cuºítPackë
 = 
√xt
;

328 
cuºít
->
√xtPackë
 = 
NULL
;

329 
cuºít
->
	`‰ì
(current);

330 i‡(
√xt
 =
NULL
) {

332 
≥îProxy
->
œ°Packë
 = 
NULL
;

333 
	`≥îU∆ock
(
≥î
);

334  
Ál£
;

336 
	`≥îU∆ock
(
≥î
);

337 
	`≥îProxyPª∑ªOutgoögHódî
(
≥îProxy
);

341  
åue
;

343 
	}
}

348 
boﬁ
 
	$≥îIsDód
(
Pìr
* 
≥î
, 
pid_t
 
pid
) {

349 
size_t
 
i
;

350 
i
 = 0; i < 
PEER_HISTORY
; i++) {

351 
pid_t
 
dódPìr
 = 
≥î
->
dódPìrs
[
i
];

352 i‡(
dódPìr
 == 0) {

353  
Ál£
;

355 i‡(
dódPìr
 =
pid
) {

356  
åue
;

359  
Ál£
;

360 
	}
}

365 
boﬁ
 
	$≥îProxyRemoveC⁄√˘i⁄
(* 
key
, * 
vÆue
, * 
c⁄ãxt
) {

366 
PìrProxy
* 
dódPìr
 = (PìrProxy*Ë
c⁄ãxt
;

367 
PìrProxy
* 
ŸhîPìr
 = (PìrProxy*Ë
vÆue
;

368 
	`hashm≠Remove
(
ŸhîPìr
->
c⁄√˘i⁄s
, &(
dódPìr
->
¸edítüls
.
pid
));

369  
åue
;

370 
	}
}

375 
	$≥îProxyKûl
(
PìrProxy
* 
≥îProxy
, 
boﬁ
 
î∫oIsSë
) {

376 i‡(
î∫oIsSë
) {

377 
	`ALOGI
("Pì∏%d dõd.Éºno: %s", 
≥îProxy
->
¸edítüls
.
pid
,

378 
	`°ªº‹
(
î∫o
));

380 
	`ALOGI
("Pì∏%d dõd.", 
≥îProxy
->
¸edítüls
.
pid
);

384 i‡(
≥îProxy
->
ma°î
) {

385 
	`LOG_ALWAYS_FATAL
("Lost connectionÅo master.");

388 
Pìr
* 
loˇlPìr
 = 
≥îProxy
->
≥î
;

389 
pid_t
 
pid
 = 
≥îProxy
->
¸edítüls
.pid;

391 
	`≥îLock
(
loˇlPìr
);

394 
loˇlPìr
->
dódPìrs
[loˇlPìr->
dódPìrCurs‹
]

395 
≥îProxy
->
¸edítüls
.
pid
;

396 
loˇlPìr
->
dódPìrCurs‹
++;

397 i‡(
loˇlPìr
->
dódPìrCurs‹
 =
PEER_HISTORY
) {

398 
loˇlPìr
->
dódPìrCurs‹
 = 0;

402 
	`hashm≠Remove
(
loˇlPìr
->
≥îProxõs
, &
pid
);

406 
	`≥îU∆ock
(
loˇlPìr
);

409 i‡(
≥îProxy
->
fd
 !
NULL
) {

410 
≥îProxy
->
fd
->
ªmove
 = 
åue
;

414 
	`≥îProxyNextPackë
(
≥îProxy
)) {}

416 
	`buf„rFªe
(
≥îProxy
->
öputBuf„r
);

419 i‡(
≥îProxy
->
c⁄√˘i⁄s
 !
NULL
) {

421 
	`hashm≠F‹Each
(
≥îProxy
->
c⁄√˘i⁄s
, &
≥îProxyRemoveC⁄√˘i⁄
,

422 
≥îProxy
);

423 
	`hashm≠Fªe
(
≥îProxy
->
c⁄√˘i⁄s
);

427 
loˇlPìr
->
	`⁄Dóth
(
pid
);

430 
	`‰ì
(
≥îProxy
);

431 
	}
}

433 
	$≥îProxyH™dÀEº‹
(
PìrProxy
* 
≥îProxy
, * 
fun˘i⁄Name
) {

434 i‡(
î∫o
 =
EINTR
) {

436 
	`ALOGW
("%s(Ëöãºu±ed.", 
fun˘i⁄Name
);

437 } i‡(
î∫o
 =
EAGAIN
) {

438 
	`ALOGD
("EWOULDBLOCK");

441 
	`ALOGW
("Eº‹Ñëu∫ed by %s().", 
fun˘i⁄Name
);

442 
	`≥îProxyKûl
(
≥îProxy
, 
åue
);

444 
	}
}

450 
boﬁ
 
	$≥îProxyWrôeFromBuf„r
(
PìrProxy
* 
≥îProxy
, 
Buf„r
* 
outgoög
) {

451 
ssize_t
 
size
 = 
	`buf„rWrôe
(
outgoög
, 
≥îProxy
->
fd
->fd);

452 i‡(
size
 < 0) {

453 
	`≥îProxyH™dÀEº‹
(
≥îProxy
, "write");

454  
Ál£
;

456  
	`buf„rWrôeCom∂ëe
(
outgoög
);

458 
	}
}

461 
	$≥îProxyWrôeByãs
(
PìrProxy
* 
≥îProxy
) {

462 
Buf„r
* 
buf„r
 = 
≥îProxy
->
cuºítPackë
->
byãs
;

463 i‡(
	`≥îProxyWrôeFromBuf„r
(
≥îProxy
, 
buf„r
)) {

464 
	`ALOGD
("Bytes written.");

465 
	`≥îProxyNextPackë
(
≥îProxy
);

467 
	}
}

470 
	$≥îProxyWrôeC⁄√˘i⁄
(
PìrProxy
* 
≥îProxy
) {

471 
sockë
 = 
≥îProxy
->
cuºítPackë
->socket;

474 
msghdr
 
msg
;

475 
iovec
 
iov
[1];

478 
cmsghdr
 
cm
;

479 
c⁄åﬁ
[
	`CMSG_SPACE
(())];

480 } 
c⁄åﬁ_un
;

482 
cmsghdr
 *
cm±r
;

484 
msg
.
msg_c⁄åﬁ
 = 
c⁄åﬁ_un
.
c⁄åﬁ
;

485 
msg
.
msg_c⁄åﬁÀn
 = (
c⁄åﬁ_un
.
c⁄åﬁ
);

486 
cm±r
 = 
	`CMSG_FIRSTHDR
(&
msg
);

487 
cm±r
->
cmsg_Àn
 = 
	`CMSG_LEN
(());

488 
cm±r
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

489 
cm±r
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

492 *((*Ë
	`CMSG_DATA
(
cm±r
)Ë
≥îProxy
->
cuºítPackë
->
sockë
;

494 
msg
.
msg_«me
 = 
NULL
;

495 
msg
.
msg_«mñí
 = 0;

496 
iov
[0].
iov_ba£
 = "";

497 
iov
[0].
iov_Àn
 = 1;

498 
msg
.
msg_iov
 = 
iov
;

499 
msg
.
msg_iovÀn
 = 1;

501 
ssize_t
 
ªsu…
 = 
	`£ndmsg
(
≥îProxy
->
fd
->fd, &
msg
, 0);

503 i‡(
ªsu…
 < 0) {

504 
	`≥îProxyH™dÀEº‹
(
≥îProxy
, "sendmsg");

507 
	`≥îProxyNextPackë
(
≥îProxy
);

510 
	}
}

515 
	$≥îProxyWrôe
(
Sñe˘abÀFd
* 
fd
) {

518 
PìrProxy
* 
≥îProxy
 = (PìrProxy*Ë
fd
->
d©a
;

519 
OutgoögPackë
* 
cuºít
 = 
≥îProxy
->
cuºítPackë
;

521 i‡(
cuºít
 =
NULL
) {

527 
Buf„r
* 
outgoögHódî
 = &
≥îProxy
->outgoingHeader;

528 
boﬁ
 
hódîWrôãn
 = 
	`buf„rWrôeCom∂ëe
(
outgoögHódî
);

529 i‡(!
hódîWrôãn
) {

530 
	`ALOGD
("Writing header...");

531 
hódîWrôãn
 = 
	`≥îProxyWrôeFromBuf„r
(
≥îProxy
, 
outgoögHódî
);

532 i‡(
hódîWrôãn
) {

533 
	`ALOGD
("Header written.");

538 i‡(
hódîWrôãn
) {

539 
PackëTy≥
 
ty≥
 = 
cuºít
->
hódî
.type;

540 
ty≥
) {

541 
CONNECTION
:

542 
	`≥îProxyWrôeC⁄√˘i⁄
(
≥îProxy
);

544 
BYTES
:

545 
	`≥îProxyWrôeByãs
(
≥îProxy
);

547 
CONNECTION_REQUEST
:

548 
CONNECTION_ERROR
:

550 
	`≥îProxyNextPackë
(
≥îProxy
);

553 
	`LOG_ALWAYS_FATAL
("Unknow¿∑ckëÅy≥: %d", 
ty≥
);

556 
	}
}

561 
	$≥îProxyBef‹eSñe˘
(
Sñe˘abÀFd
* 
fd
) {

562 
	`ALOGD
("Before select...");

564 
PìrProxy
* 
≥îProxy
 = (PìrProxy*Ë
fd
->
d©a
;

566 
	`≥îLock
(
≥îProxy
->
≥î
);

567 
boﬁ
 
hasPackës
 = 
≥îProxy
->
cuºítPackë
 !
NULL
;

568 
	`≥îU∆ock
(
≥îProxy
->
≥î
);

570 i‡(
hasPackës
) {

571 
	`ALOGD
("Packets found. Setting onWritable().");

573 
fd
->
⁄WrôabÀ
 = &
≥îProxyWrôe
;

576 
fd
->
⁄WrôabÀ
 = 
NULL
;

578 
	}
}

581 
	$≥îProxyEx≥˘Byãs
(
PìrProxy
* 
≥îProxy
, 
Hódî
* 
hódî
) {

582 
	`ALOGD
("Ex≥˘ög %d byãs.", 
hódî
->
size
);

584 
≥îProxy
->
öputSèã
 = 
READING_BYTES
;

585 i‡(
	`buf„rPª∑ªF‹Ród
(
≥îProxy
->
öputBuf„r
, 
hódî
->
size
) == -1) {

586 
	`ALOGW
("Couldn'tállocate memory for incoming data. Size: %u",

587 (Ë
hódî
->
size
);

590 
	`≥îProxyKûl
(
≥îProxy
, 
Ál£
);

592 
	}
}

601 
PìrProxy
* 
	$≥îProxyGëOrCª©e
(
Pìr
* 
≥î
, 
pid_t
 
pid
,

602 
boﬁ
 
ªque°C⁄√˘i⁄
) {

603 i‡(
pid
 =
≥î
->pid) {

604 
î∫o
 = 
EINVAL
;

605  
NULL
;

608 i‡(
	`≥îIsDód
(
≥î
, 
pid
)) {

609 
î∫o
 = 
EHOSTDOWN
;

610  
NULL
;

613 
PìrProxy
* 
≥îProxy
 = 
	`hashm≠Gë
(
≥î
->
≥îProxõs
, &
pid
);

614 i‡(
≥îProxy
 !
NULL
) {

615  
≥îProxy
;

619 i‡(
≥î
->
ma°î
) {

620 
î∫o
 = 
EHOSTDOWN
;

621  
NULL
;

625 
Cªdítüls
 
¸edítüls
;

626 
¸edítüls
.
pid
 =Öid;

631 
¸edítüls
.
uid
 = 0;

632 
¸edítüls
.
gid
 = 0;

635 
OutgoögPackë
* 
∑ckë
 = 
NULL
;

636 i‡(
ªque°C⁄√˘i⁄
) {

637 
∑ckë
 = 
	`ˇŒoc
(1, (
OutgoögPackë
));

638 i‡(
∑ckë
 =
NULL
) {

639 
î∫o
 = 
ENOMEM
;

640  
NULL
;

643 
∑ckë
->
hódî
.
ty≥
 = 
CONNECTION_REQUEST
;

644 
∑ckë
->
hódî
.
¸edítüls
 = credentials;

645 
∑ckë
->
‰ì
 = &
outgoögPackëFªe
;

648 
≥îProxy
 = 
	`≥îProxyCª©e
(
≥î
, 
¸edítüls
);

649 i‡(
≥îProxy
 =
NULL
) {

650 
	`‰ì
(
∑ckë
);

651 
î∫o
 = 
ENOMEM
;

652  
NULL
;

655 i‡(
ªque°C⁄√˘i⁄
) {

656 
PìrProxy
* 
ma°îProxy
 = 
≥î
->masterProxy;

657 
	`≥îProxyEnqueueOutgoögPackë
(
ma°îProxy
, 
∑ckë
);

660  
≥îProxy
;

662 
	}
}

668 
	$ma°îProxyEx≥˘C⁄√˘i⁄
(
PìrProxy
* 
ma°îProxy
,

669 
Hódî
* 
hódî
) {

672 i‡(!
ma°îProxy
->
ma°î
) {

673 
	`ALOGW
("Non-masterÖrocess %dÅriedÅo send usá connection.",

674 
ma°îProxy
->
¸edítüls
.
pid
);

676 
	`≥îProxyKûl
(
ma°îProxy
, 
Ál£
);

680 
ma°îProxy
->
öputSèã
 = 
ACCEPTING_CONNECTION
;

681 
Pìr
* 
loˇlPìr
 = 
ma°îProxy
->
≥î
;

685 
pid_t
 
pid
 = 
hódî
->
¸edítüls
.pid;

686 
	`≥îLock
(
loˇlPìr
);

687 
PìrProxy
* 
≥îProxy
 = 
	`≥îProxyGëOrCª©e
(
loˇlPìr
, 
pid
, 
Ál£
);

688 i‡(
≥îProxy
 =
NULL
) {

689 
	`ALOGW
("Pì∏¥oxy cª©i⁄ faûed: %s", 
	`°ªº‹
(
î∫o
));

692 
≥îProxy
->
¸edítüls
 = 
hódî
->credentials;

694 
	`≥îU∆ock
(
loˇlPìr
);

697 
ma°îProxy
->
c⁄√˘ög
 = 
≥îProxy
;

698 
	}
}

703 
≥îProxyRód
(
Sñe˘abÀFd
* 
fd
);

706 
	$≥îProxySëFd
(
PìrProxy
* 
≥îProxy
, 
Sñe˘abÀFd
* 
fd
) {

707 
≥îProxy
->
fd
 = fd;

708 
fd
->
d©a
 = 
≥îProxy
;

709 
fd
->
⁄RódabÀ
 = &
≥îProxyRód
;

710 
fd
->
bef‹eSñe˘
 = &
≥îProxyBef‹eSñe˘
;

713 
	`£tN⁄Blockög
(
fd
->fd);

714 
	}
}

719 
	$ma°îProxyAc˚±C⁄√˘i⁄
(
PìrProxy
* 
ma°îProxy
) {

720 
msghdr
 
msg
;

721 
iovec
 
iov
[1];

722 
ssize_t
 
size
;

723 
ign‹ed
;

724 
öcomögFd
;

729 
cmsghdr
 
cm
;

730 
c⁄åﬁ
[
	`CMSG_SPACE
(())];

731 } 
c⁄åﬁ_un
;

732 
cmsghdr
 *
cm±r
;

733 
msg
.
msg_c⁄åﬁ
 = 
c⁄åﬁ_un
.
c⁄åﬁ
;

734 
msg
.
msg_c⁄åﬁÀn
 = (
c⁄åﬁ_un
.
c⁄åﬁ
);

736 
msg
.
msg_«me
 = 
NULL
;

737 
msg
.
msg_«mñí
 = 0;

740 
iov
[0].
iov_ba£
 = &
ign‹ed
;

741 
iov
[0].
iov_Àn
 = 1;

742 
msg
.
msg_iov
 = 
iov
;

743 
msg
.
msg_iovÀn
 = 1;

745 
size
 = 
	`ªcvmsg
(
ma°îProxy
->
fd
->fd, &
msg
, 0);

746 i‡(
size
 < 0) {

747 i‡(
î∫o
 =
EINTR
) {

749 
	`ALOGW
("recvmsg() interrupted.");

751 } i‡(
î∫o
 =
EAGAIN
) {

755 
	`LOG_ALWAYS_FATAL
("ErrorÑeading connection from master: %s",

756 
	`°ªº‹
(
î∫o
));

758 } i‡(
size
 == 0) {

760 
	`LOG_ALWAYS_FATAL
("Received EOF from master.");

764 i‡((
cm±r
 = 
	`CMSG_FIRSTHDR
(&
msg
)Ë!
NULL


765 && 
cm±r
->
cmsg_Àn
 =
	`CMSG_LEN
(())) {

766 i‡(
cm±r
->
cmsg_Àvñ
 !
SOL_SOCKET
) {

767 
	`LOG_ALWAYS_FATAL
("Expected SOL_SOCKET.");

769 i‡(
cm±r
->
cmsg_ty≥
 !
SCM_RIGHTS
) {

770 
	`LOG_ALWAYS_FATAL
("Expected SCM_RIGHTS.");

772 
öcomögFd
 = *((*Ë
	`CMSG_DATA
(
cm±r
));

774 
	`LOG_ALWAYS_FATAL
("Expected fd.");

778 
PìrProxy
* 
≥îProxy
 = 
ma°îProxy
->
c⁄√˘ög
;

779 i‡(
≥îProxy
 =
NULL
) {

780 
	`ALOGW
("Received connection for unknownÖeer.");

781 
	`˛o£WôhW¨nög
(
öcomögFd
);

783 
Pìr
* 
≥î
 = 
ma°îProxy
->peer;

785 
Sñe˘abÀFd
* 
£À˘abÀFd
 = 
	`£À˘‹Add
(
≥î
->
£À˘‹
, 
öcomögFd
);

786 i‡(
£À˘abÀFd
 =
NULL
) {

787 
	`ALOGW
("Errorádding fdÅo selector for %d.",

788 
≥îProxy
->
¸edítüls
.
pid
);

789 
	`˛o£WôhW¨nög
(
öcomögFd
);

790 
	`≥îProxyKûl
(
≥îProxy
, 
Ál£
);

793 
	`≥îProxySëFd
(
≥îProxy
, 
£À˘abÀFd
);

796 
	`≥îProxyEx≥˘Hódî
(
ma°îProxy
);

797 
	}
}

802 
	$outgoögPackëFªeSockë
(
OutgoögPackë
* 
∑ckë
) {

803 
	`˛o£WôhW¨nög
(
∑ckë
->
sockë
);

804 
	`outgoögPackëFªe
(
∑ckë
);

805 
	}
}

810 
	$ma°îC⁄√˘Pìrs
(
PìrProxy
* 
≥îA
, PìrProxy* 
≥îB
) {

811 
sockës
[2];

812 
ªsu…
 = 
	`sockë∑ú
(
AF_LOCAL
, 
SOCK_STREAM
, 0, 
sockës
);

813 i‡(
ªsu…
 == -1) {

814 
	`ALOGW
("sockë∑ú(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

819 
OutgoögPackë
* 
∑ckëA
 = 
	`ˇŒoc
(1, (OutgoingPacket));

820 
OutgoögPackë
* 
∑ckëB
 = 
	`ˇŒoc
(1, (OutgoingPacket));

821 i‡(
∑ckëA
 =
NULL
 || 
∑ckëB
 == NULL) {

822 
	`‰ì
(
∑ckëA
);

823 
	`‰ì
(
∑ckëB
);

824 
	`ALOGW
("malloc()Érror. FailedÅoÅellÖrocess %dÅhatÖrocess %d is"

825 " dód.", 
≥îA
->
¸edítüls
.
pid
, 
≥îB
->credentials.pid);

829 
∑ckëA
->
hódî
.
ty≥
 = 
CONNECTION
;

830 
∑ckëB
->
hódî
.
ty≥
 = 
CONNECTION
;

832 
∑ckëA
->
hódî
.
¸edítüls
 = 
≥îB
->credentials;

833 
∑ckëB
->
hódî
.
¸edítüls
 = 
≥îA
->credentials;

835 
∑ckëA
->
sockë
 = 
sockës
[0];

836 
∑ckëB
->
sockë
 = 
sockës
[1];

838 
∑ckëA
->
‰ì
 = &
outgoögPackëFªeSockë
;

839 
∑ckëB
->
‰ì
 = &
outgoögPackëFªeSockë
;

841 
	`≥îLock
(
≥îA
->
≥î
);

842 
	`≥îProxyEnqueueOutgoögPackë
(
≥îA
, 
∑ckëA
);

843 
	`≥îProxyEnqueueOutgoögPackë
(
≥îB
, 
∑ckëB
);

844 
	`≥îU∆ock
(
≥îA
->
≥î
);

845 
	}
}

851 
	$ma°îRï‹tC⁄√˘i⁄Eº‹
(
PìrProxy
* 
≥îProxy
,

852 
Cªdítüls
 
¸edítüls
) {

853 
OutgoögPackë
* 
∑ckë
 = 
	`ˇŒoc
(1, (OutgoingPacket));

854 i‡(
∑ckë
 =
NULL
) {

855 
	`ALOGW
("malloc()Érror. FailedÅoÅellÖrocess %dÅhatÖrocess %d is"

856 " dód.", 
≥îProxy
->
¸edítüls
.
pid
, credentials.pid);

860 
∑ckë
->
hódî
.
ty≥
 = 
CONNECTION_ERROR
;

861 
∑ckë
->
hódî
.
¸edítüls
 = credentials;

862 
∑ckë
->
‰ì
 = &
outgoögPackëFªe
;

864 
	`≥îProxyLockAndEnqueueOutgoögPackë
(
≥îProxy
, 
∑ckë
);

865 
	}
}

870 
	$ma°îH™dÀC⁄√˘i⁄Reque°
(
PìrProxy
* 
≥îProxy
,

871 
Hódî
* 
hódî
) {

872 
Pìr
* 
ma°î
 = 
≥îProxy
->
≥î
;

873 
pid_t
 
èrgëPid
 = 
hódî
->
¸edítüls
.
pid
;

874 i‡(!
	`hashm≠C⁄èösKey
(
≥îProxy
->
c⁄√˘i⁄s
, &
èrgëPid
)) {

876 
PìrProxy
* 
èrgëPìr


877 (
PìrProxy
*Ë
	`hashm≠Gë
(
ma°î
->
≥îProxõs
, &
èrgëPid
);

878 i‡(
èrgëPìr
 =
NULL
) {

880 
	`ma°îRï‹tC⁄√˘i⁄Eº‹
(
≥îProxy
, 
hódî
->
¸edítüls
);

882 
	`ma°îC⁄√˘Pìrs
(
≥îProxy
, 
èrgëPìr
);

887 
	`≥îProxyEx≥˘Hódî
(
≥îProxy
);

888 
	}
}

893 
	$ma°îProxyH™dÀC⁄√˘i⁄Eº‹
(
PìrProxy
* 
ma°îProxy
,

894 
Hódî
* 
hódî
) {

895 
Pìr
* 
≥î
 = 
ma°îProxy
->peer;

898 
pid_t
 
pid
 = 
hódî
->
¸edítüls
.pid;

899 
PìrProxy
* 
≥îProxy
 = 
NULL
;

900 
	`≥îLock
(
≥î
);

901 
≥îProxy
 = 
	`hashm≠Gë
(
≥î
->
≥îProxõs
, &
pid
);

902 
	`≥îU∆ock
(
≥î
);

904 i‡(
≥îProxy
 !
NULL
) {

905 
	`ALOGI
("Couldn'àc⁄√˘Åÿ%d.", 
pid
);

906 
	`≥îProxyKûl
(
≥îProxy
, 
Ál£
);

908 
	`ALOGW
("Pì∏¥oxy f‹ %dÇŸ found. Thi†shouldn'àh≠≥n.", 
pid
);

911 
	`≥îProxyEx≥˘Hódî
(
ma°îProxy
);

912 
	}
}

917 
	$≥îProxyH™dÀHódî
(
PìrProxy
* 
≥îProxy
, 
Hódî
* 
hódî
) {

918 
hódî
->
ty≥
) {

919 
CONNECTION_REQUEST
:

920 
	`ma°îH™dÀC⁄√˘i⁄Reque°
(
≥îProxy
, 
hódî
);

922 
CONNECTION
:

923 
	`ma°îProxyEx≥˘C⁄√˘i⁄
(
≥îProxy
, 
hódî
);

925 
CONNECTION_ERROR
:

926 
	`ma°îProxyH™dÀC⁄√˘i⁄Eº‹
(
≥îProxy
, 
hódî
);

928 
BYTES
:

929 
	`≥îProxyEx≥˘Byãs
(
≥îProxy
, 
hódî
);

932 
	`ALOGW
("InvÆidÖackëÅy≥ from %d: %d", 
≥îProxy
->
¸edítüls
.
pid
,

933 
hódî
->
ty≥
);

934 
	`≥îProxyKûl
(
≥îProxy
, 
Ál£
);

936 
	}
}

942 
boﬁ
 
	$≥îProxyBuf„rI≈ut
(
PìrProxy
* 
≥îProxy
) {

943 
Buf„r
* 
ö
 = 
≥îProxy
->
öputBuf„r
;

944 
ssize_t
 
size
 = 
	`buf„rRód
(
ö
, 
≥îProxy
->
fd
->fd);

945 i‡(
size
 < 0) {

946 
	`≥îProxyH™dÀEº‹
(
≥îProxy
, "read");

947  
Ál£
;

948 } i‡(
size
 == 0) {

950 
	`ALOGI
("EOF");

951 
	`≥îProxyKûl
(
≥îProxy
, 
Ál£
);

952  
Ál£
;

953 } i‡(
	`buf„rRódCom∂ëe
(
ö
)) {

955  
åue
;

958  
Ál£
;

960 
	}
}

965 
	$≥îProxyRód
(
Sñe˘abÀFd
* 
fd
) {

966 
	`ALOGD
("Reading...");

967 
PìrProxy
* 
≥îProxy
 = (PìrProxy*Ë
fd
->
d©a
;

968 
°©e
 = 
≥îProxy
->
öputSèã
;

969 
Buf„r
* 
ö
 = 
≥îProxy
->
öputBuf„r
;

970 
°©e
) {

971 
READING_HEADER
:

972 i‡(
	`≥îProxyBuf„rI≈ut
(
≥îProxy
)) {

973 
	`ALOGD
("HeaderÑead.");

975 
Hódî
* 
hódî
 = (Hódî*Ë
ö
->
d©a
;

976 
	`≥îProxyH™dÀHódî
(
≥îProxy
, 
hódî
);

979 
READING_BYTES
:

980 
	`ALOGD
("Reading bytes...");

981 i‡(
	`≥îProxyBuf„rI≈ut
(
≥îProxy
)) {

982 
	`ALOGD
("BytesÑead.");

984 
≥îProxy
->
≥î
->
	`⁄Byãs
’ìrProxy->
¸edítüls
,

985 
ö
->
d©a
, in->
size
);

988 
	`≥îProxyEx≥˘Hódî
(
≥îProxy
);

991 
ACCEPTING_CONNECTION
:

992 
	`ma°îProxyAc˚±C⁄√˘i⁄
(
≥îProxy
);

995 
	`LOG_ALWAYS_FATAL
("Unknow¿°©e: %d", 
°©e
);

997 
	}
}

999 
PìrProxy
* 
	$≥îProxyCª©e
(
Pìr
* 
≥î
, 
Cªdítüls
 
¸edítüls
) {

1000 
PìrProxy
* 
≥îProxy
 = 
	`ˇŒoc
(1, (PeerProxy));

1001 i‡(
≥îProxy
 =
NULL
) {

1002  
NULL
;

1005 
≥îProxy
->
öputBuf„r
 = 
	`buf„rCª©e
((
Hódî
));

1006 i‡(
≥îProxy
->
öputBuf„r
 =
NULL
) {

1007 
	`‰ì
(
≥îProxy
);

1008  
NULL
;

1011 
≥îProxy
->
≥î
 =Öeer;

1012 
≥îProxy
->
¸edítüls
 = credentials;

1015 
	`≥îProxyEx≥˘Hódî
(
≥îProxy
);

1019 
pid_t
* 
pid
 = &(
≥îProxy
->
¸edítüls
.pid);

1020 
	`hashm≠Put
(
≥î
->
≥îProxõs
, 
pid
, 
≥îProxy
);

1021  
≥îProxy
;

1022 
	}
}

1025 
	$ma°îAc˚±C⁄√˘i⁄
(
Sñe˘abÀFd
* 
li°íîFd
) {

1027 
sockë
 = 
	`ac˚±
(
li°íîFd
->
fd
, 
NULL
, NULL);

1028 i‡(
sockë
 == -1) {

1029 
	`ALOGW
("ac˚±(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1033 
	`ALOGD
("Ac˚±ed c⁄√˘i⁄á†fd %d.", 
sockë
);

1036 
Cªdítüls
 
¸edítüls
;

1037 
u¸ed
 
u¸edítüls
;

1038 
sockÀn_t
 
¸edítülsSize
 = (
u¸ed
);

1039 
ªsu…
 = 
	`gësock›t
(
sockë
, 
SOL_SOCKET
, 
SO_PEERCRED
,

1040 &
u¸edítüls
, &
¸edítülsSize
);

1042 i‡(
ªsu…
 == -1) {

1043 
	`ALOGW
("gësock›t(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1044 
	`˛o£WôhW¨nög
(
sockë
);

1049 
¸edítüls
.
pid
 = 
u¸edítüls
.pid;

1050 
¸edítüls
.
uid
 = 
u¸edítüls
.uid;

1051 
¸edítüls
.
gid
 = 
u¸edítüls
.gid;

1053 
	`ALOGI
("Ac˚±ed c⁄√˘i⁄ fromÖro˚s†%d.", 
¸edítüls
.
pid
);

1055 
Pìr
* 
ma°îPìr
 = (Pìr*Ë
li°íîFd
->
d©a
;

1057 
	`≥îLock
(
ma°îPìr
);

1060 
PìrProxy
* 
≥îProxy


1061 
	`hashm≠Gë
(
ma°îPìr
->
≥îProxõs
, &
¸edítüls
.
pid
);

1062 i‡(
≥îProxy
 !
NULL
) {

1063 
	`≥îU∆ock
(
ma°îPìr
);

1064 
	`ALOGW
("AÃód c⁄√˘edÅÿ¥o˚s†%d.", 
¸edítüls
.
pid
);

1065 
	`˛o£WôhW¨nög
(
sockë
);

1070 
Sñe˘abÀFd
* 
sockëFd
 = 
	`£À˘‹Add
(
ma°îPìr
->
£À˘‹
, 
sockë
);

1071 i‡(
sockëFd
 =
NULL
) {

1072 
	`≥îU∆ock
(
ma°îPìr
);

1073 
	`ALOGW
("malloc() failed.");

1074 
	`˛o£WôhW¨nög
(
sockë
);

1079 
≥îProxy
 = 
	`≥îProxyCª©e
(
ma°îPìr
, 
¸edítüls
);

1080 
	`≥îU∆ock
(
ma°îPìr
);

1081 i‡(
≥îProxy
 =
NULL
) {

1082 
	`ALOGW
("malloc() failed.");

1083 
sockëFd
->
ªmove
 = 
åue
;

1084 
	`˛o£WôhW¨nög
(
sockë
);

1086 
≥îProxy
->
c⁄√˘i⁄s
 = 
	`hashm≠Cª©e
(10, &
pidHash
, &
pidEquÆs
);

1087 
	`≥îProxySëFd
(
≥îProxy
, 
sockëFd
);

1088 
	}
}

1093 
Pìr
* 
	$≥îCª©e
() {

1094 
Pìr
* 
≥î
 = 
	`ˇŒoc
(1, (Peer));

1095 i‡(
≥î
 =
NULL
) {

1096 
	`LOG_ALWAYS_FATAL
("malloc()Érror.");

1098 
≥î
->
≥îProxõs
 = 
	`hashm≠Cª©e
(10, &
pidHash
, &
pidEquÆs
);

1099 
≥î
->
£À˘‹
 = 
	`£À˘‹Cª©e
();

1101 
±hªad_muãx©å_t
 
©åibuãs
;

1102 i‡(
	`±hªad_muãx©å_öô
(&
©åibuãs
) != 0) {

1103 
	`LOG_ALWAYS_FATAL
("pthread_mutexattr_init()Érror.");

1105 i‡(
	`±hªad_muãx©å_£ây≥
(&
©åibuãs
, 
PTHREAD_MUTEX_RECURSIVE
) != 0) {

1106 
	`LOG_ALWAYS_FATAL
("pthread_mutexattr_settype()Érror.");

1108 i‡(
	`±hªad_muãx_öô
(&
≥î
->
muãx
, &
©åibuãs
) != 0) {

1109 
	`LOG_ALWAYS_FATAL
("pthread_mutex_init()Érror.");

1112 
≥î
->
pid
 = 
	`gëpid
();

1113  
≥î
;

1114 
	}
}

1117 
Pìr
* 
	gloˇlPìr
;

1120 
	$outgoögPackëFªeByãs
(
OutgoögPackë
* 
∑ckë
) {

1121 
	`ALOGD
("Freeing outgoingÖacket.");

1122 
	`buf„rFªe
(
∑ckë
->
byãs
);

1123 
	`‰ì
(
∑ckë
);

1124 
	}
}

1133 
	$≥îSídByãs
(
pid_t
 
pid
, c⁄° * 
byãs
, 
size_t
 
size
) {

1134 
Pìr
* 
≥î
 = 
loˇlPìr
;

1135 
	`as£π
(
≥î
 !
NULL
);

1137 
OutgoögPackë
* 
∑ckë
 = 
	`ˇŒoc
(1, (OutgoingPacket));

1138 i‡(
∑ckë
 =
NULL
) {

1139 
î∫o
 = 
ENOMEM
;

1143 
Buf„r
* 
c›y
 = 
	`buf„rCª©e
(
size
);

1144 i‡(
c›y
 =
NULL
) {

1145 
	`‰ì
(
∑ckë
);

1146 
î∫o
 = 
ENOMEM
;

1151 
	`mem˝y
(
c›y
->
d©a
, 
byãs
, 
size
);

1152 
c›y
->
size
 = size;

1154 
∑ckë
->
byãs
 = 
c›y
;

1155 
∑ckë
->
hódî
.
ty≥
 = 
BYTES
;

1156 
∑ckë
->
hódî
.
size
 = size;

1157 
∑ckë
->
‰ì
 = 
outgoögPackëFªeByãs
;

1158 
	`buf„rPª∑ªF‹Wrôe
(
∑ckë
->
byãs
);

1160 
	`≥îLock
(
≥î
);

1162 
PìrProxy
* 
≥îProxy
 = 
	`≥îProxyGëOrCª©e
(
≥î
, 
pid
, 
åue
);

1163 i‡(
≥îProxy
 =
NULL
) {

1166 
	`≥îU∆ock
(
≥î
);

1167 
∑ckë
->
	`‰ì
(packet);

1170 
	`≥îProxyEnqueueOutgoögPackë
(
≥îProxy
, 
∑ckë
);

1171 
	`≥îU∆ock
(
≥î
);

1172 
	`£À˘‹WakeUp
(
≥î
->
£À˘‹
);

1175 
	}
}

1179 (*
	m‰ì
)(* 
	mc⁄ãxt
);

1180 * 
	mc⁄ãxt
;

1181 } 
	tSh¨edByãsFªî
;

1184 
	$outgoögPackëFªeSh¨edByãs
(
OutgoögPackë
* 
∑ckë
) {

1185 
Sh¨edByãsFªî
* 
sh¨edByãsFªî


1186 (
Sh¨edByãsFªî
*Ë
∑ckë
->
c⁄ãxt
;

1187 
sh¨edByãsFªî
->
	`‰ì
(sh¨edByãsFªî->
c⁄ãxt
);

1188 
	`‰ì
(
sh¨edByãsFªî
);

1189 
	`‰ì
(
∑ckë
);

1190 
	}
}

1200 
≥îSídSh¨edByãs
(
pid_t
 
pid
, * 
byãs
, 
size_t
 
size
,

1201 (*
‰ì
)(* 
c⁄ãxt
), * context) {

1202 
Pìr
* 
≥î
 = 
loˇlPìr
;

1203 
	`as£π
(
≥î
 !
NULL
);

1205 
OutgoögPackë
* 
∑ckë
 = 
	`ˇŒoc
(1, (OutgoingPacket));

1206 i‡(
∑ckë
 =
NULL
) {

1207 
î∫o
 = 
ENOMEM
;

1211 
Buf„r
* 
wøµî
 = 
	`buf„rWøp
(
byãs
, 
size
, size);

1212 i‡(
wøµî
 =
NULL
) {

1213 
	`‰ì
(
∑ckë
);

1214 
î∫o
 = 
ENOMEM
;

1218 
Sh¨edByãsFªî
* 
sh¨edByãsFªî
 = 
	`mÆloc
((SharedBytesFreer));

1219 i‡(
sh¨edByãsFªî
 =
NULL
) {

1220 
	`‰ì
(
∑ckë
);

1221 
	`‰ì
(
wøµî
);

1222 
î∫o
 = 
ENOMEM
;

1225 
sh¨edByãsFªî
->
‰ì
 = free;

1226 
sh¨edByãsFªî
->
c⁄ãxt
 = context;

1228 
∑ckë
->
byãs
 = 
wøµî
;

1229 
∑ckë
->
c⁄ãxt
 = 
sh¨edByãsFªî
;

1230 
∑ckë
->
hódî
.
ty≥
 = 
BYTES
;

1231 
∑ckë
->
hódî
.
size
 = size;

1232 
∑ckë
->
‰ì
 = &
outgoögPackëFªeSh¨edByãs
;

1233 
	`buf„rPª∑ªF‹Wrôe
(
∑ckë
->
byãs
);

1235 
	`≥îLock
(
≥î
);

1237 
PìrProxy
* 
≥îProxy
 = 
	`≥îProxyGëOrCª©e
(
≥î
, 
pid
, 
åue
);

1238 i‡(
≥îProxy
 =
NULL
) {

1241 
	`≥îU∆ock
(
≥î
);

1242 
∑ckë
->
	`‰ì
(packet);

1245 
	`≥îProxyEnqueueOutgoögPackë
(
≥îProxy
, 
∑ckë
);

1246 
	`≥îU∆ock
(
≥î
);

1247 
	`£À˘‹WakeUp
(
≥î
->
£À˘‹
);

1250 
	}
}

1259 
	$ma°îPìrInôülize
(
ByãsLi°íî
* 
byãsLi°íî
,

1260 
DóthLi°íî
* 
dóthLi°íî
) {

1262 
li°íîSockë
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0);

1263 i‡(
li°íîSockë
 == -1) {

1264 
	`LOG_ALWAYS_FATAL
("sockë(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1266 
	`u∆ök
(
MASTER_PATH
);

1267 
ªsu…
 = 
	`böd
(
li°íîSockë
, (
SockëAddªss
*Ë
	`gëMa°îAddªss
(),

1268 (
UnixAddªss
));

1269 i‡(
ªsu…
 == -1) {

1270 
	`LOG_ALWAYS_FATAL
("böd(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1273 
	`ALOGD
("Li°íî sockë: %d", 
li°íîSockë
);

1276 
ªsu…
 = 
	`li°í
(
li°íîSockë
, 16);

1277 i‡(
ªsu…
 != 0) {

1278 
	`LOG_ALWAYS_FATAL
("li°í(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1282 
	`£tN⁄Blockög
(
li°íîSockë
);

1285 i‡(
loˇlPìr
 !
NULL
) {

1286 
	`LOG_ALWAYS_FATAL
("Peer isálready initialized.");

1288 
loˇlPìr
 = 
	`≥îCª©e
();

1289 i‡(
loˇlPìr
 =
NULL
) {

1290 
	`LOG_ALWAYS_FATAL
("malloc() failed.");

1292 
loˇlPìr
->
ma°î
 = 
åue
;

1293 
loˇlPìr
->
⁄Byãs
 = 
byãsLi°íî
;

1294 
loˇlPìr
->
⁄Dóth
 = 
dóthLi°íî
;

1297 
Sñe˘abÀFd
* 
li°íîFd
 = 
	`£À˘‹Add
(
loˇlPìr
->
£À˘‹
, 
li°íîSockë
);

1298 i‡(
li°íîFd
 =
NULL
) {

1299 
	`LOG_ALWAYS_FATAL
("malloc()Érror.");

1301 
li°íîFd
->
d©a
 = 
loˇlPìr
;

1302 
li°íîFd
->
⁄RódabÀ
 = &
ma°îAc˚±C⁄√˘i⁄
;

1303 
	}
}

1310 
	$≥îInôülize
(
ByãsLi°íî
* 
byãsLi°íî
,

1311 
DóthLi°íî
* 
dóthLi°íî
) {

1313 
ma°îSockë
 = 
	`sockë
(
AF_LOCAL
, 
SOCK_STREAM
, 0);

1314 i‡(
ma°îSockë
 == -1) {

1315 
	`LOG_ALWAYS_FATAL
("sockë(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1317 
ªsu…
 = 
	`c⁄√˘
(
ma°îSockë
, (
SockëAddªss
*Ë
	`gëMa°îAddªss
(),

1318 (
UnixAddªss
));

1319 i‡(
ªsu…
 != 0) {

1320 
	`LOG_ALWAYS_FATAL
("c⁄√˘(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

1324 i‡(
loˇlPìr
 !
NULL
) {

1325 
	`LOG_ALWAYS_FATAL
("Peer isálready initialized.");

1327 
loˇlPìr
 = 
	`≥îCª©e
();

1328 i‡(
loˇlPìr
 =
NULL
) {

1329 
	`LOG_ALWAYS_FATAL
("malloc() failed.");

1331 
loˇlPìr
->
⁄Byãs
 = 
byãsLi°íî
;

1332 
loˇlPìr
->
⁄Dóth
 = 
dóthLi°íî
;

1335 
Sñe˘abÀFd
* 
ma°îFd
 = 
	`£À˘‹Add
(
loˇlPìr
->
£À˘‹
, 
ma°îSockë
);

1336 i‡(
ma°îFd
 =
NULL
) {

1337 
	`LOG_ALWAYS_FATAL
("malloc()Érror.");

1341 
PìrProxy
* 
ma°îProxy
 = 
	`≥îProxyCª©e
(
loˇlPìr
, 
MASTER_CREDENTIALS
);

1342 i‡(
ma°îProxy
 =
NULL
) {

1343 
	`LOG_ALWAYS_FATAL
("malloc()Érror.");

1345 
	`≥îProxySëFd
(
ma°îProxy
, 
ma°îFd
);

1346 
ma°îProxy
->
ma°î
 = 
åue
;

1347 
loˇlPìr
->
ma°îProxy
 = masterProxy;

1348 
	}
}

1351 
	$≥îLo›
() {

1352 
	`as£π
(
loˇlPìr
 !
NULL
);

1355 
	`£À˘‹Lo›
(
loˇlPìr
->
£À˘‹
);

1356 
	}
}

	@libs/libcutils/multiuser.c

17 
	~<cutûs/mu…iu£r.h
>

19 
u£rid_t
 
	$mu…iu£r_gë_u£r_id
(
uid_t
 
uid
) {

20  
uid
 / 
MULTIUSER_APP_PER_USER_RANGE
;

21 
	}
}

23 
≠pid_t
 
	$mu…iu£r_gë_≠p_id
(
uid_t
 
uid
) {

24  
uid
 % 
MULTIUSER_APP_PER_USER_RANGE
;

25 
	}
}

27 
uid_t
 
	$mu…iu£r_gë_uid
(
u£rid_t
 
u£rId
, 
≠pid_t
 
≠pId
) {

28  
u£rId
 * 
MULTIUSER_APP_PER_USER_RANGE
 + (
≠pId
 % MULTIUSER_APP_PER_USER_RANGE);

29 
	}
}

	@libs/libcutils/native_handle.c

17 
	#LOG_TAG
 "N©iveH™dÀ"

	)

19 
	~<°döt.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

25 
	~<cutûs/log.h
>

26 
	~<cutûs/«tive_h™dÀ.h
>

28 
«tive_h™dÀ_t
* 
	$«tive_h™dÀ_¸óã
(
numFds
, 
numI¡s
)

30 
«tive_h™dÀ_t
* 
h
 = 
	`mÆloc
(

31 (
«tive_h™dÀ_t
Ë+ ()*(
numFds
+
numI¡s
));

33 
h
->
vîsi⁄
 = (
«tive_h™dÀ_t
);

34 
h
->
numFds
 =ÇumFds;

35 
h
->
numI¡s
 =ÇumInts;

36  
h
;

37 
	}
}

39 
	$«tive_h™dÀ_dñëe
(
«tive_h™dÀ_t
* 
h
)

41 i‡(
h
) {

42 i‡(
h
->
vîsi⁄
 !(
«tive_h™dÀ_t
))

43  -
EINVAL
;

44 
	`‰ì
(
h
);

47 
	}
}

49 
	$«tive_h™dÀ_˛o£
(c⁄° 
«tive_h™dÀ_t
* 
h
)

51 i‡(
h
->
vîsi⁄
 !(
«tive_h™dÀ_t
))

52  -
EINVAL
;

54 c⁄° 
numFds
 = 
h
->numFds;

55 
i
;

56 
i
=0 ; i<
numFds
 ; i++) {

57 
	`˛o£
(
h
->
d©a
[
i
]);

60 
	}
}

	@libs/libcutils/open_memstream.c

17 #i‚de‡
HAVE_OPEN_MEMSTREAM


47 
	~<cutûs/›í_mem°ªam.h
>

48 
	~<°dlib.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<uni°d.h
>

51 
	~<°dio.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

54 
	~<as£π.h
>

57 
	#DBUG
(
x
Ë
¥ötf
 
	)
x

59 
	#DBUG
(
x
Ë(()0)

	)

62 #ifde‡
HAVE_FUNOPEN


68 ** 
	mbuÂ
;

69 
size_t
* 
	msizï
;

71 
size_t
 
	mÆlocSize
;

72 
size_t
 
	meof
;

73 
size_t
 
	moff£t
;

74 
	mßved
;

75 } 
	tMemSåóm
;

77 
	#kInôülSize
 1024

	)

86 
	$ísuªC≠acôy
(
MemSåóm
* 
°ªam
, 
wrôeSize
)

88 
	`DBUG
(("+++ÉnsuªC≠ off=%d size=%d\n", 
°ªam
->
off£t
, 
wrôeSize
));

90 
size_t
 
√ededSize
 = 
°ªam
->
off£t
 + 
wrôeSize
 + 1;

91 i‡(
√ededSize
 <
°ªam
->
ÆlocSize
)

94 
size_t
 
√wSize
;

96 i‡(
°ªam
->
ÆlocSize
 == 0) {

97 
√wSize
 = 
kInôülSize
;

99 
√wSize
 = 
°ªam
->
ÆlocSize
;

100 
√wSize
 +=ÇewSize / 2;

103 i‡(
√wSize
 < 
√ededSize
)

104 
√wSize
 = 
√ededSize
;

105 
	`DBUG
(("+++Ñealloc %p->%pÅo size=%d\n",

106 
°ªam
->
buÂ
, *°ªam->buÂ, 
√wSize
));

107 * 
√wBuf
 = (*Ë
	`ªÆloc
(*
°ªam
->
buÂ
, 
√wSize
);

108 i‡(
√wBuf
 =
NULL
)

111 *
°ªam
->
buÂ
 = 
√wBuf
;

112 
°ªam
->
ÆlocSize
 = 
√wSize
;

114 
	}
}

123 
	$wrôe_mem°ªam
(* 
cookõ
, c⁄° * 
buf
, 
size
)

125 
MemSåóm
* 
°ªam
 = (MemSåóm*Ë
cookõ
;

127 i‡(
	`ísuªC≠acôy
(
°ªam
, 
size
) < 0)

131 i‡(
°ªam
->
eof
 < såóm->
off£t
) {

132 
	`DBUG
(("+++ zero-fill gap from %dÅo %d\n",

133 
°ªam
->
eof
, såóm->
off£t
-1));

134 
	`mem£t
(*
°ªam
->
buÂ
 + såóm->
eof
, '\0',

135 
°ªam
->
off£t
 - såóm->
eof
);

139 
	`mem˝y
(*
°ªam
->
buÂ
 + såóm->
off£t
, 
buf
, 
size
);

140 
°ªam
->
off£t
 +
size
;

142 i‡(
°ªam
->
off£t
 > såóm->
eof
) {

144 
	`DBUG
(("+++ EOFádv™˚dÅÿ%d,áµídögÇul\n", 
°ªam
->
off£t
));

145 
	`as£π
(
°ªam
->
off£t
 < såóm->
ÆlocSize
);

146 
°ªam
->
eof
 = såóm->
off£t
;

149 
	`DBUG
(("+++ within writtenárea, saving '%c'át %d\n",

150 *(*
°ªam
->
buÂ
 + såóm->
off£t
), stream->offset));

151 
°ªam
->
ßved
 = *(*°ªam->
buÂ
 + såóm->
off£t
);

153 *(*
°ªam
->
buÂ
 + såóm->
off£t
) = '\0';

154 *
°ªam
->
sizï
 = såóm->
off£t
;

156  
size
;

157 
	}
}

164 
Âos_t
 
	$£ek_mem°ªam
(* 
cookõ
, 
Âos_t
 
off£t
, 
whí˚
)

166 
MemSåóm
* 
°ªam
 = (MemSåóm*Ë
cookõ
;

167 
off_t
 
√wPo¢
 = (off_tË
off£t
;

169 i‡(
whí˚
 =
SEEK_CUR
) {

170 
√wPo¢
 +
°ªam
->
off£t
;

171 } i‡(
whí˚
 =
SEEK_END
) {

172 
√wPo¢
 +
°ªam
->
eof
;

175 i‡(
√wPo¢
 < 0 || ((
Âos_t
)((
size_t
)ÇewPosn)) !=ÇewPosn) {

177 
	`DBUG
(("+++ bogu†£ek off£à%ld\n", (Ë
√wPo¢
));

178 
î∫o
 = 
EINVAL
;

179  (
Âos_t
) -1;

182 i‡(
°ªam
->
off£t
 < såóm->
eof
) {

187 
	`DBUG
(("+++Ñestoring char '%c'át %d\n",

188 
°ªam
->
ßved
, såóm->
off£t
));

189 *(*
°ªam
->
buÂ
 + såóm->
off£t
Ë°ªam->
ßved
;

192 
°ªam
->
off£t
 = (
size_t
Ë
√wPo¢
;

194 i‡(
°ªam
->
off£t
 < såóm->
eof
) {

199 
°ªam
->
ßved
 = *(*°ªam->
buÂ
 + såóm->
off£t
);

200 *(*
°ªam
->
buÂ
 + såóm->
off£t
) = '\0';

201 *
°ªam
->
sizï
 = såóm->
off£t
;

207 *
°ªam
->
sizï
 = såóm->
eof
;

210  
√wPo¢
;

211 
	}
}

216 
	$˛o£_mem°ªam
(* 
cookõ
)

218 
	`‰ì
(
cookõ
);

220 
	}
}

225 
FILE
* 
	$›í_mem°ªam
(** 
buÂ
, 
size_t
* 
sizï
)

227 
FILE
* 
Â
;

228 
MemSåóm
* 
°ªam
;

230 i‡(
buÂ
 =
NULL
 || 
sizï
 == NULL) {

231 
î∫o
 = 
EINVAL
;

232  
NULL
;

235 
°ªam
 = (
MemSåóm
*Ë
	`ˇŒoc
(1, (MemStream));

236 i‡(
°ªam
 =
NULL
)

237  
NULL
;

239 
Â
 = 
	`fun›í
(
°ªam
,

240 
NULL
, 
wrôe_mem°ªam
, 
£ek_mem°ªam
, 
˛o£_mem°ªam
);

241 i‡(
Â
 =
NULL
) {

242 
	`‰ì
(
°ªam
);

243  
NULL
;

246 *
sizï
 = 0;

247 *
buÂ
 = 
NULL
;

248 
°ªam
->
buÂ
 = bufp;

249 
°ªam
->
sizï
 = sizep;

251  
Â
;

252 
	}
}

255 
FILE
* 
	$›í_mem°ªam
(** 
buÂ
, 
size_t
* 
sizï
)

257 
	`ab‹t
();

258 
	}
}

264 
	#_GNU_SOURCE


	)

265 
	~<°dio.h
>

266 
	~<°dlib.h
>

267 
	~<°rög.h
>

282 
	$ã°MemSåóm
()

284 
FILE
 *
°ªam
;

285 *
buf
;

286 
size_t
 
Àn
;

287 
off_t
 
eob
;

289 
	`¥ötf
("Test1\n");

292 
°ªam
 = 
	`›í_mem°ªam
(&
buf
, &
Àn
);

293 
	`Ârötf
(
°ªam
, "hello my world");

294 
	`fÊush
(
°ªam
);

295 
	`¥ötf
("buf=%s,Üí=%zu\n", 
buf
, 
Àn
);

296 
eob
 = 
	`·ñlo
(
°ªam
);

297 
	`f£eko
(
°ªam
, 0, 
SEEK_SET
);

298 
	`Ârötf
(
°ªam
, "good-bye");

299 
	`f£eko
(
°ªam
, 
eob
, 
SEEK_SET
);

300 
	`f˛o£
(
°ªam
);

301 
	`¥ötf
("buf=%s,Üí=%zu\n", 
buf
, 
Àn
);

302 
	`‰ì
(
buf
);

304 
	`¥ötf
("Test2\n");

307 
°ªam
 = 
	`›í_mem°ªam
(&
buf
, &
Àn
);

308 
	`Ârötf
(
°ªam
, "hello my world");

309 
	`fÊush
(
°ªam
);

310 
	`¥ötf
("buf=%s,Üí=%zu\n", 
buf
, 
Àn
);

311 
eob
 = 
	`·ñlo
(
°ªam
);

312 
	`f£eko
(
°ªam
, 0, 
SEEK_SET
);

313 
	`Ârötf
(
°ªam
, "good-bye");

315 
	`f˛o£
(
°ªam
);

316 
	`¥ötf
("buf=%s,Üí=%zu\n", 
buf
, 
Àn
);

317 
	`‰ì
(
buf
);

319 
	`¥ötf
("Test3\n");

322 c⁄° 
kCmpLí
 = 1024 + 128;

323 * 
cmp
 = 
	`mÆloc
(
kCmpLí
);

324 
	`mem£t
(
cmp
, 0, 1024);

325 
	`mem£t
(
cmp
+1024, 0xff, 
kCmpLí
-1024);

326 
	`•rötf
(
cmp
, "This-is-a-tes1234");

327 
	`•rötf
(
cmp
 + 1022, "abcdef");

329 
°ªam
 = 
	`›í_mem°ªam
 (&
buf
, &
Àn
);

330 
	`£tvbuf
(
°ªam
, 
NULL
, 
_IONBF
, 0);

331 
	`Ârötf
(
°ªam
, "This-is-a-test");

332 
	`f£ek
(
°ªam
, -1, 
SEEK_CUR
);

333 
	`Ârötf
(
°ªam
, "1234");

334 
	`f£ek
(
°ªam
, 1022, 
SEEK_SET
);

335 
	`Âutc
('a', 
°ªam
);

336 
	`Âutc
('b', 
°ªam
);

337 
	`Âutc
('c', 
°ªam
);

338 
	`Âutc
('d', 
°ªam
);

339 
	`Âutc
('e', 
°ªam
);

340 
	`Âutc
('f', 
°ªam
);

341 
	`fÊush
(
°ªam
);

343 i‡(
	`memcmp
(
buf
, 
cmp
, 
Àn
+1) != 0) {

344 
	`¥ötf
("mismatch\n");

346 
	`¥ötf
("match\n");

349 
	`¥ötf
("Test4\n");

350 
°ªam
 = 
	`›í_mem°ªam
 (&
buf
, &
Àn
);

351 
	`f£ek
(
°ªam
, 5000, 
SEEK_SET
);

352 
	`f£ek
(
°ªam
, 4096, 
SEEK_SET
);

353 
	`f£ek
(
°ªam
, -1, 
SEEK_SET
);

354 
	`Âutc
('x', 
°ªam
);

355 i‡(
	`·ñl
(
°ªam
) == 4097)

356 
	`¥ötf
("good\n");

358 
	`¥ötf
("BAD: off£ài†%ld\n", 
	`·ñl
(
°ªam
));

360 
	`¥ötf
("DONE\n");

363 
	}
}

	@libs/libcutils/partition_utils.c

17 
	~<sys/ty≥s.h
>

18 
	~<uni°d.h
>

19 
	~<f˙é.h
>

20 
	~<sys/°©.h
>

21 
	~<sys/io˘l.h
>

22 
	~<sys/mou¡.h
>

23 
	~<cutûs/¥›îtõs.h
>

25 
	$⁄ly_⁄e_ch¨
(*
buf
, 
Àn
, 
c
)

27 
i
, 
ªt
;

29 
ªt
 = 1;

30 
i
=0; i<
Àn
; i++) {

31 i‡(
buf
[
i
] !
c
) {

32 
ªt
 = 0;

36  
ªt
;

37 
	}
}

39 
	$∑πôi⁄_wùed
(*
sour˚
)

41 
buf
[4096];

42 
fd
, 
ªt
, 
wùed
;

44 i‡((
fd
 = 
	`›í
(
sour˚
, 
O_RDONLY
)) < 0) {

48 
ªt
 = 
	`ªad
(
fd
, 
buf
, (buf));

49 
	`˛o£
(
fd
);

51 i‡(
ªt
 !(
buf
)) {

56 i‡(
	`⁄ly_⁄e_ch¨
(
buf
, (buf), 0)) {

61 i‡(
	`⁄ly_⁄e_ch¨
(
buf
, (buf), 0xff)) {

66 
	}
}

	@libs/libcutils/private.h

1 #i‚de‡
PRIVATE_H


3 
	#PRIVATE_H


	)

22 #i‚de‡
löt


23 #i‚de‡
NOID


24 
	g¥iv©ehid
[] = "@(#)private.h 8.2";

28 
	#GRANDPARENTED
 "Loˇ»timêz⁄êmu° bê£t--£êzi¯m™uÆÖage"

	)

35 #i‚de‡
HAVE_ADJTIME


36 
	#HAVE_ADJTIME
 1

	)

39 #i‚de‡
HAVE_GETTEXT


40 
	#HAVE_GETTEXT
 0

	)

43 #i‚de‡
HAVE_INCOMPATIBLE_CTIME_R


44 
	#HAVE_INCOMPATIBLE_CTIME_R
 0

	)

47 #i‚de‡
HAVE_SETTIMEOFDAY


48 
	#HAVE_SETTIMEOFDAY
 3

	)

51 #i‚de‡
HAVE_STRERROR


52 
	#HAVE_STRERROR
 1

	)

55 #i‚de‡
HAVE_SYMLINK


56 
	#HAVE_SYMLINK
 1

	)

59 #i‚de‡
HAVE_SYS_STAT_H


60 
	#HAVE_SYS_STAT_H
 1

	)

63 #i‚de‡
HAVE_SYS_WAIT_H


64 
	#HAVE_SYS_WAIT_H
 1

	)

67 #i‚de‡
HAVE_UNISTD_H


68 
	#HAVE_UNISTD_H
 1

	)

71 #i‚de‡
HAVE_UTMPX_H


72 
	#HAVE_UTMPX_H
 0

	)

75 #i‚de‡
LOCALE_HOME


76 
	#LOCALE_HOME
 "/u§/lib/loˇÀ"

	)

79 #i‡
HAVE_INCOMPATIBLE_CTIME_R


80 
	#as˘ime_r
 
_öcom∑tibÀ_as˘ime_r


	)

81 
	#˘ime_r
 
_öcom∑tibÀ_˘ime_r


	)

88 
	~"sys/ty≥s.h
"

89 
	~"°dio.h
"

90 
	~"î∫o.h
"

91 
	~"°rög.h
"

92 
	~"limôs.h
"

93 
	~"time.h
"

94 
	~"°dlib.h
"

96 #i‡
HAVE_GETTEXT


97 
	~"liböé.h
"

100 #i‡
HAVE_SYS_WAIT_H


101 
	~<sys/waô.h
>

104 #i‚de‡
WIFEXITED


105 
	#WIFEXITED
(
°©us
Ë(((°©usË& 0xffË=0)

	)

107 #i‚de‡
WEXITSTATUS


108 
	#WEXITSTATUS
(
°©us
Ë(((°©usË>> 8Ë& 0xff)

	)

111 #i‡
HAVE_UNISTD_H


112 
	~"uni°d.h
"

115 #i‡!
HAVE_UNISTD_H


116 #i‚de‡
F_OK


117 
	#F_OK
 0

	)

119 #i‚de‡
R_OK


120 
	#R_OK
 4

	)

125 
	#is_digô
(
c
Ë(()(cË- '0' <9)

	)

133 #i‚de‡
HAVE_STDINT_H


134 
	#HAVE_STDINT_H
 \

135 (199901 <
__STDC_VERSION__
 || \

136 2 < (
__GLIBC__
 + (0 < 
__GLIBC_MINOR__
)))

	)

139 #i‡
HAVE_STDINT_H


140 
	~"°döt.h
"

143 #i‚de‡
INT_FAST64_MAX


145 #i‡
deföed
 
LLONG_MAX
 || deföed 
__LONG_LONG_MAX__


146 
	töt_Á°64_t
;

148 #i‡(
LONG_MAX
 >> 31) < 0xffffffff

149 
PÀa£
 
u£
 
a
 
compûî
 
th©
 
suµ‹ts
 
	ga
 64-
bô
 
öãgî
 
ty≥
 (
‹
 
widî
);

150 
you
 
may
 
√ed
 
to
 
compûe
 
	gwôh
 "-DHAVE_STDINT_H".

152 
	töt_Á°64_t
;

156 #i‚de‡
INT32_MAX


157 
	#INT32_MAX
 0x7fffffff

	)

159 #i‚de‡
INT32_MIN


160 
	#INT32_MIN
 (-1 - 
INT32_MAX
)

	)

171 #i‚de‡
P


172 
	#P
(
x
Ë
	)
x

179 #i‚de‡
EXIT_SUCCESS


180 
	#EXIT_SUCCESS
 0

	)

187 #i‚de‡
EXIT_FAILURE


188 
	#EXIT_FAILURE
 1

	)

195 #i‚de‡
FILENAME_MAX


197 #i‚de‡
MAXPATHLEN


198 #ifde‡
unix


199 
	~"sys/∑øm.h
"

203 #ifde‡
MAXPATHLEN


204 
	#FILENAME_MAX
 
MAXPATHLEN


	)

206 #i‚de‡
MAXPATHLEN


207 
	#FILENAME_MAX
 1024

	)

216 #i‚de‡
ªmove


217 
u∆ök
 
P
((c⁄° * 
fûíame
));

218 
	#ªmove
 
u∆ök


	)

227 #i‚de‡
î∫o


228 
î∫o
;

237 #i‚de‡
as˘ime_r


238 * 
as˘ime_r
();

245 * 
iˇŒoc
 
P
((
√Àm
, 
ñsize
));

246 * 
iˇèŒoc
 
P
((* 
ﬁd
, c⁄° * 
√w
));

247 * 
i˝yÆloc
 
P
((c⁄° * 
°rög
));

248 * 
imÆloc
 
P
((
n
));

249 * 
úóŒoc
 
P
((* 
poöãr
, 
size
));

250 
ic‰ì
 
P
((* 
poöãr
));

251 
i‰ì
 
P
((* 
poöãr
));

252 c⁄° * 
scheck
 
P
((c⁄° * 
°rög
, c⁄° * 
f‹m©
));

258 #i‚de‡
TRUE


259 
	#TRUE
 1

	)

262 #i‚de‡
FALSE


263 
	#FALSE
 0

	)

266 #i‚de‡
TYPE_BIT


267 
	#TYPE_BIT
(
ty≥
Ë( (ty≥Ë* 
CHAR_BIT
)

	)

270 #i‚de‡
TYPE_SIGNED


271 
	#TYPE_SIGNED
(
ty≥
Ë((—y≥Ë-1Ë< 0)

	)

279 #i‚de‡
TYPE_INTEGRAL


280 
	#TYPE_INTEGRAL
(
ty≥
Ë((—y≥Ë0.5Ë!0.5)

	)

283 #i‚de‡
INT_STRLEN_MAXIMUM


290 
	#INT_STRLEN_MAXIMUM
(
ty≥
) \

291 ((
	`TYPE_BIT
(
ty≥
Ë- 
	`TYPE_SIGNED
(type)) * 302 / 1000 + \

292 1 + 
	`TYPE_SIGNED
(
ty≥
))

	)

299 #i‚de‡
GNUC_‹_löt


300 #ifde‡
löt


301 
	#GNUC_‹_löt


	)

303 #i‚de‡
löt


304 #ifde‡
__GNUC__


305 
	#GNUC_‹_löt


	)

310 #i‚de‡
INITIALIZE


311 #ifde‡
GNUC_‹_löt


312 
	#INITIALIZE
(
x
Ë((xË0)

	)

314 #i‚de‡
GNUC_‹_löt


315 
	#INITIALIZE
(
x
)

	)

325 #i‚de‡
_


326 #i‡
HAVE_GETTEXT


327 
	#_
(
msgid
Ë
	`gëãxt
(msgid)

	)

329 
	#_
(
msgid
Ë
	)
msgid

333 #i‚de‡
TZ_DOMAIN


334 
	#TZ_DOMAIN
 "tz"

	)

337 #i‡
HAVE_INCOMPATIBLE_CTIME_R


338 #unde‡
as˘ime_r


339 #unde‡
˘ime_r


340 *
as˘ime_r
 
P
((
tm
 const *, *));

341 *
˘ime_r
 
P
((
time_t
 const *, *));

344 #i‚de‡
YEARSPERREPEAT


345 
	#YEARSPERREPEAT
 400

	)

352 #i‚de‡
AVGSECSPERYEAR


353 
	#AVGSECSPERYEAR
 31556952L

	)

356 #i‚de‡
SECSPERREPEAT


357 
	#SECSPERREPEAT
 ((
öt_Á°64_t
Ë
YEARSPERREPEAT
 * (öt_Á°64_tË
AVGSECSPERYEAR
)

	)

360 #i‚de‡
SECSPERREPEAT_BITS


361 
	#SECSPERREPEAT_BITS
 34

	)

	@libs/libcutils/process_name.c

17 
	~<°dlib.h
>

18 
	~<°rög.h
>

19 
	~<cutûs/¥o˚ss_«me.h
>

20 
	~<cutûs/¥›îtõs.h
>

21 
	~<uni°d.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/°©.h
>

24 
	~<f˙é.h
>

26 #i‡
deföed
(
HAVE_PRCTL
)

27 
	~<sys/¥˘l.h
>

30 
	#PROCESS_NAME_DEVICE
 "/sys/qemu_åa˚/¥o˚ss_«me"

	)

32 c⁄° * 
	g¥o˚ss_«me
 = "unknown";

33 
	gru¬ög_ö_emuœt‹
 = -1;

35 
	$£t_¥o˚ss_«me
(c⁄° * 
√w_«me
) {

36 
¥›Buf
[
PROPERTY_VALUE_MAX
];

38 i‡(
√w_«me
 =
NULL
) {

43 
Àn
 = 
	`°æí
(
√w_«me
);

44 * 
c›y
 = (*Ë
	`mÆloc
(
Àn
 + 1);

45 
	`°r˝y
(
c›y
, 
√w_«me
);

46 
¥o˚ss_«me
 = (c⁄° *Ë
c›y
;

48 #i‡
	`deföed
(
HAVE_PRCTL
)

49 i‡(
Àn
 < 16) {

50 
	`¥˘l
(
PR_SET_NAME
, (Ë
√w_«me
, 0, 0, 0);

52 
	`¥˘l
(
PR_SET_NAME
, (Ë
√w_«me
 + 
Àn
 - 15, 0, 0, 0);

57 i‡(
ru¬ög_ö_emuœt‹
 == 0) {

63 i‡(
ru¬ög_ö_emuœt‹
 == -1) {

64 
	`¥›îty_gë
("ro.kî√l.qemu", 
¥›Buf
, "");

65 i‡(
¥›Buf
[0] == '1') {

66 
ru¬ög_ö_emuœt‹
 = 1;

68 
ru¬ög_ö_emuœt‹
 = 0;

80 
fd
 = 
	`›í
(
PROCESS_NAME_DEVICE
, 
O_RDWR
);

81 i‡(
fd
 < 0)

83 
	`wrôe
(
fd
, 
¥o˚ss_«me
, 
	`°æí
(process_name) + 1);

84 
	`˛o£
(
fd
);

85 
	}
}

87 c⁄° * 
	$gë_¥o˚ss_«me
() {

88  
¥o˚ss_«me
;

89 
	}
}

	@libs/libcutils/properties.c

17 
	#LOG_TAG
 "¥›îtõs"

	)

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<cutûs/sockës.h
>

23 
	~<î∫o.h
>

24 
	~<as£π.h
>

26 
	~<cutûs/¥›îtõs.h
>

27 
	~"loghack.h
"

29 #ifde‡
HAVE_LIBC_SYSTEM_PROPERTIES


31 
	#_REALLY_INCLUDE_SYS__SYSTEM_PROPERTIES_H_


	)

34 
	$¥›îty_£t
(c⁄° *
key
, c⁄° *
vÆue
)

40 
	}
}

42 
	$¥›îty_gë
(c⁄° *
key
, *
vÆue
, c⁄° *
deÁu…_vÆue
)

59 
	}
}

61 
¥›îty_li°
((*
¥›‚
)(c⁄° *
key
, c⁄° *
vÆue
, *
cookõ
),

62 *
cookõ
)

77 
	}
}

79 #ñi‡
deföed
(
HAVE_SYSTEM_PROPERTY_SERVER
)

87 
	~<°dio.h
>

88 
	~<sys/ty≥s.h
>

89 
	~<sys/sockë.h
>

90 
	~<sys/un.h
>

91 
	~<±hªad.h
>

93 
±hªad_⁄˚_t
 
	ggInôOn˚
 = 
PTHREAD_ONCE_INIT
;

94 
±hªad_muãx_t
 
	ggPr›îtyFdLock
 = 
PTHREAD_MUTEX_INITIALIZER
;

95 
	ggPr›Fd
 = -1;

102 
	$c⁄√˘ToSîvî
(c⁄° * 
fûeName
)

104 
sock
 = -1;

105 
cc
;

107 
sockaddr_un
 
addr
;

109 
sock
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

110 i‡(
sock
 < 0) {

111 
	`ALOGW
("UNIX domaö sockë cª©êÁûed (î∫o=%d)\n", 
î∫o
);

116 
	`°r˝y
(
addr
.
sun_∑th
, 
fûeName
);

117 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

118 
cc
 = 
	`c⁄√˘
(
sock
, (
sockaddr
*Ë&
addr
, 
	`SUN_LEN
(&addr));

119 i‡(
cc
 < 0) {

124 
	`˛o£
(
sock
);

128  
sock
;

129 
	}
}

134 
	$öô
()

136 
	`as£π
(
gPr›Fd
 == -1);

138 
gPr›Fd
 = 
	`c⁄√˘ToSîvî
(
SYSTEM_PROPERTY_PIPE_NAME
);

139 i‡(
gPr›Fd
 < 0) {

144 
	}
}

146 
	$¥›îty_gë
(c⁄° *
key
, *
vÆue
, c⁄° *
deÁu…_vÆue
)

148 
£ndBuf
[1+
PROPERTY_KEY_MAX
];

149 
ªcvBuf
[1+
PROPERTY_VALUE_MAX
];

150 
Àn
 = -1;

154 
	`±hªad_⁄˚
(&
gInôOn˚
, 
öô
);

155 i‡(
gPr›Fd
 < 0) {

157 i‡(
deÁu…_vÆue
 !
NULL
) {

158 
	`°r˝y
(
vÆue
, 
deÁu…_vÆue
);

159 
Àn
 = 
	`°æí
(
vÆue
);

161  
Àn
;

164 i‡(
	`°æí
(
key
Ë>
PROPERTY_KEY_MAX
)  -1;

166 
	`mem£t
(
£ndBuf
, 0xdd, (sendBuf));

168 
£ndBuf
[0] = (Ë
kSy°emPr›îtyGë
;

169 
	`°r˝y
(
£ndBuf
+1, 
key
);

171 
	`±hªad_muãx_lock
(&
gPr›îtyFdLock
);

172 i‡(
	`wrôe
(
gPr›Fd
, 
£ndBuf
, (sendBuf)) != (sendBuf)) {

173 
	`±hªad_muãx_u∆ock
(&
gPr›îtyFdLock
);

176 i‡(
	`ªad
(
gPr›Fd
, 
ªcvBuf
, (recvBuf)) != (recvBuf)) {

177 
	`±hªad_muãx_u∆ock
(&
gPr›îtyFdLock
);

180 
	`±hªad_muãx_u∆ock
(&
gPr›îtyFdLock
);

183 i‡(
ªcvBuf
[0] == 0) {

184 i‡(
deÁu…_vÆue
 !
NULL
) {

185 
	`°r˝y
(
vÆue
, 
deÁu…_vÆue
);

186 
Àn
 = 
	`°æí
(
vÆue
);

194 
vÆue
[0] = '\0';

195 
Àn
 = 0;

197 } i‡(
ªcvBuf
[0] == 1) {

198 
	`°r˝y
(
vÆue
, 
ªcvBuf
+1);

199 
Àn
 = 
	`°æí
(
vÆue
);

201 
	`ALOGE
("Got strangeÑesponseÅoÖroperty_getÑequest (%d)\n",

202 
ªcvBuf
[0]);

203 
	`as£π
(0);

209  
Àn
;

210 
	}
}

213 
	$¥›îty_£t
(c⁄° *
key
, c⁄° *
vÆue
)

215 
£ndBuf
[1+
PROPERTY_KEY_MAX
+
PROPERTY_VALUE_MAX
];

216 
ªcvBuf
[1];

217 
ªsu…
 = -1;

221 
	`±hªad_⁄˚
(&
gInôOn˚
, 
öô
);

222 i‡(
gPr›Fd
 < 0)

225 i‡(
	`°æí
(
key
Ë>
PROPERTY_KEY_MAX
)  -1;

226 i‡(
	`°æí
(
vÆue
Ë>
PROPERTY_VALUE_MAX
)  -1;

228 
	`mem£t
(
£ndBuf
, 0xdd, (sendBuf));

230 
£ndBuf
[0] = (Ë
kSy°emPr›îtySë
;

231 
	`°r˝y
(
£ndBuf
+1, 
key
);

232 
	`°r˝y
(
£ndBuf
+1+
PROPERTY_KEY_MAX
, 
vÆue
);

234 
	`±hªad_muãx_lock
(&
gPr›îtyFdLock
);

235 i‡(
	`wrôe
(
gPr›Fd
, 
£ndBuf
, (sendBuf)) != (sendBuf)) {

236 
	`±hªad_muãx_u∆ock
(&
gPr›îtyFdLock
);

239 i‡(
	`ªad
(
gPr›Fd
, 
ªcvBuf
, (recvBuf)) != (recvBuf)) {

240 
	`±hªad_muãx_u∆ock
(&
gPr›îtyFdLock
);

243 
	`±hªad_muãx_u∆ock
(&
gPr›îtyFdLock
);

245 i‡(
ªcvBuf
[0] != 1)

248 
	}
}

250 
¥›îty_li°
((*
¥›‚
)(c⁄° *
key
, c⁄° *
vÆue
, *
cookõ
),

251 *
cookõ
)

254 
	`±hªad_⁄˚
(&
gInôOn˚
, 
öô
);

255 i‡(
gPr›Fd
 < 0)

259 
	}
}

265 
	~<cutûs/thªads.h
>

267 
muãx_t
 
	gív_lock
 = 
MUTEX_INITIALIZER
;

269 
	$¥›îty_gë
(c⁄° *
key
, *
vÆue
, c⁄° *
deÁu…_vÆue
)

271 
íame
[
PROPERTY_KEY_MAX
 + 6];

272 *
p
;

273 
Àn
;

275 
Àn
 = 
	`°æí
(
key
);

276 if(
Àn
 >
PROPERTY_KEY_MAX
)  -1;

277 
	`mem˝y
(
íame
, "PROP_", 5);

278 
	`mem˝y
(
íame
 + 5, 
key
, 
Àn
 + 1);

280 
	`muãx_lock
(&
ív_lock
);

282 
p
 = 
	`gëív
(
íame
);

283 if(
p
 == 0)Ö = "";

284 
Àn
 = 
	`°æí
(
p
);

285 if(
Àn
 >
PROPERTY_VALUE_MAX
) {

286 
Àn
 = 
PROPERTY_VALUE_MAX
 - 1;

289 if((
Àn
 =0Ë&& 
deÁu…_vÆue
) {

290 
Àn
 = 
	`°æí
(
deÁu…_vÆue
);

291 
	`mem˝y
(
vÆue
, 
deÁu…_vÆue
, 
Àn
 + 1);

293 
	`mem˝y
(
vÆue
, 
p
, 
Àn
);

294 
vÆue
[
Àn
] = 0;

297 
	`muãx_u∆ock
(&
ív_lock
);

299  
Àn
;

300 
	}
}

303 
	$¥›îty_£t
(c⁄° *
key
, c⁄° *
vÆue
)

305 
íame
[
PROPERTY_KEY_MAX
 + 6];

306 *
p
;

307 
Àn
;

308 
r
;

310 if(
	`°æí
(
vÆue
Ë>
PROPERTY_VALUE_MAX
)  -1;

312 
Àn
 = 
	`°æí
(
key
);

313 if(
Àn
 >
PROPERTY_KEY_MAX
)  -1;

314 
	`mem˝y
(
íame
, "PROP_", 5);

315 
	`mem˝y
(
íame
 + 5, 
key
, 
Àn
 + 1);

317 
	`muãx_lock
(&
ív_lock
);

318 #ifde‡
HAVE_MS_C_RUNTIME


320 
ãmp
[256];

321 
	`¢¥ötf
–
ãmp
, —emp), "%s=%s", 
íame
, 
vÆue
);

322 
	`puãnv
(
ãmp
);

323 
r
 = 0;

326 
r
 = 
	`£ãnv
(
íame
, 
vÆue
, 1);

328 
	`muãx_u∆ock
(&
ív_lock
);

330  
r
;

331 
	}
}

333 
¥›îty_li°
((*
¥›‚
)(c⁄° *
key
, c⁄° *
vÆue
, *
cookõ
),

334 *
cookõ
)

337 
	}
}

	@libs/libcutils/qsort_r_compat.c

17 
	~<°dlib.h
>

18 
	~<cutûs/qs‹t_r_com∑t.h
>

20 #i‡
HAVE_BSD_QSORT_R


26 
qs‹t_r_com∑t
(* 
ba£
, 
size_t
 
√l
, size_à
width
, * 
thunk
,

27 (*
com∑r
)(*, const * , const *)) {

28 
	`qs‹t_r
(
ba£
, 
√l
, 
width
, 
thunk
, 
com∑r
);

29 
	}
}

31 #ñi‡
HAVE_GNU_QSORT_R


37 
	scom∑r_d©a
 {

38 * 
	mthunk
;

39 (*
	mcom∑r
)(*, const * , const *);

42 
	$com∑r_wøµî
(c⁄° * 
a
, c⁄° * 
b
, * 
d©a
) {

43 
com∑r_d©a
* com∑r_d©®(com∑r_d©a*)
d©a
;

44  
com∑r_d©a
->
	`com∑r
(com∑r_d©a->
thunk
, 
a
, 
b
);

45 
	}
}

47 
qs‹t_r_com∑t
(* 
ba£
, 
size_t
 
√l
, size_à
width
, * 
thunk
,

48 (*
com∑r
)(*, const * , const *)) {

49 
com∑r_d©a
 compar_data;

50 
com∑r_d©a
.
thunk
 =Åhunk;

51 
com∑r_d©a
.
com∑r
 = compar;

52 
	`qs‹t_r
(
ba£
, 
√l
, 
width
, 
com∑r_wøµî
, &
com∑r_d©a
);

53 
	}
}

61 
	~<cutûs/thªads.h
>

63 
thªad_°‹e_t
 
	gcom∑r_d©a_key
 = 
THREAD_STORE_INITIALIZER
;

65 
	scom∑r_d©a
 {

66 * 
	mthunk
;

67 (*
	mcom∑r
)(*, const * , const *);

70 
	$com∑r_wøµî
(c⁄° * 
a
, c⁄° * 
b
) {

71 
com∑r_d©a
* com∑r_d©®(com∑r_d©a*)
	`thªad_°‹e_gë
(&
com∑r_d©a_key
);

72  
com∑r_d©a
->
	`com∑r
(com∑r_d©a->
thunk
, 
a
, 
b
);

73 
	}
}

75 
qs‹t_r_com∑t
(* 
ba£
, 
size_t
 
√l
, size_à
width
, * 
thunk
,

76 (*
com∑r
)(*, const * , const *)) {

77 
com∑r_d©a
 compar_data;

78 
com∑r_d©a
.
thunk
 =Åhunk;

79 
com∑r_d©a
.
com∑r
 = compar;

80 
	`thªad_°‹e_£t
(&
com∑r_d©a_key
, &
com∑r_d©a
, 
NULL
);

81 
	`qs‹t
(
ba£
, 
√l
, 
width
, 
com∑r_wøµî
);

82 
	}
}

	@libs/libcutils/qtaguid.c

20 
	#LOG_TAG
 "qèguid"

	)

22 
	~<cutûs/qèguid.h
>

23 
	~<cutûs/log.h
>

24 
	~<î∫o.h
>

25 
	~<f˙é.h
>

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<uni°d.h
>

29 
	~<±hªad.h
>

31 c⁄° * 
	gCTRL_PROCPATH
 = "/proc/net/xt_qtaguid/ctrl";

32 c⁄° 
	gCTRL_MAX_INPUT_LEN
 = 128;

33 c⁄° *
	gGLOBAL_PACIFIER_PARAM
 = "/sys/module/xt_qtaguid/parameters/passive";

34 c⁄° *
	gTAG_PACIFIER_PARAM
 = "/sys/module/xt_qtaguid/parameters/tag_tracking_passive";

44 
	gªsTøckFd
 = -1;

45 
±hªad_⁄˚_t
 
	gªsTøckInôD⁄e
 = 
PTHREAD_ONCE_INIT
;

48 
	$qèguid_ªsTøck
() {

49 
ªsTøckFd
 = 
	`TEMP_FAILURE_RETRY
(
	`›í
("/dev/xt_qèguid", 
O_RDONLY
));

50 i‡(
ªsTøckFd
 >=0) {

51 
	`TEMP_FAILURE_RETRY
(
	`f˙é
(
ªsTøckFd
, 
F_SETFD
, 
FD_CLOEXEC
));

53 
	}
}

60 
	$wrôe_˘æ
(c⁄° *
cmd
) {

61 
fd
, 
ªs
, 
ßvedEºno
;

63 
	`ALOGV
("wrôe_˘æ(%s)", 
cmd
);

65 
fd
 = 
	`TEMP_FAILURE_RETRY
(
	`›í
(
CTRL_PROCPATH
, 
O_WRONLY
));

66 i‡(
fd
 < 0) {

67  -
î∫o
;

70 
ªs
 = 
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
fd
, 
cmd
, 
	`°æí
(cmd)));

71 i‡(
ªs
 < 0) {

72 
ßvedEºno
 = 
î∫o
;

74 
ßvedEºno
 = 0;

76 i‡(
ªs
 < 0) {

77 
	`ALOGI
("Faûed wrôe_˘æ(%sËªs=%dÉºno=%d", 
cmd
, 
ªs
, 
ßvedEºno
);

79 
	`˛o£
(
fd
);

80  -
ßvedEºno
;

81 
	}
}

83 
	$wrôe_∑øm
(c⁄° *
∑øm_∑th
, c⁄° *
vÆue
) {

84 
∑øm_fd
;

85 
ªs
;

87 
∑øm_fd
 = 
	`TEMP_FAILURE_RETRY
(
	`›í
(
∑øm_∑th
, 
O_WRONLY
));

88 i‡(
∑øm_fd
 < 0) {

89  -
î∫o
;

91 
ªs
 = 
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
∑øm_fd
, 
vÆue
, 
	`°æí
(value)));

92 i‡(
ªs
 < 0) {

93  -
î∫o
;

95 
	`˛o£
(
∑øm_fd
);

97 
	}
}

99 
	$qèguid_ègSockë
(
sockfd
, 
èg
, 
uid_t
 
uid
) {

100 
löeBuf
[
CTRL_MAX_INPUT_LEN
];

101 
ªs
;

102 
uöt64_t
 
kTag
 = ((uöt64_t)
èg
 << 32);

104 
	`±hªad_⁄˚
(&
ªsTøckInôD⁄e
, 
qèguid_ªsTøck
);

106 
	`¢¥ötf
(
löeBuf
, ÷öeBuf), "à%d %Œu %d", 
sockfd
, 
kTag
, 
uid
);

108 
	`ALOGV
("Taggög sockë %d wôhÅag %Œx{%u,0} f‹ uid %d", 
sockfd
, 
kTag
, 
èg
, 
uid
);

110 
ªs
 = 
	`wrôe_˘æ
(
löeBuf
);

111 i‡(
ªs
 < 0) {

112 
	`ALOGI
("Tagging socket %d withÅag %llx(%d) for uid %d failedÉrrno=%d",

113 
sockfd
, 
kTag
, 
èg
, 
uid
, 
ªs
);

116  
ªs
;

117 
	}
}

119 
	$qèguid_u¡agSockë
(
sockfd
) {

120 
löeBuf
[
CTRL_MAX_INPUT_LEN
];

121 
ªs
;

123 
	`ALOGV
("U¡aggög sockë %d", 
sockfd
);

125 
	`¢¥ötf
(
löeBuf
, ÷öeBuf), "u %d", 
sockfd
);

126 
ªs
 = 
	`wrôe_˘æ
(
löeBuf
);

127 i‡(
ªs
 < 0) {

128 
	`ALOGI
("U¡aggög sockë %d faûedÉºno=%d", 
sockfd
, 
ªs
);

131  
ªs
;

132 
	}
}

134 
	$qèguid_£tCou¡îSë
(
cou¡îSëNum
, 
uid_t
 
uid
) {

135 
löeBuf
[
CTRL_MAX_INPUT_LEN
];

136 
ªs
;

138 
	`ALOGV
("Sëtög cou¡î†tÿ£à%d f‹ uid %d", 
cou¡îSëNum
, 
uid
);

140 
	`¢¥ötf
(
löeBuf
, ÷öeBuf), "†%d %d", 
cou¡îSëNum
, 
uid
);

141 
ªs
 = 
	`wrôe_˘æ
(
löeBuf
);

142  
ªs
;

143 
	}
}

145 
	$qèguid_dñëeTagD©a
(
èg
, 
uid_t
 
uid
) {

146 
löeBuf
[
CTRL_MAX_INPUT_LEN
];

147 
fd
, 
˙t
 = 0, 
ªs
 = 0;

148 
uöt64_t
 
kTag
 = (uöt64_t)
èg
 << 32;

150 
	`ALOGV
("DñëögÅag d©®wôhÅag %Œx{%d,0} f‹ uid %d", 
kTag
, 
èg
, 
uid
);

152 
	`±hªad_⁄˚
(&
ªsTøckInôD⁄e
, 
qèguid_ªsTøck
);

154 
	`¢¥ötf
(
löeBuf
, ÷öeBuf), "d %Œu %d", 
kTag
, 
uid
);

155 
ªs
 = 
	`wrôe_˘æ
(
löeBuf
);

156 i‡(
ªs
 < 0) {

157 
	`ALOGI
("DeleteingÅag data withÅag %llx/%d for uid %d failed with cnt=%dÉrrno=%d",

158 
kTag
, 
èg
, 
uid
, 
˙t
, 
î∫o
);

161  
ªs
;

162 
	}
}

164 
	$qèguid_£tPacifõr
(
⁄
) {

165 
∑øm_fd
;

166 
ªs
;

167 c⁄° *
vÆue
;

169 
vÆue
 = 
⁄
 ? "Y" : "N";

170 i‡(
	`wrôe_∑øm
(
GLOBAL_PACIFIER_PARAM
, 
vÆue
) < 0) {

171  -
î∫o
;

173 i‡(
	`wrôe_∑øm
(
TAG_PACIFIER_PARAM
, 
vÆue
) < 0) {

174  -
î∫o
;

177 
	}
}

	@libs/libcutils/record_stream.c

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<as£π.h
>

21 
	~<î∫o.h
>

22 
	~<cutûs/ªc‹d_°ªam.h
>

23 
	~<°rög.h
>

24 
	~<°döt.h
>

25 #ifde‡
HAVE_WINSOCK


26 
	~<wösock2.h
>

28 
	~<√töë/ö.h
>

31 
	#HEADER_SIZE
 4

	)

33 
	sRec‹dSåóm
 {

34 
	mfd
;

35 
size_t
 
	mmaxRec‹dLí
;

37 *
	mbuf„r
;

39 *
	munc⁄sumed
;

40 *
	mªad_íd
;

41 *
	mbuf„r_íd
;

45 
Rec‹dSåóm
 *
	$ªc‹d_°ªam_√w
(
fd
, 
size_t
 
maxRec‹dLí
)

47 
Rec‹dSåóm
 *
ªt
;

49 
	`as£π
 (
maxRec‹dLí
 <= 0xffff);

51 
ªt
 = (
Rec‹dSåóm
 *)
	`ˇŒoc
(1, (RecordStream));

53 
ªt
->
fd
 = fd;

54 
ªt
->
maxRec‹dLí
 = maxRecordLen;

55 
ªt
->
buf„r
 = (*)
	`mÆloc
 (
maxRec‹dLí
 + 
HEADER_SIZE
);

57 
ªt
->
unc⁄sumed
 =Ñë->
buf„r
;

58 
ªt
->
ªad_íd
 =Ñë->
buf„r
;

59 
ªt
->
buf„r_íd
 =Ñë->
buf„r
 + 
maxRec‹dLí
 + 
HEADER_SIZE
;

61  
ªt
;

62 
	}
}

65 
	$ªc‹d_°ªam_‰ì
(
Rec‹dSåóm
 *
rs
)

67 
	`‰ì
(
rs
->
buf„r
);

68 
	`‰ì
(
rs
);

69 
	}
}

73 * 
	$gëEndOfRec‹d
 (*
p_begö
,

74 *
p_íd
)

76 
size_t
 
Àn
;

77 * 
p_ªt
;

79 i‡(
p_íd
 < 
p_begö
 + 
HEADER_SIZE
) {

80  
NULL
;

84 
Àn
 = 
	`¡ohl
(*((
uöt32_t
 *)
p_begö
));

86 
p_ªt
 = 
p_begö
 + 
HEADER_SIZE
 + 
Àn
;

88 i‡(
p_íd
 < 
p_ªt
) {

89  
NULL
;

92  
p_ªt
;

93 
	}
}

95 *
	$gëNextRec‹d
 (
Rec‹dSåóm
 *
p_rs
, 
size_t
 *
p_outRec‹dLí
)

97 *
ªc‹d_°¨t
, *
ªc‹d_íd
;

99 
ªc‹d_íd
 = 
	`gëEndOfRec‹d
 (
p_rs
->
unc⁄sumed
,Ö_rs->
ªad_íd
);

101 i‡(
ªc‹d_íd
 !
NULL
) {

103 
ªc‹d_°¨t
 = 
p_rs
->
unc⁄sumed
 + 
HEADER_SIZE
;

104 
p_rs
->
unc⁄sumed
 = 
ªc‹d_íd
;

106 *
p_outRec‹dLí
 = 
ªc‹d_íd
 - 
ªc‹d_°¨t
;

108  
ªc‹d_°¨t
;

111  
NULL
;

112 
	}
}

127 
	$ªc‹d_°ªam_gë_√xt
 (
Rec‹dSåóm
 *
p_rs
, ** 
p_outRec‹d
,

128 
size_t
 *
p_outRec‹dLí
)

130 *
ªt
;

132 
ssize_t
 
cou¡Ród
;

135 
ªt
 = 
	`gëNextRec‹d
 (
p_rs
, 
p_outRec‹dLí
);

137 i‡(
ªt
 !
NULL
) {

138 *
p_outRec‹d
 = 
ªt
;

143 i‡(
p_rs
->
unc⁄sumed
 =p_rs->
buf„r


144 && 
p_rs
->
ªad_íd
 =p_rs->
buf„r_íd


148 
	`as£π
 (0);

149 
î∫o
 = 
EFBIG
;

153 i‡(
p_rs
->
unc⁄sumed
 !p_rs->
buf„r
) {

155 
size_t
 
toMove
;

157 
toMove
 = 
p_rs
->
ªad_íd
 -Ö_rs->
unc⁄sumed
;

158 i‡(
toMove
) {

159 
	`memmove
(
p_rs
->
buf„r
,Ö_rs->
unc⁄sumed
, 
toMove
);

162 
p_rs
->
ªad_íd
 =Ö_rs->
buf„r
 + 
toMove
;

163 
p_rs
->
unc⁄sumed
 =Ö_rs->
buf„r
;

166 
cou¡Ród
 = 
	`ªad
 (
p_rs
->
fd
,Ö_rs->
ªad_íd
,Ö_rs->
buf„r_íd
 -Ö_rs->read_end);

168 i‡(
cou¡Ród
 <= 0) {

170 *
p_outRec‹d
 = 
NULL
;

171  
cou¡Ród
;

174 
p_rs
->
ªad_íd
 +
cou¡Ród
;

176 
ªt
 = 
	`gëNextRec‹d
 (
p_rs
, 
p_outRec‹dLí
);

178 i‡(
ªt
 =
NULL
) {

180 
î∫o
 = 
EAGAIN
;

184 *
p_outRec‹d
 = 
ªt
;

186 
	}
}

	@libs/libcutils/sched_policy.c

19 
	#LOG_TAG
 "SchedPﬁicy"

	)

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<uni°d.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<f˙é.h
>

27 
	~<cutûs/sched_pﬁicy.h
>

28 
	~<cutûs/log.h
>

34 
ölöe
 
SchedPﬁicy
 
	$_pﬁicy
(
SchedPﬁicy
 
p
)

36  
p
 =
SP_DEFAULT
 ? 
SP_SYSTEM_DEFAULT
 :Ö;

37 
	}
}

39 #i‡
deföed
(
HAVE_ANDROID_OS
Ë&& deföed(
HAVE_SCHED_H
Ë&& deföed(
HAVE_PTHREADS
)

41 
	~<sched.h
>

42 
	~<±hªad.h
>

44 #i‚de‡
SCHED_NORMAL


45 
	#SCHED_NORMAL
 0

	)

48 #i‚de‡
SCHED_BATCH


49 
	#SCHED_BATCH
 3

	)

52 
	#POLICY_DEBUG
 0

	)

54 
	#CAN_SET_SP_SYSTEM
 0

55 

	)

56 
±hªad_⁄˚_t
 
	gthe_⁄˚
 = 
PTHREAD_ONCE_INIT
;

58 
	g__sys_suµ‹ts_schedgroups
 = -1;

61 
	gbg_cgroup_fd
 = -1;

62 
	gfg_cgroup_fd
 = -1;

63 #i‡
CAN_SET_SP_SYSTEM


64 
	gsy°em_cgroup_fd
 = -1;

68 
	$add_tid_to_cgroup
(
tid
, 
SchedPﬁicy
 
pﬁicy
)

70 
fd
;

72 
pﬁicy
) {

73 
SP_BACKGROUND
:

74 
fd
 = 
bg_cgroup_fd
;

76 
SP_FOREGROUND
:

77 
SP_AUDIO_APP
:

78 
SP_AUDIO_SYS
:

79 
fd
 = 
fg_cgroup_fd
;

81 #i‡
CAN_SET_SP_SYSTEM


82 
SP_SYSTEM
:

83 
fd
 = 
sy°em_cgroup_fd
;

87 
fd
 = -1;

91 i‡(
fd
 < 0) {

92 
	`SLOGE
("add_tid_to_cgrou∞Áûed;Öﬁicy=%d\n", 
pﬁicy
);

97 
ãxt
[22];

98 *
íd
 = 
ãxt
 + (text) - 1;

99 *
±r
 = 
íd
;

100 *
±r
 = '\0';

101 
tid
 > 0) {

102 *--
±r
 = '0' + (
tid
 % 10);

103 
tid
 =Åid / 10;

106 i‡(
	`wrôe
(
fd
, 
±r
, 
íd
 -Ötr) < 0) {

111 i‡(
î∫o
 =
ESRCH
)

113 
	`SLOGW
("add_tid_to_cgroup failedÅo write '%s' (%s);Öolicy=%d\n",

114 
±r
, 
	`°ªº‹
(
î∫o
), 
pﬁicy
);

119 
	}
}

121 
	$__öôülize
() {

122 * 
fûíame
;

123 i‡(!
	`ac˚ss
("/dev/˝u˘l/èsks", 
F_OK
)) {

124 
__sys_suµ‹ts_schedgroups
 = 1;

126 #i‡
CAN_SET_SP_SYSTEM


127 
fûíame
 = "/dev/cpuctl/tasks";

128 
sy°em_cgroup_fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CLOEXEC
);

129 i‡(
sy°em_cgroup_fd
 < 0) {

130 
	`SLOGV
("›í o‡%†Áûed: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

134 
fûíame
 = "/dev/cpuctl/apps/tasks";

135 
fg_cgroup_fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CLOEXEC
);

136 i‡(
fg_cgroup_fd
 < 0) {

137 
	`SLOGE
("›í o‡%†Áûed: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

140 
fûíame
 = "/dev/cpuctl/apps/bg_non_interactive/tasks";

141 
bg_cgroup_fd
 = 
	`›í
(
fûíame
, 
O_WRONLY
 | 
O_CLOEXEC
);

142 i‡(
bg_cgroup_fd
 < 0) {

143 
	`SLOGE
("›í o‡%†Áûed: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

146 
__sys_suµ‹ts_schedgroups
 = 0;

148 
	}
}

161 
	$gëScheduÀrGroup
(
tid
, * 
buf
, 
size_t
 
bufLí
)

163 #ifde‡
HAVE_ANDROID_OS


164 
∑thBuf
[32];

165 
löeBuf
[256];

166 
FILE
 *
Â
;

168 
	`¢¥ötf
(
∑thBuf
, ’©hBuf), "/¥oc/%d/cgroup", 
tid
);

169 i‡(!(
Â
 = 
	`f›í
(
∑thBuf
, "r"))) {

173 
	`fgës
(
löeBuf
, ÷öeBufË-1, 
Â
)) {

174 *
√xt
 = 
löeBuf
;

175 *
subsys
;

176 *
gΩ
;

177 
size_t
 
Àn
;

180 i‡(!
	`°r£p
(&
√xt
, ":")) {

181 
out_bad_d©a
;

184 i‡(!(
subsys
 = 
	`°r£p
(&
√xt
, ":"))) {

185 
out_bad_d©a
;

188 i‡(
	`°rcmp
(
subsys
, "cpu")) {

193 i‡(!(
gΩ
 = 
	`°r£p
(&
√xt
, ":"))) {

194 
out_bad_d©a
;

196 
gΩ
++;

197 
Àn
 = 
	`°æí
(
gΩ
);

198 
gΩ
[
Àn
-1] = '\0';

200 i‡(
bufLí
 <
Àn
) {

201 
Àn
 = 
bufLí
 - 1;

203 
	`°∫˝y
(
buf
, 
gΩ
, 
Àn
);

204 
buf
[
Àn
] = '\0';

205 
	`f˛o£
(
Â
);

209 
	`SLOGE
("FailedÅo find cpu subsys");

210 
	`f˛o£
(
Â
);

212 
out_bad_d©a
:

213 
	`SLOGE
("Bad cgrou∞d©®{%s}", 
löeBuf
);

214 
	`f˛o£
(
Â
);

217 
î∫o
 = 
ENOSYS
;

220 
	}
}

222 
	$gë_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 *
pﬁicy
)

224 #ifde‡
HAVE_GETTID


225 i‡(
tid
 == 0) {

226 
tid
 = 
	`gëtid
();

229 
	`±hªad_⁄˚
(&
the_⁄˚
, 
__öôülize
);

231 i‡(
__sys_suµ‹ts_schedgroups
) {

232 
gΩBuf
[32];

233 i‡(
	`gëScheduÀrGroup
(
tid
, 
gΩBuf
, (grpBuf)) < 0)

235 i‡(
gΩBuf
[0] == '\0') {

236 *
pﬁicy
 = 
SP_SYSTEM
;

237 } i‡(!
	`°rcmp
(
gΩBuf
, "apps/bg_non_interactive")) {

238 *
pﬁicy
 = 
SP_BACKGROUND
;

239 } i‡(!
	`°rcmp
(
gΩBuf
, "apps")) {

240 *
pﬁicy
 = 
SP_FOREGROUND
;

242 
î∫o
 = 
ERANGE
;

246 
rc
 = 
	`sched_gëscheduÀr
(
tid
);

247 i‡(
rc
 < 0)

249 i‡(
rc
 =
SCHED_NORMAL
)

250 *
pﬁicy
 = 
SP_FOREGROUND
;

251 i‡(
rc
 =
SCHED_BATCH
)

252 *
pﬁicy
 = 
SP_BACKGROUND
;

254 
î∫o
 = 
ERANGE
;

259 
	}
}

261 
	$£t_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 
pﬁicy
)

263 #ifde‡
HAVE_GETTID


264 i‡(
tid
 == 0) {

265 
tid
 = 
	`gëtid
();

268 
pﬁicy
 = 
	`_pﬁicy
(policy);

269 
	`±hªad_⁄˚
(&
the_⁄˚
, 
__öôülize
);

271 #i‡
POLICY_DEBUG


272 
°©fûe
[64];

273 
°©löe
[1024];

274 
thªad_«me
[255];

275 
fd
;

277 
	`•rötf
(
°©fûe
, "/¥oc/%d/°©", 
tid
);

278 
	`mem£t
(
thªad_«me
, 0, (thread_name));

280 
fd
 = 
	`›í
(
°©fûe
, 
O_RDONLY
);

281 i‡(
fd
 >= 0) {

282 
rc
 = 
	`ªad
(
fd
, 
°©löe
, 1023);

283 
	`˛o£
(
fd
);

284 
°©löe
[
rc
] = 0;

285 *
p
 = 
°©löe
;

286 *
q
;

288 
p
 = 
°©löe
; *p != '(';Ö++);

289 
p
++;

290 
q
 = 
p
; *q != ')'; q++);

292 
	`°∫˝y
(
thªad_«me
, 
p
, (
q
-p));

294 
pﬁicy
) {

295 
SP_BACKGROUND
:

296 
	`SLOGD
("vvvÅid %d (%s)", 
tid
, 
thªad_«me
);

298 
SP_FOREGROUND
:

299 
SP_AUDIO_APP
:

300 
SP_AUDIO_SYS
:

301 
	`SLOGD
("^^^Åid %d (%s)", 
tid
, 
thªad_«me
);

303 
SP_SYSTEM
:

304 
	`SLOGD
("///Åid %d (%s)", 
tid
, 
thªad_«me
);

307 
	`SLOGD
("???Åid %d (%s)", 
tid
, 
thªad_«me
);

312 i‡(
__sys_suµ‹ts_schedgroups
) {

313 i‡(
	`add_tid_to_cgroup
(
tid
, 
pﬁicy
)) {

314 i‡(
î∫o
 !
ESRCH
 &&Éºnÿ!
ENOENT
)

315  -
î∫o
;

318 
sched_∑øm
 
∑øm
;

320 
∑øm
.
sched_¥i‹ôy
 = 0;

321 
	`sched_£tscheduÀr
(
tid
,

322 (
pﬁicy
 =
SP_BACKGROUND
) ?

323 
SCHED_BATCH
 : 
SCHED_NORMAL
,

324 &
∑øm
);

328 
	}
}

334 
	$£t_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 
pﬁicy
)

337 
	}
}

339 
	$gë_sched_pﬁicy
(
tid
, 
SchedPﬁicy
 *
pﬁicy
)

341 *
pﬁicy
 = 
SP_SYSTEM_DEFAULT
;

343 
	}
}

347 c⁄° *
	$gë_sched_pﬁicy_«me
(
SchedPﬁicy
 
pﬁicy
)

349 
pﬁicy
 = 
	`_pﬁicy
(policy);

350 c⁄° * c⁄° 
°rögs
[
SP_CNT
] = {

351 [
SP_BACKGROUND
] = "bg",

352 [
SP_FOREGROUND
] = "fg",

353 [
SP_SYSTEM
] = " ",

354 [
SP_AUDIO_APP
] = "aa",

355 [
SP_AUDIO_SYS
] = "as",

357 i‡((
pﬁicy
 < 
SP_CNT
Ë&& (
°rögs
[pﬁicy] !
NULL
))

358  
°rögs
[
pﬁicy
];

361 
	}
}

	@libs/libcutils/selector.c

17 
	#LOG_TAG
 "£À˘‹"

	)

19 
	~<as£π.h
>

20 
	~<î∫o.h
>

21 
	~<±hªad.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<uni°d.h
>

27 
	~<cutûs/¨øy.h
>

28 
	~<cutûs/£À˘‹.h
>

30 
	~"loghack.h
"

32 
	sSñe˘‹
 {

33 
Aºay
* 
	m£À˘abÀFds
;

34 
boﬁ
 
	mlo›ög
;

35 
fd_£t
 
	mªadFds
;

36 
fd_£t
 
	mwrôeFds
;

37 
fd_£t
 
	mex˚±Fds
;

38 
	mmaxFd
;

39 
	mwakeupPùe
[2];

40 
Sñe˘abÀFd
* 
	mwakeupFd
;

42 
boﬁ
 
	möSñe˘
;

43 
±hªad_muãx_t
 
	möSñe˘Lock
;

47 
	$ótWakeupD©a
(
Sñe˘abÀFd
* 
wakeupFd
) {

48 
g¨bage
[64];

49 i‡(
	`ªad
(
wakeupFd
->
fd
, 
g¨bage
, (garbage)) < 0) {

50 i‡(
î∫o
 =
EINTR
) {

51 
	`ALOGI
("read() interrupted.");

53 
	`LOG_ALWAYS_FATAL
("Thi†shouldÇevî h≠≥n: %s", 
	`°ªº‹
(
î∫o
));

56 
	}
}

58 
	$£tInSñe˘
(
Sñe˘‹
* 
£À˘‹
, 
boﬁ
 
öSñe˘
) {

59 
	`±hªad_muãx_lock
(&
£À˘‹
->
öSñe˘Lock
);

60 
£À˘‹
->
öSñe˘
 = inSelect;

61 
	`±hªad_muãx_u∆ock
(&
£À˘‹
->
öSñe˘Lock
);

62 
	}
}

64 
boﬁ
 
	$isInSñe˘
(
Sñe˘‹
* 
£À˘‹
) {

65 
	`±hªad_muãx_lock
(&
£À˘‹
->
öSñe˘Lock
);

66 
boﬁ
 
öSñe˘
 = 
£À˘‹
->inSelect;

67 
	`±hªad_muãx_u∆ock
(&
£À˘‹
->
öSñe˘Lock
);

68  
öSñe˘
;

69 
	}
}

71 
	$£À˘‹WakeUp
(
Sñe˘‹
* 
£À˘‹
) {

72 i‡(!
	`isInSñe˘
(
£À˘‹
)) {

77 
g¨bage
[1];

78 i‡(
	`wrôe
(
£À˘‹
->
wakeupPùe
[1], 
g¨bage
, (garbage)) < 0) {

79 i‡(
î∫o
 =
EINTR
) {

80 
	`ALOGI
("read() interrupted.");

82 
	`LOG_ALWAYS_FATAL
("Thi†shouldÇevî h≠≥n: %s", 
	`°ªº‹
(
î∫o
));

85 
	}
}

87 
Sñe˘‹
* 
	$£À˘‹Cª©e
() {

88 
Sñe˘‹
* 
£À˘‹
 = 
	`ˇŒoc
(1, (Selector));

89 i‡(
£À˘‹
 =
NULL
) {

90 
	`LOG_ALWAYS_FATAL
("malloc()Érror.");

92 
£À˘‹
->
£À˘abÀFds
 = 
	`¨øyCª©e
();

95 i‡(
	`pùe
(
£À˘‹
->
wakeupPùe
) < 0) {

96 
	`LOG_ALWAYS_FATAL
("pùe(Ëîr‹: %s", 
	`°ªº‹
(
î∫o
));

99 
	`ALOGD
("Wakeu∞fd: %d", 
£À˘‹
->
wakeupPùe
[0]);

101 
Sñe˘abÀFd
* 
wakeupFd
 = 
	`£À˘‹Add
(
£À˘‹
, sñe˘‹->
wakeupPùe
[0]);

102 i‡(
wakeupFd
 =
NULL
) {

103 
	`LOG_ALWAYS_FATAL
("malloc()Érror.");

105 
wakeupFd
->
⁄RódabÀ
 = &
ótWakeupD©a
;

107 
	`±hªad_muãx_öô
(&
£À˘‹
->
öSñe˘Lock
, 
NULL
);

109  
£À˘‹
;

110 
	}
}

112 
Sñe˘abÀFd
* 
	$£À˘‹Add
(
Sñe˘‹
* 
£À˘‹
, 
fd
) {

113 
	`as£π
(
£À˘‹
 !
NULL
);

115 
Sñe˘abÀFd
* 
£À˘abÀFd
 = 
	`ˇŒoc
(1, (SelectableFd));

116 i‡(
£À˘abÀFd
 !
NULL
) {

117 
£À˘abÀFd
->
£À˘‹
 = selector;

118 
£À˘abÀFd
->
fd
 = fd;

120 
	`¨øyAdd
(
£À˘‹
->
£À˘abÀFds
, 
£À˘abÀFd
);

123  
£À˘abÀFd
;

124 
	}
}

130 
ölöe
 
boﬁ
 
maybeAdd
(
Sñe˘abÀFd
* 
£À˘abÀFd
,

131 (*
ˇŒback
)(
Sñe˘abÀFd
*), 
fd_£t
* 
fdSë
) {

132 i‡(
ˇŒback
 !
NULL
) {

133 
	`FD_SET
(
£À˘abÀFd
->
fd
, 
fdSë
);

134  
åue
;

136  
Ál£
;

137 
	}
}

142 
	$¥ï¨eF‹Sñe˘
(
Sñe˘‹
* 
£À˘‹
) {

143 
fd_£t
* 
ex˚±Fds
 = &
£À˘‹
->exceptFds;

144 
fd_£t
* 
ªadFds
 = &
£À˘‹
->readFds;

145 
fd_£t
* 
wrôeFds
 = &
£À˘‹
->writeFds;

147 
	`FD_ZERO
(
ex˚±Fds
);

148 
	`FD_ZERO
(
ªadFds
);

149 
	`FD_ZERO
(
wrôeFds
);

151 
Aºay
* 
£À˘abÀFds
 = 
£À˘‹
->selectableFds;

152 
i
 = 0;

153 
£À˘‹
->
maxFd
 = 0;

154 
size
 = 
	`¨øySize
(
£À˘abÀFds
);

155 
i
 < 
size
) {

156 
Sñe˘abÀFd
* 
£À˘abÀFd
 = 
	`¨øyGë
(
£À˘abÀFds
, 
i
);

157 i‡(
£À˘abÀFd
->
ªmove
) {

159 
	`¨øyRemove
(
£À˘abÀFds
, 
i
);

160 
size
--;

161 i‡(
£À˘abÀFd
->
⁄Remove
 !
NULL
) {

162 
£À˘abÀFd
->
	`⁄Remove
(selectableFd);

164 
	`‰ì
(
£À˘abÀFd
);

166 i‡(
£À˘abÀFd
->
bef‹eSñe˘
 !
NULL
) {

167 
£À˘abÀFd
->
	`bef‹eSñe˘
(selectableFd);

170 
boﬁ
 
öSë
 = 
Ál£
;

171 i‡(
	`maybeAdd
(
£À˘abÀFd
, sñe˘abÀFd->
⁄Ex˚±
, 
ex˚±Fds
)) {

172 
	`ALOGD
("Sñe˘ög fd %d f‹ wrôög...", 
£À˘abÀFd
->
fd
);

173 
öSë
 = 
åue
;

175 i‡(
	`maybeAdd
(
£À˘abÀFd
, sñe˘abÀFd->
⁄RódabÀ
, 
ªadFds
)) {

176 
	`ALOGD
("Sñe˘ög fd %d f‹Ñódög...", 
£À˘abÀFd
->
fd
);

177 
öSë
 = 
åue
;

179 i‡(
	`maybeAdd
(
£À˘abÀFd
, sñe˘abÀFd->
⁄WrôabÀ
, 
wrôeFds
)) {

180 
öSë
 = 
åue
;

183 i‡(
öSë
) {

185 
fd
 = 
£À˘abÀFd
->fd;

186 i‡(
fd
 > 
£À˘‹
->
maxFd
) {

187 
£À˘‹
->
maxFd
 = 
fd
;

192 
i
++;

195 
	}
}

201 
ölöe
 
maybeInvoke
(
Sñe˘abÀFd
* 
£À˘abÀFd
,

202 (*
ˇŒback
)(
Sñe˘abÀFd
*), 
fd_£t
* 
fdSë
) {

203 i‡(
ˇŒback
 !
NULL
 && !
£À˘abÀFd
->
ªmove
 &&

204 
	`FD_ISSET
(
£À˘abÀFd
->
fd
, 
fdSë
)) {

205 
	`ALOGD
("Sñe˘ed fd %d.", 
£À˘abÀFd
->
fd
);

206 
	`ˇŒback
(
£À˘abÀFd
);

208 
	}
}

214 
	$fúeEvíts
(
Sñe˘‹
* 
£À˘‹
) {

215 
Aºay
* 
£À˘abÀFds
 = 
£À˘‹
->selectableFds;

216 
size
 = 
	`¨øySize
(
£À˘abÀFds
);

217 
i
;

218 
i
 = 0; i < 
size
; i++) {

219 
Sñe˘abÀFd
* 
£À˘abÀFd
 = 
	`¨øyGë
(
£À˘abÀFds
, 
i
);

220 
	`maybeInvoke
(
£À˘abÀFd
, sñe˘abÀFd->
⁄Ex˚±
,

221 &
£À˘‹
->
ex˚±Fds
);

222 
	`maybeInvoke
(
£À˘abÀFd
, sñe˘abÀFd->
⁄RódabÀ
,

223 &
£À˘‹
->
ªadFds
);

224 
	`maybeInvoke
(
£À˘abÀFd
, sñe˘abÀFd->
⁄WrôabÀ
,

225 &
£À˘‹
->
wrôeFds
);

227 
	}
}

229 
	$£À˘‹Lo›
(
Sñe˘‹
* 
£À˘‹
) {

231 i‡(
£À˘‹
->
lo›ög
) {

232 
	`LOG_ALWAYS_FATAL
("AlreadyÜooping.");

234 
£À˘‹
->
lo›ög
 = 
åue
;

236 
åue
) {

237 
	`£tInSñe˘
(
£À˘‹
, 
åue
);

239 
	`¥ï¨eF‹Sñe˘
(
£À˘‹
);

241 
	`ALOGD
("Entering select().");

244 
ªsu…
 = 
	`£À˘
(
£À˘‹
->
maxFd
 + 1, &£À˘‹->
ªadFds
,

245 &
£À˘‹
->
wrôeFds
, &£À˘‹->
ex˚±Fds
, 
NULL
);

247 
	`ALOGD
("Exiting select().");

249 
	`£tInSñe˘
(
£À˘‹
, 
Ál£
);

251 i‡(
ªsu…
 == -1) {

253 i‡(
î∫o
 =
EINTR
) {

254 
	`ALOGI
("select() interrupted.");

256 
	`LOG_ALWAYS_FATAL
("select()Érror: %s",

257 
	`°ªº‹
(
î∫o
));

259 } i‡(
ªsu…
 > 0) {

260 
	`fúeEvíts
(
£À˘‹
);

263 
	}
}

	@libs/libcutils/socket_inaddr_any_server.c

18 
	~<cutûs/sockës.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<°ddef.h
>

26 #i‚de‡
HAVE_WINSOCK


27 
	~<sys/sockë.h
>

28 
	~<sys/£À˘.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<√töë/ö.h
>

33 
	#LISTEN_BACKLOG
 4

	)

36 
	$sockë_öaddr_™y_£rvî
(
p‹t
, 
ty≥
)

38 
sockaddr_ö
 
addr
;

39 
size_t
 
Æí
;

40 
s
, 
n
;

42 
	`mem£t
(&
addr
, 0, (addr));

43 
addr
.
sö_Ámûy
 = 
AF_INET
;

44 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

45 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

47 
s
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

48 if(
s
 < 0)  -1;

50 
n
 = 1;

51 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, (n));

53 if(
	`böd
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

54 
	`˛o£
(
s
);

58 i‡(
ty≥
 =
SOCK_STREAM
) {

59 
ªt
;

61 
ªt
 = 
	`li°í
(
s
, 
LISTEN_BACKLOG
);

63 i‡(
ªt
 < 0) {

64 
	`˛o£
(
s
);

69  
s
;

70 
	}
}

	@libs/libcutils/socket_local.h

17 #i‚de‡
__SOCKET_LOCAL_H


18 
	#__SOCKET_LOCAL_H


	)

20 
	#FILESYSTEM_SOCKET_PREFIX
 "/tmp/"

	)

21 
	#ANDROID_RESERVED_SOCKET_PREFIX
 "/dev/sockë/"

	)

36 
sockë_make_sockaddr_un
(c⁄° *
«me
, 
«me•a˚Id
,

37 
sockaddr_un
 *
p_addr
, 
sockÀn_t
 *
Æí
);

	@libs/libcutils/socket_local_client.c

17 
	~<cutûs/sockës.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<uni°d.h
>

22 
	~<î∫o.h
>

23 
	~<°ddef.h
>

25 #ifde‡
HAVE_WINSOCK


27 
	$sockë_loˇl_˛õ¡
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
)

29 
î∫o
 = 
ENOSYS
;

31 
	}
}

35 
	~<sys/sockë.h
>

36 
	~<sys/un.h
>

37 
	~<sys/£À˘.h
>

38 
	~<sys/ty≥s.h
>

40 
	~"sockë_loˇl.h
"

42 
	#LISTEN_BACKLOG
 4

	)

45 
	$sockë_make_sockaddr_un
(c⁄° *
«me
, 
«me•a˚Id
,

46 
sockaddr_un
 *
p_addr
, 
sockÀn_t
 *
Æí
)

48 
	`mem£t
 (
p_addr
, 0,  (*p_addr));

49 
size_t
 
«mñí
;

51 
«me•a˚Id
) {

52 
ANDROID_SOCKET_NAMESPACE_ABSTRACT
:

53 #ifde‡
HAVE_LINUX_LOCAL_SOCKET_NAMESPACE


54 
«mñí
 = 
	`°æí
(
«me
);

57 i‡((
«mñí
 + 1Ë> (
p_addr
->
sun_∑th
)) {

58 
îr‹
;

66 
p_addr
->
sun_∑th
[0] = 0;

67 
	`mem˝y
(
p_addr
->
sun_∑th
 + 1, 
«me
, 
«mñí
);

71 
«mñí
 = 
	`°æí
(
«me
Ë+ såÀn(
FILESYSTEM_SOCKET_PREFIX
);

73 i‡(
«mñí
 > (*
p_addr
)

74 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
) - 1) {

75 
îr‹
;

78 
	`°r˝y
(
p_addr
->
sun_∑th
, 
FILESYSTEM_SOCKET_PREFIX
);

79 
	`°rˇt
(
p_addr
->
sun_∑th
, 
«me
);

83 
ANDROID_SOCKET_NAMESPACE_RESERVED
:

84 
«mñí
 = 
	`°æí
(
«me
Ë+ såÀn(
ANDROID_RESERVED_SOCKET_PREFIX
);

86 i‡(
«mñí
 > (*
p_addr
)

87 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
) - 1) {

88 
îr‹
;

91 
	`°r˝y
(
p_addr
->
sun_∑th
, 
ANDROID_RESERVED_SOCKET_PREFIX
);

92 
	`°rˇt
(
p_addr
->
sun_∑th
, 
«me
);

95 
ANDROID_SOCKET_NAMESPACE_FILESYSTEM
:

96 
«mñí
 = 
	`°æí
(
«me
);

98 i‡(
«mñí
 > (*
p_addr
)

99 - 
	`off£tof
(
sockaddr_un
, 
sun_∑th
) - 1) {

100 
îr‹
;

103 
	`°r˝y
(
p_addr
->
sun_∑th
, 
«me
);

110 
p_addr
->
sun_Ámûy
 = 
AF_LOCAL
;

111 *
Æí
 = 
«mñí
 + 
	`off£tof
(
sockaddr_un
, 
sun_∑th
) + 1;

113 
îr‹
:

115 
	}
}

124 
	$sockë_loˇl_˛õ¡_c⁄√˘
(
fd
, c⁄° *
«me
, 
«me•a˚Id
,

125 
ty≥
)

127 
sockaddr_un
 
addr
;

128 
sockÀn_t
 
Æí
;

129 
size_t
 
«mñí
;

130 
îr
;

132 
îr
 = 
	`sockë_make_sockaddr_un
(
«me
, 
«me•a˚Id
, &
addr
, &
Æí
);

134 i‡(
îr
 < 0) {

135 
îr‹
;

138 if(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë&
addr
, 
Æí
) < 0) {

139 
îr‹
;

142  
fd
;

144 
îr‹
:

146 
	}
}

152 
	$sockë_loˇl_˛õ¡
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
)

154 
s
;

156 
s
 = 
	`sockë
(
AF_LOCAL
, 
ty≥
, 0);

157 if(
s
 < 0)  -1;

159 i‡–0 > 
	`sockë_loˇl_˛õ¡_c⁄√˘
(
s
, 
«me
, 
«me•a˚Id
, 
ty≥
)) {

160 
	`˛o£
(
s
);

164  
s
;

165 
	}
}

	@libs/libcutils/socket_local_server.c

18 
	~<cutûs/sockës.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<°ddef.h
>

26 #ifde‡
HAVE_WINSOCK


28 
	$sockë_loˇl_£rvî
(c⁄° *
«me
, 
«me•a˚Id
, 
ty≥
)

30 
î∫o
 = 
ENOSYS
;

32 
	}
}

36 
	~<sys/sockë.h
>

37 
	~<sys/un.h
>

38 
	~<sys/£À˘.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<√töë/ö.h
>

42 
	~"sockë_loˇl.h
"

44 
	#LISTEN_BACKLOG
 4

	)

53 
	$sockë_loˇl_£rvî_böd
(
s
, c⁄° *
«me
, 
«me•a˚Id
)

55 
sockaddr_un
 
addr
;

56 
sockÀn_t
 
Æí
;

57 
n
;

58 
îr
;

60 
îr
 = 
	`sockë_make_sockaddr_un
(
«me
, 
«me•a˚Id
, &
addr
, &
Æí
);

62 i‡(
îr
 < 0) {

67 #i‚de‡
HAVE_LINUX_LOCAL_SOCKET_NAMESPACE


70 i‡(
«me•a˚Id
 =
ANDROID_SOCKET_NAMESPACE_RESERVED


71 || 
«me•a˚Id
 =
ANDROID_SOCKET_NAMESPACE_FILESYSTEM
) {

74 
	`u∆ök
(
addr
.
sun_∑th
);

77 
n
 = 1;

78 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, (n));

80 if(
	`böd
(
s
, (
sockaddr
 *Ë&
addr
, 
Æí
) < 0) {

84  
s
;

86 
	}
}

95 
	$sockë_loˇl_£rvî
(c⁄° *
«me
, 
«me•a˚
, 
ty≥
)

97 
îr
;

98 
s
;

100 
s
 = 
	`sockë
(
AF_LOCAL
, 
ty≥
, 0);

101 i‡(
s
 < 0)  -1;

103 
îr
 = 
	`sockë_loˇl_£rvî_böd
(
s
, 
«me
, 
«me•a˚
);

105 i‡(
îr
 < 0) {

106 
	`˛o£
(
s
);

110 i‡(
ty≥
 =
SOCK_STREAM
) {

111 
ªt
;

113 
ªt
 = 
	`li°í
(
s
, 
LISTEN_BACKLOG
);

115 i‡(
ªt
 < 0) {

116 
	`˛o£
(
s
);

121  
s
;

122 
	}
}

	@libs/libcutils/socket_loopback_client.c

18 
	~<cutûs/sockës.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<°ddef.h
>

26 #i‚de‡
HAVE_WINSOCK


27 
	~<sys/sockë.h
>

28 
	~<sys/£À˘.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<√töë/ö.h
>

37 
	$sockë_lo›back_˛õ¡
(
p‹t
, 
ty≥
)

39 
sockaddr_ö
 
addr
;

40 
sockÀn_t
 
Æí
;

41 
s
;

43 
	`mem£t
(&
addr
, 0, (addr));

44 
addr
.
sö_Ámûy
 = 
AF_INET
;

45 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

46 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

48 
s
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

49 if(
s
 < 0)  -1;

51 if(
	`c⁄√˘
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

52 
	`˛o£
(
s
);

56  
s
;

58 
	}
}

	@libs/libcutils/socket_loopback_server.c

18 
	~<cutûs/sockës.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<°ddef.h
>

26 
	#LISTEN_BACKLOG
 4

	)

28 #i‚de‡
HAVE_WINSOCK


29 
	~<sys/sockë.h
>

30 
	~<sys/£À˘.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<√töë/ö.h
>

36 
	$sockë_lo›back_£rvî
(
p‹t
, 
ty≥
)

38 
sockaddr_ö
 
addr
;

39 
size_t
 
Æí
;

40 
s
, 
n
;

42 
	`mem£t
(&
addr
, 0, (addr));

43 
addr
.
sö_Ámûy
 = 
AF_INET
;

44 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

45 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

47 
s
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

48 if(
s
 < 0)  -1;

50 
n
 = 1;

51 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
n
, (n));

53 if(
	`böd
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

54 
	`˛o£
(
s
);

58 i‡(
ty≥
 =
SOCK_STREAM
) {

59 
ªt
;

61 
ªt
 = 
	`li°í
(
s
, 
LISTEN_BACKLOG
);

63 i‡(
ªt
 < 0) {

64 
	`˛o£
(
s
);

69  
s
;

70 
	}
}

	@libs/libcutils/socket_network_client.c

18 
	~<cutûs/sockës.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<uni°d.h
>

23 
	~<î∫o.h
>

24 
	~<°ddef.h
>

26 #i‚de‡
HAVE_WINSOCK


27 
	~<sys/sockë.h
>

28 
	~<sys/£À˘.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<√töë/ö.h
>

31 
	~<√tdb.h
>

39 
	$sockë_√tw‹k_˛õ¡
(c⁄° *
ho°
, 
p‹t
, 
ty≥
)

41 
ho°ít
 *
hp
;

42 
sockaddr_ö
 
addr
;

43 
sockÀn_t
 
Æí
;

44 
s
;

46 
hp
 = 
	`gëho°by«me
(
ho°
);

47 if(
hp
 == 0)  -1;

49 
	`mem£t
(&
addr
, 0, (addr));

50 
addr
.
sö_Ámûy
 = 
hp
->
h_addπy≥
;

51 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

52 
	`mem˝y
(&
addr
.
sö_addr
, 
hp
->
h_addr
, hp->
h_Àngth
);

54 
s
 = 
	`sockë
(
hp
->
h_addπy≥
, 
ty≥
, 0);

55 if(
s
 < 0)  -1;

57 if(
	`c⁄√˘
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

58 
	`˛o£
(
s
);

62  
s
;

64 
	}
}

	@libs/libcutils/sockets.c

17 
	~<cutûs/log.h
>

18 
	~<cutûs/sockës.h
>

20 #ifde‡
HAVE_ANDROID_OS


22 
	~<¥iv©e/™droid_fûesy°em_c⁄fig.h
>

25 
boﬁ
 
	$sockë_≥î_is_åu°ed
(
fd
)

27 #ifde‡
HAVE_ANDROID_OS


28 
u¸ed
 
¸
;

29 
sockÀn_t
 
Àn
 = (
¸
);

30 
n
 = 
	`gësock›t
(
fd
, 
SOL_SOCKET
, 
SO_PEERCRED
, &
¸
, &
Àn
);

32 i‡(
n
 != 0) {

33 
	`ALOGE
("couldÇŸ gë sockë cªdítüls: %s\n", 
	`°ªº‹
(
î∫o
));

34  
Ál£
;

37 i‡((
¸
.
uid
 !
AID_ROOT
Ë&& (¸.uid !
AID_SHELL
)) {

38 
	`ALOGE
("u¡ru°ed u£rid o¿ŸhîÉnd o‡sockë: u£rid %d\n", 
¸
.
uid
);

39  
Ál£
;

43  
åue
;

44 
	}
}

	@libs/libcutils/str_parms.c

17 
	#LOG_TAG
 "°r_∑øms"

	)

20 
	#_GNU_SOURCE
 1

	)

21 
	~<î∫o.h
>

22 
	~<°döt.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

27 
	~<cutûs/hashm≠.h
>

28 
	~<cutûs/log.h
>

29 
	~<cutûs/mem‹y.h
>

31 
	~<cutûs/°r_∑rms.h
>

33 
	s°r_∑rms
 {

34 
Hashm≠
 *
	mm≠
;

38 
boﬁ
 
	$°r_eq
(*
key_a
, *
key_b
)

40  !
	`°rcmp
((c⁄° *)
key_a
, (c⁄° *)
key_b
);

41 
	}
}

44 
	$°r_hash_‚
(*
°r
)

46 
uöt32_t
 
hash
 = 5381;

47 *
p
;

49 
p
 = 
°r
;Ö && *p;Ö++)

50 
hash
 = ((hash << 5Ë+ hashË+ *
p
;

51  ()
hash
;

52 
	}
}

54 
°r_∑rms
 *
	$°r_∑rms_¸óã
()

56 
°r_∑rms
 *str_parms;

58 
°r_∑rms
 = 
	`ˇŒoc
(1, (str_parms));

59 i‡(!
°r_∑rms
)

60  
NULL
;

62 
°r_∑rms
->
m≠
 = 
	`hashm≠Cª©e
(5, 
°r_hash_‚
, 
°r_eq
);

63 i‡(!
°r_∑rms
->
m≠
)

64 
îr
;

66  
°r_∑rms
;

68 
îr
:

69 
	`‰ì
(
°r_∑rms
);

70  
NULL
;

71 
	}
}

73 
	sªmove_˘xt
 {

74 
°r_∑rms
 *
	m°r_∑rms
;

75 c⁄° *
	mkey
;

78 
boﬁ
 
	$ªmove_∑ú
(*
key
, *
vÆue
, *
c⁄ãxt
)

80 
ªmove_˘xt
 *
˘xt
 = 
c⁄ãxt
;

81 
boﬁ
 
should_c⁄töue
;

91 i‡(!
˘xt
->
key
) {

92 
should_c⁄töue
 = 
åue
;

93 
do_ªmove
;

94 } i‡(!
	`°rcmp
(
˘xt
->
key
, key)) {

95 
should_c⁄töue
 = 
Ál£
;

96 
do_ªmove
;

99  
åue
;

101 
do_ªmove
:

102 
	`hashm≠Remove
(
˘xt
->
°r_∑rms
->
m≠
, 
key
);

103 
	`‰ì
(
key
);

104 
	`‰ì
(
vÆue
);

105  
should_c⁄töue
;

106 
	}
}

108 
	$°r_∑rms_dñ
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
)

110 
ªmove_˘xt
 
˘xt
 = {

111 .
°r_∑rms
 = str_parms,

112 .
key
 = key,

114 
	`hashm≠F‹Each
(
°r_∑rms
->
m≠
, 
ªmove_∑ú
, &
˘xt
);

115 
	}
}

117 
	$°r_∑rms_de°roy
(
°r_∑rms
 *str_parms)

119 
ªmove_˘xt
 
˘xt
 = {

120 .
°r_∑rms
 = str_parms,

123 
	`hashm≠F‹Each
(
°r_∑rms
->
m≠
, 
ªmove_∑ú
, &
˘xt
);

124 
	`hashm≠Fªe
(
°r_∑rms
->
m≠
);

125 
	`‰ì
(
°r_∑rms
);

126 
	}
}

128 
°r_∑rms
 *
	$°r_∑rms_¸óã_°r
(c⁄° *
_°rög
)

130 
°r_∑rms
 *str_parms;

131 *
°r
;

132 *
kv∑ú
;

133 *
tmp°r
;

134 
ôems
 = 0;

136 
°r_∑rms
 = 
	`°r_∑rms_¸óã
();

137 i‡(!
°r_∑rms
)

138 
îr_¸óã_°r_∑rms
;

140 
°r
 = 
	`°rdup
(
_°rög
);

141 i‡(!
°r
)

142 
îr_°rdup
;

144 
	`ALOGV
("%s: sour˚ såög ='%s'\n", 
__func__
, 
_°rög
);

146 
kv∑ú
 = 
	`°πok_r
(
°r
, ";", &
tmp°r
);

147 
kv∑ú
 && *kvpair) {

148 *
eq
 = 
	`°rchr
(
kv∑ú
, '=');

149 *
vÆue
;

150 *
key
;

151 *
ﬁd_vÆ
;

153 i‡(
eq
 =
kv∑ú
)

154 
√xt_∑ú
;

156 i‡(
eq
) {

157 
key
 = 
	`°∫dup
(
kv∑ú
, 
eq
 - kvpair);

158 i‡(*(++
eq
))

159 
vÆue
 = 
	`°rdup
(
eq
);

161 
vÆue
 = 
	`°rdup
("");

163 
key
 = 
	`°rdup
(
kv∑ú
);

164 
vÆue
 = 
	`°rdup
("");

168 
ﬁd_vÆ
 = 
	`hashm≠Put
(
°r_∑rms
->
m≠
, 
key
, 
vÆue
);

169 i‡(
ﬁd_vÆ
) {

170 
	`‰ì
(
ﬁd_vÆ
);

171 
	`‰ì
(
key
);

174 
ôems
++;

175 
√xt_∑ú
:

176 
kv∑ú
 = 
	`°πok_r
(
NULL
, ";", &
tmp°r
);

179 i‡(!
ôems
)

180 
	`ALOGV
("%s:Çÿôem†found i¿°rög\n", 
__func__
);

182 
	`‰ì
(
°r
);

184  
°r_∑rms
;

186 
îr_°rdup
:

187 
	`°r_∑rms_de°roy
(
°r_∑rms
);

188 
îr_¸óã_°r_∑rms
:

189  
NULL
;

190 
	}
}

192 
	$°r_∑rms_add_°r
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

193 c⁄° *
vÆue
)

195 *
ﬁd_vÆ
;

196 *
tmp_key
;

197 *
tmp_vÆ
;

199 
tmp_key
 = 
	`°rdup
(
key
);

200 
tmp_vÆ
 = 
	`°rdup
(
vÆue
);

201 
ﬁd_vÆ
 = 
	`hashm≠Put
(
°r_∑rms
->
m≠
, 
tmp_key
, 
tmp_vÆ
);

203 i‡(
ﬁd_vÆ
) {

204 
	`‰ì
(
ﬁd_vÆ
);

205 
	`‰ì
(
tmp_key
);

206 } i‡(
î∫o
 =
ENOMEM
) {

207 
	`‰ì
(
tmp_key
);

208 
	`‰ì
(
tmp_vÆ
);

209  -
ENOMEM
;

212 
	}
}

214 
	$°r_∑rms_add_öt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
, 
vÆue
)

216 
vÆ_°r
[12];

217 
ªt
;

219 
ªt
 = 
	`¢¥ötf
(
vÆ_°r
, (vÆ_°r), "%d", 
vÆue
);

220 i‡(
ªt
 < 0)

221  -
EINVAL
;

223 
ªt
 = 
	`°r_∑rms_add_°r
(
°r_∑rms
, 
key
, 
vÆ_°r
);

224  
ªt
;

225 
	}
}

227 
	$°r_∑rms_add_Êﬂt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

228 
vÆue
)

230 
vÆ_°r
[23];

231 
ªt
;

233 
ªt
 = 
	`¢¥ötf
(
vÆ_°r
, (vÆ_°r), "%.10f", 
vÆue
);

234 i‡(
ªt
 < 0)

235  -
EINVAL
;

237 
ªt
 = 
	`°r_∑rms_add_°r
(
°r_∑rms
, 
key
, 
vÆ_°r
);

238  
ªt
;

239 
	}
}

241 
	$°r_∑rms_gë_°r
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
, *
vÆ
,

242 
Àn
)

244 *
vÆue
;

246 
vÆue
 = 
	`hashm≠Gë
(
°r_∑rms
->
m≠
, (*)
key
);

247 i‡(
vÆue
)

248  
	`°æ˝y
(
vÆ
, 
vÆue
, 
Àn
);

250  -
ENOENT
;

251 
	}
}

253 
	$°r_∑rms_gë_öt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
, *
vÆ
)

255 *
vÆue
;

256 *
íd
;

258 
vÆue
 = 
	`hashm≠Gë
(
°r_∑rms
->
m≠
, (*)
key
);

259 i‡(!
vÆue
)

260  -
ENOENT
;

262 *
vÆ
 = ()
	`°πﬁ
(
vÆue
, &
íd
, 0);

263 i‡(*
vÆue
 !'\0' && *
íd
 == '\0')

266  -
EINVAL
;

267 
	}
}

269 
	$°r_∑rms_gë_Êﬂt
(
°r_∑rms
 *°r_∑rms, c⁄° *
key
,

270 *
vÆ
)

272 
out
;

273 *
vÆue
;

274 *
íd
;

276 
vÆue
 = 
	`hashm≠Gë
(
°r_∑rms
->
m≠
, (*)
key
);

277 i‡(!
vÆue
)

278  -
ENOENT
;

280 
out
 = 
	`°πof
(
vÆue
, &
íd
);

281 i‡(*
vÆue
 !'\0' && *
íd
 == '\0')

284  -
EINVAL
;

285 
	}
}

287 
boﬁ
 
	$comböe_°rögs
(*
key
, *
vÆue
, *
c⁄ãxt
)

289 **
ﬁd_°r
 = 
c⁄ãxt
;

290 *
√w_°r
;

291 
ªt
;

293 
ªt
 = 
	`a•rötf
(&
√w_°r
, "%s%s%s=%s",

294 *
ﬁd_°r
 ? *old_str : "",

295 *
ﬁd_°r
 ? ";" : "",

296 (*)
key
,

297 (*)
vÆue
);

298 i‡(*
ﬁd_°r
)

299 
	`‰ì
(*
ﬁd_°r
);

301 i‡(
ªt
 >= 0) {

302 *
ﬁd_°r
 = 
√w_°r
;

303  
åue
;

306 *
ﬁd_°r
 = 
NULL
;

307  
Ál£
;

308 
	}
}

310 *
	$°r_∑rms_to_°r
(
°r_∑rms
 *str_parms)

312 *
°r
 = 
NULL
;

314 i‡(
	`hashm≠Size
(
°r_∑rms
->
m≠
) > 0)

315 
	`hashm≠F‹Each
(
°r_∑rms
->
m≠
, 
comböe_°rögs
, &
°r
);

317 
°r
 = 
	`°rdup
("");

318  
°r
;

319 
	}
}

321 
boﬁ
 
	$dump_íåy
(*
key
, *
vÆue
, *
c⁄ãxt
)

323 
	`ALOGI
("key: '%s' vÆue: '%s'\n", (*)
key
, (*)
vÆue
);

324  
åue
;

325 
	}
}

327 
	$°r_∑rms_dump
(
°r_∑rms
 *str_parms)

329 
	`hashm≠F‹Each
(
°r_∑rms
->
m≠
, 
dump_íåy
, str_parms);

330 
	}
}

332 #ifde‡
TEST_STR_PARMS


333 
	$ã°_°r_∑rms_°r
(c⁄° *
°r
)

335 
°r_∑rms
 *str_parms;

336 *
out_°r
;

337 
ªt
;

339 
°r_∑rms
 = 
	`°r_∑rms_¸óã_°r
(
°r
);

340 
	`°r_∑rms_add_°r
(
°r_∑rms
, "dude", "woah");

341 
	`°r_∑rms_add_°r
(
°r_∑rms
, "dude", "woah");

342 
	`°r_∑rms_dñ
(
°r_∑rms
, "dude");

343 
	`°r_∑rms_dump
(
°r_∑rms
);

344 
out_°r
 = 
	`°r_∑rms_to_°r
(
°r_∑rms
);

345 
	`°r_∑rms_de°roy
(
°r_∑rms
);

346 
	`ALOGI
("%s: '%s' såögifõd i†'%s'", 
__func__
, 
°r
, 
out_°r
);

347 
	`‰ì
(
out_°r
);

348 
	}
}

350 
	$maö
()

352 
°r_∑rms
 *str_parms;

354 
	`ã°_°r_∑rms_°r
("");

355 
	`ã°_°r_∑rms_°r
(";");

356 
	`ã°_°r_∑rms_°r
("=");

357 
	`ã°_°r_∑rms_°r
("=;");

358 
	`ã°_°r_∑rms_°r
("=bar");

359 
	`ã°_°r_∑rms_°r
("=bar;");

360 
	`ã°_°r_∑rms_°r
("foo=");

361 
	`ã°_°r_∑rms_°r
("foo=;");

362 
	`ã°_°r_∑rms_°r
("foo=bar");

363 
	`ã°_°r_∑rms_°r
("foo=bar;");

364 
	`ã°_°r_∑rms_°r
("foo=bar;baz");

365 
	`ã°_°r_∑rms_°r
("foo=bar;baz=");

366 
	`ã°_°r_∑rms_°r
("foo=bar;baz=bat");

367 
	`ã°_°r_∑rms_°r
("foo=bar;baz=bat;");

368 
	`ã°_°r_∑rms_°r
("foo=bar;baz=bat;foo=bar");

371 
	}
}

	@libs/libcutils/strdup16to8.c

18 
	~<limôs.h
>

20 
	~<cutûs/j°rög.h
>

21 
	~<as£π.h
>

22 
	~<°dlib.h
>

29 
size_t
 
	$°∫Àn16to8
(c⁄° 
ch¨16_t
* 
utf16Så
, 
size_t
 
Àn
)

31 
size_t
 
utf8Lí
 = 0;

57 i‡(
Àn
 < (
SIZE_MAX
-1)/3) {

58 
Àn
--) {

59 
uic
 = *
utf16Så
++;

61 i‡(
uic
 > 0x07ff)

62 
utf8Lí
 += 3;

63 i‡(
uic
 > 0x7f || uic == 0)

64 
utf8Lí
 += 2;

66 
utf8Lí
++;

68  
utf8Lí
;

72 
Àn
--) {

73 
uic
 = *
utf16Så
++;

74 
size_t
 
utf8Cur
 = 
utf8Lí
;

76 i‡(
uic
 > 0x07ff)

77 
utf8Lí
 += 3;

78 i‡(
uic
 > 0x7f || uic == 0)

79 
utf8Lí
 += 2;

81 
utf8Lí
++;

83 i‡(
utf8Lí
 < 
utf8Cur
)

84  
SIZE_MAX
-1;

88 i‡(
utf8Lí
 =
SIZE_MAX
)

89 
utf8Lí
 = 
SIZE_MAX
-1;

91  
utf8Lí
;

92 
	}
}

107 * 
	$°∫˝y16to8
(* 
utf8Så
, c⁄° 
ch¨16_t
* 
utf16Så
, 
size_t
 
Àn
)

109 * 
utf8cur
 = 
utf8Så
;

115 
Àn
--) {

116 
uic
 = *
utf16Så
++;

118 i‡(
uic
 > 0x07ff) {

119 *
utf8cur
++ = (
uic
 >> 12) | 0xe0;

120 *
utf8cur
++ = ((
uic
 >> 6) & 0x3f) | 0x80;

121 *
utf8cur
++ = (
uic
 & 0x3f) | 0x80;

122 } i‡(
uic
 > 0x7f || uic == 0) {

123 *
utf8cur
++ = (
uic
 >> 6) | 0xc0;

124 *
utf8cur
++ = (
uic
 & 0x3f) | 0x80;

126 *
utf8cur
++ = 
uic
;

128 i‡(
uic
 == 0) {

134 *
utf8cur
 = '\0';

136  
utf8Så
;

137 
	}
}

143 * 
	$°∫dup16to8
 (c⁄° 
ch¨16_t
* 
s
, 
size_t
 
n
)

145 * 
ªt
;

146 
size_t
 
Àn
;

148 i‡(
s
 =
NULL
) {

149  
NULL
;

152 
Àn
 = 
	`°∫Àn16to8
(
s
, 
n
);

158 i‡(
Àn
 >
SIZE_MAX
-1)

159  
NULL
;

161 
ªt
 = 
	`mÆloc
(
Àn
 + 1);

162 i‡(
ªt
 =
NULL
)

163  
NULL
;

165 
	`°∫˝y16to8
 (
ªt
, 
s
, 
n
);

167  
ªt
;

168 
	}
}

	@libs/libcutils/strdup8to16.c

18 
	~<cutûs/j°rög.h
>

19 
	~<as£π.h
>

20 
	~<°dlib.h
>

21 
	~<limôs.h
>

27 
	#UTF16_REPLACEMENT_CHAR
 0xfffd

	)

30 
	#UTF8_SEQ_LENGTH
(
ch
Ë(((0xe5000000 >> ((ch >> 3Ë& 0x1e)Ë& 3Ë+ 1)

	)

33 
	#UTF8_SHIFT_AND_MASK
(
unicode
, 
byã
) \

34 (
unicode
)<<=6; (unicodeË|(0x3‡& (
byã
));

	)

36 
	#UNICODE_UPPER_LIMIT
 0x10fffd

	)

43 
ch¨16_t
 * 
	$°rdup8to16
 (c⁄° * 
s
, 
size_t
 *
out_Àn
)

45 
ch¨16_t
 *
ªt
;

46 
size_t
 
Àn
;

48 i‡(
s
 =
NULL
)  NULL;

50 
Àn
 = 
	`°æí8to16
(
s
);

53 i‡(
Àn
 && 
SIZE_MAX
/À¿< (
ch¨16_t
))

54  
NULL
;

57 
ªt
 = (
ch¨16_t
 *Ë
	`mÆloc
 ((ch¨16_tË* 
Àn
);

59  
	`°r˝y8to16
 (
ªt
, 
s
, 
out_Àn
);

60 
	}
}

68 
size_t
 
	$°æí8to16
 (c⁄° * 
utf8Så
)

70 
size_t
 
Àn
 = 0;

71 
ic
;

72 
ex≥˘ed
 = 0;

74 (
ic
 = *
utf8Så
++) != '\0') {

78 i‡((
ic
 & 0xc0) == 0x80) {

83 
ex≥˘ed
--;

84 i‡(
ex≥˘ed
 < 0) {

85 
Àn
++;

88 
Àn
++;

89 
ex≥˘ed
 = 
	`UTF8_SEQ_LENGTH
(
ic
) - 1;

92 i‡(
ex≥˘ed
 == 3) {

93 
Àn
++;

98  
Àn
;

99 
	}
}

112 
ölöe
 
uöt32_t
 
	$gëUtf32FromUtf8
(c⁄° ** 
pUtf8På
)

114 
uöt32_t
 
ªt
;

115 
£q_Àn
;

116 
i
;

119 c⁄° 
ÀadîMask
[4] = {0xff, 0x1f, 0x0f, 0x07};

122 i‡(((**
pUtf8På
) & 0xc0) == 0x80) {

123 (*
pUtf8På
)++;

124  
UTF16_REPLACEMENT_CHAR
;

128 
£q_Àn
 = 
	`UTF8_SEQ_LENGTH
(**
pUtf8På
);

130 
ªt
 = (**
pUtf8På
Ë& 
ÀadîMask
 [
£q_Àn
 - 1];

132 i‡(**
pUtf8På
 ='\0'Ë 
ªt
;

134 (*
pUtf8På
)++;

135 
i
 = 1; i < 
£q_Àn
 ; i++, (*
pUtf8På
)++) {

136 i‡((**
pUtf8På
Ë='\0'Ë 
UTF16_REPLACEMENT_CHAR
;

137 i‡(((**
pUtf8På
Ë& 0xc0Ë!0x80Ë 
UTF16_REPLACEMENT_CHAR
;

139 
	`UTF8_SHIFT_AND_MASK
(
ªt
, **
pUtf8På
);

142  
ªt
;

143 
	}
}

151 
ch¨16_t
 * 
	$°r˝y8to16
 (
ch¨16_t
 *
utf16Så
, c⁄° *
utf8Så
,

152 
size_t
 *
out_Àn
)

154 
ch¨16_t
 *
de°
 = 
utf16Så
;

156 *
utf8Så
 != '\0') {

157 
uöt32_t
 
ªt
;

159 
ªt
 = 
	`gëUtf32FromUtf8
(&
utf8Så
);

161 i‡(
ªt
 <= 0xffff) {

162 *
de°
++ = (
ch¨16_t
Ë
ªt
;

163 } i‡(
ªt
 <
UNICODE_UPPER_LIMIT
) {

167 *
de°
++ = 0xd800 | ((
ªt
 - 0x10000) >> 10);

168 *
de°
++ = 0xdc00 | ((
ªt
 - 0x10000) & 0x3ff);

170 *
de°
++ = 
UTF16_REPLACEMENT_CHAR
;

174 *
out_Àn
 = 
de°
 - 
utf16Så
;

176  
utf16Så
;

177 
	}
}

185 
ch¨16_t
 * 
	$°r˝yÀn8to16
 (
ch¨16_t
 *
utf16Så
, c⁄° *
utf8Så
,

186 
Àngth
, 
size_t
 *
out_Àn
)

190 
ch¨16_t
 *
de°
 = 
utf16Så
;

192 c⁄° *
íd
 = 
utf8Så
 + 
Àngth
;

193 
utf8Så
 < 
íd
) {

194 
uöt32_t
 
ªt
;

196 
ªt
 = 
	`gëUtf32FromUtf8
(&
utf8Så
);

198 i‡(
ªt
 <= 0xffff) {

199 *
de°
++ = (
ch¨16_t
Ë
ªt
;

200 } i‡(
ªt
 <
UNICODE_UPPER_LIMIT
) {

204 *
de°
++ = 0xd800 | ((
ªt
 - 0x10000) >> 10);

205 *
de°
++ = 0xdc00 | ((
ªt
 - 0x10000) & 0x3ff);

207 *
de°
++ = 
UTF16_REPLACEMENT_CHAR
;

211 *
out_Àn
 = 
de°
 - 
utf16Så
;

213  
utf16Så
;

214 
	}
}

	@libs/libcutils/threads.c

17 
	~<cutûs/thªads.h
>

19 #ifde‡
HAVE_PTHREADS


20 * 
	$thªad_°‹e_gë
–
thªad_°‹e_t
* 
°‹e
 )

22 c⁄° 
±hªad_key_t
 
k
 = 
°‹e
->
és
;

24 i‡(!
°‹e
->
has_és
)

25  
NULL
;

27  
	`±hªad_gë•ecific
–
°‹e
->
és
 );

28 
	}
}

30 
	$thªad_°‹e_£t
–
thªad_°‹e_t
* 
°‹e
,

31 * 
vÆue
,

32 
thªad_°‹e_de°ru˘_t
 
de°roy
)

34 
	`±hªad_muãx_lock
–&
°‹e
->
lock
 );

35 i‡(!
°‹e
->
has_és
) {

36 i‡(
	`±hªad_key_¸óã
–&
°‹e
->
és
, 
de°roy
) != 0) {

37 
	`±hªad_muãx_u∆ock
(&
°‹e
->
lock
);

40 
°‹e
->
has_és
 = 1;

42 
	`±hªad_muãx_u∆ock
–&
°‹e
->
lock
 );

44 
	`±hªad_£t•ecific
–
°‹e
->
és
, 
vÆue
 );

45 
	}
}

49 #ifde‡
HAVE_WIN32_THREADS


50 * 
	$thªad_°‹e_gë
–
thªad_°‹e_t
* 
°‹e
 )

52 i‡(!
°‹e
->
has_és
)

53  
NULL
;

55  (*Ë
	`TlsGëVÆue
–
°‹e
->
és
 );

56 
	}
}

58 
	$thªad_°‹e_£t
–
thªad_°‹e_t
* 
°‹e
,

59 * 
vÆue
,

60 
thªad_°‹e_de°ru˘_t
 
de°roy
 )

63 i‡(!
°‹e
->
lock_öô
) {

64 
°‹e
->
lock_öô
 = -1;

65 
	`InôülizeCrôiˇlSe˘i⁄
–&
°‹e
->
lock
 );

66 
°‹e
->
lock_öô
 = -2;

67 } 
°‹e
->
lock_öô
 != -2) {

68 
	`SÀï
(10);

71 
	`E¡îCrôiˇlSe˘i⁄
–&
°‹e
->
lock
 );

72 i‡(!
°‹e
->
has_és
) {

73 
°‹e
->
és
 = 
	`TlsAŒoc
();

74 i‡(
°‹e
->
és
 =
TLS_OUT_OF_INDEXES
) {

75 
	`LóveCrôiˇlSe˘i⁄
–&
°‹e
->
lock
 );

78 
°‹e
->
has_és
 = 1;

80 
	`LóveCrôiˇlSe˘i⁄
–&
°‹e
->
lock
 );

82 
	`TlsSëVÆue
–
°‹e
->
és
, 
vÆue
 );

83 
	}
}

	@libs/libcutils/tzfile.h

1 #i‚de‡
TZFILE_H


3 
	#TZFILE_H


	)

22 #i‚de‡
löt


23 #i‚de‡
NOID


24 
	gtzfûehid
[] = "@(#)tzfile.h 8.1";

32 #i‚de‡
TZDIR


33 
	#TZDIR
 "/u§/sh¨e/z⁄eöfo"

	)

36 #i‚de‡
TZDEFAULT


37 
	#TZDEFAULT
 "loˇ…ime"

	)

40 #i‚de‡
TZDEFRULES


41 
	#TZDEFRULES
 "posixruÀs"

	)

48 
	#TZ_MAGIC
 "TZif"

	)

50 
	stzhód
 {

51 
	mtzh_magic
[4];

52 
	mtzh_vîsi⁄
[1];

53 
	mtzh_ª£rved
[15];

54 
	mtzh_âisgmt˙t
[4];

55 
	mtzh_âis°d˙t
[4];

56 
	mtzh_À≠˙t
[4];

57 
	mtzh_time˙t
[4];

58 
	mtzh_ty≥˙t
[4];

59 
	mtzh_ch¨˙t
[4];

102 #i‚de‡
TZ_MAX_TIMES


103 
	#TZ_MAX_TIMES
 1200

	)

106 #i‚de‡
TZ_MAX_TYPES


107 #i‚de‡
NOSOLAR


108 
	#TZ_MAX_TYPES
 256

	)

110 #ifde‡
NOSOLAR


115 
	#TZ_MAX_TYPES
 20

	)

119 #i‚de‡
TZ_MAX_CHARS


120 
	#TZ_MAX_CHARS
 50

	)

124 #i‚de‡
TZ_MAX_LEAPS


125 
	#TZ_MAX_LEAPS
 50

	)

128 
	#SECSPERMIN
 60

	)

129 
	#MINSPERHOUR
 60

	)

130 
	#HOURSPERDAY
 24

	)

131 
	#DAYSPERWEEK
 7

	)

132 
	#DAYSPERNYEAR
 365

	)

133 
	#DAYSPERLYEAR
 366

	)

134 
	#SECSPERHOUR
 (
SECSPERMIN
 * 
MINSPERHOUR
)

	)

135 
	#SECSPERDAY
 ((Ë
SECSPERHOUR
 * 
HOURSPERDAY
)

	)

136 
	#MONSPERYEAR
 12

	)

138 
	#TM_SUNDAY
 0

	)

139 
	#TM_MONDAY
 1

	)

140 
	#TM_TUESDAY
 2

	)

141 
	#TM_WEDNESDAY
 3

	)

142 
	#TM_THURSDAY
 4

	)

143 
	#TM_FRIDAY
 5

	)

144 
	#TM_SATURDAY
 6

	)

146 
	#TM_JANUARY
 0

	)

147 
	#TM_FEBRUARY
 1

	)

148 
	#TM_MARCH
 2

	)

149 
	#TM_APRIL
 3

	)

150 
	#TM_MAY
 4

	)

151 
	#TM_JUNE
 5

	)

152 
	#TM_JULY
 6

	)

153 
	#TM_AUGUST
 7

	)

154 
	#TM_SEPTEMBER
 8

	)

155 
	#TM_OCTOBER
 9

	)

156 
	#TM_NOVEMBER
 10

	)

157 
	#TM_DECEMBER
 11

	)

159 
	#TM_YEAR_BASE
 1900

	)

161 
	#EPOCH_YEAR
 1970

	)

162 
	#EPOCH_WDAY
 
TM_THURSDAY


	)

164 
	#i¶óp
(
y
Ë(((yË% 4Ë=0 && (((yË% 100Ë!0 || ((yË% 400Ë=0))

	)

178 
	#i¶óp_sum
(
a
, 
b
Ë
	`i¶óp
(◊Ë% 400 + (bË% 400)

	)

	@libs/libcutils/tzstrftime.c

1 #i‚de‡
löt


2 #i‚de‡
NOID


3 
	gñsõid
[] = "@(#)strftime.c 8.1";

11 
	~<°dio.h
>

12 
	~<time.h
>

13 
	~<tzfûe.h
>

14 
	~<limôs.h
>

15 
	~<cutûs/tztime.h
>

34 #i‚de‡
LIBC_SCCS


35 #i‚de‡
löt


36 c⁄° 
	gsccsid
[] = "@(#)strftime.c 5.4 (Berkeley) 3/14/89";

40 
	~<˘y≥.h
>

42 
	#P
(
x
Ë
	)
x

44 * 
_add
 
P
((const *, *, const *, ));

45 * 
_c⁄v
 
P
((, const *, *, const *));

46 * 
_fmt
 
P
((c⁄° *, c⁄° 
tm
 *, *, const *,

47 *, c⁄° 
°r·ime_loˇÀ
 *
LoˇÀ
));

48 * 
_yc⁄v
 
P
((, , , , *, const *, ));

49 * 
gëf‹m©
 
P
((, *, *, *, *));

51 * 
tz«me
[];

59 #i‚de‡
TYPE_BIT


60 
	#TYPE_BIT
(
ty≥
Ë( (ty≥Ë* 
CHAR_BIT
)

	)

63 #i‚de‡
TYPE_SIGNED


64 
	#TYPE_SIGNED
(
ty≥
Ë((—y≥Ë-1Ë< 0)

	)

67 #i‚de‡
INT_STRLEN_MAXIMUM


74 
	#INT_STRLEN_MAXIMUM
(
ty≥
) \

75 ((
	`TYPE_BIT
(
ty≥
Ë- 
	`TYPE_SIGNED
(type)) * 302 / 1000 + \

76 1 + 
	`TYPE_SIGNED
(
ty≥
))

	)

84 #i‚de‡
YEAR_2000_NAME


85 
	#YEAR_2000_NAME
 "CHECK_STRFTIME_FORMATS_FOR_TWO_DIGIT_YEARS"

	)

88 
	#IN_NONE
 0

	)

89 
	#IN_SOME
 1

	)

90 
	#IN_THIS
 2

	)

91 
	#IN_ALL
 3

	)

93 
	#FORCE_LOWER_CASE
 0x100

	)

95 
size_t


96 
	$°r·ime_tz
(
s
, 
maxsize
, 
f‹m©
, 
t
, 
LoˇÀ
)

97 * c⁄° 
s
;

98 c⁄° 
size_t
 
maxsize
;

99 c⁄° * c⁄° 
f‹m©
;

100 c⁄° 
tm
 * c⁄° 
t
;

101 c⁄° 
°r·ime_loˇÀ
 *
LoˇÀ
;

103 * 
p
;

104 
w¨n
;

106 
w¨n
 = 
IN_NONE
;

107 
p
 = 
	`_fmt
(((
f‹m©
 =
NULL
Ë? "%c" : f‹m©), 
t
, 
s
, s + 
maxsize
, &
w¨n
, 
LoˇÀ
);

109 i‡(
w¨n
 !
IN_NONE
 && 
	`gëív
(
YEAR_2000_NAME
Ë!
NULL
) {

110 (Ë
	`Ârötf
(
°dîr
, "\n");

111 i‡(
f‹m©
 =
NULL
)

112 (Ë
	`Ârötf
(
°dîr
, "NULL strftime format ");

113 (Ë
	`Ârötf
(
°dîr
, "strftime format \"%s\" ",

114 
f‹m©
);

115 (Ë
	`Ârötf
(
°dîr
, "yields onlyÅwo digits of years in ");

116 i‡(
w¨n
 =
IN_SOME
)

117 (Ë
	`Ârötf
(
°dîr
, "someÜocales");

118 i‡(
w¨n
 =
IN_THIS
)

119 (Ë
	`Ârötf
(
°dîr
, "the currentÜocale");

120 (Ë
	`Ârötf
(
°dîr
, "allÜocales");

121 (Ë
	`Ârötf
(
°dîr
, "\n");

124 i‡(
p
 =
s
 + 
maxsize
)

126 *
p
 = '\0';

127  
p
 - 
s
;

128 
	}
}

130 *
	$gëf‹m©
(
modifõr
, *
n‹mÆ
, *
undîsc‹e
,

131 *
dash
, *
zîo
) {

132 
modifõr
) {

134  
undîsc‹e
;

137  
dash
;

140  
zîo
;

143  
n‹mÆ
;

144 
	}
}

147 
	$_fmt
(
f‹m©
, 
t
, 
±
, 
±lim
, 
w¨≈
, 
LoˇÀ
)

148 c⁄° * 
f‹m©
;

149 c⁄° 
tm
 * c⁄° 
t
;

150 * 
±
;

151 c⁄° * c⁄° 
±lim
;

152 * 
w¨≈
;

153 c⁄° 
°r·ime_loˇÀ
 *
LoˇÀ
;

155  ; *
f‹m©
; ++format) {

156 i‡(*
f‹m©
 == '%') {

157 
modifõr
 = 0;

158 
œbñ
:

159 *++
f‹m©
) {

161 --
f‹m©
;

164 
±
 = 
	`_add
((
t
->
tm_wday
 < 0 ||

165 
t
->
tm_wday
 >
DAYSPERWEEK
) ?

166 "?" : 
LoˇÀ
->
wìkday
[
t
->
tm_wday
],

167 
±
, 
±lim
, 
modifõr
);

170 
±
 = 
	`_add
((
t
->
tm_wday
 < 0 ||

171 
t
->
tm_wday
 >
DAYSPERWEEK
) ?

172 "?" : 
LoˇÀ
->
wday
[
t
->
tm_wday
],

173 
±
, 
±lim
, 
modifõr
);

176 i‡(
modifõr
 == '-') {

177 
±
 = 
	`_add
((
t
->
tm_m⁄
 < 0 ||

178 
t
->
tm_m⁄
 >
MONSPERYEAR
) ?

179 "?" : 
LoˇÀ
->
°™dÆ⁄e_m⁄th
[
t
->
tm_m⁄
],

180 
±
, 
±lim
, 
modifõr
);

182 
±
 = 
	`_add
((
t
->
tm_m⁄
 < 0 ||

183 
t
->
tm_m⁄
 >
MONSPERYEAR
) ?

184 "?" : 
LoˇÀ
->
m⁄th
[
t
->
tm_m⁄
],

185 
±
, 
±lim
, 
modifõr
);

190 
±
 = 
	`_add
((
t
->
tm_m⁄
 < 0 ||

191 
t
->
tm_m⁄
 >
MONSPERYEAR
) ?

192 "?" : 
LoˇÀ
->
m⁄
[
t
->
tm_m⁄
],

193 
±
, 
±lim
, 
modifõr
);

203 
±
 = 
	`_yc⁄v
(
t
->
tm_yór
, 
TM_YEAR_BASE
, 1, 0,

204 
±
, 
±lim
, 
modifõr
);

208 
w¨n2
 = 
IN_SOME
;

210 
±
 = 
	`_fmt
(
LoˇÀ
->
c_fmt
, 
t
,Öt, 
±lim
, 
w¨≈
, Locale);

211 i‡(
w¨n2
 =
IN_ALL
)

212 
w¨n2
 = 
IN_THIS
;

213 i‡(
w¨n2
 > *
w¨≈
)

214 *
w¨≈
 = 
w¨n2
;

218 
±
 = 
	`_fmt
("%m/%d/%y", 
t
,Öt, 
±lim
, 
w¨≈
, 
LoˇÀ
);

221 
±
 = 
	`_c⁄v
(
t
->
tm_mday
,

222 
	`gëf‹m©
(
modifõr
, "%02d",

224 
±
, 
±lim
);

237 
œbñ
;

243 
modifõr
 = *
f‹m©
;

244 
œbñ
;

246 
±
 = 
	`_c⁄v
(
t
->
tm_mday
,

247 
	`gëf‹m©
(
modifõr
, "%2d",

249 
±
, 
±lim
);

252 
±
 = 
	`_fmt
("%Y-%m-%d", 
t
,Öt, 
±lim
, 
w¨≈
, 
LoˇÀ
);

255 
±
 = 
	`_c⁄v
(
t
->
tm_hour
,

256 
	`gëf‹m©
(
modifõr
, "%02d",

258 
±
, 
±lim
);

261 
±
 = 
	`_c⁄v
((
t
->
tm_hour
 % 12) ?

262 (
t
->
tm_hour
 % 12) : 12,

263 
	`gëf‹m©
(
modifõr
, "%02d",

265 
±
, 
±lim
);

268 
±
 = 
	`_c⁄v
(
t
->
tm_yday
 + 1,

269 
	`gëf‹m©
(
modifõr
, "%03d", "%3d", "%d", "%03d"),

270 
±
, 
±lim
);

283 
±
 = 
	`_c⁄v
(
t
->
tm_hour
,

284 
	`gëf‹m©
(
modifõr
, "%2d",

286 
±
, 
±lim
);

288 #ifde‡
KITCHEN_SINK


293 
±
 = 
	`_add
("kôchí sök",Öt, 
±lim
, 
modifõr
);

306 
±
 = 
	`_c⁄v
((
t
->
tm_hour
 % 12) ?

307 (
t
->
tm_hour
 % 12) : 12,

308 
	`gëf‹m©
(
modifõr
, "%2d",

310 
±
, 
±lim
);

313 
±
 = 
	`_c⁄v
(
t
->
tm_mö
,

314 
	`gëf‹m©
(
modifõr
, "%02d",

316 
±
, 
±lim
);

319 
±
 = 
	`_c⁄v
(
t
->
tm_m⁄
 + 1,

320 
	`gëf‹m©
(
modifõr
, "%02d",

322 
±
, 
±lim
);

325 
±
 = 
	`_add
("\n",Öt, 
±lim
, 
modifõr
);

328 
±
 = 
	`_add
((
t
->
tm_hour
 >(
HOURSPERDAY
 / 2)) ?

329 
LoˇÀ
->
pm
 :

330 
LoˇÀ
->
am
,

331 
±
, 
±lim
, 
modifõr
);

334 
±
 = 
	`_add
((
t
->
tm_hour
 >(
HOURSPERDAY
 / 2)) ?

335 
LoˇÀ
->
pm
 :

336 
LoˇÀ
->
am
,

337 
±
, 
±lim
, 
FORCE_LOWER_CASE
);

340 
±
 = 
	`_fmt
("%H:%M", 
t
,Öt, 
±lim
, 
w¨≈
, 
LoˇÀ
);

343 
±
 = 
	`_fmt
("%I:%M:%S %p", 
t
,Öt, 
±lim
, 
w¨≈
, 
LoˇÀ
);

346 
±
 = 
	`_c⁄v
(
t
->
tm_£c
,

347 
	`gëf‹m©
(
modifõr
, "%02d",

349 
±
, 
±lim
);

353 
tm
Åm;

354 
buf
[
	`INT_STRLEN_MAXIMUM
(

355 
time_t
) + 1];

356 
time_t
 
mkt
;

358 
tm
 = *
t
;

359 
mkt
 = 
	`mktime
(&
tm
);

360 i‡(
	`TYPE_SIGNED
(
time_t
))

361 (Ë
	`•rötf
(
buf
, "%ld",

362 (Ë
mkt
);

363 (Ë
	`•rötf
(
buf
, "%lu",

364 (Ë
mkt
);

365 
±
 = 
	`_add
(
buf
,Öt, 
±lim
, 
modifõr
);

369 
±
 = 
	`_fmt
("%H:%M:%S", 
t
,Öt, 
±lim
, 
w¨≈
, 
LoˇÀ
);

372 
±
 = 
	`_add
("\t",Öt, 
±lim
, 
modifõr
);

375 
±
 = 
	`_c⁄v
((
t
->
tm_yday
 + 
DAYSPERWEEK
 -

376 
t
->
tm_wday
Ë/ 
DAYSPERWEEK
,

377 
	`gëf‹m©
(
modifõr
, "%02d",

379 
±
, 
±lim
);

388 
±
 = 
	`_c⁄v
((
t
->
tm_wday
 == 0) ?

389 
DAYSPERWEEK
 : 
t
->
tm_wday
, "%d", 
±
, 
±lim
);

413 
yór
;

414 
ba£
;

415 
yday
;

416 
wday
;

417 
w
;

419 
yór
 = 
t
->
tm_yór
;

420 
ba£
 = 
TM_YEAR_BASE
;

421 
yday
 = 
t
->
tm_yday
;

422 
wday
 = 
t
->
tm_wday
;

424 
Àn
;

425 
bŸ
;

426 
t›
;

428 
Àn
 = 
	`i¶óp_sum
(
yór
, 
ba£
) ?

429 
DAYSPERLYEAR
 :

430 
DAYSPERNYEAR
;

435 
bŸ
 = ((
yday
 + 11 - 
wday
) %

436 
DAYSPERWEEK
) - 3;

441 
t›
 = 
bŸ
 -

442 (
Àn
 % 
DAYSPERWEEK
);

443 i‡(
t›
 < -3)

444 
t›
 +
DAYSPERWEEK
;

445 
t›
 +
Àn
;

446 i‡(
yday
 >
t›
) {

447 ++
ba£
;

448 
w
 = 1;

451 i‡(
yday
 >
bŸ
) {

452 
w
 = 1 + ((
yday
 - 
bŸ
) /

453 
DAYSPERWEEK
);

456 --
ba£
;

457 
yday
 +
	`i¶óp_sum
(
yór
, 
ba£
) ?

458 
DAYSPERLYEAR
 :

459 
DAYSPERNYEAR
;

461 #ifde‡
XPG4_1994_04_09


462 i‡((
w
 == 52 &&

463 
t
->
tm_m⁄
 =
TM_JANUARY
) ||

464 (
w
 == 1 &&

465 
t
->
tm_m⁄
 =
TM_DECEMBER
))

466 
w
 = 53;

468 i‡(*
f‹m©
 == 'V')

469 
±
 = 
	`_c⁄v
(
w
,

470 
	`gëf‹m©
(
modifõr
,

475 
±
, 
±lim
);

476 i‡(*
f‹m©
 == 'g') {

477 *
w¨≈
 = 
IN_ALL
;

478 
±
 = 
	`_yc⁄v
(
yór
, 
ba£
, 0, 1,

479 
±
, 
±lim
, 
modifõr
);

480 } 
±
 = 
	`_yc⁄v
(
yór
, 
ba£
, 1, 1,

481 
±
, 
±lim
, 
modifõr
);

490 
±
 = 
	`_fmt
("%e-%b-%Y", 
t
,Öt, 
±lim
, 
w¨≈
, 
LoˇÀ
);

493 
±
 = 
	`_c⁄v
((
t
->
tm_yday
 + 
DAYSPERWEEK
 -

494 (
t
->
tm_wday
 ?

495 (
t
->
tm_wday
 - 1) :

496 (
DAYSPERWEEK
 - 1))) / DAYSPERWEEK,

497 
	`gëf‹m©
(
modifõr
, "%02d",

499 
±
, 
±lim
);

502 
±
 = 
	`_c⁄v
(
t
->
tm_wday
, "%d",Öt, 
±lim
);

505 
±
 = 
	`_fmt
(
LoˇÀ
->
X_fmt
, 
t
,Öt, 
±lim
, 
w¨≈
, Locale);

509 
w¨n2
 = 
IN_SOME
;

511 
±
 = 
	`_fmt
(
LoˇÀ
->
x_fmt
, 
t
,Öt, 
±lim
, &
w¨n2
, Locale);

512 i‡(
w¨n2
 =
IN_ALL
)

513 
w¨n2
 = 
IN_THIS
;

514 i‡(
w¨n2
 > *
w¨≈
)

515 *
w¨≈
 = 
w¨n2
;

519 *
w¨≈
 = 
IN_ALL
;

520 
±
 = 
	`_yc⁄v
(
t
->
tm_yór
, 
TM_YEAR_BASE
, 0, 1,

521 
±
, 
±lim
, 
modifõr
);

524 
±
 = 
	`_yc⁄v
(
t
->
tm_yór
, 
TM_YEAR_BASE
, 1, 1,

525 
±
, 
±lim
, 
modifõr
);

528 #ifde‡
TM_ZONE


529 i‡(
t
->
TM_ZONE
 !
NULL
)

530 
±
 = 
	`_add
(
t
->
TM_ZONE
,Öt, 
±lim
,

531 
modifõr
);

534 i‡(
t
->
tm_isd°
 >= 0)

535 
±
 = 
	`_add
(
tz«me
[
t
->
tm_isd°
 != 0],

536 
±
, 
±lim
, 
modifõr
);

545 
diff
;

546 c⁄° * 
sign
;

548 i‡(
t
->
tm_isd°
 < 0)

550 #ifde‡
TM_GMTOFF


551 
diff
 = 
t
->
TM_GMTOFF
;

572 i‡(
t
->
tm_isd°
 == 0)

573 #ifde‡
USG_COMPAT


574 
diff
 = -
timez⁄e
;

579 #ifde‡
ALTZONE


580 
diff
 = -
Ætz⁄e
;

585 i‡(
diff
 < 0) {

586 
sign
 = "-";

587 
diff
 = -diff;

588 } 
sign
 = "+";

589 
±
 = 
	`_add
(
sign
,Öt, 
±lim
, 
modifõr
);

590 
diff
 /
SECSPERMIN
;

591 
diff
 = (dif‡/ 
MINSPERHOUR
) * 100 +

592 (
diff
 % 
MINSPERHOUR
);

593 
±
 = 
	`_c⁄v
(
diff
,

594 
	`gëf‹m©
(
modifõr
, "%04d",

596 
±
, 
±lim
);

600 
±
 = 
	`_fmt
(
LoˇÀ
->
d©e_fmt
, 
t
,Öt, 
±lim
,

601 
w¨≈
, 
LoˇÀ
);

613 i‡(
±
 =
±lim
)

615 *
±
++ = *
f‹m©
;

617  
±
;

618 
	}
}

621 
	$_c⁄v
(
n
, 
f‹m©
, 
±
, 
±lim
)

622 c⁄° 
n
;

623 c⁄° * c⁄° 
f‹m©
;

624 * c⁄° 
±
;

625 c⁄° * c⁄° 
±lim
;

627 
buf
[
	`INT_STRLEN_MAXIMUM
() + 1];

629 (Ë
	`•rötf
(
buf
, 
f‹m©
, 
n
);

630  
	`_add
(
buf
, 
±
, 
±lim
, 0);

631 
	}
}

634 
	$_add
(
°r
, 
±
, 
±lim
, 
modifõr
)

635 c⁄° * 
°r
;

636 * 
±
;

637 c⁄° * c⁄° 
±lim
;

638 
modifõr
;

640 
c
;

642 
modifõr
) {

643 
FORCE_LOWER_CASE
:

644 
±
 < 
±lim
 && (*± = 
	`tﬁowî
(*
°r
++)) != '\0') {

645 ++
±
;

650 
±
 < 
±lim
 && (*± = 
	`touµî
(*
°r
++)) != '\0') {

651 ++
±
;

656 
±
 < 
±lim
 && (
c
 = *
°r
++) != '\0') {

657 i‡(
	`isuµî
(
c
)) {

658 
c
 = 
	`tﬁowî
(c);

659 } i‡(
	`i¶owî
(
c
)) {

660 
c
 = 
	`touµî
(c);

662 *
±
 = 
c
;

663 ++
±
;

669 
±
 < 
±lim
 && (*± = *
°r
++) != '\0') {

670 ++
±
;

674  
±
;

675 
	}
}

686 
	$_yc⁄v
(
a
, 
b
, 
c⁄vît_t›
, 
c⁄vît_yy
, 
±
, 
±lim
, 
modifõr
)

687 c⁄° 
a
;

688 c⁄° 
b
;

689 c⁄° 
c⁄vît_t›
;

690 c⁄° 
c⁄vît_yy
;

691 * 
±
;

692 c⁄° * c⁄° 
±lim
;

693 
modifõr
;

695 
Àad
;

696 
åaû
;

698 
	#DIVISOR
 100

	)

699 
åaû
 = 
a
 % 
DIVISOR
 + 
b
 % DIVISOR;

700 
Àad
 = 
a
 / 
DIVISOR
 + 
b
 / DIVISOR + 
åaû
 / DIVISOR;

701 
åaû
 %
DIVISOR
;

702 i‡(
åaû
 < 0 && 
Àad
 > 0) {

703 
åaû
 +
DIVISOR
;

704 --
Àad
;

705 } i‡(
Àad
 < 0 && 
åaû
 > 0) {

706 
åaû
 -
DIVISOR
;

707 ++
Àad
;

709 i‡(
c⁄vît_t›
) {

710 i‡(
Àad
 =0 && 
åaû
 < 0)

711 
±
 = 
	`_add
("-0",Öt, 
±lim
, 
modifõr
);

712 
±
 = 
	`_c⁄v
(
Àad
, 
	`gëf‹m©
(
modifõr
, "%02d",

714 
±
, 
±lim
);

716 i‡(
c⁄vît_yy
)

717 
±
 = 
	`_c⁄v
(((
åaû
 < 0) ? -trail :Årail),

718 
	`gëf‹m©
(
modifõr
, "%02d", "%2d", "%d", "%02d"),

719 
±
, 
±lim
);

720  
±
;

721 
	}
}

723 #ifde‡
LOCALE_HOME


724 
lc_time_T
 *

725 
_loc
 
P
(())

727 c⁄° 
	gloˇÀ_home
[] = 
LOCALE_HOME
;

728 c⁄° 
	glc_time
[] = "LC_TIME";

729 * 
	gloˇÀ_buf
;

731 
	gfd
;

732 
	gﬁdsun
;

733 * 
	glbuf
;

734 * 
	g«me
;

735 * 
	gp
;

736 c⁄° ** 
	g≠
;

737 c⁄° * 
	g∂im
;

738 
	gfûíame
[
FILENAME_MAX
];

739 
°©
 
	g°
;

740 
size_t
 
	g«mesize
;

741 
size_t
 
	gbufsize
;

746 i‡(
	gloˇÀbuf
.
	gm⁄
[0])

747  &
	gloˇÀbuf
;

748 
	g«me
 = 
£éoˇÀ
(
LC_TIME
, (*Ë
NULL
);

749 i‡(
	g«me
 =
NULL
 || *
«me
 == '\0')

750 
no_loˇÀ
;

754 
	glbuf
 = 
loˇÀ_buf
;

755 i‡(
	glbuf
 !
NULL
 && 
°rcmp
(
«me
, 
lbuf
) == 0) {

756 
p
 = 
lbuf
;

757 
	g≠
 = (c⁄° **Ë&
loˇÀbuf
;

758 
	g≠
 < (c⁄° **Ë(&
	gloˇÀbuf
 + 1);

759 ++
	g≠
)

760 *
	g≠
 = 
p
 +
°æí
(p) + 1;

761  &
	gloˇÀbuf
;

766 
	g«mesize
 = 
°æí
(
«me
) + 1;

767 i‡( 
	gfûíame
 <

768 (( 
	gloˇÀ_home
Ë+ 
	g«mesize
 + ( 
	glc_time
)))

769 
	gno_loˇÀ
;

770 
	gﬁdsun
 = 0;

771 (Ë
•rötf
(
fûíame
, "%s/%s/%s", 
loˇÀ_home
, 
«me
, 
lc_time
);

772 
	gfd
 = 
›í
(
fûíame
, 
O_RDONLY
);

773 i‡(
	gfd
 < 0) {

777 
	gﬁdsun
 = 1;

778 (Ë
•rötf
(
fûíame
, "%s/%s/%s", 
loˇÀ_home
,

779 
lc_time
, 
«me
);

780 
	gfd
 = 
›í
(
fûíame
, 
O_RDONLY
);

781 i‡(
	gfd
 < 0)

782 
	gno_loˇÀ
;

784 i‡(
f°©
(
fd
, &
°
) != 0)

785 
bad_loˇÀ
;

786 i‡(
	g°
.
	g°_size
 <= 0)

787 
bad_loˇÀ
;

788 
	gbufsize
 = 
«mesize
 + 
°
.
°_size
;

789 
	gloˇÀ_buf
 = 
NULL
;

790 
	glbuf
 = (
lbuf
 =
NULL
Ë? 
mÆloc
(
bufsize
Ë: 
ªÆloc
(lbuf, bufsize);

791 i‡(
	glbuf
 =
NULL
)

792 
bad_loˇÀ
;

793 (Ë
°r˝y
(
lbuf
, 
«me
);

794 
	gp
 = 
lbuf
 + 
«mesize
;

795 
	g∂im
 = 
p
 + 
°
.
°_size
;

796 i‡(
ªad
(
fd
, 
p
, (
size_t
Ë
°
.
°_size
) != st.st_size)

797 
bad_lbuf
;

798 i‡(
˛o£
(
fd
) != 0)

799 
bad_lbuf
;

803 i‡(
	g∂im
[-1] != '\n')

804 
bad_lbuf
;

805 
	g≠
 = (c⁄° **Ë&
loˇÀbuf
;

806 
	g≠
 < (c⁄° **Ë(&
	gloˇÀbuf
 + 1);

807 ++
	g≠
) {

808 i‡(
	gp
 =
∂im
)

809 
bad_lbuf
;

810 *
	g≠
 = 
p
;

811 *
	gp
 != '\n')

812 ++
p
;

813 *
	gp
++ = '\0';

815 i‡(
	gﬁdsun
) {

824 
	gloˇÀbuf
.
	gd©e_fmt
 = 
loˇÀbuf
.
c_fmt
;

829 
	gloˇÀ_buf
 = 
lbuf
;

831  &
	gloˇÀbuf
;

833 
	gbad_lbuf
:

834 
‰ì
(
lbuf
);

835 
	gbad_loˇÀ
:

836 (Ë
˛o£
(
fd
);

837 
	gno_loˇÀ
:

838 
loˇÀbuf
 = 
C_time_loˇÀ
;

839 
	gloˇÀ_buf
 = 
NULL
;

840  &
	gloˇÀbuf
;

	@libs/libcutils/tztime.c

6 
	~<°dio.h
>

8 #i‚de‡
löt


9 #i‚de‡
NOID


10 
	gñsõid
[] = "@(#)localtime.c 8.3";

21 
	~"¥iv©e.h
"

22 
	~"tzfûe.h
"

23 
	~"f˙é.h
"

24 
	~"Êﬂt.h
"

26 #i‚de‡
TZ_ABBR_MAX_LEN


27 
	#TZ_ABBR_MAX_LEN
 16

	)

30 #i‚de‡
TZ_ABBR_CHAR_SET


31 
	#TZ_ABBR_CHAR_SET
 \

32 "abcdefghijklmn›qr°uvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 :+-._"

	)

35 #i‚de‡
TZ_ABBR_ERR_CHAR


36 
	#TZ_ABBR_ERR_CHAR
 '_'

	)

39 
	#INDEXFILE
 "/sy°em/u§/sh¨e/z⁄eöfo/z⁄eöfo.idx"

	)

40 
	#DATAFILE
 "/sy°em/u§/sh¨e/z⁄eöfo/z⁄eöfo.d©"

	)

41 
	#NAMELEN
 40

	)

42 
	#INTLEN
 4

	)

43 
	#READLEN
 (
NAMELEN
 + 3 * 
INTLEN
)

	)

49 #ifde‡
O_BINARY


50 
	#OPEN_MODE
 (
O_RDONLY
 | 
O_BINARY
)

	)

52 #i‚de‡
O_BINARY


53 
	#OPEN_MODE
 
O_RDONLY


	)

61 c⁄° 
time_t
 
	gTIME_T_MAX
 =

62 
TYPE_INTEGRAL
(
time_t
) ?

63 –
TYPE_SIGNED
(
time_t
) ?

64 ~((
time_t
)1 << (
TYPE_BIT
(time_t)-1))

66 ~(
time_t
)0

69 –(
time_t
Ë> (Ë? (time_t)
DBL_MAX
 : (time_t)
FLT_MAX
 );

71 c⁄° 
time_t
 
	gTIME_T_MIN
 =

72 
TYPE_INTEGRAL
(
time_t
) ?

73 –
TYPE_SIGNED
(
time_t
) ?

74 ((
time_t
)1 << (
TYPE_BIT
(time_t)-1))

79 –(
time_t
Ë> (Ë? (time_t)
DBL_MIN
 : (time_t)
FLT_MIN
 );

81 #i‚de‡
WILDABBR


101 
	#WILDABBR
 " "

	)

104 
	gwûdabbr
[] = 
WILDABBR
;

106 c⁄° 
	ggmt
[] = "GMT";

115 #i‚de‡
TZDEFRULESTRING


116 
	#TZDEFRULESTRING
 ",M4.1.0,M10.5.0"

	)

119 
	sâöfo
 {

120 
	mâ_gmtoff
;

121 
	mâ_isd°
;

122 
	mâ_abbröd
;

123 
	mâ_âis°d
;

124 
	mâ_âisgmt
;

127 
	slsöfo
 {

128 
time_t
 
	mls_å™s
;

129 
	mls_c‹r
;

132 
	#BIGGEST
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

134 #ifde‡
TZNAME_MAX


135 
	#MY_TZNAME_MAX
 
TZNAME_MAX


	)

137 #i‚de‡
TZNAME_MAX


138 
	#MY_TZNAME_MAX
 255

	)

141 
	s°©e
 {

142 
	mÀ≠˙t
;

143 
	mtime˙t
;

144 
	mty≥˙t
;

145 
	mch¨˙t
;

146 
	mgoback
;

147 
	mgﬂhód
;

148 
time_t
 
	m©s
[
TZ_MAX_TIMES
];

149 
	mty≥s
[
TZ_MAX_TIMES
];

150 
âöfo
 
	mâis
[
TZ_MAX_TYPES
];

151 
	mch¨s
[
BIGGEST
(BIGGEST(
TZ_MAX_CHARS
 + 1,  
gmt
),

152 (2 * (
MY_TZNAME_MAX
 + 1)))];

153 
lsöfo
 
	mlsis
[
TZ_MAX_LEAPS
];

156 
	sruÀ
 {

157 
	mr_ty≥
;

158 
	mr_day
;

159 
	mr_wìk
;

160 
	mr_m⁄
;

161 
	mr_time
;

164 
	#JULIAN_DAY
 0

	)

165 
	#DAY_OF_YEAR
 1

	)

166 
	#MONTH_NTH_DAY_OF_WEEK
 2

	)

172 
dëzcode
 
P
((c⁄° * 
codï
));

173 
time_t
 
dëzcode64
 
P
((c⁄° * 
codï
));

174 
dif„r_by_ª≥©
 
P
((
time_t
 
t1
,Åime_à
t0
));

175 c⁄° * 
gëz«me
 
P
((c⁄° * 
°Ω
));

176 c⁄° * 
gëqz«me
 
P
((c⁄° * 
°Ω
, c⁄° 
dñim
));

177 c⁄° * 
gënum
 
P
((c⁄° * 
°Ω
, * 
nump
, 
mö
,

178 
max
));

179 c⁄° * 
gë£cs
 
P
((c⁄° * 
°Ω
, * 
£c•
));

180 c⁄° * 
gëoff£t
 
P
((c⁄° * 
°Ω
, * 
off£ç
));

181 c⁄° * 
gëruÀ
 
P
((c⁄° * 
°Ω
, 
ruÀ
 * 
ruÀp
));

182 
gméﬂd
 
P
((
°©e
 * 
•
));

183 
tm
 * 
gmtsub
 
P
((c⁄° 
time_t
 * 
timï
, 
off£t
,

184 
tm
 * 
tmp
));

185 
tm
 * 
loˇlsub
 
P
((c⁄° 
time_t
 * 
timï
, 
off£t
,

186 
tm
 * 
tmp
, c⁄° 
°©e
 *
•
));

187 
ö¸emít_ovîÊow
 
P
((* 
numbî
, 
dñè
));

188 
À≠s_thru_íd_of
 
P
((
y
));

189 
l⁄g_ö¸emít_ovîÊow
 
P
((* 
numbî
, 
dñè
));

190 
l⁄g_n‹mÆize_ovîÊow
 
P
((* 
ãn•å
,

191 * 
unô•å
, 
ba£
));

192 
n‹mÆize_ovîÊow
 
P
((* 
ãn•å
, * 
unô•å
,

193 
ba£
));

194 
£âz«me
 
P
(());

195 
time_t
 
time1
 
P
((
tm
 * 
tmp
,

196 
tm
 * (*
fun˝
Ë
P
((c⁄° 
time_t
 *,

197 , 
tm
 *, c⁄° 
°©e
* 
•
)),

198 
off£t
, c⁄° 
°©e
 * 
•
));

199 
time_t
 
time2
 
P
((
tm
 *
tmp
,

200 
tm
 * (*
fun˝
Ë
P
((c⁄° 
time_t
 *,

201 , 
tm
*, c⁄° 
°©e
* 
•
)),

202 
off£t
, * 
okayp
, c⁄° 
°©e
 * 
•
));

203 
time_t
 
time2sub
 
P
((
tm
 *
tmp
,

204 
tm
 * (*
fun˝
Ë
P
((c⁄° 
time_t
*, , tm*,c⁄° 
°©e
 *
•
)),

205 
off£t
, * 
okayp
, 
do_n‹m_£cs
,

206 c⁄° 
°©e
 *
•
));

207 
tm
 * 
timesub
 
P
((c⁄° 
time_t
 * 
timï
, 
off£t
,

208 c⁄° 
°©e
 * 
•
, 
tm
 * 
tmp
));

209 
tmcomp
 
P
((c⁄° 
tm
 * 
©mp
,

210 c⁄° 
tm
 * 
btmp
));

211 
time_t
 
å™°ime
 
P
(—ime_à
j™fú°
, 
yór
,

212 c⁄° 
ruÀ
 * 
ruÀp
, 
off£t
));

213 
tzlﬂd
 
P
((c⁄° * 
«me
, 
°©e
 * 
•
,

214 
d€xãnd
));

215 
tzlﬂd_unˇched
 
P
((c⁄° * 
«me
, 
°©e
 * 
•
,

216 
d€xãnd
));

217 
tz∑r£
 
P
((c⁄° * 
«me
, 
°©e
 * 
•
,

218 
œ°dôch
));

220 #ifde‡
ALL_STATE


221 
°©e
 * 
	ggmçå
;

224 #i‚de‡
ALL_STATE


225 
°©e
 
	ggmtmem
;

226 
	#gmçå
 (&
gmtmem
)

	)

229 
	#CACHE_COUNT
 4

	)

230 * 
	gg_ˇcheNames
[
CACHE_COUNT
] = {0,0};

231 
°©e
 
	gg_ˇcheSèãs
[
CACHE_COUNT
];

232 
	gg_œ°Cache
 = 0;

233 
°©e
 
	gg_utc
;

234 
	gg_utcSë
 = 0;

237 #i‚de‡
TZ_STRLEN_MAX


238 
	#TZ_STRLEN_MAX
 255

	)

241 
	gl˛_TZ«me
[
TZ_STRLEN_MAX
 + 1];

242 
	gl˛_is_£t
;

243 
	ggmt_is_£t
;

245 * 
	gtz«me
[2] = {

246 
wûdabbr
,

247 
wûdabbr


258 
tm
 
	gtm
;

260 #ifde‡
USG_COMPAT


261 
time_t
 
	gtimez⁄e
 = 0;

262 
	gdaylight
 = 0;

265 #ifde‡
ALTZONE


266 
time_t
 
	gÆtz⁄e
 = 0;

270 
	$dëzcode
(
codï
)

271 c⁄° * c⁄° 
codï
;

273 
ªsu…
;

274 
i
;

276 
ªsu…
 = (
codï
[0] & 0x80) ? ~0L : 0;

277 
i
 = 0; i < 4; ++i)

278 
ªsu…
 = (ªsu… << 8Ë| (
codï
[
i
] & 0xff);

279  
ªsu…
;

280 
	}
}

282 
time_t


283 
	$dëzcode64
(
codï
)

284 c⁄° * c⁄° 
codï
;

286 
time_t
 
ªsu…
;

287 
i
;

289 
ªsu…
 = (
codï
[0] & 0x80Ë? (~(
öt_Á°64_t
) 0) : 0;

290 
i
 = 0; i < 8; ++i)

291 
ªsu…
 =Ñesu… * 256 + (
codï
[
i
] & 0xff);

292  
ªsu…
;

293 
	}
}

296 
	$dif„r_by_ª≥©
(
t1
, 
t0
)

297 c⁄° 
time_t
 
t1
;

298 c⁄° 
time_t
 
t0
;

300 i‡(
	`TYPE_INTEGRAL
(
time_t
) &&

301 
	`TYPE_BIT
(
time_t
Ë- 
	`TYPE_SIGNED
—ime_tË< 
SECSPERREPEAT_BITS
)

303  
t1
 - 
t0
 =
SECSPERREPEAT
;

304 
	}
}

306 
	$toöt
(*
s
) {

307  (
s
[0] << 24) | (s[1] << 16) | (s[2] << 8) | s[3];

308 
	}
}

311 
	$tzlﬂd
(c⁄° *
«me
, 
°©e
 * c⁄° 
•
, c⁄° 
d€xãnd
)

313 i‡(
«me
) {

314 
i
, 
îr
;

315 i‡(0 =
	`°rcmp
(
«me
, "UTC")) {

316 i‡(!
g_utcSë
) {

317 
	`tzlﬂd_unˇched
(
«me
, &
g_utc
, 1);

318 
g_utcSë
 = 1;

321 *
•
 = 
g_utc
;

324 
i
=0; i<
CACHE_COUNT
; i++) {

325 i‡(
g_ˇcheNames
[
i
] && 0 =
	`°rcmp
(
«me
, g_cacheNames[i])) {

326 *
•
 = 
g_ˇcheSèãs
[
i
];

332 
g_œ°Cache
++;

333 i‡(
g_œ°Cache
 >
CACHE_COUNT
) {

334 
g_œ°Cache
 = 0;

336 
i
 = 
g_œ°Cache
;

337 i‡(
g_ˇcheNames
[
i
]) {

338 
	`‰ì
(
g_ˇcheNames
[
i
]);

340 
îr
 = 
	`tzlﬂd_unˇched
(
«me
, &(
g_ˇcheSèãs
[
i
]), 1);

341 i‡(
îr
 == 0) {

342 
g_ˇcheNames
[
i
] = 
	`°rdup
(
«me
);

343 *
•
 = 
g_ˇcheSèãs
[
i
];

346 
g_ˇcheNames
[
i
] = 
NULL
;

347  
îr
;

350  
	`tzlﬂd_unˇched
(
«me
, 
•
, 
d€xãnd
);

351 
	}
}

354 
	$tzlﬂd_unˇched
(
«me
, 
•
, 
d€xãnd
)

355 c⁄° * 
«me
;

356 
°©e
 * c⁄° 
•
;

357 c⁄° 
d€xãnd
;

359 c⁄° * 
p
;

360 
i
;

361 
fid
;

362 
°‹ed
;

363 
ƒód
;

365 
tzhód
Åzhead;

366 
buf
[2 * (
tzhód
) +

367 2 *  *
•
 +

368 4 * 
TZ_MAX_TIMES
];

369 } 
u
;

370 
t‹ód
 =  
u
.
buf
;

372 i‡(
«me
 =
NULL
 && («mê
TZDEFAULT
) == NULL)

375 
dﬂc˚ss
;

383 
fuŒ«me
[
FILENAME_MAX
 + 1];

384 c⁄° *
‹ig«me
 = 
«me
;

386 i‡(
«me
[0] == ':')

387 ++
«me
;

388 
dﬂc˚ss
 = 
«me
[0] == '/';

389 i‡(!
dﬂc˚ss
) {

390 i‡((
p
 = 
TZDIR
Ë=
NULL
)

392 i‡((
	`°æí
(
p
Ë+ såÀn(
«me
Ë+ 1Ë> 
fuŒ«me
)

394 (Ë
	`°r˝y
(
fuŒ«me
, 
p
);

395 (Ë
	`°rˇt
(
fuŒ«me
, "/");

396 (Ë
	`°rˇt
(
fuŒ«me
, 
«me
);

400 i‡(
	`°rchr
(
«me
, '.'Ë!
NULL
)

401 
dﬂc˚ss
 = 
TRUE
;

402 
«me
 = 
fuŒ«me
;

404 i‡(
dﬂc˚ss
 && 
	`ac˚ss
(
«me
, 
R_OK
) != 0)

406 i‡((
fid
 = 
	`›í
(
«me
, 
OPEN_MODE
)) == -1) {

407 
buf
[
READLEN
];

408 
«me
[
NAMELEN
 + 1];

409 
fidix
 = 
	`›í
(
INDEXFILE
, 
OPEN_MODE
);

410 
off
 = -1;

412 i‡(
fidix
 < 0) {

416 
	`ªad
(
fidix
, 
buf
, (buf)) == (buf)) {

417 
	`mem˝y
(
«me
, 
buf
, 
NAMELEN
);

418 
«me
[
NAMELEN
] = '\0';

420 i‡(
	`°rcmp
(
«me
, 
‹ig«me
) == 0) {

421 
off
 = 
	`toöt
((*Ë
buf
 + 
NAMELEN
);

422 
t‹ód
 = 
	`toöt
((*Ë
buf
 + 
NAMELEN
 + 
INTLEN
);

427 
	`˛o£
(
fidix
);

429 i‡(
off
 < 0)

432 
fid
 = 
	`›í
(
DATAFILE
, 
OPEN_MODE
);

434 i‡(
fid
 < 0) {

438 i‡(
	`l£ek
(
fid
, 
off
, 
SEEK_SET
) < 0) {

443 
ƒód
 = 
	`ªad
(
fid
, 
u
.
buf
, 
t‹ód
);

444 i‡(
	`˛o£
(
fid
Ë< 0 || 
ƒód
 <= 0)

446 
°‹ed
 = 4; stored <= 8; stored *= 2) {

447 
âis°d˙t
;

448 
âisgmt˙t
;

450 
âis°d˙t
 = (Ë
	`dëzcode
(
u
.
tzhód
.
tzh_âis°d˙t
);

451 
âisgmt˙t
 = (Ë
	`dëzcode
(
u
.
tzhód
.
tzh_âisgmt˙t
);

452 
•
->
À≠˙t
 = (Ë
	`dëzcode
(
u
.
tzhód
.
tzh_À≠˙t
);

453 
•
->
time˙t
 = (Ë
	`dëzcode
(
u
.
tzhód
.
tzh_time˙t
);

454 
•
->
ty≥˙t
 = (Ë
	`dëzcode
(
u
.
tzhód
.
tzh_ty≥˙t
);

455 
•
->
ch¨˙t
 = (Ë
	`dëzcode
(
u
.
tzhód
.
tzh_ch¨˙t
);

456 
p
 = 
u
.
tzhód
.
tzh_ch¨˙t
 +  u.tzhead.tzh_charcnt;

457 i‡(
•
->
À≠˙t
 < 0 || sp->À≠˙à> 
TZ_MAX_LEAPS
 ||

458 
•
->
ty≥˙t
 <0 || sp->ty≥˙à> 
TZ_MAX_TYPES
 ||

459 
•
->
time˙t
 < 0 || sp->time˙à> 
TZ_MAX_TIMES
 ||

460 
•
->
ch¨˙t
 < 0 || sp->ch¨˙à> 
TZ_MAX_CHARS
 ||

461 (
âis°d˙t
 !
•
->
ty≥˙t
 &&Åtisstdcnt != 0) ||

462 (
âisgmt˙t
 !
•
->
ty≥˙t
 &&Åtisgmtcnt != 0))

464 i‡(
ƒód
 - (
p
 - 
u
.
buf
) <

465 
•
->
time˙t
 * 
°‹ed
 +

466 
•
->
time˙t
 +

467 
•
->
ty≥˙t
 * 6 +

468 
•
->
ch¨˙t
 +

469 
•
->
À≠˙t
 * (
°‹ed
 + 4) +

470 
âis°d˙t
 +

471 
âisgmt˙t
)

473 
i
 = 0; i < 
•
->
time˙t
; ++i) {

474 
•
->
©s
[
i
] = (
°‹ed
 == 4) ?

475 
	`dëzcode
(
p
Ë: 
	`dëzcode64
(p);

476 
p
 +
°‹ed
;

478 
i
 = 0; i < 
•
->
time˙t
; ++i) {

479 
•
->
ty≥s
[
i
] = (Ë*
p
++;

480 i‡(
•
->
ty≥s
[
i
] >•->
ty≥˙t
)

483 
i
 = 0; i < 
•
->
ty≥˙t
; ++i) {

484 
âöfo
 * 
âi•
;

486 
âi•
 = &
•
->
âis
[
i
];

487 
âi•
->
â_gmtoff
 = 
	`dëzcode
(
p
);

488 
p
 += 4;

489 
âi•
->
â_isd°
 = (Ë*
p
++;

490 i‡(
âi•
->
â_isd°
 != 0 &&Åtisp->tt_isdst != 1)

492 
âi•
->
â_abbröd
 = (Ë*
p
++;

493 i‡(
âi•
->
â_abbröd
 < 0 ||

494 
âi•
->
â_abbröd
 > 
•
->
ch¨˙t
)

497 
i
 = 0; i < 
•
->
ch¨˙t
; ++i)

498 
•
->
ch¨s
[
i
] = *
p
++;

499 
•
->
ch¨s
[
i
] = '\0';

500 
i
 = 0; i < 
•
->
À≠˙t
; ++i) {

501 
lsöfo
 * 
lsi•
;

503 
lsi•
 = &
•
->
lsis
[
i
];

504 
lsi•
->
ls_å™s
 = (
°‹ed
 == 4) ?

505 
	`dëzcode
(
p
Ë: 
	`dëzcode64
(p);

506 
p
 +
°‹ed
;

507 
lsi•
->
ls_c‹r
 = 
	`dëzcode
(
p
);

508 
p
 += 4;

510 
i
 = 0; i < 
•
->
ty≥˙t
; ++i) {

511 
âöfo
 * 
âi•
;

513 
âi•
 = &
•
->
âis
[
i
];

514 i‡(
âis°d˙t
 == 0)

515 
âi•
->
â_âis°d
 = 
FALSE
;

517 
âi•
->
â_âis°d
 = *
p
++;

518 i‡(
âi•
->
â_âis°d
 !
TRUE
 &&

519 
âi•
->
â_âis°d
 !
FALSE
)

523 
i
 = 0; i < 
•
->
ty≥˙t
; ++i) {

524 
âöfo
 * 
âi•
;

526 
âi•
 = &
•
->
âis
[
i
];

527 i‡(
âisgmt˙t
 == 0)

528 
âi•
->
â_âisgmt
 = 
FALSE
;

530 
âi•
->
â_âisgmt
 = *
p
++;

531 i‡(
âi•
->
â_âisgmt
 !
TRUE
 &&

532 
âi•
->
â_âisgmt
 !
FALSE
)

541 
i
 = 0; i < 
•
->
time˙t
 - 2; ++i)

542 i‡(
•
->
©s
[
i
] > sp->ats[i + 1]) {

543 ++
i
;

544 i‡(
	`TYPE_SIGNED
(
time_t
)) {

548 
•
->
time˙t
 = 
i
;

553 
j
;

555 
j
 = 0; j + 
i
 < 
•
->
time˙t
; ++j) {

556 
•
->
©s
[
j
] = sp->©s[j + 
i
];

557 
•
->
ty≥s
[
j
] = sp->ty≥s[j + 
i
];

559 
•
->
time˙t
 = 
j
;

566 i‡(
u
.
tzhód
.
tzh_vîsi⁄
[0] == '\0')

568 
ƒód
 -
p
 - 
u
.
buf
;

569 
i
 = 0; i < 
ƒód
; ++i)

570 
u
.
buf
[
i
] = 
p
[i];

574 i‡(
°‹ed
 >(Ë(
time_t
Ë&& 
	`TYPE_INTEGRAL
(time_t))

577 i‡(
d€xãnd
 && 
ƒód
 > 2 &&

578 
u
.
buf
[0] ='\n' && u.buf[
ƒód
 - 1] == '\n' &&

579 
•
->
ty≥˙t
 + 2 <
TZ_MAX_TYPES
) {

580 
°©e
 
ts
;

581 
ªsu…
;

583 
u
.
buf
[
ƒód
 - 1] = '\0';

584 
ªsu…
 = 
	`tz∑r£
(&
u
.
buf
[1], &
ts
, 
FALSE
);

585 i‡(
ªsu…
 =0 && 
ts
.
ty≥˙t
 == 2 &&

586 
•
->
ch¨˙t
 + 
ts
.ch¨˙à<
TZ_MAX_CHARS
) {

587 
i
 = 0; i < 2; ++i)

588 
ts
.
âis
[
i
].
â_abbröd
 +=

589 
•
->
ch¨˙t
;

590 
i
 = 0; i < 
ts
.
ch¨˙t
; ++i)

591 
•
->
ch¨s
[•->
ch¨˙t
++] =

592 
ts
.
ch¨s
[
i
];

593 
i
 = 0;

594 
i
 < 
ts
.
time˙t
 &&

595 
ts
.
©s
[
i
] <=

596 
•
->
©s
[•->
time˙t
 - 1])

597 ++
i
;

598 
i
 < 
ts
.
time˙t
 &&

599 
•
->
time˙t
 < 
TZ_MAX_TIMES
) {

600 
•
->
©s
[•->
time˙t
] =

601 
ts
.
©s
[
i
];

602 
•
->
ty≥s
[•->
time˙t
] =

603 
•
->
ty≥˙t
 +

604 
ts
.
ty≥s
[
i
];

605 ++
•
->
time˙t
;

606 ++
i
;

608 
•
->
âis
[•->
ty≥˙t
++] = 
ts
.ttis[0];

609 
•
->
âis
[•->
ty≥˙t
++] = 
ts
.ttis[1];

612 
i
 = 2 * 
YEARSPERREPEAT
;

613 
•
->
goback
 = sp->
gﬂhód
 = sp->
time˙t
 > 
i
;

614 
•
->
goback
 &•->
ty≥s
[
i
] == sp->types[0] &&

615 
	`dif„r_by_ª≥©
(
•
->
©s
[
i
], sp->ats[0]);

616 
•
->
gﬂhód
 &=

617 
•
->
ty≥s
[•->
time˙t
 - 1] =•->ty≥s[•->time˙à- 1 - 
i
] &&

618 
	`dif„r_by_ª≥©
(
•
->
©s
[•->
time˙t
 - 1],

619 
•
->
©s
[•->
time˙t
 - 1 - 
i
]);

621 
	}
}

623 c⁄° 
	gm⁄_Àngths
[2][
MONSPERYEAR
] = {

628 c⁄° 
	gyór_Àngths
[2] = {

629 
DAYSPERNYEAR
, 
DAYSPERLYEAR


639 
	$gëz«me
(
°Ω
)

640 c⁄° * 
°Ω
;

642 
c
;

644 (
c
 = *
°Ω
Ë!'\0' && !
	`is_digô
(c) && c != ',' && c != '-' &&

645 
c
 != '+')

646 ++
°Ω
;

647  
°Ω
;

648 
	}
}

660 
	$gëqz«me
(c⁄° *
°Ω
, c⁄° 
dñim
)

662 
c
;

664 (
c
 = *
°Ω
Ë!'\0' && c !
dñim
)

665 ++
°Ω
;

666  
°Ω
;

667 
	}
}

677 
	$gënum
(
°Ω
, 
nump
, 
mö
, 
max
)

678 c⁄° * 
°Ω
;

679 * c⁄° 
nump
;

680 c⁄° 
mö
;

681 c⁄° 
max
;

683 
c
;

684 
num
;

686 i‡(
°Ω
 =
NULL
 || !
	`is_digô
(
c
 = *strp))

687  
NULL
;

688 
num
 = 0;

690 
num
 =Çum * 10 + (
c
 - '0');

691 i‡(
num
 > 
max
)

692  
NULL
;

693 
c
 = *++
°Ω
;

694 } 
	`is_digô
(
c
));

695 i‡(
num
 < 
mö
)

696  
NULL
;

697 *
nump
 = 
num
;

698  
°Ω
;

699 
	}
}

710 
	$gë£cs
(
°Ω
, 
£c•
)

711 c⁄° * 
°Ω
;

712 * c⁄° 
£c•
;

714 
num
;

722 
°Ω
 = 
	`gënum
(°Ω, &
num
, 0, 
HOURSPERDAY
 * 
DAYSPERWEEK
 - 1);

723 i‡(
°Ω
 =
NULL
)

724  
NULL
;

725 *
£c•
 = 
num
 * (Ë
SECSPERHOUR
;

726 i‡(*
°Ω
 == ':') {

727 ++
°Ω
;

728 
°Ω
 = 
	`gënum
(°Ω, &
num
, 0, 
MINSPERHOUR
 - 1);

729 i‡(
°Ω
 =
NULL
)

730  
NULL
;

731 *
£c•
 +
num
 * 
SECSPERMIN
;

732 i‡(*
°Ω
 == ':') {

733 ++
°Ω
;

735 
°Ω
 = 
	`gënum
(°Ω, &
num
, 0, 
SECSPERMIN
);

736 i‡(
°Ω
 =
NULL
)

737  
NULL
;

738 *
£c•
 +
num
;

741  
°Ω
;

742 
	}
}

752 
	$gëoff£t
(
°Ω
, 
off£ç
)

753 c⁄° * 
°Ω
;

754 * c⁄° 
off£ç
;

756 
√g
 = 0;

758 i‡(*
°Ω
 == '-') {

759 
√g
 = 1;

760 ++
°Ω
;

761 } i‡(*
°Ω
 == '+')

762 ++
°Ω
;

763 
°Ω
 = 
	`gë£cs
(°Ω, 
off£ç
);

764 i‡(
°Ω
 =
NULL
)

765  
NULL
;

766 i‡(
√g
)

767 *
off£ç
 = -*offsetp;

768  
°Ω
;

769 
	}
}

779 
	$gëruÀ
(
°Ω
, 
ruÀp
)

780 c⁄° * 
°Ω
;

781 
ruÀ
 * c⁄° 
ruÀp
;

783 i‡(*
°Ω
 == 'J') {

787 
ruÀp
->
r_ty≥
 = 
JULIAN_DAY
;

788 ++
°Ω
;

789 
°Ω
 = 
	`gënum
(°Ω, &
ruÀp
->
r_day
, 1, 
DAYSPERNYEAR
);

790 } i‡(*
°Ω
 == 'M') {

794 
ruÀp
->
r_ty≥
 = 
MONTH_NTH_DAY_OF_WEEK
;

795 ++
°Ω
;

796 
°Ω
 = 
	`gënum
(°Ω, &
ruÀp
->
r_m⁄
, 1, 
MONSPERYEAR
);

797 i‡(
°Ω
 =
NULL
)

798  
NULL
;

799 i‡(*
°Ω
++ != '.')

800  
NULL
;

801 
°Ω
 = 
	`gënum
(°Ω, &
ruÀp
->
r_wìk
, 1, 5);

802 i‡(
°Ω
 =
NULL
)

803  
NULL
;

804 i‡(*
°Ω
++ != '.')

805  
NULL
;

806 
°Ω
 = 
	`gënum
(°Ω, &
ruÀp
->
r_day
, 0, 
DAYSPERWEEK
 - 1);

807 } i‡(
	`is_digô
(*
°Ω
)) {

811 
ruÀp
->
r_ty≥
 = 
DAY_OF_YEAR
;

812 
°Ω
 = 
	`gënum
(°Ω, &
ruÀp
->
r_day
, 0, 
DAYSPERLYEAR
 - 1);

813 }  
NULL
;

814 i‡(
°Ω
 =
NULL
)

815  
NULL
;

816 i‡(*
°Ω
 == '/') {

820 ++
°Ω
;

821 
°Ω
 = 
	`gë£cs
(°Ω, &
ruÀp
->
r_time
);

822 } 
ruÀp
->
r_time
 = 2 * 
SECSPERHOUR
;

823  
°Ω
;

824 
	}
}

832 
time_t


833 
	$å™°ime
(
j™fú°
, 
yór
, 
ruÀp
, 
off£t
)

834 c⁄° 
time_t
 
j™fú°
;

835 c⁄° 
yór
;

836 c⁄° 
ruÀ
 * c⁄° 
ruÀp
;

837 c⁄° 
off£t
;

839 
À≠yór
;

840 
time_t
 
vÆue
;

841 
i
;

842 
d
, 
m1
, 
yy0
, 
yy1
, 
yy2
, 
dow
;

844 
	`INITIALIZE
(
vÆue
);

845 
À≠yór
 = 
	`i¶óp
(
yór
);

846 
ruÀp
->
r_ty≥
) {

848 
JULIAN_DAY
:

856 
vÆue
 = 
j™fú°
 + (
ruÀp
->
r_day
 - 1Ë* 
SECSPERDAY
;

857 i‡(
À≠yór
 && 
ruÀp
->
r_day
 >= 60)

858 
vÆue
 +
SECSPERDAY
;

861 
DAY_OF_YEAR
:

867 
vÆue
 = 
j™fú°
 + 
ruÀp
->
r_day
 * 
SECSPERDAY
;

870 
MONTH_NTH_DAY_OF_WEEK
:

874 
vÆue
 = 
j™fú°
;

875 
i
 = 0; i < 
ruÀp
->
r_m⁄
 - 1; ++i)

876 
vÆue
 +
m⁄_Àngths
[
À≠yór
][
i
] * 
SECSPERDAY
;

882 
m1
 = (
ruÀp
->
r_m⁄
 + 9) % 12 + 1;

883 
yy0
 = (
ruÀp
->
r_m⁄
 <2Ë? (
yór
 - 1) : year;

884 
yy1
 = 
yy0
 / 100;

885 
yy2
 = 
yy0
 % 100;

886 
dow
 = ((26 * 
m1
 - 2) / 10 +

887 1 + 
yy2
 + yy2 / 4 + 
yy1
 / 4 - 2 * yy1) % 7;

888 i‡(
dow
 < 0)

889 
dow
 +
DAYSPERWEEK
;

896 
d
 = 
ruÀp
->
r_day
 - 
dow
;

897 i‡(
d
 < 0)

898 
d
 +
DAYSPERWEEK
;

899 
i
 = 1; i < 
ruÀp
->
r_wìk
; ++i) {

900 i‡(
d
 + 
DAYSPERWEEK
 >=

901 
m⁄_Àngths
[
À≠yór
][
ruÀp
->
r_m⁄
 - 1])

903 
d
 +
DAYSPERWEEK
;

909 
vÆue
 +
d
 * 
SECSPERDAY
;

919  
vÆue
 + 
ruÀp
->
r_time
 + 
off£t
;

920 
	}
}

928 
	$tz∑r£
(
«me
, 
•
, 
œ°dôch
)

929 c⁄° * 
«me
;

930 
°©e
 * c⁄° 
•
;

931 c⁄° 
œ°dôch
;

933 c⁄° * 
°d«me
;

934 c⁄° * 
d°«me
;

935 
size_t
 
°dÀn
;

936 
size_t
 
d°Àn
;

937 
°doff£t
;

938 
d°off£t
;

939 
time_t
 * 
©p
;

940 * 
ty≥p
;

941 * 
˝
;

942 
lﬂd_ªsu…
;

944 
	`INITIALIZE
(
d°«me
);

945 
°d«me
 = 
«me
;

946 i‡(
œ°dôch
) {

947 
°dÀn
 = 
	`°æí
(
«me
);

948 
«me
 +
°dÀn
;

949 i‡(
°dÀn
 > 
•
->
ch¨s
)

950 
°dÀn
 = ( 
•
->
ch¨s
) - 1;

951 
°doff£t
 = 0;

953 i‡(*
«me
 == '<') {

954 
«me
++;

955 
°d«me
 = 
«me
;

956 
«me
 = 
	`gëqz«me
(name, '>');

957 i‡(*
«me
 != '>')

959 
°dÀn
 = 
«me
 - 
°d«me
;

960 
«me
++;

962 
«me
 = 
	`gëz«me
(name);

963 
°dÀn
 = 
«me
 - 
°d«me
;

965 i‡(*
«me
 == '\0')

967 
«me
 = 
	`gëoff£t
“ame, &
°doff£t
);

968 i‡(
«me
 =
NULL
)

971 
lﬂd_ªsu…
 = 
	`tzlﬂd
(
TZDEFRULES
, 
•
, 
FALSE
);

972 i‡(
lﬂd_ªsu…
 != 0)

973 
•
->
À≠˙t
 = 0;

974 
•
->
time˙t
 = 0;

975 i‡(*
«me
 != '\0') {

976 i‡(*
«me
 == '<') {

977 
d°«me
 = ++
«me
;

978 
«me
 = 
	`gëqz«me
(name, '>');

979 i‡(*
«me
 != '>')

981 
d°Àn
 = 
«me
 - 
d°«me
;

982 
«me
++;

984 
d°«me
 = 
«me
;

985 
«me
 = 
	`gëz«me
(name);

986 
d°Àn
 = 
«me
 - 
d°«me
;

988 i‡(*
«me
 != '\0' && *name != ',' && *name != ';') {

989 
«me
 = 
	`gëoff£t
“ame, &
d°off£t
);

990 i‡(
«me
 =
NULL
)

992 } 
d°off£t
 = 
°doff£t
 - 
SECSPERHOUR
;

993 i‡(*
«me
 ='\0' && 
lﬂd_ªsu…
 != 0)

994 
«me
 = 
TZDEFRULESTRING
;

995 i‡(*
«me
 == ',' || *name == ';') {

996 
ruÀ
 
°¨t
;

997 
ruÀ
 
íd
;

998 
yór
;

999 
time_t
 
j™fú°
;

1000 
time_t
 
°¨âime
;

1001 
time_t
 
ídtime
;

1003 ++
«me
;

1004 i‡((
«me
 = 
	`gëruÀ
“ame, &
°¨t
)Ë=
NULL
)

1006 i‡(*
«me
++ != ',')

1008 i‡((
«me
 = 
	`gëruÀ
“ame, &
íd
)Ë=
NULL
)

1010 i‡(*
«me
 != '\0')

1012 
•
->
ty≥˙t
 = 2;

1016 
•
->
âis
[0].
â_gmtoff
 = -
d°off£t
;

1017 
•
->
âis
[0].
â_isd°
 = 1;

1018 
•
->
âis
[0].
â_abbröd
 = 
°dÀn
 + 1;

1019 
•
->
âis
[1].
â_gmtoff
 = -
°doff£t
;

1020 
•
->
âis
[1].
â_isd°
 = 0;

1021 
•
->
âis
[1].
â_abbröd
 = 0;

1022 
©p
 = 
•
->
©s
;

1023 
ty≥p
 = 
•
->
ty≥s
;

1024 
j™fú°
 = 0;

1025 
yór
 = 
EPOCH_YEAR
;

1026 
•
->
time˙t
 + 2 <
TZ_MAX_TIMES
;

1027 ++
yór
) {

1028 
time_t
 
√wfú°
;

1030 
°¨âime
 = 
	`å™°ime
(
j™fú°
, 
yór
, &
°¨t
,

1031 
°doff£t
);

1032 
ídtime
 = 
	`å™°ime
(
j™fú°
, 
yór
, &
íd
,

1033 
d°off£t
);

1034 i‡(
°¨âime
 > 
ídtime
) {

1035 *
©p
++ = 
ídtime
;

1036 *
ty≥p
++ = 1;

1037 *
©p
++ = 
°¨âime
;

1038 *
ty≥p
++ = 0;

1040 *
©p
++ = 
°¨âime
;

1041 *
ty≥p
++ = 0;

1042 *
©p
++ = 
ídtime
;

1043 *
ty≥p
++ = 1;

1045 
•
->
time˙t
 += 2;

1046 
√wfú°
 = 
j™fú°
;

1047 
√wfú°
 +
yór_Àngths
[
	`i¶óp
(
yór
)] *

1048 
SECSPERDAY
;

1049 i‡(
√wfú°
 <
j™fú°
)

1051 
j™fú°
 = 
√wfú°
;

1054 
theú°doff£t
;

1055 
theúd°off£t
;

1056 
theúoff£t
;

1057 
isd°
;

1058 
i
;

1059 
j
;

1061 i‡(*
«me
 != '\0')

1066 
theú°doff£t
 = 0;

1067 
i
 = 0; i < 
•
->
time˙t
; ++i) {

1068 
j
 = 
•
->
ty≥s
[
i
];

1069 i‡(!
•
->
âis
[
j
].
â_isd°
) {

1070 
theú°doff£t
 =

1071 -
•
->
âis
[
j
].
â_gmtoff
;

1075 
theúd°off£t
 = 0;

1076 
i
 = 0; i < 
•
->
time˙t
; ++i) {

1077 
j
 = 
•
->
ty≥s
[
i
];

1078 i‡(
•
->
âis
[
j
].
â_isd°
) {

1079 
theúd°off£t
 =

1080 -
•
->
âis
[
j
].
â_gmtoff
;

1087 
isd°
 = 
FALSE
;

1088 
theúoff£t
 = 
theú°doff£t
;

1093 
i
 = 0; i < 
•
->
time˙t
; ++i) {

1094 
j
 = 
•
->
ty≥s
[
i
];

1095 
•
->
ty≥s
[
i
] = sp->
âis
[
j
].
â_isd°
;

1096 i‡(
•
->
âis
[
j
].
â_âisgmt
) {

1113 i‡(
isd°
 && !
•
->
âis
[
j
].
â_âis°d
) {

1114 
•
->
©s
[
i
] +
d°off£t
 -

1115 
theúd°off£t
;

1117 
•
->
©s
[
i
] +
°doff£t
 -

1118 
theú°doff£t
;

1121 
theúoff£t
 = -
•
->
âis
[
j
].
â_gmtoff
;

1122 i‡(
•
->
âis
[
j
].
â_isd°
)

1123 
theúd°off£t
 = 
theúoff£t
;

1124 
theú°doff£t
 = 
theúoff£t
;

1130 
•
->
âis
[0].
â_gmtoff
 = -
°doff£t
;

1131 
•
->
âis
[0].
â_isd°
 = 
FALSE
;

1132 
•
->
âis
[0].
â_abbröd
 = 0;

1133 
•
->
âis
[1].
â_gmtoff
 = -
d°off£t
;

1134 
•
->
âis
[1].
â_isd°
 = 
TRUE
;

1135 
•
->
âis
[1].
â_abbröd
 = 
°dÀn
 + 1;

1136 
•
->
ty≥˙t
 = 2;

1139 
d°Àn
 = 0;

1140 
•
->
ty≥˙t
 = 1;

1141 
•
->
time˙t
 = 0;

1142 
•
->
âis
[0].
â_gmtoff
 = -
°doff£t
;

1143 
•
->
âis
[0].
â_isd°
 = 0;

1144 
•
->
âis
[0].
â_abbröd
 = 0;

1146 
•
->
ch¨˙t
 = 
°dÀn
 + 1;

1147 i‡(
d°Àn
 != 0)

1148 
•
->
ch¨˙t
 +
d°Àn
 + 1;

1149 i‡((
size_t
Ë
•
->
ch¨˙t
 >  sp->
ch¨s
)

1151 
˝
 = 
•
->
ch¨s
;

1152 (Ë
	`°∫˝y
(
˝
, 
°d«me
, 
°dÀn
);

1153 
˝
 +
°dÀn
;

1154 *
˝
++ = '\0';

1155 i‡(
d°Àn
 != 0) {

1156 (Ë
	`°∫˝y
(
˝
, 
d°«me
, 
d°Àn
);

1157 *(
˝
 + 
d°Àn
) = '\0';

1160 
	}
}

1163 
	$gméﬂd
(
•
)

1164 
°©e
 * c⁄° 
•
;

1166 i‡(
	`tzlﬂd
(
gmt
, 
•
, 
TRUE
) != 0)

1167 (Ë
	`tz∑r£
(
gmt
, 
•
, 
TRUE
);

1168 
	}
}

1180 
tm
 *

1181 
	$loˇlsub
(
timï
, 
off£t
, 
tmp
, 
•
)

1182 c⁄° 
time_t
 * c⁄° 
timï
;

1183 c⁄° 
off£t
;

1184 
tm
 * c⁄° 
tmp
;

1185 c⁄° 
°©e
 * 
•
;

1187 c⁄° 
âöfo
 * 
âi•
;

1188 
i
;

1189 
tm
 * 
ªsu…
;

1190 c⁄° 
time_t
 
t
 = *
timï
;

1192 #ifde‡
ALL_STATE


1193 i‡(
•
 =
NULL
)

1194  
	`gmtsub
(
timï
, 
off£t
, 
tmp
);

1196 i‡((
•
->
goback
 && 
t
 < sp->
©s
[0]) ||

1197 (
•
->
gﬂhód
 && 
t
 > sp->
©s
[•->
time˙t
 - 1])) {

1198 
time_t
 
√wt
 = 
t
;

1199 
time_t
 
£c⁄ds
;

1200 
time_t
 
tcy˛es
;

1201 
öt_Á°64_t
 
icy˛es
;

1203 i‡(
t
 < 
•
->
©s
[0])

1204 
£c⁄ds
 = 
•
->
©s
[0] - 
t
;

1205 
£c⁄ds
 = 
t
 - 
•
->
©s
[•->
time˙t
 - 1];

1206 --
£c⁄ds
;

1207 
tcy˛es
 = 
£c⁄ds
 / 
YEARSPERREPEAT
 / 
AVGSECSPERYEAR
;

1208 ++
tcy˛es
;

1209 
icy˛es
 = 
tcy˛es
;

1210 i‡(
tcy˛es
 - 
icy˛es
 >= 1 || icycles -Åcycles >= 1)

1211  
NULL
;

1212 
£c⁄ds
 = 
icy˛es
;

1213 
£c⁄ds
 *
YEARSPERREPEAT
;

1214 
£c⁄ds
 *
AVGSECSPERYEAR
;

1215 i‡(
t
 < 
•
->
©s
[0])

1216 
√wt
 +
£c⁄ds
;

1217 
√wt
 -
£c⁄ds
;

1218 i‡(
√wt
 < 
•
->
©s
[0] ||

1219 
√wt
 > 
•
->
©s
[•->
time˙t
 - 1])

1220  
NULL
;

1221 
ªsu…
 = 
	`loˇlsub
(&
√wt
, 
off£t
, 
tmp
, 
•
);

1222 i‡(
ªsu…
 =
tmp
) {

1223 
time_t
 
√wy
;

1225 
√wy
 = 
tmp
->
tm_yór
;

1226 i‡(
t
 < 
•
->
©s
[0])

1227 
√wy
 -
icy˛es
 * 
YEARSPERREPEAT
;

1228 
√wy
 +
icy˛es
 * 
YEARSPERREPEAT
;

1229 
tmp
->
tm_yór
 = 
√wy
;

1230 i‡(
tmp
->
tm_yór
 !
√wy
)

1231  
NULL
;

1233  
ªsu…
;

1235 i‡(
•
->
time˙t
 =0 || 
t
 < sp->
©s
[0]) {

1236 
i
 = 0;

1237 
•
->
âis
[
i
].
â_isd°
)

1238 i‡(++
i
 >
•
->
ty≥˙t
) {

1239 
i
 = 0;

1243 
lo
 = 1;

1244 
hi
 = 
•
->
time˙t
;

1246 
lo
 < 
hi
) {

1247 
mid
 = (
lo
 + 
hi
) >> 1;

1249 i‡(
t
 < 
•
->
©s
[
mid
])

1250 
hi
 = 
mid
;

1251 
lo
 = 
mid
 + 1;

1253 
i
 = (Ë
•
->
ty≥s
[
lo
 - 1];

1255 
âi•
 = &
•
->
âis
[
i
];

1262 
ªsu…
 = 
	`timesub
(&
t
, 
âi•
->
â_gmtoff
, 
•
, 
tmp
);

1263 
tmp
->
tm_isd°
 = 
âi•
->
â_isd°
;

1264 #ifde‡
HAVE_TM_GMTOFF


1265 
tmp
->
tm_gmtoff
 = 
âi•
->
â_gmtoff
;

1267 
tz«me
[
tmp
->
tm_isd°
] = &
•
->
ch¨s
[
âi•
->
â_abbröd
];

1268 #ifde‡
TM_ZONE


1269 
tmp
->
TM_ZONE
 = &
•
->
ch¨s
[
âi•
->
â_abbröd
];

1271  
ªsu…
;

1272 
	}
}

1277 
tm
 *

1278 
	$loˇ…ime
(
timï
)

1279 c⁄° 
time_t
 * c⁄° 
timï
;

1281 
	`tz£t
();

1282  
	`loˇlsub
(
timï
, 0L, &
tm
);

1283 
	}
}

1292 
	$loˇ…ime_tz
(c⁄° 
time_t
 * c⁄° 
timï
, 
tm
 * 
tmp
, c⁄° * 
tz
)

1294 
°©e
 
°
;

1295 i‡(
	`tzlﬂd
(
tz
, &
°
, 
TRUE
) != 0) {

1297 
	`gméﬂd
(&
°
);

1300 
	`loˇlsub
(
timï
, 0L, 
tmp
, &
°
);

1301 
	}
}

1307 
tm
 *

1308 
	$gmtsub
(
timï
, 
off£t
, 
tmp
)

1309 c⁄° 
time_t
 * c⁄° 
timï
;

1310 c⁄° 
off£t
;

1311 
tm
 * c⁄° 
tmp
;

1313 
tm
 * 
ªsu…
;

1315 i‡(!
gmt_is_£t
) {

1316 
gmt_is_£t
 = 
TRUE
;

1317 #ifde‡
ALL_STATE


1318 
gmçå
 = (
°©e
 *Ë
	`mÆloc
( *gmtptr);

1319 i‡(
gmçå
 !
NULL
)

1321 
	`gméﬂd
(
gmçå
);

1323 
ªsu…
 = 
	`timesub
(
timï
, 
off£t
, 
gmçå
, 
tmp
);

1324 #ifde‡
TM_ZONE


1330 i‡(
off£t
 != 0)

1331 
tmp
->
TM_ZONE
 = 
wûdabbr
;

1333 #ifde‡
ALL_STATE


1334 i‡(
gmçå
 =
NULL
)

1335 
tmp
->
TM_ZONE
 = 
gmt
;

1336 
tmp
->
TM_ZONE
 = 
gmçå
->
ch¨s
;

1338 #i‚de‡
ALL_STATE


1339 
tmp
->
TM_ZONE
 = 
gmçå
->
ch¨s
;

1343  
ªsu…
;

1344 
	}
}

1348 
tm
 *

1349 
	$gmtime
(
timï
)

1350 c⁄° 
time_t
 * c⁄° 
timï
;

1352  
	`gmtsub
(
timï
, 0L, &
tm
);

1353 
	}
}

1362 
tm
 *

1363 
	$gmtime_r
(
timï
, 
tmp
)

1364 c⁄° 
time_t
 * c⁄° 
timï
;

1365 
tm
 * 
tmp
;

1367  
	`gmtsub
(
timï
, 0L, 
tmp
);

1368 
	}
}

1371 #ifde‡
STD_INSPIRED


1375 
tm
 *

1376 
	$of·ime
(
timï
, 
off£t
)

1377 c⁄° 
time_t
 * c⁄° 
timï
;

1378 c⁄° 
off£t
;

1380  
	`gmtsub
(
timï
, 
off£t
, &
tm
);

1381 
	}
}

1392 
	$À≠s_thru_íd_of
(
y
)

1393 c⁄° 
y
;

1395  (
y
 >= 0) ? (y / 4 - y / 100 + y / 400) :

1396 -(
	`À≠s_thru_íd_of
(-(
y
 + 1)) + 1);

1397 
	}
}

1399 
tm
 *

1400 
	$timesub
(
timï
, 
off£t
, 
•
, 
tmp
)

1401 c⁄° 
time_t
 * c⁄° 
timï
;

1402 c⁄° 
off£t
;

1403 c⁄° 
°©e
 * c⁄° 
•
;

1404 
tm
 * c⁄° 
tmp
;

1406 c⁄° 
lsöfo
 * 
Õ
;

1407 
time_t
 
tdays
;

1408 
idays
;

1409 
ªm
;

1410 
y
;

1411 c⁄° * 
ù
;

1412 
c‹r
;

1413 
hô
;

1414 
i
;

1416 
c‹r
 = 0;

1417 
hô
 = 0;

1418 #ifde‡
ALL_STATE


1419 
i
 = (
•
 =
NULL
Ë? 0 : sp->
À≠˙t
;

1421 #i‚de‡
ALL_STATE


1422 
i
 = 
•
->
À≠˙t
;

1424 --
i
 >= 0) {

1425 
Õ
 = &
•
->
lsis
[
i
];

1426 i‡(*
timï
 >
Õ
->
ls_å™s
) {

1427 i‡(*
timï
 =
Õ
->
ls_å™s
) {

1428 
hô
 = ((
i
 =0 && 
Õ
->
ls_c‹r
 > 0) ||

1429 
Õ
->
ls_c‹r
 > 
•
->
lsis
[
i
 - 1].ls_corr);

1430 i‡(
hô
)

1431 
i
 > 0 &&

1432 
•
->
lsis
[
i
].
ls_å™s
 ==

1433 
•
->
lsis
[
i
 - 1].
ls_å™s
 + 1 &&

1434 
•
->
lsis
[
i
].
ls_c‹r
 ==

1435 
•
->
lsis
[
i
 - 1].
ls_c‹r
 + 1) {

1436 ++
hô
;

1437 --
i
;

1440 
c‹r
 = 
Õ
->
ls_c‹r
;

1444 
y
 = 
EPOCH_YEAR
;

1445 
tdays
 = *
timï
 / 
SECSPERDAY
;

1446 
ªm
 = *
timï
 - 
tdays
 * 
SECSPERDAY
;

1447 
tdays
 < 0 ||Åday†>
yór_Àngths
[
	`i¶óp
(
y
)]) {

1448 
√wy
;

1449 
time_t
 
tdñè
;

1450 
idñè
;

1451 
À≠days
;

1453 
tdñè
 = 
tdays
 / 
DAYSPERLYEAR
;

1454 
idñè
 = 
tdñè
;

1455 i‡(
tdñè
 - 
idñè
 >= 1 || idelta -Ådelta >= 1)

1456  
NULL
;

1457 i‡(
idñè
 == 0)

1458 
idñè
 = (
tdays
 < 0) ? -1 : 1;

1459 
√wy
 = 
y
;

1460 i‡(
	`ö¸emít_ovîÊow
(&
√wy
, 
idñè
))

1461  
NULL
;

1462 
À≠days
 = 
	`À≠s_thru_íd_of
(
√wy
 - 1) -

1463 
	`À≠s_thru_íd_of
(
y
 - 1);

1464 
tdays
 -((
time_t
Ë
√wy
 - 
y
Ë* 
DAYSPERNYEAR
;

1465 
tdays
 -
À≠days
;

1466 
y
 = 
√wy
;

1469 
£c⁄ds
;

1471 
£c⁄ds
 = 
tdays
 * 
SECSPERDAY
 + 0.5;

1472 
tdays
 = 
£c⁄ds
 / 
SECSPERDAY
;

1473 
ªm
 +
£c⁄ds
 - 
tdays
 * 
SECSPERDAY
;

1478 
idays
 = 
tdays
;

1479 
ªm
 +
off£t
 - 
c‹r
;

1480 
ªm
 < 0) {

1481 
ªm
 +
SECSPERDAY
;

1482 --
idays
;

1484 
ªm
 >
SECSPERDAY
) {

1485 
ªm
 -
SECSPERDAY
;

1486 ++
idays
;

1488 
idays
 < 0) {

1489 i‡(
	`ö¸emít_ovîÊow
(&
y
, -1))

1490  
NULL
;

1491 
idays
 +
yór_Àngths
[
	`i¶óp
(
y
)];

1493 
idays
 >
yór_Àngths
[
	`i¶óp
(
y
)]) {

1494 
idays
 -
yór_Àngths
[
	`i¶óp
(
y
)];

1495 i‡(
	`ö¸emít_ovîÊow
(&
y
, 1))

1496  
NULL
;

1498 
tmp
->
tm_yór
 = 
y
;

1499 i‡(
	`ö¸emít_ovîÊow
(&
tmp
->
tm_yór
, -
TM_YEAR_BASE
))

1500  
NULL
;

1501 
tmp
->
tm_yday
 = 
idays
;

1505 
tmp
->
tm_wday
 = 
EPOCH_WDAY
 +

1506 ((
y
 - 
EPOCH_YEAR
Ë% 
DAYSPERWEEK
) *

1507 (
DAYSPERNYEAR
 % 
DAYSPERWEEK
) +

1508 
	`À≠s_thru_íd_of
(
y
 - 1) -

1509 
	`À≠s_thru_íd_of
(
EPOCH_YEAR
 - 1) +

1510 
idays
;

1511 
tmp
->
tm_wday
 %
DAYSPERWEEK
;

1512 i‡(
tmp
->
tm_wday
 < 0)

1513 
tmp
->
tm_wday
 +
DAYSPERWEEK
;

1514 
tmp
->
tm_hour
 = (Ë(
ªm
 / 
SECSPERHOUR
);

1515 
ªm
 %
SECSPERHOUR
;

1516 
tmp
->
tm_mö
 = (Ë(
ªm
 / 
SECSPERMIN
);

1521 
tmp
->
tm_£c
 = (Ë(
ªm
 % 
SECSPERMIN
Ë+ 
hô
;

1522 
ù
 = 
m⁄_Àngths
[
	`i¶óp
(
y
)];

1523 
tmp
->
tm_m⁄
 = 0; 
idays
 >
ù
[tmp->tm_mon]; ++(tmp->tm_mon))

1524 
idays
 -
ù
[
tmp
->
tm_m⁄
];

1525 
tmp
->
tm_mday
 = (Ë(
idays
 + 1);

1526 
tmp
->
tm_isd°
 = 0;

1527 #ifde‡
TM_GMTOFF


1528 
tmp
->
TM_GMTOFF
 = 
off£t
;

1530  
tmp
;

1531 
	}
}

1536 
	$˘ime
(
timï
)

1537 c⁄° 
time_t
 * c⁄° 
timï
;

1545  
	`as˘ime
(
	`loˇ…ime
(
timï
));

1546 
	}
}

1552 
	$˘ime_r
(
timï
, 
buf
)

1553 c⁄° 
time_t
 * c⁄° 
timï
;

1554 * 
buf
;

1556 
tm
 
mytm
;

1558  
	`as˘ime_r
(
	`loˇ…ime_r
(
timï
, &
mytm
), 
buf
);

1559 
	}
}

1571 #i‚de‡
WRONG


1572 
	#WRONG
 (-1)

	)

1580 
	$ö¸emít_ovîÊow
(
numbî
, 
dñè
)

1581 * 
numbî
;

1582 
dñè
;

1584 
numbî0
 = ()*
numbî
;

1585 
numbî1
 = ()(
numbî0
 + 
dñè
);

1587 *
numbî
 = ()
numbî1
;

1589 i‡(
dñè
 >= 0) {

1590  (()
numbî1
 < ()
numbî0
);

1592  (()
numbî1
 > ()
numbî0
);

1594 
	}
}

1597 
	$l⁄g_ö¸emít_ovîÊow
(
numbî
, 
dñè
)

1598 * 
numbî
;

1599 
dñè
;

1601 
numbî0
 = ()*
numbî
;

1602 
numbî1
 = ()(
numbî0
 + 
dñè
);

1604 *
numbî
 = ()
numbî1
;

1606 i‡(
dñè
 >= 0) {

1607  (()
numbî1
 < ()
numbî0
);

1609  (()
numbî1
 > ()
numbî0
);

1611 
	}
}

1614 
	$n‹mÆize_ovîÊow
(
ãn•å
, 
unô•å
, 
ba£
)

1615 * c⁄° 
ãn•å
;

1616 * c⁄° 
unô•å
;

1617 c⁄° 
ba£
;

1619 
ãnsdñè
;

1621 
ãnsdñè
 = (*
unô•å
 >= 0) ?

1622 (*
unô•å
 / 
ba£
) :

1623 (-1 - (-1 - *
unô•å
Ë/ 
ba£
);

1624 *
unô•å
 -
ãnsdñè
 * 
ba£
;

1625  
	`ö¸emít_ovîÊow
(
ãn•å
, 
ãnsdñè
);

1626 
	}
}

1629 
	$l⁄g_n‹mÆize_ovîÊow
(
ãn•å
, 
unô•å
, 
ba£
)

1630 * c⁄° 
ãn•å
;

1631 * c⁄° 
unô•å
;

1632 c⁄° 
ba£
;

1634 
ãnsdñè
;

1636 
ãnsdñè
 = (*
unô•å
 >= 0) ?

1637 (*
unô•å
 / 
ba£
) :

1638 (-1 - (-1 - *
unô•å
Ë/ 
ba£
);

1639 *
unô•å
 -
ãnsdñè
 * 
ba£
;

1640  
	`l⁄g_ö¸emít_ovîÊow
(
ãn•å
, 
ãnsdñè
);

1641 
	}
}

1644 
	$tmcomp
(
©mp
, 
btmp
)

1645 c⁄° 
tm
 * c⁄° 
©mp
;

1646 c⁄° 
tm
 * c⁄° 
btmp
;

1648 
ªsu…
;

1650 i‡((
ªsu…
 = (
©mp
->
tm_yór
 - 
btmp
->tm_year)) == 0 &&

1651 (
ªsu…
 = (
©mp
->
tm_m⁄
 - 
btmp
->tm_mon)) == 0 &&

1652 (
ªsu…
 = (
©mp
->
tm_mday
 - 
btmp
->tm_mday)) == 0 &&

1653 (
ªsu…
 = (
©mp
->
tm_hour
 - 
btmp
->tm_hour)) == 0 &&

1654 (
ªsu…
 = (
©mp
->
tm_mö
 - 
btmp
->tm_min)) == 0)

1655 
ªsu…
 = 
©mp
->
tm_£c
 - 
btmp
->tm_sec;

1656  
ªsu…
;

1657 
	}
}

1659 
time_t


1660 
	$time2sub
(
tmp
, 
fun˝
, 
off£t
, 
okayp
, 
do_n‹m_£cs
, 
•
)

1661 
tm
 * c⁄° 
tmp
;

1662 
tm
 * (* c⁄° 
fun˝
Ë
	`P
((c⁄° 
time_t
*, , tm*,c⁄° 
°©e
 *
•
));

1663 c⁄° 
off£t
;

1664 * c⁄° 
okayp
;

1665 c⁄° 
do_n‹m_£cs
;

1666 c⁄° 
°©e
 * 
•
;

1668 
dú
;

1669 
i
, 
j
;

1670 
ßved_£c⁄ds
;

1671 
li
;

1672 
time_t
 
lo
;

1673 
time_t
 
hi
;

1674 
y
;

1675 
time_t
 
√wt
;

1676 
time_t
 
t
;

1677 
tm
 
youπm
, 
mytm
;

1679 *
okayp
 = 
FALSE
;

1680 
youπm
 = *
tmp
;

1681 i‡(
do_n‹m_£cs
) {

1682 i‡(
	`n‹mÆize_ovîÊow
(&
youπm
.
tm_mö
, &youπm.
tm_£c
,

1683 
SECSPERMIN
))

1684  
WRONG
;

1686 i‡(
	`n‹mÆize_ovîÊow
(&
youπm
.
tm_hour
, &youπm.
tm_mö
, 
MINSPERHOUR
))

1687  
WRONG
;

1688 i‡(
	`n‹mÆize_ovîÊow
(&
youπm
.
tm_mday
, &youπm.
tm_hour
, 
HOURSPERDAY
))

1689  
WRONG
;

1690 
y
 = 
youπm
.
tm_yór
;

1691 i‡(
	`l⁄g_n‹mÆize_ovîÊow
(&
y
, &
youπm
.
tm_m⁄
, 
MONSPERYEAR
))

1692  
WRONG
;

1697 i‡(
	`l⁄g_ö¸emít_ovîÊow
(&
y
, 
TM_YEAR_BASE
))

1698  
WRONG
;

1699 
youπm
.
tm_mday
 <= 0) {

1700 i‡(
	`l⁄g_ö¸emít_ovîÊow
(&
y
, -1))

1701  
WRONG
;

1702 
li
 = 
y
 + (1 < 
youπm
.
tm_m⁄
);

1703 
youπm
.
tm_mday
 +
yór_Àngths
[
	`i¶óp
(
li
)];

1705 
youπm
.
tm_mday
 > 
DAYSPERLYEAR
) {

1706 
li
 = 
y
 + (1 < 
youπm
.
tm_m⁄
);

1707 
youπm
.
tm_mday
 -
yór_Àngths
[
	`i¶óp
(
li
)];

1708 i‡(
	`l⁄g_ö¸emít_ovîÊow
(&
y
, 1))

1709  
WRONG
;

1712 
i
 = 
m⁄_Àngths
[
	`i¶óp
(
y
)][
youπm
.
tm_m⁄
];

1713 i‡(
youπm
.
tm_mday
 <
i
)

1715 
youπm
.
tm_mday
 -
i
;

1716 i‡(++
youπm
.
tm_m⁄
 >
MONSPERYEAR
) {

1717 
youπm
.
tm_m⁄
 = 0;

1718 i‡(
	`l⁄g_ö¸emít_ovîÊow
(&
y
, 1))

1719  
WRONG
;

1722 i‡(
	`l⁄g_ö¸emít_ovîÊow
(&
y
, -
TM_YEAR_BASE
))

1723  
WRONG
;

1724 
youπm
.
tm_yór
 = 
y
;

1725 i‡(
youπm
.
tm_yór
 !
y
)

1726  
WRONG
;

1727 i‡(
youπm
.
tm_£c
 >0 && youπm.tm_£¯< 
SECSPERMIN
)

1728 
ßved_£c⁄ds
 = 0;

1729 i‡(
y
 + 
TM_YEAR_BASE
 < 
EPOCH_YEAR
) {

1738 i‡(
	`ö¸emít_ovîÊow
(&
youπm
.
tm_£c
, 1 - 
SECSPERMIN
))

1739  
WRONG
;

1740 
ßved_£c⁄ds
 = 
youπm
.
tm_£c
;

1741 
youπm
.
tm_£c
 = 
SECSPERMIN
 - 1;

1743 
ßved_£c⁄ds
 = 
youπm
.
tm_£c
;

1744 
youπm
.
tm_£c
 = 0;

1749 i‡(!
	`TYPE_SIGNED
(
time_t
)) {

1750 
lo
 = 0;

1751 
hi
 = 
lo
 - 1;

1752 } i‡(!
	`TYPE_INTEGRAL
(
time_t
)) {

1753 i‡((
time_t
) > ())

1754 
hi
 = (
time_t
Ë
DBL_MAX
;

1755 
hi
 = (
time_t
Ë
FLT_MAX
;

1756 
lo
 = -
hi
;

1758 
lo
 = 1;

1759 
i
 = 0; i < (Ë
	`TYPE_BIT
(
time_t
) - 1; ++i)

1760 
lo
 *= 2;

1761 
hi
 = -(
lo
 + 1);

1764 
t
 = 
lo
 / 2 + 
hi
 / 2;

1765 i‡(
t
 < 
lo
)

1766 
t
 = 
lo
;

1767 i‡(
t
 > 
hi
)

1768 
t
 = 
hi
;

1769 i‡((*
fun˝
)(&
t
, 
off£t
, &
mytm
, 
•
Ë=
NULL
) {

1775 
dú
 = (
t
 > 0) ? 1 : -1;

1776 } 
dú
 = 
	`tmcomp
(&
mytm
, &
youπm
);

1777 i‡(
dú
 != 0) {

1778 i‡(
t
 =
lo
) {

1779 i‡(
t
 =
TIME_T_MAX
)

1780  
WRONG
;

1781 ++
t
;

1782 ++
lo
;

1783 } i‡(
t
 =
hi
) {

1784 i‡(
t
 =
TIME_T_MIN
)

1785  
WRONG
;

1786 --
t
;

1787 --
hi
;

1789 i‡(
lo
 > 
hi
)

1790  
WRONG
;

1791 i‡(
dú
 > 0)

1792 
hi
 = 
t
;

1793 
lo
 = 
t
;

1796 i‡(
youπm
.
tm_isd°
 < 0 || 
mytm
.tm_isdst == yourtm.tm_isdst)

1807 #ifde‡
ALL_STATE


1808 i‡(
•
 =
NULL
)

1809  
WRONG
;

1811 
i
 = 
•
->
ty≥˙t
 - 1; i >= 0; --i) {

1812 i‡(
•
->
âis
[
i
].
â_isd°
 !
youπm
.
tm_isd°
)

1814 
j
 = 
•
->
ty≥˙t
 - 1; j >= 0; --j) {

1815 i‡(
•
->
âis
[
j
].
â_isd°
 =
youπm
.
tm_isd°
)

1817 
√wt
 = 
t
 + 
•
->
âis
[
j
].
â_gmtoff
 -

1818 
•
->
âis
[
i
].
â_gmtoff
;

1819 i‡((*
fun˝
)(&
√wt
, 
off£t
, &
mytm
, 
•
Ë=
NULL
)

1821 i‡(
	`tmcomp
(&
mytm
, &
youπm
) != 0)

1823 i‡(
mytm
.
tm_isd°
 !
youπm
.tm_isdst)

1828 
t
 = 
√wt
;

1829 
œbñ
;

1832  
WRONG
;

1834 
œbñ
:

1835 
√wt
 = 
t
 + 
ßved_£c⁄ds
;

1836 i‡((
√wt
 < 
t
Ë!(
ßved_£c⁄ds
 < 0))

1837  
WRONG
;

1838 
t
 = 
√wt
;

1839 i‡((*
fun˝
)(&
t
, 
off£t
, 
tmp
, 
•
))

1840 *
okayp
 = 
TRUE
;

1841  
t
;

1842 
	}
}

1844 
time_t


1845 
	$time2
(
tmp
, 
fun˝
, 
off£t
, 
okayp
, 
•
)

1846 
tm
 * c⁄° 
tmp
;

1847 
tm
 * (* c⁄° 
fun˝
Ë
	`P
((c⁄° 
time_t
*, , tm*,

1848 c⁄° 
°©e
* 
•
));

1849 c⁄° 
off£t
;

1850 * c⁄° 
okayp
;

1851 c⁄° 
°©e
 * 
•
;

1853 
time_t
 
t
;

1860 
t
 = 
	`time2sub
(
tmp
, 
fun˝
, 
off£t
, 
okayp
, 
FALSE
, 
•
);

1861  *
okayp
 ? 
t
 : 
	`time2sub
(
tmp
, 
fun˝
, 
off£t
, okayp, 
TRUE
, 
•
);

1862 
	}
}

1864 
time_t


1865 
	$time1
(
tmp
, 
fun˝
, 
off£t
, 
•
)

1866 
tm
 * c⁄° 
tmp
;

1867 
tm
 * (* c⁄° 
fun˝
Ë
	`P
((c⁄° 
time_t
 *, , tm *, c⁄° 
°©e
* 
•
));

1868 c⁄° 
off£t
;

1869 c⁄° 
°©e
 * 
•
;

1871 
time_t
 
t
;

1872 
ßmei
, 
Ÿhîi
;

1873 
ßmeöd
, 
Ÿhîöd
;

1874 
i
;

1875 
n£í
;

1876 
£í
[
TZ_MAX_TYPES
];

1877 
ty≥s
[
TZ_MAX_TYPES
];

1878 
okay
;

1880 i‡(
tmp
->
tm_isd°
 > 1)

1881 
tmp
->
tm_isd°
 = 1;

1882 
t
 = 
	`time2
(
tmp
, 
fun˝
, 
off£t
, &
okay
, 
•
);

1883 
	#PCTS
 1

	)

1884 #ifde‡
PCTS


1888 i‡(
okay
)

1889  
t
;

1890 i‡(
tmp
->
tm_isd°
 < 0)

1891 
tmp
->
tm_isd°
 = 0;

1893 #i‚de‡
PCTS


1894 i‡(
okay
 || 
tmp
->
tm_isd°
 < 0)

1895  
t
;

1906 #ifde‡
ALL_STATE


1907 i‡(
•
 =
NULL
)

1908  
WRONG
;

1910 
i
 = 0; i < 
•
->
ty≥˙t
; ++i)

1911 
£í
[
i
] = 
FALSE
;

1912 
n£í
 = 0;

1913 
i
 = 
•
->
time˙t
 - 1; i >= 0; --i)

1914 i‡(!
£í
[
•
->
ty≥s
[
i
]]) {

1915 
£í
[
•
->
ty≥s
[
i
]] = 
TRUE
;

1916 
ty≥s
[
n£í
++] = 
•
->ty≥s[
i
];

1918 
ßmeöd
 = 0; sameöd < 
n£í
; ++sameind) {

1919 
ßmei
 = 
ty≥s
[
ßmeöd
];

1920 i‡(
•
->
âis
[
ßmei
].
â_isd°
 !
tmp
->
tm_isd°
)

1922 
Ÿhîöd
 = 0; othîöd < 
n£í
; ++otherind) {

1923 
Ÿhîi
 = 
ty≥s
[
Ÿhîöd
];

1924 i‡(
•
->
âis
[
Ÿhîi
].
â_isd°
 =
tmp
->
tm_isd°
)

1926 
tmp
->
tm_£c
 +
•
->
âis
[
Ÿhîi
].
â_gmtoff
 -

1927 
•
->
âis
[
ßmei
].
â_gmtoff
;

1928 
tmp
->
tm_isd°
 = !tmp->tm_isdst;

1929 
t
 = 
	`time2
(
tmp
, 
fun˝
, 
off£t
, &
okay
, 
•
);

1930 i‡(
okay
)

1931  
t
;

1932 
tmp
->
tm_£c
 -
•
->
âis
[
Ÿhîi
].
â_gmtoff
 -

1933 
•
->
âis
[
ßmei
].
â_gmtoff
;

1934 
tmp
->
tm_isd°
 = !tmp->tm_isdst;

1937  
WRONG
;

1938 
	}
}

1941 
time_t


1942 
	$mktime_tz
(
tm
 * c⁄° 
tmp
, c⁄° * 
tz
)

1944 
°©e
 
°
;

1945 i‡(
	`tzlﬂd
(
tz
, &
°
, 
TRUE
) != 0) {

1947 
	`gméﬂd
(&
°
);

1949  
	`time1
(
tmp
, 
loˇlsub
, 0L, &
°
);

1950 
	}
}

	@libs/libcutils/uevent.c

17 
	~<cutûs/uevít.h
>

19 
	~<î∫o.h
>

20 
	~<°dboﬁ.h
>

21 
	~<°rög.h
>

22 
	~<°rögs.h
>

23 
	~<sys/sockë.h
>

24 
	~<sys/un.h
>

25 
	~<uni°d.h
>

27 
	~<löux/√éök.h
>

32 
ssize_t
 
	$uevít_kî√l_mu…iˇ°_ªcv
(
sockë
, *
buf„r
, 
size_t
 
Àngth
)

34 
uid_t
 
u£r
 = -1;

35  
	`uevít_kî√l_mu…iˇ°_uid_ªcv
(
sockë
, 
buf„r
, 
Àngth
, &
u£r
);

36 
	}
}

47 
ssize_t
 
	$uevít_kî√l_mu…iˇ°_uid_ªcv
(
sockë
, *
buf„r
,

48 
size_t
 
Àngth
, 
uid_t
 *
u£r
)

50 
iovec
 
iov
 = { 
buf„r
, 
Àngth
 };

51 
sockaddr_∆
 
addr
;

52 
c⁄åﬁ
[
	`CMSG_SPACE
((
u¸ed
))];

53 
msghdr
 
hdr
 = {

54 &
addr
,

55 (
addr
),

56 &
iov
,

58 
c⁄åﬁ
,

59 (
c⁄åﬁ
),

63 *
u£r
 = -1;

64 
ssize_t
 
n
 = 
	`ªcvmsg
(
sockë
, &
hdr
, 0);

65 i‡(
n
 <= 0) {

66  
n
;

69 
cmsghdr
 *
cmsg
 = 
	`CMSG_FIRSTHDR
(&
hdr
);

70 i‡(
cmsg
 =
NULL
 || cmsg->
cmsg_ty≥
 !
SCM_CREDENTIALS
) {

72 
out
;

75 
u¸ed
 *
¸ed
 = (u¸ed *)
	`CMSG_DATA
(
cmsg
);

76 *
u£r
 = 
¸ed
->
uid
;

77 i‡(
¸ed
->
uid
 != 0) {

79 
out
;

82 i‡(
addr
.
∆_groups
 =0 ||áddr.
∆_pid
 != 0) {

84 
out
;

87  
n
;

89 
out
:

91 
	`bzîo
(
buf„r
, 
Àngth
);

92 
î∫o
 = 
EIO
;

94 
	}
}

96 
	$uevít_›í_sockë
(
buf_sz
, 
boﬁ
 
∑ss¸ed
)

98 
sockaddr_∆
 
addr
;

99 
⁄
 = 
∑ss¸ed
;

100 
s
;

102 
	`mem£t
(&
addr
, 0, (addr));

103 
addr
.
∆_Ámûy
 = 
AF_NETLINK
;

104 
addr
.
∆_pid
 = 
	`gëpid
();

105 
addr
.
∆_groups
 = 0xffffffff;

107 
s
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_DGRAM
, 
NETLINK_KOBJECT_UEVENT
);

108 if(
s
 < 0)

111 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUFFORCE
, &
buf_sz
, (buf_sz));

112 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_PASSCRED
, &
⁄
, (on));

114 if(
	`böd
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

115 
	`˛o£
(
s
);

119  
s
;

120 
	}
}

	@libs/libcutils/uio.c

17 #i‚de‡
HAVE_SYS_UIO_H


19 
	~<cutûs/uio.h
>

20 
	~<uni°d.h
>

22 
	$ªadv
–
fd
, 
iovec
* 
vecs
, 
cou¡
 )

24 
tŸÆ
 = 0;

26  ; 
cou¡
 > 0; cou¡--, 
vecs
++ ) {

27 c⁄° * 
buf
 = 
vecs
->
iov_ba£
;

28 
Àn
 = 
vecs
->
iov_Àn
;

30 
Àn
 > 0) {

31 
ªt
 = 
	`ªad
–
fd
, 
buf
, 
Àn
 );

32 i‡(
ªt
 < 0) {

33 i‡(
tŸÆ
 == 0)

34 
tŸÆ
 = -1;

35 
Exô
;

37 i‡(
ªt
 == 0)

38 
Exô
;

40 
tŸÆ
 +
ªt
;

41 
buf
 +
ªt
;

42 
Àn
 -
ªt
;

45 
Exô
:

46  
tŸÆ
;

47 
	}
}

49 
	$wrôev
–
fd
, c⁄° 
iovec
* 
vecs
, 
cou¡
 )

51 
tŸÆ
 = 0;

53  ; 
cou¡
 > 0; cou¡--, 
vecs
++ ) {

54 c⁄° * 
buf
 = (c⁄° *)
vecs
->
iov_ba£
;

55 
Àn
 = ()
vecs
->
iov_Àn
;

57 
Àn
 > 0) {

58 
ªt
 = 
	`wrôe
–
fd
, 
buf
, 
Àn
 );

59 i‡(
ªt
 < 0) {

60 i‡(
tŸÆ
 == 0)

61 
tŸÆ
 = -1;

62 
Exô
;

64 i‡(
ªt
 == 0)

65 
Exô
;

67 
tŸÆ
 +
ªt
;

68 
buf
 +
ªt
;

69 
Àn
 -
ªt
;

72 
Exô
:

73  
tŸÆ
;

74 
	}
}

	@libs/libcutils/zygote.c

17 
	#LOG_TAG
 "ZygŸe"

	)

19 
	~<cutûs/sockës.h
>

20 
	~<cutûs/zygŸe.h
>

21 
	~<cutûs/log.h
>

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<î∫o.h
>

26 
	~<time.h
>

27 
	~<°döt.h
>

28 
	~<°dlib.h
>

29 
	~<uni°d.h
>

30 
	~<¨∑/öë.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/sockë.h
>

34 
	#ZYGOTE_SOCKET
 "zygŸe"

	)

36 
	#ZYGOTE_RETRY_COUNT
 1000

	)

37 
	#ZYGOTE_RETRY_MILLIS
 500

	)

39 
ª∂a˚_∆
(*
°r
);

45 
	$£nd_ªque°
(
fd
, 
£ndStdio
, 
¨gc
, c⁄° **
¨gv
)

47 #i‚de‡
HAVE_ANDROID_OS


52 
uöt32_t
 
pid
;

53 
i
;

54 
iovec
 
ivs
[2];

55 
msghdr
 
msg
;

56 
¨gc_buf„r
[12];

57 c⁄° *
√wlöe_°rög
 = "\n";

58 
cmsghdr
 *
cmsg
;

59 
msgbuf
[
	`CMSG_SPACE
(() * 3)];

60 *
cmsg_∑ylﬂd
;

61 
ssize_t
 
ªt
;

63 
	`mem£t
(&
msg
, 0, (msg));

64 
	`mem£t
(&
ivs
, 0, (ivs));

67 
	`¢¥ötf
(
¨gc_buf„r
, ◊rgc_buf„r), "%d\n", 
¨gc
);

69 
ivs
[0].
iov_ba£
 = 
¨gc_buf„r
;

70 
ivs
[0].
iov_Àn
 = 
	`°æí
(
¨gc_buf„r
);

72 
msg
.
msg_iov
 = 
ivs
;

73 
msg
.
msg_iovÀn
 = 1;

75 i‡(
£ndStdio
 != 0) {

77 
msg
.
msg_c⁄åﬁ
 = 
msgbuf
;

78 
msg
.
msg_c⁄åﬁÀn
 =  
msgbuf
;

80 
cmsg
 = 
	`CMSG_FIRSTHDR
(&
msg
);

82 
cmsg
->
cmsg_Àn
 = 
	`CMSG_LEN
(3 * ());

83 
cmsg
->
cmsg_Àvñ
 = 
SOL_SOCKET
;

84 
cmsg
->
cmsg_ty≥
 = 
SCM_RIGHTS
;

86 
cmsg_∑ylﬂd
 = (*)
	`CMSG_DATA
(
cmsg
);

87 
cmsg_∑ylﬂd
[0] = 
STDIN_FILENO
;

88 
cmsg_∑ylﬂd
[1] = 
STDOUT_FILENO
;

89 
cmsg_∑ylﬂd
[2] = 
STDERR_FILENO
;

93 
ªt
 = 
	`£ndmsg
(
fd
, &
msg
, 
MSG_NOSIGNAL
);

94 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

96 i‡(
ªt
 < 0) {

101 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

102 
msg
.
msg_c⁄åﬁÀn
 = 0;

105 
i
 = 0; i < 
¨gc
; i++) {

106 *
to‰ì
 = 
NULL
;

107 c⁄° *
t›röt
;

109 
t›röt
 = 
¨gv
[
i
];

111 i‡(
	`°rchr
(
t›röt
, '\n'Ë!
NULL
) {

112 
to‰ì
 = 
	`°rdup
(
t›röt
);

113 
t›röt
 = 
to‰ì
;

114 
	`ª∂a˚_∆
(
to‰ì
);

117 
ivs
[0].
iov_ba£
 = (*)
t›röt
;

118 
ivs
[0].
iov_Àn
 = 
	`°æí
(
t›röt
);

119 
ivs
[1].
iov_ba£
 = (*)
√wlöe_°rög
;

120 
ivs
[1].
iov_Àn
 = 1;

122 
msg
.
msg_iovÀn
 = 2;

125 
ªt
 = 
	`£ndmsg
(
fd
, &
msg
, 
MSG_NOSIGNAL
);

126 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

128 i‡(
to‰ì
 !
NULL
) {

129 
	`‰ì
(
to‰ì
);

132 i‡(
ªt
 < 0) {

139 
ivs
[0].
iov_ba£
 = &
pid
;

140 
ivs
[0].
iov_Àn
 = (
pid
);

141 
msg
.
msg_iovÀn
 = 1;

145 
ªt
 = 
	`ªcvmsg
(
fd
, &
msg
, 
MSG_NOSIGNAL
 | 
MSG_WAITALL
);

146 } 
ªt
 < 0 && 
î∫o
 =
EINTR
);

148 i‡(
ªt
 < 0) {

152 
ivs
[0].
iov_Àn
 -
ªt
;

153 
ivs
[0].
iov_ba£
 +
ªt
;

154 } 
ivs
[0].
iov_Àn
 > 0);

156 
pid
 = 
	`¡ohl
(pid);

158  
pid
;

160 
	}
}

162 
zygŸe_run_waô
(
¨gc
, c⁄° **
¨gv
, (*
po°_run_func
)())

164 
fd
;

165 
pid
;

166 
îr
;

167 c⁄° *
√w¨gv
[
¨gc
 + 1];

169 
fd
 = 
	`sockë_loˇl_˛õ¡
(
ZYGOTE_SOCKET
,

170 
ANDROID_SOCKET_NAMESPACE_RESERVED
, 
AF_LOCAL
);

172 i‡(
fd
 < 0) {

178 
√w¨gv
[0] = "--peer-wait";

179 
	`mem˝y
(
√w¨gv
 + 1, 
¨gv
, 
¨gc
 * (*argv));

181 
pid
 = 
	`£nd_ªque°
(
fd
, 1, 
¨gc
 + 1, 
√w¨gv
);

183 i‡(
pid
 > 0 && 
po°_run_func
 !
NULL
) {

184 
	`po°_run_func
(
pid
);

189 
dummy
;

190 
îr
 = 
	`ªad
(
fd
, &
dummy
, (dummy));

191 } (
îr
 < 0 && 
î∫o
 =
EINTR
) ||Érr != 0);

194 
îr
 = 
	`˛o£
(
fd
);

195 } 
îr
 < 0 && 
î∫o
 =
EINTR
);

198 
	}
}

216 
	$zygŸe_run_⁄eshŸ
(
£ndStdio
, 
¨gc
, c⁄° **
¨gv
)

218 
fd
 = -1;

219 
îr
;

220 
i
;

221 
ªåõs
;

222 
pid
;

223 c⁄° **
√w¨gv
 = 
¨gv
;

224 c⁄° 
√w¨gc
 = 
¨gc
;

226 
ªåõs
 = 0; (
fd
 < 0Ë&& (ªåõ†< 
ZYGOTE_RETRY_COUNT
);Ñetries++) {

227 i‡(
ªåõs
 > 0) {

228 
time•ec
 
ts
;

230 
	`mem£t
(&
ts
, 0, (ts));

231 
ts
.
tv_n£c
 = 
ZYGOTE_RETRY_MILLIS
 * 1000 * 1000;

234 
îr
 = 
	`«no¶ìp
 (&
ts
, &ts);

235 } 
îr
 < 0 && 
î∫o
 =
EINTR
);

237 
fd
 = 
	`sockë_loˇl_˛õ¡
(
ZYGOTE_SOCKET
, 
AF_LOCAL
,

238 
ANDROID_SOCKET_NAMESPACE_RESERVED
);

241 i‡(
fd
 < 0) {

245 
pid
 = 
	`£nd_ªque°
(
fd
, 0, 
√w¨gc
, 
√w¨gv
);

248 
îr
 = 
	`˛o£
(
fd
);

249 } 
îr
 < 0 && 
î∫o
 =
EINTR
);

251  
pid
;

252 
	}
}

257 
	$ª∂a˚_∆
(*
°r
)

259 ; *
°r
; str++) {

260 i‡(*
°r
 == '\n') {

261 *
°r
 = ' ';

264 
	}
}

	@libs/libmincrypt/mincrypt/rsa.h

28 #i‚de‡
_EMBEDDED_RSA_H_


29 
	#_EMBEDDED_RSA_H_


	)

31 
	~<öây≥s.h
>

33 #ifde‡
__˝lu•lus


37 
	#RSANUMBYTES
 256

	)

38 
	#RSANUMWORDS
 (
RSANUMBYTES
 / (
uöt32_t
))

	)

40 
	sRSAPublicKey
 {

41 
Àn
;

42 
uöt32_t
 
n0öv
;

43 
uöt32_t
 
n
[
RSANUMWORDS
];

44 
uöt32_t
 
º
[
RSANUMWORDS
];

45 
exp⁄ít
;

46 } 
	tRSAPublicKey
;

48 
RSA_vîify
(c⁄° 
RSAPublicKey
 *
key
,

49 c⁄° 
uöt8_t
* 
sig«tuª
,

50 c⁄° 
Àn
,

51 c⁄° 
uöt8_t
* 
sha
);

53 #ifde‡
__˝lu•lus


	@libs/libmincrypt/mincrypt/sha.h

28 #i‚de‡
_EMBEDDED_SHA_H_


29 
	#_EMBEDDED_SHA_H_


	)

31 
	~<öây≥s.h
>

33 #ifde‡
__˝lu•lus


37 
	sSHA_CTX
 {

38 
uöt64_t
 
cou¡
;

39 
uöt32_t
 
°©e
[5];

40 #i‡
deföed
(
HAVE_ENDIAN_H
Ë&& deföed(
HAVE_LITTLE_ENDIAN
)

42 
uöt8_t
 
b
[64];

43 
uöt32_t
 
w
[16];

44 } 
buf
;

46 
uöt8_t
 
buf
[64];

48 } 
	tSHA_CTX
;

50 
SHA_öô
(
SHA_CTX
* 
˘x
);

51 
SHA_upd©e
(
SHA_CTX
* 
˘x
, c⁄° * 
d©a
, 
Àn
);

52 c⁄° 
uöt8_t
* 
SHA_föÆ
(
SHA_CTX
* 
˘x
);

55 c⁄° 
uöt8_t
* 
SHA
(c⁄° * 
d©a
, 
Àn
, uöt8_t* 
dige°
);

57 
	#SHA_DIGEST_SIZE
 20

	)

59 #ifde‡
__˝lu•lus


	@libs/libmincrypt/rsa.c

28 
	~"mö¸y±/rß.h
"

30 
RSA_e_f4_vîify
(c⁄° 
RSAPublicKey
* 
key
,

31 c⁄° 
uöt8_t
* 
sig«tuª
,

32 c⁄° 
Àn
,

33 c⁄° 
uöt8_t
* 
sha
);

35 
RSA_e_3_vîify
(c⁄° 
RSAPublicKey
 *
key
,

36 c⁄° 
uöt8_t
 *
sig«tuª
,

37 c⁄° 
Àn
,

38 c⁄° 
uöt8_t
 *
sha
);

40 
	$RSA_vîify
(c⁄° 
RSAPublicKey
 *
key
,

41 c⁄° 
uöt8_t
 *
sig«tuª
,

42 c⁄° 
Àn
,

43 c⁄° 
uöt8_t
 *
sha
) {

44 
key
->
exp⁄ít
) {

46  
	`RSA_e_3_vîify
(
key
, 
sig«tuª
, 
Àn
, 
sha
);

49  
	`RSA_e_f4_vîify
(
key
, 
sig«tuª
, 
Àn
, 
sha
);

54 
	}
}

	@libs/libmincrypt/rsa_e_3.c

28 
	~"mö¸y±/rß.h
"

29 
	~"mö¸y±/sha.h
"

32 
	$subM
(c⁄° 
RSAPublicKey
 *
key
, 
uöt32_t
 *
a
) {

33 
öt64_t
 
A
 = 0;

34 
i
;

35 
i
 = 0; i < 
key
->
Àn
; ++i) {

36 
A
 +(
uöt64_t
)
a
[
i
] - 
key
->
n
[i];

37 
a
[
i
] = (
uöt32_t
)
A
;

38 
A
 >>= 32;

40 
	}
}

43 
	$geM
(c⁄° 
RSAPublicKey
 *
key
, c⁄° 
uöt32_t
 *
a
) {

44 
i
;

45 
i
 = 
key
->
Àn
; i;) {

46 --
i
;

47 i‡(
a
[
i
] < 
key
->
n
[i])  0;

48 i‡(
a
[
i
] > 
key
->
n
[i])  1;

51 
	}
}

54 
	$m⁄tMulAdd
(c⁄° 
RSAPublicKey
 *
key
,

55 
uöt32_t
* 
c
,

56 c⁄° 
uöt32_t
 
a
,

57 c⁄° 
uöt32_t
* 
b
) {

58 
uöt64_t
 
A
 = (uöt64_t)
a
 * 
b
[0] + 
c
[0];

59 
uöt32_t
 
d0
 = (uöt32_t)
A
 * 
key
->
n0öv
;

60 
uöt64_t
 
B
 = (uöt64_t)
d0
 * 
key
->
n
[0] + (
uöt32_t
)
A
;

61 
i
;

63 
i
 = 1; i < 
key
->
Àn
; ++i) {

64 
A
 = (A >> 32Ë+ (
uöt64_t
)
a
 * 
b
[
i
] + 
c
[i];

65 
B
 = (B >> 32Ë+ (
uöt64_t
)
d0
 * 
key
->
n
[
i
] + (
uöt32_t
)
A
;

66 
c
[
i
 - 1] = (
uöt32_t
)
B
;

69 
A
 = (A >> 32Ë+ (
B
 >> 32);

71 
c
[
i
 - 1] = (
uöt32_t
)
A
;

73 i‡(
A
 >> 32) {

74 
	`subM
(
key
, 
c
);

76 
	}
}

79 
	$m⁄tMul
(c⁄° 
RSAPublicKey
 *
key
,

80 
uöt32_t
* 
c
,

81 c⁄° 
uöt32_t
* 
a
,

82 c⁄° 
uöt32_t
* 
b
) {

83 
i
;

84 
i
 = 0; i < 
key
->
Àn
; ++i) {

85 
c
[
i
] = 0;

87 
i
 = 0; i < 
key
->
Àn
; ++i) {

88 
	`m⁄tMulAdd
(
key
, 
c
, 
a
[
i
], 
b
);

90 
	}
}

95 
	$modpow3
(c⁄° 
RSAPublicKey
 *
key
,

96 
uöt8_t
* 
öout
) {

97 
uöt32_t
 
a
[
RSANUMWORDS
];

98 
uöt32_t
 
aR
[
RSANUMWORDS
];

99 
uöt32_t
 
ØR
[
RSANUMWORDS
];

100 
uöt32_t
 *
Øa
 = 
aR
;

101 
i
;

104 
i
 = 0; i < 
key
->
Àn
; ++i) {

105 
uöt32_t
 
tmp
 =

106 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 0] << 24) |

107 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 1] << 16) |

108 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 2] << 8) |

109 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 3] << 0);

110 
a
[
i
] = 
tmp
;

113 
	`m⁄tMul
(
key
, 
aR
, 
a
, key->
º
);

114 
	`m⁄tMul
(
key
, 
ØR
, 
aR
,áR);

115 
	`m⁄tMul
(
key
, 
Øa
, 
ØR
, 
a
);

118 i‡(
	`geM
(
key
, 
Øa
)) {

119 
	`subM
(
key
, 
Øa
);

123 
i
 = 
key
->
Àn
 - 1; i >= 0; --i) {

124 
uöt32_t
 
tmp
 = 
Øa
[
i
];

125 *
öout
++ = 
tmp
 >> 24;

126 *
öout
++ = 
tmp
 >> 16;

127 *
öout
++ = 
tmp
 >> 8;

128 *
öout
++ = 
tmp
 >> 0;

130 
	}
}

137 c⁄° 
uöt8_t
 
	g∑ddög
[
RSANUMBYTES
 - 
SHA_DIGEST_SIZE
] = {

162 
	$RSA_e_3_vîify
(c⁄° 
RSAPublicKey
 *
key
,

163 c⁄° 
uöt8_t
 *
sig«tuª
,

164 c⁄° 
Àn
,

165 c⁄° 
uöt8_t
 *
sha
) {

166 
uöt8_t
 
buf
[
RSANUMBYTES
];

167 
i
;

169 i‡(
key
->
Àn
 !
RSANUMWORDS
) {

173 i‡(
Àn
 !(
buf
)) {

177 i‡(
key
->
exp⁄ít
 != 3) {

181 
i
 = 0; i < 
Àn
; ++i) {

182 
buf
[
i
] = 
sig«tuª
[i];

185 
	`modpow3
(
key
, 
buf
);

188 
i
 = 0; i < (Ë(
∑ddög
); ++i) {

189 i‡(
buf
[
i
] !
∑ddög
[i]) {

195 ; 
i
 < 
Àn
; ++i) {

196 i‡(
buf
[
i
] !*
sha
++) {

202 
	}
}

	@libs/libmincrypt/rsa_e_f4.c

28 
	~"mö¸y±/rß.h
"

29 
	~"mö¸y±/sha.h
"

32 
	$subM
(c⁄° 
RSAPublicKey
* 
key
,

33 
uöt32_t
* 
a
) {

34 
öt64_t
 
A
 = 0;

35 
i
;

36 
i
 = 0; i < 
key
->
Àn
; ++i) {

37 
A
 +(
uöt64_t
)
a
[
i
] - 
key
->
n
[i];

38 
a
[
i
] = (
uöt32_t
)
A
;

39 
A
 >>= 32;

41 
	}
}

44 
	$geM
(c⁄° 
RSAPublicKey
* 
key
,

45 c⁄° 
uöt32_t
* 
a
) {

46 
i
;

47 
i
 = 
key
->
Àn
; i;) {

48 --
i
;

49 i‡(
a
[
i
] < 
key
->
n
[i])  0;

50 i‡(
a
[
i
] > 
key
->
n
[i])  1;

53 
	}
}

56 
	$m⁄tMulAdd
(c⁄° 
RSAPublicKey
* 
key
,

57 
uöt32_t
* 
c
,

58 c⁄° 
uöt32_t
 
a
,

59 c⁄° 
uöt32_t
* 
b
) {

60 
uöt64_t
 
A
 = (uöt64_t)
a
 * 
b
[0] + 
c
[0];

61 
uöt32_t
 
d0
 = (uöt32_t)
A
 * 
key
->
n0öv
;

62 
uöt64_t
 
B
 = (uöt64_t)
d0
 * 
key
->
n
[0] + (
uöt32_t
)
A
;

63 
i
;

65 
i
 = 1; i < 
key
->
Àn
; ++i) {

66 
A
 = (A >> 32Ë+ (
uöt64_t
)
a
 * 
b
[
i
] + 
c
[i];

67 
B
 = (B >> 32Ë+ (
uöt64_t
)
d0
 * 
key
->
n
[
i
] + (
uöt32_t
)
A
;

68 
c
[
i
 - 1] = (
uöt32_t
)
B
;

71 
A
 = (A >> 32Ë+ (
B
 >> 32);

73 
c
[
i
 - 1] = (
uöt32_t
)
A
;

75 i‡(
A
 >> 32) {

76 
	`subM
(
key
, 
c
);

78 
	}
}

81 
	$m⁄tMul
(c⁄° 
RSAPublicKey
* 
key
,

82 
uöt32_t
* 
c
,

83 c⁄° 
uöt32_t
* 
a
,

84 c⁄° 
uöt32_t
* 
b
) {

85 
i
;

86 
i
 = 0; i < 
key
->
Àn
; ++i) {

87 
c
[
i
] = 0;

89 
i
 = 0; i < 
key
->
Àn
; ++i) {

90 
	`m⁄tMulAdd
(
key
, 
c
, 
a
[
i
], 
b
);

92 
	}
}

96 
	$modpowF4
(c⁄° 
RSAPublicKey
* 
key
,

97 
uöt8_t
* 
öout
) {

98 
uöt32_t
 
a
[
RSANUMWORDS
];

99 
uöt32_t
 
aR
[
RSANUMWORDS
];

100 
uöt32_t
 
ØR
[
RSANUMWORDS
];

101 
uöt32_t
* 
Øa
 = 
ØR
;

102 
i
;

105 
i
 = 0; i < 
key
->
Àn
; ++i) {

106 
uöt32_t
 
tmp
 =

107 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 0] << 24) |

108 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 1] << 16) |

109 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 2] << 8) |

110 (
öout
[((
key
->
Àn
 - 1 - 
i
) * 4) + 3] << 0);

111 
a
[
i
] = 
tmp
;

114 
	`m⁄tMul
(
key
, 
aR
, 
a
, key->
º
);

115 
i
 = 0; i < 16; i += 2) {

116 
	`m⁄tMul
(
key
, 
ØR
, 
aR
,áR);

117 
	`m⁄tMul
(
key
, 
aR
, 
ØR
,áaR);

119 
	`m⁄tMul
(
key
, 
Øa
, 
aR
, 
a
);

122 i‡(
	`geM
(
key
, 
Øa
)) {

123 
	`subM
(
key
, 
Øa
);

127 
i
 = 
key
->
Àn
 - 1; i >= 0; --i) {

128 
uöt32_t
 
tmp
 = 
Øa
[
i
];

129 *
öout
++ = 
tmp
 >> 24;

130 *
öout
++ = 
tmp
 >> 16;

131 *
öout
++ = 
tmp
 >> 8;

132 *
öout
++ = 
tmp
 >> 0;

134 
	}
}

148 c⁄° 
uöt8_t
 
	gkEx≥˘edPadShaRß2048
[
SHA_DIGEST_SIZE
] = {

155 
	$RSA_e_f4_vîify
(c⁄° 
RSAPublicKey
* 
key
,

156 c⁄° 
uöt8_t
* 
sig«tuª
,

157 c⁄° 
Àn
,

158 c⁄° 
uöt8_t
* 
sha
) {

159 
uöt8_t
 
buf
[
RSANUMBYTES
];

160 
i
;

162 i‡(
key
->
Àn
 !
RSANUMWORDS
) {

166 i‡(
Àn
 !(
buf
)) {

170 i‡(
key
->
exp⁄ít
 != 65537) {

174 
i
 = 0; i < 
Àn
; ++i) {

175 
buf
[
i
] = 
sig«tuª
[i];

178 
	`modpowF4
(
key
, 
buf
);

181 
i
 = 
Àn
 - 
SHA_DIGEST_SIZE
; i <Üen; ++i) {

182 
buf
[
i
] ^*
sha
++;

186 
	`SHA
(
buf
, 
Àn
, buf);

189 
i
 = 0; i < 
SHA_DIGEST_SIZE
; ++i) {

190 i‡(
buf
[
i
] !
kEx≥˘edPadShaRß2048
[i]) {

196 
	}
}

	@libs/libmincrypt/sha.c

28 
	~"mö¸y±/sha.h
"

33 #i‡
deföed
(
HAVE_ENDIAN_H
Ë&& deföed(
HAVE_LITTLE_ENDIAN
)

35 
	~<byãsw≠.h
>

36 
	~<mem‹y.h
>

41 
ölöe
 
uöt32_t
 
	$r‹27
(
uöt32_t
 
vÆ
) {

42  (
vÆ
 >> 27) | (val << 5);

43 
	}
}

44 
ölöe
 
uöt32_t
 
	$r‹2
(
uöt32_t
 
vÆ
) {

45  (
vÆ
 >> 2) | (val << 30);

46 
	}
}

47 
ölöe
 
uöt32_t
 
	$r‹31
(
uöt32_t
 
vÆ
) {

48  (
vÆ
 >> 31) | (val << 1);

49 
	}
}

51 
	$SHA1_Tønsf‹m
(
SHA_CTX
* 
˘x
) {

52 
uöt32_t
 
W
[80];

53 
uöt32_t
 
A
, 
B
, 
C
, 
D
, 
E
;

54 
t
;

56 
A
 = 
˘x
->
°©e
[0];

57 
B
 = 
˘x
->
°©e
[1];

58 
C
 = 
˘x
->
°©e
[2];

59 
D
 = 
˘x
->
°©e
[3];

60 
E
 = 
˘x
->
°©e
[4];

62 
	#SHA_F1
(
A
,
B
,
C
,
D
,
E
,
t
) \

63 
E
 +
	`r‹27
(
A
) + \

64 (
W
[
t
] = 
	`bsw≠_32
(
˘x
->
buf
.
w
[t])) + \

65 (
D
^(
B
&(
C
^D))) + 0x5A827999; \

66 
B
 = 
	`r‹2
(B);

	)

68 
t
 = 0;Å < 15;Å += 5) {

69 
	`SHA_F1
(
A
,
B
,
C
,
D
,
E
,
t
 + 0);

70 
	`SHA_F1
(
E
,
A
,
B
,
C
,
D
,
t
 + 1);

71 
	`SHA_F1
(
D
,
E
,
A
,
B
,
C
,
t
 + 2);

72 
	`SHA_F1
(
C
,
D
,
E
,
A
,
B
,
t
 + 3);

73 
	`SHA_F1
(
B
,
C
,
D
,
E
,
A
,
t
 + 4);

75 
	`SHA_F1
(
A
,
B
,
C
,
D
,
E
,
t
 + 0);

77 #unde‡
SHA_F1


79 
	#SHA_F1
(
A
,
B
,
C
,
D
,
E
,
t
) \

80 
E
 +
	`r‹27
(
A
) + \

81 (
W
[
t
] = 
	`r‹31
(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16])) + \

82 (
D
^(
B
&(
C
^D))) + 0x5A827999; \

83 
B
 = 
	`r‹2
(B);

	)

85 
	`SHA_F1
(
E
,
A
,
B
,
C
,
D
,
t
 + 1);

86 
	`SHA_F1
(
D
,
E
,
A
,
B
,
C
,
t
 + 2);

87 
	`SHA_F1
(
C
,
D
,
E
,
A
,
B
,
t
 + 3);

88 
	`SHA_F1
(
B
,
C
,
D
,
E
,
A
,
t
 + 4);

90 #unde‡
SHA_F1


92 
	#SHA_F2
(
A
,
B
,
C
,
D
,
E
,
t
) \

93 
E
 +
	`r‹27
(
A
) + \

94 (
W
[
t
] = 
	`r‹31
(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16])) + \

95 (
B
^
C
^
D
) + 0x6ED9EBA1; \

96 
B
 = 
	`r‹2
(B);

	)

98 
t
 = 20;Å < 40;Å += 5) {

99 
	`SHA_F2
(
A
,
B
,
C
,
D
,
E
,
t
 + 0);

100 
	`SHA_F2
(
E
,
A
,
B
,
C
,
D
,
t
 + 1);

101 
	`SHA_F2
(
D
,
E
,
A
,
B
,
C
,
t
 + 2);

102 
	`SHA_F2
(
C
,
D
,
E
,
A
,
B
,
t
 + 3);

103 
	`SHA_F2
(
B
,
C
,
D
,
E
,
A
,
t
 + 4);

106 #unde‡
SHA_F2


108 
	#SHA_F3
(
A
,
B
,
C
,
D
,
E
,
t
) \

109 
E
 +
	`r‹27
(
A
) + \

110 (
W
[
t
] = 
	`r‹31
(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16])) + \

111 ((
B
&
C
)|(
D
&(B|C))) + 0x8F1BBCDC; \

112 
B
 = 
	`r‹2
(B);

	)

114 ; 
t
 < 60;Å += 5) {

115 
	`SHA_F3
(
A
,
B
,
C
,
D
,
E
,
t
 + 0);

116 
	`SHA_F3
(
E
,
A
,
B
,
C
,
D
,
t
 + 1);

117 
	`SHA_F3
(
D
,
E
,
A
,
B
,
C
,
t
 + 2);

118 
	`SHA_F3
(
C
,
D
,
E
,
A
,
B
,
t
 + 3);

119 
	`SHA_F3
(
B
,
C
,
D
,
E
,
A
,
t
 + 4);

122 #unde‡
SHA_F3


124 
	#SHA_F4
(
A
,
B
,
C
,
D
,
E
,
t
) \

125 
E
 +
	`r‹27
(
A
) + \

126 (
W
[
t
] = 
	`r‹31
(W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16])) + \

127 (
B
^
C
^
D
) + 0xCA62C1D6; \

128 
B
 = 
	`r‹2
(B);

	)

130 ; 
t
 < 80;Å += 5) {

131 
	`SHA_F4
(
A
,
B
,
C
,
D
,
E
,
t
 + 0);

132 
	`SHA_F4
(
E
,
A
,
B
,
C
,
D
,
t
 + 1);

133 
	`SHA_F4
(
D
,
E
,
A
,
B
,
C
,
t
 + 2);

134 
	`SHA_F4
(
C
,
D
,
E
,
A
,
B
,
t
 + 3);

135 
	`SHA_F4
(
B
,
C
,
D
,
E
,
A
,
t
 + 4);

138 #unde‡
SHA_F4


140 
˘x
->
°©e
[0] +
A
;

141 
˘x
->
°©e
[1] +
B
;

142 
˘x
->
°©e
[2] +
C
;

143 
˘x
->
°©e
[3] +
D
;

144 
˘x
->
°©e
[4] +
E
;

145 
	}
}

147 
	$SHA_upd©e
(
SHA_CTX
* 
˘x
, c⁄° * 
d©a
, 
Àn
) {

148 
i
 = 
˘x
->
cou¡
 % (˘x->
buf
);

149 c⁄° 
uöt8_t
* 
p
 = (c⁄° uöt8_t*)
d©a
;

151 
˘x
->
cou¡
 +
Àn
;

153 
Àn
 > (
˘x
->
buf
Ë- 
i
) {

154 
	`mem˝y
(&
˘x
->
buf
.
b
[
i
], 
p
, (ctx->buf) - i);

155 
Àn
 -(
˘x
->
buf
Ë- 
i
;

156 
p
 +(
˘x
->
buf
Ë- 
i
;

157 
	`SHA1_Tønsf‹m
(
˘x
);

158 
i
 = 0;

161 
Àn
--) {

162 
˘x
->
buf
.
b
[
i
++] = *
p
++;

163 i‡(
i
 =(
˘x
->
buf
)) {

164 
	`SHA1_Tønsf‹m
(
˘x
);

165 
i
 = 0;

168 
	}
}

171 c⁄° 
uöt8_t
* 
	$SHA_föÆ
(
SHA_CTX
* 
˘x
) {

172 
uöt64_t
 
˙t
 = 
˘x
->
cou¡
 * 8;

173 
i
;

175 
	`SHA_upd©e
(
˘x
, (
uöt8_t
*)"\x80", 1);

176 (
˘x
->
cou¡
 % (˘x->
buf
)) != ((ctx->buf) - 8)) {

177 
	`SHA_upd©e
(
˘x
, (
uöt8_t
*)"\0", 1);

179 
i
 = 0; i < 8; ++i) {

180 
uöt8_t
 
tmp
 = 
˙t
 >> ((7 - 
i
) * 8);

181 
	`SHA_upd©e
(
˘x
, &
tmp
, 1);

184 
i
 = 0; i < 5; i++) {

185 
˘x
->
buf
.
w
[
i
] = 
	`bsw≠_32
(˘x->
°©e
[i]);

188  
˘x
->
buf
.
b
;

189 
	}
}

193 
	#rﬁ
(
bôs
, 
vÆue
Ë(((vÆueË<< (bôs)Ë| ((vÆueË>> (32 - (bôs))))

	)

195 
	$SHA1_å™sf‹m
(
SHA_CTX
 *
˘x
) {

196 
uöt32_t
 
W
[80];

197 
uöt32_t
 
A
, 
B
, 
C
, 
D
, 
E
;

198 
uöt8_t
 *
p
 = 
˘x
->
buf
;

199 
t
;

201 
t
 = 0;Å < 16; ++t) {

202 
uöt32_t
 
tmp
 = *
p
++ << 24;

203 
tmp
 |*
p
++ << 16;

204 
tmp
 |*
p
++ << 8;

205 
tmp
 |*
p
++;

206 
W
[
t
] = 
tmp
;

209 ; 
t
 < 80;Å++) {

210 
W
[
t
] = 
	`rﬁ
(1,W[t-3] ^ W[t-8] ^ W[t-14] ^ W[t-16]);

213 
A
 = 
˘x
->
°©e
[0];

214 
B
 = 
˘x
->
°©e
[1];

215 
C
 = 
˘x
->
°©e
[2];

216 
D
 = 
˘x
->
°©e
[3];

217 
E
 = 
˘x
->
°©e
[4];

219 
t
 = 0;Å < 80;Å++) {

220 
uöt32_t
 
tmp
 = 
	`rﬁ
(5,
A
Ë+ 
E
 + 
W
[
t
];

222 i‡(
t
 < 20)

223 
tmp
 +(
D
^(
B
&(
C
^D))) + 0x5A827999;

224 i‡–
t
 < 40)

225 
tmp
 +(
B
^
C
^
D
) + 0x6ED9EBA1;

226 i‡–
t
 < 60)

227 
tmp
 +((
B
&
C
)|(
D
&(B|C))) + 0x8F1BBCDC;

229 
tmp
 +(
B
^
C
^
D
) + 0xCA62C1D6;

231 
E
 = 
D
;

232 
D
 = 
C
;

233 
C
 = 
	`rﬁ
(30,
B
);

234 
B
 = 
A
;

235 
A
 = 
tmp
;

238 
˘x
->
°©e
[0] +
A
;

239 
˘x
->
°©e
[1] +
B
;

240 
˘x
->
°©e
[2] +
C
;

241 
˘x
->
°©e
[3] +
D
;

242 
˘x
->
°©e
[4] +
E
;

243 
	}
}

245 
	$SHA_upd©e
(
SHA_CTX
 *
˘x
, c⁄° *
d©a
, 
Àn
) {

246 
i
 = 
˘x
->
cou¡
 % (˘x->
buf
);

247 c⁄° 
uöt8_t
* 
p
 = (c⁄° uöt8_t*)
d©a
;

249 
˘x
->
cou¡
 +
Àn
;

251 
Àn
--) {

252 
˘x
->
buf
[
i
++] = *
p
++;

253 i‡(
i
 =(
˘x
->
buf
)) {

254 
	`SHA1_å™sf‹m
(
˘x
);

255 
i
 = 0;

258 
	}
}

259 c⁄° 
uöt8_t
 *
	$SHA_föÆ
(
SHA_CTX
 *
˘x
) {

260 
uöt8_t
 *
p
 = 
˘x
->
buf
;

261 
uöt64_t
 
˙t
 = 
˘x
->
cou¡
 * 8;

262 
i
;

264 
	`SHA_upd©e
(
˘x
, (
uöt8_t
*)"\x80", 1);

265 (
˘x
->
cou¡
 % (˘x->
buf
)) != ((ctx->buf) - 8)) {

266 
	`SHA_upd©e
(
˘x
, (
uöt8_t
*)"\0", 1);

268 
i
 = 0; i < 8; ++i) {

269 
uöt8_t
 
tmp
 = 
˙t
 >> ((7 - 
i
) * 8);

270 
	`SHA_upd©e
(
˘x
, &
tmp
, 1);

273 
i
 = 0; i < 5; i++) {

274 
uöt32_t
 
tmp
 = 
˘x
->
°©e
[
i
];

275 *
p
++ = 
tmp
 >> 24;

276 *
p
++ = 
tmp
 >> 16;

277 *
p
++ = 
tmp
 >> 8;

278 *
p
++ = 
tmp
 >> 0;

281  
˘x
->
buf
;

282 
	}
}

286 
	$SHA_öô
(
SHA_CTX
* 
˘x
) {

287 
˘x
->
°©e
[0] = 0x67452301;

288 
˘x
->
°©e
[1] = 0xEFCDAB89;

289 
˘x
->
°©e
[2] = 0x98BADCFE;

290 
˘x
->
°©e
[3] = 0x10325476;

291 
˘x
->
°©e
[4] = 0xC3D2E1F0;

292 
˘x
->
cou¡
 = 0;

293 
	}
}

296 c⁄° 
uöt8_t
* 
	$SHA
(c⁄° *
d©a
, 
Àn
, 
uöt8_t
 *
dige°
) {

297 c⁄° 
uöt8_t
 *
p
;

298 
i
;

299 
SHA_CTX
 
˘x
;

300 
	`SHA_öô
(&
˘x
);

301 
	`SHA_upd©e
(&
˘x
, 
d©a
, 
Àn
);

302 
p
 = 
	`SHA_föÆ
(&
˘x
);

303 
i
 = 0; i < 
SHA_DIGEST_SIZE
; ++i) {

304 
dige°
[
i
] = *
p
++;

306  
dige°
;

307 
	}
}

	@libs/libmincrypt/tools/DumpPublicKey.java

17 
∑ckage
 
	gcom
.
	g™droid
.
	gdumpkey
;

19 
imp‹t
 
	gjava
.
	gio
.
	gFûeI≈utSåóm
;

20 
imp‹t
 
	gjava
.
	gm©h
.
	gBigI¡egî
;

21 
imp‹t
 
	gjava
.
	g£curôy
.
	g˚π
.
	gCîtifiˇãFa˘‹y
;

22 
imp‹t
 
	gjava
.
	g£curôy
.
	g˚π
.
	gCîtifiˇã
;

23 
imp‹t
 
	gjava
.
	g£curôy
.
	gKeySt‹e
;

24 
imp‹t
 
	gjava
.
	g£curôy
.
	gKey
;

25 
imp‹t
 
	gjava
.
	g£curôy
.
	gPublicKey
;

26 
imp‹t
 
	gjava
.
	g£curôy
.
	göãrÁ˚s
.
	gRSAPublicKey
;

33 ˛as†
	cDumpPublicKey
 {

42 
	$check
(
RSAPublicKey
 
key
Ë
throws
 
Ex˚±i⁄
 {

43 
BigI¡egî
 
pubexp
 = 
key
.
	`gëPublicExp⁄ít
();

44 
BigI¡egî
 
modulus
 = 
key
.
	`gëModulus
();

45 
vîsi⁄
;

47 i‡(
pubexp
.
	`equÆs
(
BigI¡egî
.
	`vÆueOf
(3))) {

48 
vîsi⁄
 = 1;

49 } i‡(
pubexp
.
	`equÆs
(
BigI¡egî
.
	`vÆueOf
(65537))) {

50 
vîsi⁄
 = 2;

52 
throw
 
√w
 
	`Ex˚±i⁄
("PublicÉxponent should be 3 or 65537 but is " +

53 
pubexp
.
	`toSåög
(10) + ".");

56 i‡(
modulus
.
	`bôLígth
() != 2048) {

57 
throw
 
√w
 
	`Ex˚±i⁄
("Modulus should be 2048 bitsÜong but is " +

58 
modulus
.
	`bôLígth
() + " bits.");

61  
vîsi⁄
;

70 
Såög
 
	$¥öt
(
RSAPublicKey
 
key
Ë
throws
 
Ex˚±i⁄
 {

71 
vîsi⁄
 = 
	`check
(
key
);

73 
BigI¡egî
 
N
 = 
key
.
	`gëModulus
();

75 
SåögBuûdî
 
ªsu…
 = 
√w
 
	`SåögBuûdî
();

77 
nw‹ds
 = 
N
.
	`bôLígth
() / 32;

79 i‡(
vîsi⁄
 > 1) {

80 
ªsu…
.
	`≠≥nd
("v");

81 
ªsu…
.
	`≠≥nd
(
I¡egî
.
	`toSåög
(
vîsi⁄
));

82 
ªsu…
.
	`≠≥nd
(" ");

85 
ªsu…
.
	`≠≥nd
("{");

86 
ªsu…
.
	`≠≥nd
(
nw‹ds
);

88 
BigI¡egî
 
B
 = BigI¡egî.
	`vÆueOf
(0x100000000L);

89 
BigI¡egî
 
N0öv
 = 
B
.
	`subåa˘
(
N
.
	`modInvî£
(B));

91 
ªsu…
.
	`≠≥nd
(",0x");

92 
ªsu…
.
	`≠≥nd
(
N0öv
.
	`toSåög
(16));

94 
BigI¡egî
 
R
 = BigI¡egî.
	`vÆueOf
(2).
	`pow
(
N
.
	`bôLígth
());

95 
BigI¡egî
 
RR
 = 
R
.
	`mu…ùly
(R).
	`mod
(
N
);

98 
ªsu…
.
	`≠≥nd
(",{");

99 
i
 = 0; i < 
nw‹ds
; ++i) {

100 
n
 = 
N
.
	`mod
(
B
).
	`l⁄gVÆue
();

101 
ªsu…
.
	`≠≥nd
(
n
);

103 i‡(
i
 !
nw‹ds
 - 1) {

104 
ªsu…
.
	`≠≥nd
(",");

107 
N
 = N.
	`divide
(
B
);

109 
ªsu…
.
	`≠≥nd
("}");

112 
ªsu…
.
	`≠≥nd
(",{");

113 
i
 = 0; i < 
nw‹ds
; ++i) {

114 
º
 = 
RR
.
	`mod
(
B
).
	`l⁄gVÆue
();

115 
ªsu…
.
	`≠≥nd
(
º
);

117 i‡(
i
 !
nw‹ds
 - 1) {

118 
ªsu…
.
	`≠≥nd
(",");

121 
RR
 = RR.
	`divide
(
B
);

123 
ªsu…
.
	`≠≥nd
("}");

125 
ªsu…
.
	`≠≥nd
("}");

126  
ªsu…
.
	`toSåög
();

127 
	}
}

129 
public
 
	$maö
(
Såög
[] 
¨gs
) {

130 i‡(
¨gs
.
Àngth
 < 1) {

131 
Sy°em
.
îr
.
	`¥öén
("Usage: DumpPublicKey certfile ... > source.c");

132 
Sy°em
.
	`exô
(1);

134 
åy
 {

135 
i
 = 0; i < 
¨gs
.
Àngth
; i++) {

136 
FûeI≈utSåóm
 
öput
 = 
√w
 
	`FûeI≈utSåóm
(
¨gs
[
i
]);

137 
CîtifiˇãFa˘‹y
 
cf
 = CîtifiˇãFa˘‹y.
	`gëIn°™˚
("X.509");

138 
Cîtifiˇã
 
˚π
 = 
cf
.
	`gíî©eCîtifiˇã
(
öput
);

139 
RSAPublicKey
 
key
 = (RSAPublicKeyË(
˚π
.
	`gëPublicKey
());

140 
	`check
(
key
);

141 
Sy°em
.
out
.
	`¥öt
’röt(
key
));

142 
Sy°em
.
out
.
	`¥öén
(
i
 < 
¨gs
.
Àngth
 - 1 ? "," : "");

144 } 
	`ˇtch
 (
Ex˚±i⁄
 
e
) {

145 
e
.
	`¥ötSèckTø˚
();

146 
Sy°em
.
	`exô
(1);

148 
Sy°em
.
	`exô
(0);

149 
	}
}

	@log_service.c

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<uni°d.h
>

21 
	~<°rög.h
>

22 
	~<f˙é.h
>

23 
	~<î∫o.h
>

24 
	~<sys/sockë.h
>

25 
	~<cutûs/loggî.h
>

26 
	~"sysdïs.h
"

27 
	~"adb.h
"

29 
	#LOG_FILE_DIR
 "/dev/log/"

	)

31 
wrôe_log_íåy
(
fd
, 
loggî_íåy
 *
buf
);

33 
	$log_£rvi˚
(
fd
, *
cookõ
)

36 * 
log_fûï©h
 = 
cookõ
;

39 
logfd
 = 
	`unix_›í
(
log_fûï©h
, 
O_RDONLY
);

40 i‡(
logfd
 < 0) {

41 
d⁄e
;

45 
buf
[
LOGGER_ENTRY_MAX_LEN
 + 1] 
	`__©åibuã__
((
	`Æig√d
(4)));

46 
loggî_íåy
 *
íåy
 = (loggî_íåy *Ë
buf
;

49 
ªt
;

51 
ªt
 = 
	`unix_ªad
(
logfd
, 
íåy
, 
LOGGER_ENTRY_MAX_LEN
);

52 i‡(
ªt
 < 0) {

53 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

56 
d⁄e
;

58 i‡(!
ªt
) {

60 
d⁄e
;

65 
íåy
->
msg
[íåy->
Àn
] = '\0';

67 
	`wrôe_log_íåy
(
fd
, 
íåy
);

70 
d⁄e
:

71 
	`unix_˛o£
(
fd
);

72 
	`‰ì
(
log_fûï©h
);

73 
	}
}

76 * 
	$gë_log_fûe_∑th
(c⁄° * 
log_«me
) {

77 *
log_devi˚
 = 
	`mÆloc
(
	`°æí
(
LOG_FILE_DIR
Ë+ såÀn(
log_«me
) + 1);

79 
	`°r˝y
(
log_devi˚
, 
LOG_FILE_DIR
);

80 
	`°rˇt
(
log_devi˚
, 
log_«me
);

82  
log_devi˚
;

83 
	}
}

87 
	$wrôe_log_íåy
(
fd
, 
loggî_íåy
 *
buf
)

89 
size_t
 
size
 = (
loggî_íåy
Ë+ 
buf
->
Àn
;

91 
	`wrôex
(
fd
, 
buf
, 
size
);

92 
	}
}

	@mutex_list.h

6 #i‚de‡
ADB_MUTEX


7 #îr‹ 
ADB_MUTEX
 
nŸ
 
deföed
 
whí
 
ö˛udög
 
this
 
fûe


9 
	$ADB_MUTEX
(
dns_lock
)

10 
	$ADB_MUTEX
(
sockë_li°_lock
)

11 
	$ADB_MUTEX
(
å™•‹t_lock
)

12 #i‡
ADB_HOST


13 
	$ADB_MUTEX
(
loˇl_å™•‹ts_lock
)

15 
	$ADB_MUTEX
(
usb_lock
)

24 
	$ADB_MUTEX
(
D_lock
)

26 #unde‡
ADB_MUTEX


	@private/android_filesystem_config.h

22 #i‚de‡
_ANDROID_FILESYSTEM_CONFIG_H_


23 
	#_ANDROID_FILESYSTEM_CONFIG_H_


	)

25 
	~<°rög.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/ty≥s.h
>

33 
	#AID_ROOT
 0

	)

35 
	#AID_SYSTEM
 1000

	)

37 
	#AID_RADIO
 1001

	)

38 
	#AID_BLUETOOTH
 1002

	)

39 
	#AID_GRAPHICS
 1003

	)

40 
	#AID_INPUT
 1004

	)

41 
	#AID_AUDIO
 1005

	)

42 
	#AID_CAMERA
 1006

	)

43 
	#AID_LOG
 1007

	)

44 
	#AID_COMPASS
 1008

	)

45 
	#AID_MOUNT
 1009

	)

46 
	#AID_WIFI
 1010

	)

47 
	#AID_ADB
 1011

	)

48 
	#AID_INSTALL
 1012

	)

49 
	#AID_MEDIA
 1013

	)

50 
	#AID_DHCP
 1014

	)

51 
	#AID_SDCARD_RW
 1015

	)

52 
	#AID_VPN
 1016

	)

53 
	#AID_KEYSTORE
 1017

	)

54 
	#AID_USB
 1018

	)

55 
	#AID_DRM
 1019

	)

56 
	#AID_MDNSR
 1020

	)

57 
	#AID_GPS
 1021

	)

58 
	#AID_UNUSED1
 1022

	)

59 
	#AID_MEDIA_RW
 1023

	)

60 
	#AID_MTP
 1024

	)

61 
	#AID_UNUSED2
 1025

	)

62 
	#AID_DRMRPC
 1026

	)

63 
	#AID_NFC
 1027

	)

64 
	#AID_SDCARD_R
 1028

	)

66 
	#AID_SHELL
 2000

	)

67 
	#AID_CACHE
 2001

	)

68 
	#AID_DIAG
 2002

	)

72 
	#AID_NET_BT_ADMIN
 3001

	)

73 
	#AID_NET_BT
 3002

	)

74 
	#AID_INET
 3003

	)

75 
	#AID_NET_RAW
 3004

	)

76 
	#AID_NET_ADMIN
 3005

	)

77 
	#AID_NET_BW_STATS
 3006

	)

78 
	#AID_NET_BW_ACCT
 3007

	)

79 
	#AID_NET_BT_STACK
 3008

	)

81 
	#AID_MISC
 9998

	)

82 
	#AID_NOBODY
 9999

	)

84 
	#AID_APP
 10000

	)

86 
	#AID_ISOLATED_START
 99000

	)

87 
	#AID_ISOLATED_END
 99999

	)

89 
	#AID_USER
 100000

	)

91 
	#AID_SHARED_GID_START
 50000

	)

92 
	#AID_SHARED_GID_END
 59999

	)

94 #i‡!
deföed
(
EXCLUDE_FS_CONFIG_STRUCTURES
)

95 
	s™droid_id_öfo
 {

96 c⁄° *
	m«me
;

97 
	maid
;

100 c⁄° 
™droid_id_öfo
 
	g™droid_ids
[] = {

101 { "roŸ", 
AID_ROOT
, },

102 { "sy°em", 
AID_SYSTEM
, },

103 { "ødio", 
AID_RADIO
, },

104 { "bluëoŸh", 
AID_BLUETOOTH
, },

105 { "gøphics", 
AID_GRAPHICS
, },

106 { "öput", 
AID_INPUT
, },

107 { "audio", 
AID_AUDIO
, },

108 { "ˇmîa", 
AID_CAMERA
, },

109 { "log", 
AID_LOG
, },

110 { "com∑ss", 
AID_COMPASS
, },

111 { "mou¡", 
AID_MOUNT
, },

112 { "wifi", 
AID_WIFI
, },

113 { "dh˝", 
AID_DHCP
, },

114 { "adb", 
AID_ADB
, },

115 { "ö°Æl", 
AID_INSTALL
, },

116 { "medü", 
AID_MEDIA
, },

117 { "drm", 
AID_DRM
, },

118 { "mdn§", 
AID_MDNSR
, },

119 { "nfc", 
AID_NFC
, },

120 { "drmΩc", 
AID_DRMRPC
, },

121 { "shñl", 
AID_SHELL
, },

122 { "ˇche", 
AID_CACHE
, },

123 { "düg", 
AID_DIAG
, },

124 { "√t_bt_admö", 
AID_NET_BT_ADMIN
, },

125 { "√t_bt", 
AID_NET_BT
, },

126 { "√t_bt_°ack", 
AID_NET_BT_STACK
, },

127 { "sdˇrd_r", 
AID_SDCARD_R
, },

128 { "sdˇrd_rw", 
AID_SDCARD_RW
, },

129 { "medü_rw", 
AID_MEDIA_RW
, },

130 { "v≤", 
AID_VPN
, },

131 { "key°‹e", 
AID_KEYSTORE
, },

132 { "usb", 
AID_USB
, },

133 { "mç", 
AID_MTP
, },

134 { "gps", 
AID_GPS
, },

135 { "öë", 
AID_INET
, },

136 { "√t_øw", 
AID_NET_RAW
, },

137 { "√t_admö", 
AID_NET_ADMIN
, },

138 { "√t_bw_°©s", 
AID_NET_BW_STATS
, },

139 { "√t_bw_ac˘", 
AID_NET_BW_ACCT
, },

140 { "misc", 
AID_MISC
, },

141 { "nobody", 
AID_NOBODY
, },

144 
	#™droid_id_cou¡
 \

145 ((
™droid_ids
Ë/ ◊ndroid_ids[0]))

	)

147 
	sfs_∑th_c⁄fig
 {

148 
	mmode
;

149 
	muid
;

150 
	mgid
;

151 c⁄° *
	m¥efix
;

160 
fs_∑th_c⁄fig
 
	g™droid_dús
[] = {

161 { 00770, 
AID_SYSTEM
, 
AID_CACHE
, "cache" },

162 { 00771, 
AID_SYSTEM
, AID_SYSTEM, "data/app" },

163 { 00771, 
AID_SYSTEM
, AID_SYSTEM, "data/app-private" },

164 { 00771, 
AID_SYSTEM
, AID_SYSTEM, "data/dalvik-cache" },

165 { 00771, 
AID_SYSTEM
, AID_SYSTEM, "data/data" },

166 { 00771, 
AID_SHELL
, AID_SHELL, "data/local/tmp" },

167 { 00771, 
AID_SHELL
, AID_SHELL, "data/local" },

168 { 01771, 
AID_SYSTEM
, 
AID_MISC
, "data/misc" },

169 { 00770, 
AID_DHCP
, AID_DHCP, "data/misc/dhcp" },

170 { 00775, 
AID_MEDIA_RW
, AID_MEDIA_RW, "data/media" },

171 { 00775, 
AID_MEDIA_RW
, AID_MEDIA_RW, "data/media/Music" },

172 { 00771, 
AID_SYSTEM
, AID_SYSTEM, "data" },

173 { 00750, 
AID_ROOT
, 
AID_SHELL
, "sbin" },

174 { 00755, 
AID_ROOT
, 
AID_SHELL
, "system/bin" },

175 { 00755, 
AID_ROOT
, 
AID_SHELL
, "system/vendor" },

176 { 00755, 
AID_ROOT
, 
AID_SHELL
, "system/xbin" },

177 { 00755, 
AID_ROOT
, AID_ROOT, "system/etc/ppp" },

178 { 00777, 
AID_ROOT
, AID_ROOT, "sdcard" },

179 { 00755, 
AID_ROOT
, AID_ROOT, 0 },

188 
fs_∑th_c⁄fig
 
	g™droid_fûes
[] = {

189 { 00440, 
AID_ROOT
, 
AID_SHELL
, "system/etc/init.goldfish.rc" },

190 { 00550, 
AID_ROOT
, 
AID_SHELL
, "system/etc/init.goldfish.sh" },

191 { 00440, 
AID_ROOT
, 
AID_SHELL
, "system/etc/init.trout.rc" },

192 { 00550, 
AID_ROOT
, 
AID_SHELL
, "system/etc/init.ril" },

193 { 00550, 
AID_ROOT
, 
AID_SHELL
, "system/etc/init.testmenu" },

194 { 00550, 
AID_DHCP
, 
AID_SHELL
, "system/etc/dhcpcd/dhcpcd-run-hooks" },

195 { 00440, 
AID_BLUETOOTH
, AID_BLUETOOTH, "system/etc/dbus.conf" },

196 { 00444, 
AID_RADIO
, 
AID_AUDIO
, "system/etc/AudioPara4.csv" },

197 { 00555, 
AID_ROOT
, AID_ROOT, "system/etc/ppp/*" },

198 { 00555, 
AID_ROOT
, AID_ROOT, "system/etc/rc.*" },

199 { 00644, 
AID_SYSTEM
, AID_SYSTEM, "data/app/*" },

200 { 00644, 
AID_MEDIA_RW
, AID_MEDIA_RW, "data/media/*" },

201 { 00644, 
AID_SYSTEM
, AID_SYSTEM, "data/app-private/*" },

202 { 00644, 
AID_APP
, AID_APP, "data/data/*" },

205 { 02755, 
AID_ROOT
, 
AID_NET_RAW
, "system/bin/ping" },

206 { 02750, 
AID_ROOT
, 
AID_INET
, "system/bin/netcfg" },

209 { 06755, 
AID_ROOT
, AID_ROOT, "system/xbin/su" },

210 { 06755, 
AID_ROOT
, AID_ROOT, "system/xbin/librank" },

211 { 06755, 
AID_ROOT
, AID_ROOT, "system/xbin/procrank" },

212 { 06755, 
AID_ROOT
, AID_ROOT, "system/xbin/procmem" },

213 { 06755, 
AID_ROOT
, AID_ROOT, "system/xbin/tcpdump" },

214 { 04770, 
AID_ROOT
, 
AID_RADIO
, "system/bin/pppd-ril" },

217 { 06750, 
AID_ROOT
, 
AID_SHELL
, "system/bin/run-as" },

218 { 00755, 
AID_ROOT
, 
AID_SHELL
, "system/bin/*" },

219 { 00755, 
AID_ROOT
, AID_ROOT, "system/lib/valgrind/*" },

220 { 00755, 
AID_ROOT
, 
AID_SHELL
, "system/xbin/*" },

221 { 00755, 
AID_ROOT
, 
AID_SHELL
, "system/vendor/bin/*" },

222 { 00750, 
AID_ROOT
, 
AID_SHELL
, "sbin/*" },

223 { 00755, 
AID_ROOT
, AID_ROOT, "bin/*" },

224 { 00750, 
AID_ROOT
, 
AID_SHELL
, "init*" },

225 { 00750, 
AID_ROOT
, 
AID_SHELL
, "charger*" },

226 { 00750, 
AID_ROOT
, 
AID_SHELL
, "sbin/fs_mgr" },

227 { 00640, 
AID_ROOT
, 
AID_SHELL
, "fstab.*" },

228 { 00644, 
AID_ROOT
, AID_ROOT, 0 },

231 
ölöe
 
	$fs_c⁄fig
(c⁄° *
∑th
, 
dú
,

232 *
uid
, *
gid
, *
mode
)

234 
fs_∑th_c⁄fig
 *
pc
;

235 
∂í
;

237 
pc
 = 
dú
 ? 
™droid_dús
 : 
™droid_fûes
;

238 
∂í
 = 
	`°æí
(
∑th
);

239 ; 
pc
->
¥efix
;Öc++){

240 
Àn
 = 
	`°æí
(
pc
->
¥efix
);

241 i‡(
dú
) {

242 if(
∂í
 < 
Àn
) ;

243 if(!
	`°∫cmp
(
pc
->
¥efix
, 
∑th
, 
Àn
)) ;

247 i‡(
pc
->
¥efix
[
Àn
 -1] == '*') {

248 if(!
	`°∫cmp
(
pc
->
¥efix
, 
∑th
, 
Àn
 - 1)) ;

249 } i‡(
∂í
 =
Àn
){

250 if(!
	`°∫cmp
(
pc
->
¥efix
, 
∑th
, 
Àn
)) ;

253 *
uid
 = 
pc
->uid;

254 *
gid
 = 
pc
->gid;

255 *
mode
 = (*modê& (~07777)Ë| 
pc
->mode;

258 
	`Ârötf
(
°dîr
,"< '%s' '%s' %d %d %o >\n",

259 
∑th
, 
pc
->
¥efix
 ?Öc->¥efix : "", *
uid
, *
gid
, *
mode
);

261 
	}
}

	@qemu/qemu.c

20 
	~"qemu.h
"

21 
	#LOG_TAG
 "h¨dw¨e-qemu"

	)

22 
	~<cutûs/log.h
>

23 
	~<cutûs/¥›îtõs.h
>

24 
	~<cutûs/sockës.h
>

25 
	~<î∫o.h
>

26 
	~<f˙é.h
>

27 
	~<ãrmios.h
>

28 
	~<°dio.h
>

29 
	~<°d¨g.h
>

31 
	#QEMU_DEBUG
 0

	)

33 #i‡
QEMU_DEBUG


34 
	#D
(...Ë
	`ALOGD
(
__VA_ARGS__
)

	)

36 
	#D
(...Ë(()0)

	)

39 
	~"qemu_pùe.h
"

42 
	$qemu_check
()

44 
ö_qemu
 = -1;

46 i‡(
	`__buûtö_ex≥˘
(
ö_qemu
 < 0,0)) {

47 
¥›Buf
[
PROPERTY_VALUE_MAX
];

48 
	`¥›îty_gë
("ro.kî√l.qemu", 
¥›Buf
, "");

49 
ö_qemu
 = (
¥›Buf
[0] == '1');

51  
ö_qemu
;

52 
	}
}

55 
	$qemu_fd_wrôe
–
fd
, c⁄° * 
cmd
, 
Àn
 )

57 
Àn2
;

59 
Àn2
 = 
	`wrôe
(
fd
, 
cmd
, 
Àn
);

60 } 
Àn2
 < 0 && 
î∫o
 =
EINTR
);

61  
Àn2
;

62 
	}
}

65 
	$qemu_fd_ªad
–
fd
, * 
buff
, 
Àn
 )

67 
Àn2
;

69 
Àn2
 = 
	`ªad
(
fd
, 
buff
, 
Àn
);

70 } 
Àn2
 < 0 && 
î∫o
 =
EINTR
);

71  
Àn2
;

72 
	}
}

75 
	$qemu_ch™√l_›í_qemud_pùe
–
QemuCh™√l
* 
ch™√l
,

76 c⁄° * 
«me
 )

78 
fd
;

79 
pùe_«me
[512];

81 
	`¢¥ötf
(
pùe_«me
, ’ùe_«me), "qemud:%s", 
«me
);

82 
fd
 = 
	`qemu_pùe_›í
(
pùe_«me
);

83 i‡(
fd
 < 0) {

84 
	`D
("nÿqemudÖùe: %s", 
	`°ªº‹
(
î∫o
));

88 
ch™√l
->
is_qemud
 = 1;

89 
ch™√l
->
fd
 = fd;

91 
	}
}

94 
	$qemu_ch™√l_›í_qemud
–
QemuCh™√l
* 
ch™√l
,

95 c⁄° * 
«me
 )

97 
fd
, 
ªt
, 
«mñí
 = 
	`°æí
(
«me
);

98 
™swî
[2];

100 
fd
 = 
	`sockë_loˇl_˛õ¡
( "qemud",

101 
ANDROID_SOCKET_NAMESPACE_RESERVED
,

102 
SOCK_STREAM
 );

103 i‡(
fd
 < 0) {

104 
	`D
("nÿqemud c⁄åﬁ sockë: %s", 
	`°ªº‹
(
î∫o
));

109 i‡(
	`qemu_fd_wrôe
(
fd
, 
«me
, 
«mñí
) !=Çamelen) {

110 
	`D
("can't send serviceÇameÅo qemud: %s",

111 
	`°ªº‹
(
î∫o
));

112 
	`˛o£
(
fd
);

117 i‡(
	`qemu_fd_ªad
(
fd
, 
™swî
, 2) != 2 ||

118 
™swî
[0] != 'O' ||ánswer[1] != 'K') {

119 
	`D
("ˇ¡' c⁄√˘Åÿ%†£rvi˚Åhrough qemud", 
«me
);

120 
	`˛o£
(
fd
);

124 
ch™√l
->
is_qemud
 = 1;

125 
ch™√l
->
fd
 = fd;

127 
	}
}

131 
	$qemu_ch™√l_›í_qemud_ﬁd
–
QemuCh™√l
* 
ch™√l
,

132 c⁄° * 
«me
 )

134 
fd
;

136 
	`¢¥ötf
(
ch™√l
->
devi˚
,  channel->device,

137 "qemud_%s", 
«me
);

139 
fd
 = 
	`sockë_loˇl_˛õ¡
–
ch™√l
->
devi˚
,

140 
ANDROID_SOCKET_NAMESPACE_RESERVED
,

141 
SOCK_STREAM
 );

142 i‡(
fd
 < 0) {

143 
	`D
("no '%s' control socketávailable: %s",

144 
ch™√l
->
devi˚
, 
	`°ªº‹
(
î∫o
));

148 
	`˛o£
(
fd
);

149 
ch™√l
->
is_qemud_ﬁd
 = 1;

151 
	}
}

155 
	$qemu_ch™√l_›í_ây
–
QemuCh™√l
* 
ch™√l
,

156 c⁄° * 
«me
,

157 
mode
 )

159 
key
[
PROPERTY_KEY_MAX
];

160 
¥›
[
PROPERTY_VALUE_MAX
];

161 
ªt
;

163 
ªt
 = 
	`¢¥ötf
(
key
,  key, "ro.kî√l.™droid.%s", 
«me
);

164 i‡(
ªt
 >() 
key
)

167 i‡(
	`¥›îty_gë
(
key
, 
¥›
, "") == 0) {

168 
	`D
("nÿkî√l-¥ovided %†devi˚Çame", 
«me
);

172 
ªt
 = 
	`¢¥ötf
(
ch™√l
->
devi˚
,  channel->device,

173 "/dev/%s", 
¥›
);

174 i‡(
ªt
 >() 
ch™√l
->
devi˚
) {

175 
	`D
("%†devi˚Çamêtoÿl⁄g: '%s'", 
«me
, 
¥›
);

179 
ch™√l
->
is_ây
 = !
	`memcmp
("/dev/ây", ch™√l->
devi˚
, 8);

181 
	}
}

184 
	$qemu_ch™√l_›í
–
QemuCh™√l
* 
ch™√l
,

185 c⁄° * 
«me
,

186 
mode
 )

188 
fd
 = -1;

191 i‡(!
ch™√l
->
is_öôed
)

193 
ch™√l
->
is_öôed
 = 1;

196 i‡(
	`qemu_ch™√l_›í_qemud_pùe
(
ch™√l
, 
«me
) == 0)

199 i‡(
	`qemu_ch™√l_›í_qemud
(
ch™√l
, 
«me
) == 0)

202 i‡(
	`qemu_ch™√l_›í_qemud_ﬁd
(
ch™√l
, 
«me
) == 0)

205 i‡(
	`qemu_ch™√l_›í_ây
(
ch™√l
, 
«me
, 
mode
) == 0)

208 
ch™√l
->
is_avaûabÀ
 = 0;

212 
ch™√l
->
is_avaûabÀ
 = 1;

216 i‡(!
ch™√l
->
is_avaûabÀ
) {

217 
î∫o
 = 
ENOENT
;

221 i‡(
ch™√l
->
is_qemud
) {

222  
	`dup
(
ch™√l
->
fd
);

225 i‡(
ch™√l
->
is_qemud_ﬁd
) {

227 
fd
 = 
	`sockë_loˇl_˛õ¡
–
ch™√l
->
devi˚
,

228 
ANDROID_SOCKET_NAMESPACE_RESERVED
,

229 
SOCK_STREAM
 );

230 } 
fd
 < 0 && 
î∫o
 =
EINTR
);

235 
fd
 = 
	`›í
(
ch™√l
->
devi˚
, 
mode
);

236 } 
fd
 < 0 && 
î∫o
 =
EINTR
);

239 i‡(
fd
 >0 && 
ch™√l
->
is_ây
) {

240 
ãrmios
 
ios
;

241 
	`tcgë©å
–
fd
, &
ios
 );

242 
ios
.
c_lÊag
 = 0;

243 
	`tc£èâr
–
fd
, 
TCSANOW
, &
ios
 );

246  
fd
;

247 
	}
}

251 
	$qemu_comm™d_vf‹m©
–* 
buf„r
,

252 
buf„r_size
,

253 c⁄° * 
f‹m©
,

254 
va_li°
 
¨gs
 )

256 
hódî
[5];

257 
Àn
;

259 i‡(
buf„r_size
 < 6)

262 
Àn
 = 
	`v¢¥ötf
(
buf„r
+4, 
buf„r_size
-4, 
f‹m©
, 
¨gs
);

263 i‡(
Àn
 >
buf„r_size
-4)

266 
	`¢¥ötf
(
hódî
,  hódî, "%04x", 
Àn
);

267 
	`mem˝y
(
buf„r
, 
hódî
, 4);

268  
Àn
 + 4;

269 
	}
}

272 
	$qemu_comm™d_f‹m©
–* 
buf„r
,

273 
buf„r_size
,

274 c⁄° * 
f‹m©
,

277 
va_li°
 
¨gs
;

278 
ªt
;

280 
	`va_°¨t
(
¨gs
, 
f‹m©
);

281 
ªt
 = 
	`qemu_comm™d_f‹m©
(
buf„r
, 
buf„r_size
, 
f‹m©
, 
¨gs
);

282 
	`va_íd
(
¨gs
);

283  
ªt
;

284 
	}
}

288 
	$qemu_c⁄åﬁ_fd
()

290 
QemuCh™√l
 
ch™√l
[1];

291 
fd
;

293 
fd
 = 
	`qemu_ch™√l_›í
–
ch™√l
, "hw-c⁄åﬁ", 
O_RDWR
 );

294 i‡(
fd
 < 0) {

295 
	`D
("%s: couldÇŸ o≥¿c⁄åﬁ ch™√l: %s", 
__FUNCTION__
,

296 
	`°ªº‹
(
î∫o
));

298  
fd
;

299 
	}
}

302 
	$qemu_c⁄åﬁ_£nd
(c⁄° * 
cmd
, 
Àn
)

304 
fd
, 
Àn2
;

306 i‡(
Àn
 < 0) {

307 
î∫o
 = 
EINVAL
;

311 
fd
 = 
	`qemu_c⁄åﬁ_fd
();

312 i‡(
fd
 < 0)

315 
Àn2
 = 
	`qemu_fd_wrôe
(
fd
, 
cmd
, 
Àn
);

316 
	`˛o£
(
fd
);

317 i‡(
Àn2
 !
Àn
) {

318 
	`D
("%s: couldÇot sendÉverything %d < %d",

319 
__FUNCTION__
, 
Àn2
, 
Àn
);

323 
	}
}

327 
	$qemu_c⁄åﬁ_comm™d
–c⁄° * 
fmt
, ... )

329 
va_li°
 
¨gs
;

330 
comm™d
[256];

331 
Àn
, 
fd
;

333 
	`va_°¨t
(
¨gs
, 
fmt
);

334 
Àn
 = 
	`qemu_comm™d_vf‹m©
–
comm™d
,  comm™d, 
fmt
, 
¨gs
 );

335 
	`va_íd
(
¨gs
);

337 i‡(
Àn
 < 0 ||Üí >() 
comm™d
) {

338 i‡(
Àn
 < 0) {

339 
	`D
("%s: couldÇŸ síd: %s", 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

341 
	`D
("%s:Åoÿœrgê%d > %d", 
__FUNCTION__
, 
Àn
, ()( 
comm™d
));

343 
î∫o
 = 
EINVAL
;

347  
	`qemu_c⁄åﬁ_£nd
–
comm™d
, 
Àn
 );

348 
	}
}

350 
	$qemu_c⁄åﬁ_quîy
–c⁄° * 
que°i⁄
, 
que°i⁄Àn
,

351 * 
™swî
, 
™swîsize
 )

353 
ªt
, 
fd
, 
Àn
, 
ªsu…
 = -1;

354 
hódî
[5], *
íd
;

356 i‡(
que°i⁄Àn
 <= 0) {

357 
î∫o
 = 
EINVAL
;

361 
fd
 = 
	`qemu_c⁄åﬁ_fd
();

362 i‡(
fd
 < 0)

365 
ªt
 = 
	`qemu_fd_wrôe
–
fd
, 
que°i⁄
, 
que°i⁄Àn
 );

366 i‡(
ªt
 !
que°i⁄Àn
) {

367 
	`D
("%s: couldÇŸ wrôêÆl: %d < %d", 
__FUNCTION__
,

368 
ªt
, 
que°i⁄Àn
);

369 
Exô
;

373 
ªt
 = 
	`qemu_fd_ªad
–
fd
, 
hódî
, 4 );

374 i‡(
ªt
 != 4) {

375 
	`D
("%s: couldÇotÑead header (%d != 4)",

376 
__FUNCTION__
, 
ªt
);

377 
Exô
;

380 
hódî
[4] = 0;

381 
Àn
 = 
	`°πﬁ
–
hódî
, &
íd
, 16 );

382 i‡–
Àn
 < 0 || 
íd
 =
NULL
 ||Énd !
hódî
+4 ||Üí > 
™swîsize
 ) {

383 
	`D
("%s: couldÇotÖarse header: '%s'",

384 
__FUNCTION__
, 
hódî
);

385 
Exô
;

389 
ªt
 = 
	`qemu_fd_ªad
–
fd
, 
™swî
, 
Àn
 );

390 i‡(
ªt
 !
Àn
) {

391 
	`D
("%s: couldÇotÑeadáll ofánswer %d < %d",

392 
__FUNCTION__
, 
ªt
, 
Àn
);

393 
Exô
;

396 
ªsu…
 = 
Àn
;

398 
Exô
:

399 
	`˛o£
(
fd
);

400  
ªsu…
;

401 
	}
}

	@qemu/qemu.h

16 #i‚de‡
_libs_h¨dw¨e_qemu_h


17 
	#_libs_h¨dw¨e_qemu_h


	)

19 #ifde‡
__˝lu•lus


23 #ifde‡
QEMU_HARDWARE


26 
qemu_check
();

35 
	mis_öôed
;

36 
	mis_avaûabÀ
;

37 
	mis_qemud
;

38 
	mis_qemud_ﬁd
;

39 
	mis_ây
;

40 
	mfd
;

41 
	mdevi˚
[32];

42 } 
	tQemuCh™√l
;

53 
qemu_ch™√l_›í
–
QemuCh™√l
* 
ch™√l
,

54 c⁄° * 
«me
,

55 
mode
 );

65 
qemu_comm™d_f‹m©
–* 
buf„r
,

66 
buf„r_size
,

67 c⁄° * 
f‹m©
,

75 
qemu_c⁄åﬁ_comm™d
–c⁄° * 
fmt
, ... );

83 
qemu_c⁄åﬁ_quîy
–c⁄° * 
que°i⁄
, 
que°i⁄Àn
,

84 * 
™swî
, 
™swîsize
 );

90 #ifde‡
QEMU_HARDWARE


91 
	#QEMU_FALLBACK
(
x
) \

93 i‡(
	`qemu_check
()) \

94  
qemu_
 ## 
x
 ; \

95 } 0)

	)

96 
	#QEMU_FALLBACK_VOID
(
x
) \

98 i‡(
	`qemu_check
()) { \

99 
qemu_
 ## 
x
 ; \

102 } 0)

	)

104 
	#QEMU_FALLBACK
(
x
Ë(()0)

	)

105 
	#QEMU_FALLBACK_VOID
(
x
Ë(()0)

	)

108 #ifde‡
__˝lu•lus


	@qemu/qemu_pipe.h

16 #i‚de‡
ANDROID_INCLUDE_HARDWARE_QEMU_PIPE_H


17 
	#ANDROID_INCLUDE_HARDWARE_QEMU_PIPE_H


	)

19 
	~<sys/cdefs.h
>

20 
	~<uni°d.h
>

21 
	~<f˙é.h
>

22 
	~<sys/mm™.h
>

23 
	~<±hªad.h
>

24 
	~<°dlib.h
>

25 
	~<°dio.h
>

26 
	~<î∫o.h
>

28 #i‚de‡
D


29 
	#D
(...Ëdo{}0)

	)

37 #i‚de‡
TEMP_FAILURE_RETRY


39 
	#TEMP_FAILURE_RETRY
(
exp
) ({ \

40 
	`ty≥of
 (
exp
Ë
_rc
; \

42 
_rc
 = (
exp
); \

43 } 
_rc
 =-1 && 
î∫o
 =
EINTR
); \

44 
_rc
; })

	)

69 
__ölöe__
 

70 
	$qemu_pùe_›í
(c⁄° * 
pùeName
)

72 
buff
[256];

73 
buffLí
;

74 
fd
, 
ªt
;

76 i‡(
pùeName
 =
NULL
 ||ÖipeName[0] == '\0') {

77 
î∫o
 = 
EINVAL
;

81 
	`¢¥ötf
(
buff
,  buff, "pùe:%s", 
pùeName
);

83 
fd
 = 
	`›í
("/dev/qemu_pùe", 
O_RDWR
);

84 i‡(
fd
 < 0) {

85 
	`D
("%s: CouldÇŸ o≥¿/dev/qemu_pùe: %s", 
__FUNCTION__
, 
	`°ªº‹
(
î∫o
));

90 
buffLí
 = 
	`°æí
(
buff
);

92 
ªt
 = 
	`TEMP_FAILURE_RETRY
(
	`wrôe
(
fd
, 
buff
, 
buffLí
+1));

93 i‡(
ªt
 !
buffLí
+1) {

94 
	`D
("%s: CouldÇŸ c⁄√˘Åÿ%†pùê£rvi˚: %s", 
__FUNCTION__
, 
pùeName
, 
	`°ªº‹
(
î∫o
));

95 i‡(
ªt
 == 0) {

96 
î∫o
 = 
ECONNRESET
;

97 } i‡(
ªt
 > 0) {

98 
î∫o
 = 
EINVAL
;

103  
fd
;

104 
	}
}

	@remount_service.c

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~<°rög.h
>

21 
	~<f˙é.h
>

22 
	~<sys/mou¡.h
>

23 
	~<î∫o.h
>

25 
	~"sysdïs.h
"

27 
	#TRACE_TAG
 
TRACE_ADB


	)

28 
	~"adb.h
"

31 
	gsy°em_ro
 = 1;

34 *
	$föd_mou¡
(c⁄° *
dú
)

36 
fd
;

37 
ªs
;

38 
size
;

39 *
tokí
 = 
NULL
;

40 c⁄° 
dñims
[] = "\n";

41 
buf
[4096];

43 
fd
 = 
	`unix_›í
("/¥oc/mou¡s", 
O_RDONLY
);

44 i‡(
fd
 < 0)

45  
NULL
;

47 
buf
[(buf) - 1] = '\0';

48 
size
 = 
	`adb_ªad
(
fd
, 
buf
, (buf) - 1);

49 
	`adb_˛o£
(
fd
);

51 
tokí
 = 
	`°πok
(
buf
, 
dñims
);

53 
tokí
) {

54 
mou¡_dev
[256];

55 
mou¡_dú
[256];

56 
mou¡_‰eq
;

57 
mou¡_∑s¢o
;

59 
ªs
 = 
	`ssˇnf
(
tokí
, "%255s %255s %*s %*s %d %d\n",

60 
mou¡_dev
, 
mou¡_dú
, &
mou¡_‰eq
, &
mou¡_∑s¢o
);

61 
mou¡_dev
[255] = 0;

62 
mou¡_dú
[255] = 0;

63 i‡(
ªs
 =4 && (
	`°rcmp
(
dú
, 
mou¡_dú
) == 0))

64  
	`°rdup
(
mou¡_dev
);

66 
tokí
 = 
	`°πok
(
NULL
, 
dñims
);

68  
NULL
;

69 
	}
}

72 
	$ªmou¡_sy°em
()

74 *
dev
;

76 i‡(
sy°em_ro
 == 0) {

80 
dev
 = 
	`föd_mou¡
("/system");

82 i‡(!
dev
)

85 
sy°em_ro
 = 
	`mou¡
(
dev
, "/sy°em", "n⁄e", 
MS_REMOUNT
, 
NULL
);

87 
	`‰ì
(
dev
);

89  
sy°em_ro
;

90 
	}
}

92 
	$wrôe_°rög
(
fd
, c⁄° * 
°r
)

94 
	`wrôex
(
fd
, 
°r
, 
	`°æí
(str));

95 
	}
}

97 
	$ªmou¡_£rvi˚
(
fd
, *
cookõ
)

99 
ªt
 = 
	`ªmou¡_sy°em
();

101 i‡(!
ªt
)

102 
	`wrôe_°rög
(
fd
, "remount succeeded\n");

104 
buf„r
[200];

105 
	`¢¥ötf
(
buf„r
, (buf„r), "ªmou¡ faûed: %s\n", 
	`°ªº‹
(
î∫o
));

106 
	`wrôe_°rög
(
fd
, 
buf„r
);

109 
	`adb_˛o£
(
fd
);

110 
	}
}

	@services.c

17 
	~<°dlib.h
>

18 
	~<°dio.h
>

19 
	~<uni°d.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

23 
	~"sysdïs.h
"

25 
	#TRACE_TAG
 
TRACE_SERVICES


	)

26 
	~"adb.h
"

27 
	~"fûe_sync_£rvi˚.h
"

29 #i‡
ADB_HOST


30 #i‚de‡
HAVE_WINSOCK


31 
	~<√töë/ö.h
>

32 
	~<√tdb.h
>

33 
	~<sys/io˘l.h
>

36 
	~<cutûs/™droid_ªboŸ.h
>

39 
°öfo
 
	t°öfo
;

41 
	s°öfo
 {

42 (*
	mfunc
)(
	mfd
, *
	mcookõ
);

43 
	mfd
;

44 *
	mcookõ
;

48 *
	$£rvi˚_boŸ°øp_func
(*
x
)

50 
°öfo
 *
°i
 = 
x
;

51 
°i
->
	`func
(°i->
fd
, sti->
cookõ
);

52 
	`‰ì
(
°i
);

54 
	}
}

56 #i‡
ADB_HOST


57 
ADB_MUTEX_DEFINE
–
dns_lock
 );

59 
	$dns_£rvi˚
(
fd
, *
cookõ
)

61 *
ho°«me
 = 
cookõ
;

62 
ho°ít
 *
hp
;

63 
zîo
 = 0;

65 
	`adb_muãx_lock
(&
dns_lock
);

66 
hp
 = 
	`gëho°by«me
(
ho°«me
);

67 
	`‰ì
(
cookõ
);

68 if(
hp
 == 0) {

69 
	`wrôex
(
fd
, &
zîo
, 4);

71 
	`wrôex
(
fd
, 
hp
->
h_addr
, 4);

73 
	`adb_muãx_u∆ock
(&
dns_lock
);

74 
	`adb_˛o£
(
fd
);

75 
	}
}

77 
ªcovîy_mode
;

79 
	$ªcovî_£rvi˚
(
s
, *
cookõ
)

81 
buf
[4096];

82 
cou¡
 = (Ë
cookõ
;

83 
fd
;

85 
fd
 = 
	`adb_¸ót
("/tmp/update", 0644);

86 if(
fd
 < 0) {

87 
	`adb_˛o£
(
s
);

91 
cou¡
 > 0) {

92 
x„r
 = (
cou¡
 > 4096) ? 4096 : count;

93 if(
	`ªadx
(
s
, 
buf
, 
x„r
)) ;

94 if(
	`wrôex
(
fd
, 
buf
, 
x„r
)) ;

95 
cou¡
 -
x„r
;

98 if(
cou¡
 == 0) {

99 
	`wrôex
(
s
, "OKAY", 4);

101 
	`wrôex
(
s
, "FAIL", 4);

103 
	`adb_˛o£
(
fd
);

104 
	`adb_˛o£
(
s
);

106 
fd
 = 
	`adb_¸ót
("/tmp/update.begin", 0644);

107 
	`adb_˛o£
(
fd
);

108 
	}
}

110 
	$ª°¨t_roŸ_£rvi˚
(
fd
, *
cookõ
)

112 
buf
[100];

113 
vÆue
[
PROPERTY_VALUE_MAX
];

115 i‡(
	`gëuid
() == 0) {

116 
	`¢¥ötf
(
buf
, (buf), "adbd isálreadyÑunningásÑoot\n");

117 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

118 
	`adb_˛o£
(
fd
);

120 
	`¥›îty_gë
("ro.debuggabÀ", 
vÆue
, "");

121 i‡(
	`°rcmp
(
vÆue
, "1") != 0) {

122 
	`¢¥ötf
(
buf
, (buf), "adbd cannotÑunásÑoot inÖroduction builds\n");

123 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

124 
	`adb_˛o£
(
fd
);

128 
	`¥›îty_£t
("service.adb.root", "1");

129 
	`¢¥ötf
(
buf
, (buf), "restartingádbdásÑoot\n");

130 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

131 
	`adb_˛o£
(
fd
);

133 
	}
}

135 
	$ª°¨t_t˝_£rvi˚
(
fd
, *
cookõ
)

137 
buf
[100];

138 
vÆue
[
PROPERTY_VALUE_MAX
];

139 
p‹t
 = ()
cookõ
;

141 i‡(
p‹t
 <= 0) {

142 
	`¢¥ötf
(
buf
, (buf), "invalidÖort\n");

143 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

144 
	`adb_˛o£
(
fd
);

148 
	`¢¥ötf
(
vÆue
, (vÆue), "%d", 
p‹t
);

149 
	`¥›îty_£t
("£rvi˚.adb.t˝.p‹t", 
vÆue
);

150 
	`¢¥ötf
(
buf
, (buf), "ª°¨tög i¿TCP modêp‹t: %d\n", 
p‹t
);

151 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

152 
	`adb_˛o£
(
fd
);

153 
	}
}

155 
	$ª°¨t_usb_£rvi˚
(
fd
, *
cookõ
)

157 
buf
[100];

159 
	`¥›îty_£t
("service.adb.tcp.port", "0");

160 
	`¢¥ötf
(
buf
, (buf), "restarting in USB mode\n");

161 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

162 
	`adb_˛o£
(
fd
);

163 
	}
}

165 
	$ªboŸ_£rvi˚
(
fd
, *
¨g
)

167 
buf
[100];

168 
pid
, 
ªt
;

170 
	`sync
();

175 
pid
 = 
	`f‹k
();

176 i‡(
pid
 == 0) {

178 
	`exe˛
("/system/bin/vdc", "/system/bin/vdc", "volume", "unmount",

179 
	`gëív
("EXTERNAL_STORAGE"), "f‹˚", 
NULL
);

180 } i‡(
pid
 > 0) {

182 
	`waôpid
(
pid
, &
ªt
, 0);

185 
ªt
 = 
	`™droid_ªboŸ
(
ANDROID_RB_RESTART2
, 0, (*Ë
¨g
);

186 i‡(
ªt
 < 0) {

187 
	`¢¥ötf
(
buf
, (buf), "ªboŸ faûed: %s\n", 
	`°ªº‹
(
î∫o
));

188 
	`wrôex
(
fd
, 
buf
, 
	`°æí
(buf));

190 
	`‰ì
(
¨g
);

191 
	`adb_˛o£
(
fd
);

192 
	}
}

197 
	$echo_£rvi˚
(
fd
, *
cookõ
)

199 
buf
[4096];

200 
r
;

201 *
p
;

202 
c
;

205 
r
 = 
	`ªad
(
fd
, 
buf
, 4096);

206 if(
r
 =0Ë
d⁄e
;

207 if(
r
 < 0) {

208 if(
î∫o
 =
EINTR
) ;

209 
d⁄e
;

212 
c
 = 
r
;

213 
p
 = 
buf
;

214 
c
 > 0) {

215 
r
 = 
	`wrôe
(
fd
, 
p
, 
c
);

216 if(
r
 > 0) {

217 
c
 -
r
;

218 
p
 +
r
;

221 if((
r
 < 0Ë&& (
î∫o
 =
EINTR
)) ;

222 
d⁄e
;

225 
d⁄e
:

226 
	`˛o£
(
fd
);

227 
	}
}

230 
¸óã_£rvi˚_thªad
((*
func
)(, *), *
cookõ
)

232 
°öfo
 *
°i
;

233 
adb_thªad_t
 
t
;

234 
s
[2];

236 if(
	`adb_sockë∑ú
(
s
)) {

237 
	`¥ötf
("cannot create service socketÖair\n");

241 
°i
 = 
	`mÆloc
((
°öfo
));

242 if(
°i
 =0Ë
	`Áèl
("cannotállocate stinfo");

243 
°i
->
func
 = func;

244 
°i
->
cookõ
 = cookie;

245 
°i
->
fd
 = 
s
[1];

247 if(
	`adb_thªad_¸óã
–&
t
, 
£rvi˚_boŸ°øp_func
, 
°i
)){

248 
	`‰ì
(
°i
);

249 
	`adb_˛o£
(
s
[0]);

250 
	`adb_˛o£
(
s
[1]);

251 
	`¥ötf
("cannot create serviceÅhread\n");

255 
	`D
("£rvi˚Åhªad sèπed, %d:%d\n",
s
[0], s[1]);

256  
s
[0];

257 
	}
}

259 #i‡!
ADB_HOST


260 
	$¸óã_sub¥o˚ss
(c⁄° *
cmd
, c⁄° *
¨g0
, c⁄° *
¨g1
, 
pid_t
 *
pid
)

262 #ifde‡
HAVE_WIN32_PROC


263 
	`D
("¸óã_sub¥o˚ss(cmd=%s,árg0=%s,árg1=%s)\n", 
cmd
, 
¨g0
, 
¨g1
);

264 
	`Ârötf
(
°dîr
, "îr‹: cª©e_sub¥o˚s†nŸ im∂emíãd o¿Wö32 (%†%†%s)\n", 
cmd
, 
¨g0
, 
¨g1
);

267 *
dev«me
;

268 
±m
;

270 
±m
 = 
	`unix_›í
("/dev/±mx", 
O_RDWR
);

271 if(
±m
 < 0){

272 
	`¥ötf
("[ c™nŸ o≥¿/dev/±mx - %†]\n",
	`°ªº‹
(
î∫o
));

275 
	`f˙é
(
±m
, 
F_SETFD
, 
FD_CLOEXEC
);

277 if(
	`gø¡±
(
±m
Ë|| 
	`u∆ock±
(ptm) ||

278 ((
dev«me
 = (*Ë
	`±¢ame
(
±m
)) == 0)){

279 
	`¥ötf
("[ÅroubÀ wôh /dev/±mx - %†]\n", 
	`°ªº‹
(
î∫o
));

280 
	`adb_˛o£
(
±m
);

284 *
pid
 = 
	`f‹k
();

285 if(*
pid
 < 0) {

286 
	`¥ötf
("- f‹k faûed: %†-\n", 
	`°ªº‹
(
î∫o
));

287 
	`adb_˛o£
(
±m
);

291 if(*
pid
 == 0){

292 
±s
;

294 
	`£tsid
();

296 
±s
 = 
	`unix_›í
(
dev«me
, 
O_RDWR
);

297 if(
±s
 < 0) {

298 
	`Ârötf
(
°dîr
, "chûd faûedÅÿ›íÖ£udo-ãrm sœve: %s\n", 
dev«me
);

299 
	`exô
(-1);

302 
	`dup2
(
±s
, 0);

303 
	`dup2
(
±s
, 1);

304 
	`dup2
(
±s
, 2);

306 
	`adb_˛o£
(
±s
);

307 
	`adb_˛o£
(
±m
);

310 
ãxt
[64];

311 
	`¢¥ötf
(
ãxt
, Åext, "/¥oc/%d/oom_adj", 
	`gëpid
());

312 
fd
 = 
	`adb_›í
(
ãxt
, 
O_WRONLY
);

313 i‡(
fd
 >= 0) {

314 
	`adb_wrôe
(
fd
, "0", 1);

315 
	`adb_˛o£
(
fd
);

317 
	`D
("adb: u«bÀÅÿ›í %s\n", 
ãxt
);

319 
	`exe˛
(
cmd
, cmd, 
¨g0
, 
¨g1
, 
NULL
);

320 
	`Ârötf
(
°dîr
, "-Éxec '%s' failed: %s (%d) -\n",

321 
cmd
, 
	`°ªº‹
(
î∫o
),Érrno);

322 
	`exô
(-1);

328  
±m
;

331 
	}
}

334 #i‡
ADB_HOST


335 
	#SHELL_COMMAND
 "/bö/sh"

	)

337 
	#SHELL_COMMAND
 "/bö/adb_shñl"

	)

340 #i‡!
ADB_HOST


341 
	$sub¥oc_waôî_£rvi˚
(
fd
, *
cookõ
)

343 
pid_t
 
pid
 = (pid_t)
cookõ
;

345 
	`D
("íãªd. fd=%d o‡pid=%d\n", 
fd
, 
pid
);

347 
°©us
;

348 
pid_t
 
p
 = 
	`waôpid
(
pid
, &
°©us
, 0);

349 i‡(
p
 =
pid
) {

350 
	`D
("fd=%d,Öo° waôpid’id=%dË°©us=%04x\n", 
fd
, 
p
, 
°©us
);

351 i‡(
	`WIFSIGNALED
(
°©us
)) {

352 
	`D
("*** KûÀd by sig«»%d\n", 
	`WTERMSIG
(
°©us
));

354 } i‡(!
	`WIFEXITED
(
°©us
)) {

355 
	`D
("*** Didn'àexô!!. sètu†%d\n", 
°©us
);

357 } i‡(
	`WEXITSTATUS
(
°©us
) >= 0) {

358 
	`D
("*** Exô codê%d\n", 
	`WEXITSTATUS
(
°©us
));

363 
	`D
("shñ»exôed fd=%d o‡pid=%dÉº=%d\n", 
fd
, 
pid
, 
î∫o
);

364 i‡(
SHELL_EXIT_NOTIFY_FD
 >=0) {

365 
ªs
;

366 
ªs
 = 
	`wrôex
(
SHELL_EXIT_NOTIFY_FD
, &
fd
, (fd));

367 
	`D
("notified shellÉxit via fd=%d forÖid=%dÑes=%dÉrrno=%d\n",

368 
SHELL_EXIT_NOTIFY_FD
, 
pid
, 
ªs
, 
î∫o
);

370 
	}
}

372 
	$¸óã_sub¥oc_thªad
(c⁄° *
«me
)

374 
°öfo
 *
°i
;

375 
adb_thªad_t
 
t
;

376 
ªt_fd
;

377 
pid_t
 
pid
;

378 if(
«me
) {

379 
ªt_fd
 = 
	`¸óã_sub¥o˚ss
(
SHELL_COMMAND
, "-c", 
«me
, &
pid
);

381 
ªt_fd
 = 
	`¸óã_sub¥o˚ss
(
SHELL_COMMAND
, "-", 0, &
pid
);

383 
	`D
("¸óã_sub¥o˚ss(Ëªt_fd=%dÖid=%dÇame:%s\n", 
ªt_fd
, 
pid
,
«me
);

385 
°i
 = 
	`mÆloc
((
°öfo
));

386 if(
°i
 =0Ë
	`Áèl
("cannotállocate stinfo");

387 
°i
->
func
 = 
sub¥oc_waôî_£rvi˚
;

388 
°i
->
cookõ
 = (*)
pid
;

389 
°i
->
fd
 = 
ªt_fd
;

391 if(
	`adb_thªad_¸óã
–&
t
, 
£rvi˚_boŸ°øp_func
, 
°i
)){

392 
	`‰ì
(
°i
);

393 
	`adb_˛o£
(
ªt_fd
);

394 
	`¥ötf
("cannot create serviceÅhread\n");

398 
	`D
("£rvi˚Åhªad sèπed, fd=%dÖid=%d\n",
ªt_fd
, 
pid
);

399  
ªt_fd
;

400 
	}
}

403 
	$£rvi˚_to_fd
(c⁄° *
«me
)

405 
ªt
 = -1;

407 if(!
	`°∫cmp
(
«me
, "tcp:", 4)) {

408 
p‹t
 = 
	`©oi
(
«me
 + 4);

409 
«me
 = 
	`°rchr
(name + 4, ':');

410 if(
«me
 == 0) {

411 
ªt
 = 
	`sockë_lo›back_˛õ¡
(
p‹t
, 
SOCK_STREAM
);

412 i‡(
ªt
 >= 0)

413 
	`dißbÀ_t˝_«gÀ
(
ªt
);

415 #i‡
ADB_HOST


416 
	`adb_muãx_lock
(&
dns_lock
);

417 
ªt
 = 
	`sockë_√tw‹k_˛õ¡
(
«me
 + 1, 
p‹t
, 
SOCK_STREAM
);

418 
	`adb_muãx_u∆ock
(&
dns_lock
);

423 #i‚de‡
HAVE_WINSOCK


424 } if(!
	`°∫cmp
(
«me
, "local:", 6)) {

425 
ªt
 = 
	`sockë_loˇl_˛õ¡
(
«me
 + 6,

426 
ANDROID_SOCKET_NAMESPACE_RESERVED
, 
SOCK_STREAM
);

427 } if(!
	`°∫cmp
(
«me
, "localreserved:", 14)) {

428 
ªt
 = 
	`sockë_loˇl_˛õ¡
(
«me
 + 14,

429 
ANDROID_SOCKET_NAMESPACE_RESERVED
, 
SOCK_STREAM
);

430 } if(!
	`°∫cmp
(
«me
, "localabstract:", 14)) {

431 
ªt
 = 
	`sockë_loˇl_˛õ¡
(
«me
 + 14,

432 
ANDROID_SOCKET_NAMESPACE_ABSTRACT
, 
SOCK_STREAM
);

433 } if(!
	`°∫cmp
(
«me
, "localfilesystem:", 16)) {

434 
ªt
 = 
	`sockë_loˇl_˛õ¡
(
«me
 + 16,

435 
ANDROID_SOCKET_NAMESPACE_FILESYSTEM
, 
SOCK_STREAM
);

437 #i‡
ADB_HOST


438 } if(!
	`°∫cmp
("dns:", 
«me
, 4)){

439 *
n
 = 
	`°rdup
(
«me
 + 4);

440 if(
n
 == 0)  -1;

441 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
dns_£rvi˚
, 
n
);

443 } if(!
	`°∫cmp
("dev:", 
«me
, 4)) {

444 
ªt
 = 
	`unix_›í
(
«me
 + 4, 
O_RDWR
);

445 } if(!
	`°∫cmp
(
«me
, "framebuffer:", 12)) {

446 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
‰amebuf„r_£rvi˚
, 0);

447 } if(
ªcovîy_mode
 && !
	`°∫cmp
(
«me
, "recover:", 8)) {

448 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
ªcovî_£rvi˚
, (*Ë
	`©oi
(
«me
 + 8));

449 } i‡(!
	`°∫cmp
(
«me
, "jdwp:", 5)) {

450 
ªt
 = 
	`¸óã_jdwp_c⁄√˘i⁄_fd
(
	`©oi
(
«me
+5));

451 } i‡(!
	`°∫cmp
(
«me
, "log:", 4)) {

452 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
log_£rvi˚
, 
	`gë_log_fûe_∑th
(
«me
 + 4));

453 } if(!
HOST
 && !
	`°∫cmp
(
«me
, "shell:", 6)) {

454 if(
«me
[6]) {

455 
ªt
 = 
	`¸óã_sub¥oc_thªad
(
«me
 + 6);

457 
ªt
 = 
	`¸óã_sub¥oc_thªad
(0);

459 } if(!
	`°∫cmp
(
«me
, "sync:", 5)) {

460 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
fûe_sync_£rvi˚
, 
NULL
);

461 } if(!
	`°∫cmp
(
«me
, "remount:", 8)) {

462 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
ªmou¡_£rvi˚
, 
NULL
);

463 } if(!
	`°∫cmp
(
«me
, "reboot:", 7)) {

464 * 
¨g
 = 
	`°rdup
(
«me
 + 7);

465 if(
¨g
 == 0)  -1;

466 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
ªboŸ_£rvi˚
, 
¨g
);

467 } if(!
	`°∫cmp
(
«me
, "root:", 5)) {

468 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
ª°¨t_roŸ_£rvi˚
, 
NULL
);

469 } if(!
	`°∫cmp
(
«me
, "backup:", 7)) {

470 * 
¨g
 = 
	`°rdup
(
«me
+7);

471 i‡(
¨g
 =
NULL
)  -1;

472 
ªt
 = 
	`backup_£rvi˚
(
BACKUP
, 
¨g
);

473 } if(!
	`°∫cmp
(
«me
, "restore:", 8)) {

474 
ªt
 = 
	`backup_£rvi˚
(
RESTORE
, 
NULL
);

475 } if(!
	`°∫cmp
(
«me
, "tcpip:", 6)) {

476 
p‹t
;

477 i‡(
	`ssˇnf
(
«me
 + 6, "%d", &
p‹t
) == 0) {

478 
p‹t
 = 0;

480 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
ª°¨t_t˝_£rvi˚
, (*)
p‹t
);

481 } if(!
	`°∫cmp
(
«me
, "usb:", 4)) {

482 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
ª°¨t_usb_£rvi˚
, 
NULL
);

485 } if(!
	`°∫cmp
(
«me
, "echo:", 5)){

486 
ªt
 = 
	`¸óã_£rvi˚_thªad
(
echo_£rvi˚
, 0);

489 i‡(
ªt
 >= 0) {

490 
	`˛o£_⁄_exec
(
ªt
);

492  
ªt
;

493 
	}
}

495 #i‡
ADB_HOST


496 
	s°©e_öfo
 {

497 
å™•‹t_ty≥
 
	må™•‹t
;

498 * 
	m£rül
;

499 
	m°©e
;

502 
	$waô_f‹_°©e
(
fd
, * 
cookõ
)

504 
°©e_öfo
* 
söfo
 = 
cookõ
;

505 * 
îr
 = "unknownÉrror";

507 
	`D
("waô_f‹_°©ê%d\n", 
söfo
->
°©e
);

509 
©øn•‹t
 *
t
 = 
	`acquúe_⁄e_å™•‹t
(
söfo
->
°©e
, söfo->
å™•‹t
, söfo->
£rül
, &
îr
);

510 if(
t
 != 0) {

511 
	`wrôex
(
fd
, "OKAY", 4);

513 
	`£ndÁûmsg
(
fd
, 
îr
);

516 i‡(
söfo
->
£rül
)

517 
	`‰ì
(
söfo
->
£rül
);

518 
	`‰ì
(
söfo
);

519 
	`adb_˛o£
(
fd
);

520 
	`D
("wait_for_state is done\n");

521 
	}
}

524 #i‡
ADB_HOST


525 
asockë
* 
	$ho°_£rvi˚_to_sockë
(c⁄° * 
«me
, c⁄° *
£rül
)

527 i‡(!
	`°rcmp
(
«me
,"track-devices")) {

528  
	`¸óã_devi˚_åackî
();

529 } i‡(!
	`°∫cmp
(
«me
, "waô-f‹-", 
	`°æí
("wait-for-"))) {

530 
°©e_öfo
* 
söfo
 = 
	`mÆloc
((state_info));

532 i‡(
£rül
)

533 
söfo
->
£rül
 = 
	`°rdup
(serial);

535 
söfo
->
£rül
 = 
NULL
;

537 
«me
 +
	`°æí
("wait-for-");

539 i‡(!
	`°∫cmp
(
«me
, "loˇl", 
	`°æí
("local"))) {

540 
söfo
->
å™•‹t
 = 
kTøn•‹tLoˇl
;

541 
söfo
->
°©e
 = 
CS_DEVICE
;

542 } i‡(!
	`°∫cmp
(
«me
, "usb", 
	`°æí
("usb"))) {

543 
söfo
->
å™•‹t
 = 
kTøn•‹tUsb
;

544 
söfo
->
°©e
 = 
CS_DEVICE
;

545 } i‡(!
	`°∫cmp
(
«me
, "™y", 
	`°æí
("any"))) {

546 
söfo
->
å™•‹t
 = 
kTøn•‹tAny
;

547 
söfo
->
°©e
 = 
CS_DEVICE
;

549 
	`‰ì
(
söfo
);

550  
NULL
;

553 
fd
 = 
	`¸óã_£rvi˚_thªad
(
waô_f‹_°©e
, 
söfo
);

554  
	`¸óã_loˇl_sockë
(
fd
);

556  
NULL
;

557 
	}
}

	@sockets.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<î∫o.h
>

21 
	~<°rög.h
>

22 
	~<˘y≥.h
>

24 
	~"sysdïs.h
"

26 
	#TRACE_TAG
 
TRACE_SOCKETS


	)

27 
	~"adb.h
"

29 
ADB_MUTEX_DEFINE
–
sockë_li°_lock
 );

31 
loˇl_sockë_˛o£_locked
(
asockë
 *
s
);

33 
	$£ndÁûmsg
(
fd
, c⁄° *
ªas⁄
)

35 
buf
[9];

36 
Àn
;

37 
Àn
 = 
	`°æí
(
ªas⁄
);

38 if(
Àn
 > 0xffff)Üen = 0xffff;

39 
	`¢¥ötf
(
buf
,  buf, "FAIL%04x", 
Àn
);

40 if(
	`wrôex
(
fd
, 
buf
, 8))  -1;

41  
	`wrôex
(
fd
, 
ªas⁄
, 
Àn
);

42 
	}
}

46 
	gloˇl_sockë_√xt_id
 = 1;

48 
asockë
 
	gloˇl_sockë_li°
 = {

49 .
√xt
 = &
loˇl_sockë_li°
,

50 .
	g¥ev
 = &
loˇl_sockë_li°
,

57 
asockë
 
	gloˇl_sockë_˛osög_li°
 = {

58 .
√xt
 = &
loˇl_sockë_˛osög_li°
,

59 .
	g¥ev
 = &
loˇl_sockë_˛osög_li°
,

62 
asockë
 *
	$föd_loˇl_sockë
(
id
)

64 
asockë
 *
s
;

65 
asockë
 *
ªsu…
 = 
NULL
;

67 
	`adb_muãx_lock
(&
sockë_li°_lock
);

68 
s
 = 
loˇl_sockë_li°
.
√xt
; s != &local_socket_list; s = s->next) {

69 i‡(
s
->
id
 == id) {

70 
ªsu…
 = 
s
;

74 
	`adb_muãx_u∆ock
(&
sockë_li°_lock
);

76  
ªsu…
;

77 
	}
}

80 
	$ö£π_loˇl_sockë
(
asockë
* 
s
,ásockë* 
li°
)

82 
s
->
√xt
 = 
li°
;

83 
s
->
¥ev
 = s->
√xt
->prev;

84 
s
->
¥ev
->
√xt
 = s;

85 
s
->
√xt
->
¥ev
 = s;

86 
	}
}

89 
	$ö°Æl_loˇl_sockë
(
asockë
 *
s
)

91 
	`adb_muãx_lock
(&
sockë_li°_lock
);

93 
s
->
id
 = 
loˇl_sockë_√xt_id
++;

94 
	`ö£π_loˇl_sockë
(
s
, &
loˇl_sockë_li°
);

96 
	`adb_muãx_u∆ock
(&
sockë_li°_lock
);

97 
	}
}

99 
	$ªmove_sockë
(
asockë
 *
s
)

102 i‡(
s
->
¥ev
 && s->
√xt
)

104 
s
->
¥ev
->
√xt
 = s->next;

105 
s
->
√xt
->
¥ev
 = s->prev;

106 
s
->
√xt
 = 0;

107 
s
->
¥ev
 = 0;

108 
s
->
id
 = 0;

110 
	}
}

112 
	$˛o£_Æl_sockës
(
©øn•‹t
 *
t
)

114 
asockë
 *
s
;

119 
	`adb_muãx_lock
(&
sockë_li°_lock
);

120 
ª°¨t
:

121 
s
 = 
loˇl_sockë_li°
.
√xt
; s != &local_socket_list; s = s->next){

122 if(
s
->
å™•‹t
 =
t
 || (s->
≥î
 && s->peer->transport ==Å)) {

123 
	`loˇl_sockë_˛o£_locked
(
s
);

124 
ª°¨t
;

127 
	`adb_muãx_u∆ock
(&
sockë_li°_lock
);

128 
	}
}

130 
	$loˇl_sockë_íqueue
(
asockë
 *
s
, 
≠ackë
 *
p
)

132 
	`D
("LS(%d):Énqueuê%d\n", 
s
->
id
, 
p
->
Àn
);

134 
p
->
±r
 =Ö->
d©a
;

140 if(
s
->
pkt_fú°
) {

141 
íqueue
;

147 
p
->
Àn
 > 0) {

148 
r
 = 
	`adb_wrôe
(
s
->
fd
, 
p
->
±r
,Ö->
Àn
);

149 if(
r
 > 0) {

150 
p
->
Àn
 -
r
;

151 
p
->
±r
 +
r
;

154 if((
r
 =0Ë|| (
î∫o
 !
EAGAIN
)) {

155 
	`D
–"LS(%d):ÇŸÑódy,Éºno=%d: %s\n", 
s
->
id
, 
î∫o
, 
	`°ªº‹
(errno) );

156 
s
->
	`˛o£
(s);

163 if(
p
->
Àn
 == 0) {

164 
	`put_≠ackë
(
p
);

168 
íqueue
:

169 
p
->
√xt
 = 0;

170 if(
s
->
pkt_fú°
) {

171 
s
->
pkt_œ°
->
√xt
 = 
p
;

173 
s
->
pkt_fú°
 = 
p
;

175 
s
->
pkt_œ°
 = 
p
;

178 
	`fdevít_add
(&
s
->
fde
, 
FDE_WRITE
);

181 
	}
}

183 
	$loˇl_sockë_ªady
(
asockë
 *
s
)

187 
	`fdevít_add
(&
s
->
fde
, 
FDE_READ
);

189 
	}
}

191 
	$loˇl_sockë_˛o£
(
asockë
 *
s
)

193 
	`adb_muãx_lock
(&
sockë_li°_lock
);

194 
	`loˇl_sockë_˛o£_locked
(
s
);

195 
	`adb_muãx_u∆ock
(&
sockë_li°_lock
);

196 
	}
}

199 
	$loˇl_sockë_de°roy
(
asockë
 *
s
)

201 
≠ackë
 *
p
, *
n
;

202 
exô_⁄_˛o£
 = 
s
->exit_on_close;

204 
	`D
("LS(%d): de°royög fde.fd=%d\n", 
s
->
id
, s->
fde
.
fd
);

209 
	`fdevít_ªmove
(&
s
->
fde
);

212 
p
 = 
s
->
pkt_fú°
;Ö;Ö = 
n
) {

213 
	`D
("LS(%d): disˇrdög %d byãs\n", 
s
->
id
, 
p
->
Àn
);

214 
n
 = 
p
->
√xt
;

215 
	`put_≠ackë
(
p
);

217 
	`ªmove_sockë
(
s
);

218 
	`‰ì
(
s
);

220 i‡(
exô_⁄_˛o£
) {

221 
	`D
("local_socket_destroy:Éxiting\n");

222 
	`exô
(1);

224 
	}
}

227 
	$loˇl_sockë_˛o£_locked
(
asockë
 *
s
)

229 
	`D
("íãªd. LS(%dËfd=%d\n", 
s
->
id
, s->
fd
);

230 if(
s
->
≥î
) {

231 
	`D
("LS(%d): closingÖeer.Öeer->id=%dÖeer->fd=%d\n",

232 
s
->
id
, s->
≥î
->id, s->≥î->
fd
);

233 
s
->
≥î
->peer = 0;

235 i‡(
s
->
≥î
->
˛o£
 =
loˇl_sockë_˛o£
) {

236 
	`loˇl_sockë_˛o£_locked
(
s
->
≥î
);

238 
s
->
≥î
->
	`˛o£
(s->peer);

240 
s
->
≥î
 = 0;

246 i‡(
s
->
˛osög
 || s->
pkt_fú°
 =
NULL
) {

247 
id
 = 
s
->id;

248 
	`loˇl_sockë_de°roy
(
s
);

249 
	`D
("LS(%d): clo£d\n", 
id
);

255 
	`D
("LS(%d): closög\n", 
s
->
id
);

256 
s
->
˛osög
 = 1;

257 
	`fdevít_dñ
(&
s
->
fde
, 
FDE_READ
);

258 
	`ªmove_sockë
(
s
);

259 
	`D
("LS(%d):Öuà⁄ sockë_˛osög_li° fd=%d\n", 
s
->
id
, s->
fd
);

260 
	`ö£π_loˇl_sockë
(
s
, &
loˇl_sockë_˛osög_li°
);

261 
	}
}

263 
	$loˇl_sockë_evít_func
(
fd
, 
ev
, *
_s
)

265 
asockë
 *
s
 = 
_s
;

267 
	`D
("LS(%d):Évít_func(fd=%d(==%d),Év=%04x)\n", 
s
->
id
, s->
fd
, fd, 
ev
);

272 if(
ev
 & 
FDE_WRITE
){

273 
≠ackë
 *
p
;

275 (
p
 = 
s
->
pkt_fú°
) != 0) {

276 
p
->
Àn
 > 0) {

277 
r
 = 
	`adb_wrôe
(
fd
, 
p
->
±r
,Ö->
Àn
);

278 if(
r
 > 0) {

279 
p
->
±r
 +
r
;

280 
p
->
Àn
 -
r
;

283 if(
r
 < 0) {

287 if(
î∫o
 =
EAGAIN
) ;

288 if(
î∫o
 =
EINTR
) ;

290 
	`D
(" closögá·î wrôêbeˇu£Ñ=%dándÉºnÿi†%d\n", 
r
, 
î∫o
);

291 
s
->
	`˛o£
(s);

295 if(
p
->
Àn
 == 0) {

296 
s
->
pkt_fú°
 = 
p
->
√xt
;

297 if(
s
->
pkt_fú°
 =0Ës->
pkt_œ°
 = 0;

298 
	`put_≠ackë
(
p
);

305 i‡(
s
->
˛osög
) {

306 
	`D
(" closing because 'closing' is setáfter write\n");

307 
s
->
	`˛o£
(s);

315 
	`fdevít_dñ
(&
s
->
fde
, 
FDE_WRITE
);

316 
s
->
≥î
->
	`ªady
(s->peer);

320 if(
ev
 & 
FDE_READ
){

321 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

322 *
x
 = 
p
->
d©a
;

323 
size_t
 
avaû
 = 
MAX_PAYLOAD
;

324 
r
;

325 
is_eof
 = 0;

327 
avaû
 > 0) {

328 
r
 = 
	`adb_ªad
(
fd
, 
x
, 
avaû
);

329 
	`D
("LS(%d):Öo°ádb_ªad(fd=%d,...Ër=%d (î∫o=%dËavaû=%d\n", 
s
->
id
, s->
fd
, 
r
,Ñ<0?
î∫o
:0, 
avaû
);

330 if(
r
 > 0) {

331 
avaû
 -
r
;

332 
x
 +
r
;

335 if(
r
 < 0) {

336 if(
î∫o
 =
EAGAIN
) ;

337 if(
î∫o
 =
EINTR
) ;

341 
is_eof
 = 1;

344 
	`D
("LS(%d): fd=%dÖostávailÜoop.Ñ=%d is_eof=%d forced_eof=%d\n",

345 
s
->
id
, s->
fd
, 
r
, 
is_eof
, s->
fde
.
f‹˚_eof
);

346 if((
avaû
 =
MAX_PAYLOAD
Ë|| (
s
->
≥î
 == 0)) {

347 
	`put_≠ackë
(
p
);

349 
p
->
Àn
 = 
MAX_PAYLOAD
 - 
avaû
;

351 
r
 = 
s
->
≥î
->
	`íqueue
(s->≥î, 
p
);

352 
	`D
("LS(%d): fd=%dÖo°Öìr->íqueue().Ñ=%d\n", 
s
->
id
, s->
fd
, 
r
);

354 if(
r
 < 0) {

366 if(
r
 > 0) {

371 
	`fdevít_dñ
(&
s
->
fde
, 
FDE_READ
);

375 if((
s
->
fde
.
f‹˚_eof
 && !
r
Ë|| 
is_eof
) {

376 
	`D
(" closög beˇu£ is_eof=%dÑ=%d s->fde.f‹˚_eof=%d\n", 
is_eof
, 
r
, 
s
->
fde
.
f‹˚_eof
);

377 
s
->
	`˛o£
(s);

381 if(
ev
 & 
FDE_ERROR
){

387 
	`D
("LS(%d): FDE_ERROR (fd=%d)\n", 
s
->
id
, s->
fd
);

391 
	}
}

393 
asockë
 *
	$¸óã_loˇl_sockë
(
fd
)

395 
asockë
 *
s
 = 
	`ˇŒoc
(1, (asocket));

396 i‡(
s
 =
NULL
Ë
	`Áèl
("cannotállocate socket");

397 
s
->
fd
 = fd;

398 
s
->
íqueue
 = 
loˇl_sockë_íqueue
;

399 
s
->
ªady
 = 
loˇl_sockë_ªady
;

400 
s
->
˛o£
 = 
loˇl_sockë_˛o£
;

401 
	`ö°Æl_loˇl_sockë
(
s
);

403 
	`fdevít_ö°Æl
(&
s
->
fde
, 
fd
, 
loˇl_sockë_evít_func
, s);

406 
	`D
("LS(%d): cª©ed (fd=%d)\n", 
s
->
id
, s->
fd
);

407  
s
;

408 
	}
}

410 
asockë
 *
	$¸óã_loˇl_£rvi˚_sockë
(c⁄° *
«me
)

412 
asockë
 *
s
;

413 
fd
;

415 #i‡!
ADB_HOST


416 i‡(!
	`°rcmp
(
«me
,"jdwp")) {

417  
	`¸óã_jdwp_£rvi˚_sockë
();

419 i‡(!
	`°rcmp
(
«me
,"track-jdwp")) {

420  
	`¸óã_jdwp_åackî_£rvi˚_sockë
();

423 
fd
 = 
	`£rvi˚_to_fd
(
«me
);

424 if(
fd
 < 0)  0;

426 
s
 = 
	`¸óã_loˇl_sockë
(
fd
);

427 
	`D
("LS(%d): boundÅÿ'%s' vü %d\n", 
s
->
id
, 
«me
, 
fd
);

429 #i‡!
ADB_HOST


430 i‡((!
	`°∫cmp
(
«me
, "roŸ:", 5Ë&& 
	`gëuid
() != 0)

431 || !
	`°∫cmp
(
«me
, "usb:", 4)

432 || !
	`°∫cmp
(
«me
, "tcpip:", 6)) {

433 
	`D
("LS(%d):É«blögÉxô_⁄_˛o£\n", 
s
->
id
);

434 
s
->
exô_⁄_˛o£
 = 1;

438  
s
;

439 
	}
}

441 #i‡
ADB_HOST


442 
asockë
 *
	$¸óã_ho°_£rvi˚_sockë
(c⁄° *
«me
, c⁄° * 
£rül
)

444 
asockë
 *
s
;

446 
s
 = 
	`ho°_£rvi˚_to_sockë
(
«me
, 
£rül
);

448 i‡(
s
 !
NULL
) {

449 
	`D
("LS(%dËboundÅÿ'%s'\n", 
s
->
id
, 
«me
);

450  
s
;

453  
s
;

454 
	}
}

460 
	s¨emŸesockë
 {

461 
asockë
 
	msockë
;

462 
adisc⁄√˘
 
	mdisc⁄√˘
;

463 } 
	t¨emŸesockë
;

465 
	$ªmŸe_sockë_íqueue
(
asockë
 *
s
, 
≠ackë
 *
p
)

467 
	`D
("enteredÑemote_socket_enqueue RS(%d) WRITE fd=%dÖeer.fd=%d\n",

468 
s
->
id
, s->
fd
, s->
≥î
->fd);

469 
p
->
msg
.
comm™d
 = 
A_WRTE
;

470 
p
->
msg
.
¨g0
 = 
s
->
≥î
->
id
;

471 
p
->
msg
.
¨g1
 = 
s
->
id
;

472 
p
->
msg
.
d©a_Àngth
 =Ö->
Àn
;

473 
	`£nd_∑ckë
(
p
, 
s
->
å™•‹t
);

475 
	}
}

477 
	$ªmŸe_sockë_ªady
(
asockë
 *
s
)

479 
	`D
("enteredÑemote_socket_ready RS(%d) OKAY fd=%dÖeer.fd=%d\n",

480 
s
->
id
, s->
fd
, s->
≥î
->fd);

481 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

482 
p
->
msg
.
comm™d
 = 
A_OKAY
;

483 
p
->
msg
.
¨g0
 = 
s
->
≥î
->
id
;

484 
p
->
msg
.
¨g1
 = 
s
->
id
;

485 
	`£nd_∑ckë
(
p
, 
s
->
å™•‹t
);

486 
	}
}

488 
	$ªmŸe_sockë_˛o£
(
asockë
 *
s
)

490 
	`D
("enteredÑemote_socket_close RS(%d) CLOSE fd=%dÖeer->fd=%d\n",

491 
s
->
id
, s->
fd
, s->
≥î
?s->peer->fd:-1);

492 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

493 
p
->
msg
.
comm™d
 = 
A_CLSE
;

494 if(
s
->
≥î
) {

495 
p
->
msg
.
¨g0
 = 
s
->
≥î
->
id
;

496 
s
->
≥î
->peer = 0;

497 
	`D
("RS(%d)Öeer->close()ingÖeer->id=%dÖeer->fd=%d\n",

498 
s
->
id
, s->
≥î
->id, s->≥î->
fd
);

499 
s
->
≥î
->
	`˛o£
(s->peer);

501 
p
->
msg
.
¨g1
 = 
s
->
id
;

502 
	`£nd_∑ckë
(
p
, 
s
->
å™•‹t
);

503 
	`D
("RS(%d): clo£d\n", 
s
->
id
);

504 
	`ªmove_å™•‹t_disc⁄√˘
–
s
->
å™•‹t
, &((
¨emŸesockë
*)s)->
disc⁄√˘
 );

505 
	`‰ì
(
s
);

506 
	}
}

508 
	$ªmŸe_sockë_disc⁄√˘
(* 
_s
, 
©øn•‹t
* 
t
)

510 
asockë
* 
s
 = 
_s
;

511 
asockë
* 
≥î
 = 
s
->peer;

513 
	`D
("ªmŸe_sockë_disc⁄√˘ RS(%d)\n", 
s
->
id
);

514 i‡(
≥î
) {

515 
≥î
->≥î = 
NULL
;

516 
≥î
->
	`˛o£
(peer);

518 
	`ªmove_å™•‹t_disc⁄√˘
–
s
->
å™•‹t
, &((
¨emŸesockë
*)s)->
disc⁄√˘
 );

519 
	`‰ì
(
s
);

520 
	}
}

522 
asockë
 *
	$¸óã_ªmŸe_sockë
(
id
, 
©øn•‹t
 *
t
)

524 
asockë
 *
s
 = 
	`ˇŒoc
(1, (
¨emŸesockë
));

525 
adisc⁄√˘
* 
dis
 = &((
¨emŸesockë
*)
s
)->
disc⁄√˘
;

527 i‡(
s
 =
NULL
Ë
	`Áèl
("cannotállocate socket");

528 
s
->
id
 = id;

529 
s
->
íqueue
 = 
ªmŸe_sockë_íqueue
;

530 
s
->
ªady
 = 
ªmŸe_sockë_ªady
;

531 
s
->
˛o£
 = 
ªmŸe_sockë_˛o£
;

532 
s
->
å™•‹t
 = 
t
;

534 
dis
->
func
 = 
ªmŸe_sockë_disc⁄√˘
;

535 
dis
->
›aque
 = 
s
;

536 
	`add_å™•‹t_disc⁄√˘
–
t
, 
dis
 );

537 
	`D
("RS(%d): cª©ed\n", 
s
->
id
);

538  
s
;

539 
	}
}

541 
	$c⁄√˘_to_ªmŸe
(
asockë
 *
s
, c⁄° *
de°ö©i⁄
)

543 
	`D
("C⁄√˘_to_ªmŸêˇŒ RS(%dËfd=%d\n", 
s
->
id
, s->
fd
);

544 
≠ackë
 *
p
 = 
	`gë_≠ackë
();

545 
Àn
 = 
	`°æí
(
de°ö©i⁄
) + 1;

547 if(
Àn
 > (
MAX_PAYLOAD
-1)) {

548 
	`Áèl
("destination oversized");

551 
	`D
("LS(%d): c⁄√˘('%s')\n", 
s
->
id
, 
de°ö©i⁄
);

552 
p
->
msg
.
comm™d
 = 
A_OPEN
;

553 
p
->
msg
.
¨g0
 = 
s
->
id
;

554 
p
->
msg
.
d©a_Àngth
 = 
Àn
;

555 
	`°r˝y
((*Ë
p
->
d©a
, 
de°ö©i⁄
);

556 
	`£nd_∑ckë
(
p
, 
s
->
å™•‹t
);

557 
	}
}

562 
	$loˇl_sockë_ªady_nŸify
(
asockë
 *
s
)

564 
s
->
ªady
 = 
loˇl_sockë_ªady
;

565 
s
->
˛o£
 = 
loˇl_sockë_˛o£
;

566 
	`adb_wrôe
(
s
->
fd
, "OKAY", 4);

567 
s
->
	`ªady
(s);

568 
	}
}

573 
	$loˇl_sockë_˛o£_nŸify
(
asockë
 *
s
)

575 
s
->
ªady
 = 
loˇl_sockë_ªady
;

576 
s
->
˛o£
 = 
loˇl_sockë_˛o£
;

577 
	`£ndÁûmsg
(
s
->
fd
, "closed");

578 
s
->
	`˛o£
(s);

579 
	}
}

581 
	$unhex
(*
s
, 
Àn
)

583 
n
 = 0, 
c
;

585 
Àn
-- > 0) {

586 (
c
 = *
s
++)) {

591 
c
 -= '0';

595 
c
 = c - 'a' + 10;

599 
c
 = c - 'A' + 10;

605 
n
 = (¿<< 4Ë| 
c
;

608  
n
;

609 
	}
}

611 
	#PREFIX
(
°r
Ë{ så, (°rË- 1 }

	)

612 c⁄° 
	s¥efix_°ru˘
 {

613 c⁄° *
	m°r
;

614 c⁄° 
size_t
 
	mÀn
;

615 } 
	g¥efixes
[] = {

616 
PREFIX
("usb:"),

617 
PREFIX
("product:"),

618 
PREFIX
("model:"),

619 
PREFIX
("device:"),

621 c⁄° 
	gnum_¥efixes
 = ((
¥efixes
) / (prefixes[0]));

627 *
	$skù_ho°_£rül
(*
£rvi˚
) {

628 *
fú°_cﬁ⁄
, *
£rül_íd
;

629 
i
;

631 
i
 = 0; i < 
num_¥efixes
; i++) {

632 i‡(!
	`°∫cmp
(
£rvi˚
, 
¥efixes
[
i
].
°r
,Öªfixes[i].
Àn
))

633  
	`°rchr
(
£rvi˚
 + 
¥efixes
[
i
].
Àn
, ':');

636 
fú°_cﬁ⁄
 = 
	`°rchr
(
£rvi˚
, ':');

637 i‡(!
fú°_cﬁ⁄
) {

639  
NULL
;

641 
£rül_íd
 = 
fú°_cﬁ⁄
;

642 i‡(
	`isdigô
(
£rül_íd
[1])) {

643 
£rül_íd
++;

644 (*
£rül_íd
Ë&& 
	`isdigô
(*serial_end)) {

645 
£rül_íd
++;

647 i‡((*
£rül_íd
) != ':') {

649 
£rül_íd
 = 
fú°_cﬁ⁄
;

652  
£rül_íd
;

653 
	}
}

655 
	$sm¨t_sockë_íqueue
(
asockë
 *
s
, 
≠ackë
 *
p
)

657 
Àn
;

658 #i‡
ADB_HOST


659 *
£rvi˚
 = 
NULL
;

660 * 
£rül
 = 
NULL
;

661 
å™•‹t_ty≥
 
ây≥
 = 
kTøn•‹tAny
;

664 
	`D
("SS(%d):Énqueuê%d\n", 
s
->
id
, 
p
->
Àn
);

666 if(
s
->
pkt_fú°
 == 0) {

667 
s
->
pkt_fú°
 = 
p
;

668 
s
->
pkt_œ°
 = 
p
;

670 if((
s
->
pkt_fú°
->
Àn
 + 
p
->ÀnË> 
MAX_PAYLOAD
) {

671 
	`D
("SS(%d): ovîÊow\n", 
s
->
id
);

672 
	`put_≠ackë
(
p
);

673 
Áû
;

676 
	`mem˝y
(
s
->
pkt_fú°
->
d©a
 + s->pkt_fú°->
Àn
,

677 
p
->
d©a
,Ö->
Àn
);

678 
s
->
pkt_fú°
->
Àn
 +
p
->len;

679 
	`put_≠ackë
(
p
);

681 
p
 = 
s
->
pkt_fú°
;

685 if(
p
->
Àn
 < 4)  0;

687 
Àn
 = 
	`unhex
(
p
->
d©a
, 4);

688 if((
Àn
 < 1) || (len > 1024)) {

689 
	`D
("SS(%d): bad sizê(%d)\n", 
s
->
id
, 
Àn
);

690 
Áû
;

693 
	`D
("SS(%d):Üí i†%d\n", 
s
->
id
, 
Àn
 );

695 if((
Àn
 + 4Ë> 
p
->len) {

696 
	`D
("SS(%d): waôög f‹ %d m‹êbyãs\n", 
s
->
id
, 
Àn
+4 - 
p
->len);

700 
p
->
d©a
[
Àn
 + 4] = 0;

702 
	`D
("SS(%d): '%s'\n", 
s
->
id
, (*Ë(
p
->
d©a
 + 4));

704 #i‡
ADB_HOST


705 
£rvi˚
 = (*)
p
->
d©a
 + 4;

706 if(!
	`°∫cmp
(
£rvi˚
, "ho°-£rül:", 
	`°æí
("host-serial:"))) {

707 * 
£rül_íd
;

708 
£rvi˚
 +
	`°æí
("host-serial:");

711 
£rül_íd
 = 
	`skù_ho°_£rül
(
£rvi˚
);

712 i‡(
£rül_íd
) {

713 *
£rül_íd
 = 0;

714 
£rül
 = 
£rvi˚
;

715 
£rvi˚
 = 
£rül_íd
 + 1;

717 } i‡(!
	`°∫cmp
(
£rvi˚
, "ho°-usb:", 
	`°æí
("host-usb:"))) {

718 
ây≥
 = 
kTøn•‹tUsb
;

719 
£rvi˚
 +
	`°æí
("host-usb:");

720 } i‡(!
	`°∫cmp
(
£rvi˚
, "ho°-loˇl:", 
	`°æí
("host-local:"))) {

721 
ây≥
 = 
kTøn•‹tLoˇl
;

722 
£rvi˚
 +
	`°æí
("host-local:");

723 } i‡(!
	`°∫cmp
(
£rvi˚
, "ho°:", 
	`°æí
("host:"))) {

724 
ây≥
 = 
kTøn•‹tAny
;

725 
£rvi˚
 +
	`°æí
("host:");

727 
£rvi˚
 = 
NULL
;

730 i‡(
£rvi˚
) {

731 
asockë
 *
s2
;

738 if(
	`h™dÀ_ho°_ªque°
(
£rvi˚
, 
ây≥
, 
£rül
, 
s
->
≥î
->
fd
, s) == 0) {

740 
	`D
–"SS(%d): h™dÀd ho° sîvi˚ '%s'\n", 
s
->
id
, 
£rvi˚
 );

741 
Áû
;

743 i‡(!
	`°∫cmp
(
£rvi˚
, "å™•‹t", 
	`°æí
("transport"))) {

744 
	`D
–"SS(%d): okayÅøn•‹t\n", 
s
->
id
 );

745 
p
->
Àn
 = 0;

753 
s2
 = 
	`¸óã_ho°_£rvi˚_sockë
(
£rvi˚
, 
£rül
);

754 if(
s2
 == 0) {

755 
	`D
–"SS(%d): couldn'à¸óã ho° sîvi˚ '%s'\n", 
s
->
id
, 
£rvi˚
 );

756 
	`£ndÁûmsg
(
s
->
≥î
->
fd
, "unknown host service");

757 
Áû
;

767 
	`adb_wrôe
(
s
->
≥î
->
fd
, "OKAY", 4);

769 
s
->
≥î
->
ªady
 = 
loˇl_sockë_ªady
;

770 
s
->
≥î
->
˛o£
 = 
loˇl_sockë_˛o£
;

771 
s
->
≥î
->≥î = 
s2
;

772 
s2
->
≥î
 = 
s
->peer;

773 
s
->
≥î
 = 0;

774 
	`D
–"SS(%d): okay\n", 
s
->
id
 );

775 
s
->
	`˛o£
(s);

778 
s2
->
	`ªady
(s2);

782 i‡(
s
->
å™•‹t
 =
NULL
) {

783 * 
îr‹_°rög
 = "unknown failure";

784 
s
->
å™•‹t
 = 
	`acquúe_⁄e_å™•‹t
 (
CS_ANY
,

785 
kTøn•‹tAny
, 
NULL
, &
îr‹_°rög
);

787 i‡(
s
->
å™•‹t
 =
NULL
) {

788 
	`£ndÁûmsg
(
s
->
≥î
->
fd
, 
îr‹_°rög
);

789 
Áû
;

794 if(!(
s
->
å™•‹t
Ë|| (s->å™•‹t->
c⁄√˘i⁄_°©e
 =
CS_OFFLINE
)) {

798 
	`£ndÁûmsg
(
s
->
≥î
->
fd
, "device offline (x)");

799 
Áû
;

808 
s
->
≥î
->
ªady
 = 
loˇl_sockë_ªady_nŸify
;

809 
s
->
≥î
->
˛o£
 = 
loˇl_sockë_˛o£_nŸify
;

810 
s
->
≥î
->peer = 0;

812 
s
->
≥î
->
å™•‹t
 = s->transport;

814 
	`c⁄√˘_to_ªmŸe
(
s
->
≥î
, (*Ë(
p
->
d©a
 + 4));

815 
s
->
≥î
 = 0;

816 
s
->
	`˛o£
(s);

819 
Áû
:

824 
s
->
	`˛o£
(s);

826 
	}
}

828 
	$sm¨t_sockë_ªady
(
asockë
 *
s
)

830 
	`D
("SS(%d):Ñódy\n", 
s
->
id
);

831 
	}
}

833 
	$sm¨t_sockë_˛o£
(
asockë
 *
s
)

835 
	`D
("SS(%d): clo£d\n", 
s
->
id
);

836 if(
s
->
pkt_fú°
){

837 
	`put_≠ackë
(
s
->
pkt_fú°
);

839 if(
s
->
≥î
) {

840 
s
->
≥î
->peer = 0;

841 
s
->
≥î
->
	`˛o£
(s->peer);

842 
s
->
≥î
 = 0;

844 
	`‰ì
(
s
);

845 
	}
}

847 
asockë
 *
¸óã_sm¨t_sockë
((*
a˘i⁄_cb
)◊sockë *
s
, c⁄° *
a˘
))

849 
	`D
("Creating smart socket \n");

850 
asockë
 *
s
 = 
	`ˇŒoc
(1, (asocket));

851 i‡(
s
 =
NULL
Ë
	`Áèl
("cannotállocate socket");

852 
s
->
íqueue
 = 
sm¨t_sockë_íqueue
;

853 
s
->
ªady
 = 
sm¨t_sockë_ªady
;

854 
s
->
˛o£
 = 
sm¨t_sockë_˛o£
;

855 
s
->
exåa
 = 
a˘i⁄_cb
;

857 
	`D
("SS(%d): cª©ed %p\n", 
s
->
id
, 
a˘i⁄_cb
);

858  
s
;

859 
	}
}

861 
	$sm¨t_sockë_a˘i⁄
(
asockë
 *
s
, c⁄° *
a˘
)

864 
	}
}

866 
	$c⁄√˘_to_sm¨tsockë
(
asockë
 *
s
)

868 
	`D
("ConnectingÅo smart socket \n");

869 
asockë
 *
ss
 = 
	`¸óã_sm¨t_sockë
(
sm¨t_sockë_a˘i⁄
);

870 
s
->
≥î
 = 
ss
;

871 
ss
->
≥î
 = 
s
;

872 
s
->
	`ªady
(s);

873 
	}
}

	@sysdeps.h

20 #i‚de‡
_ADB_SYSDEPS_H


21 
	#_ADB_SYSDEPS_H


	)

23 #ifde‡
__CYGWIN__


24 #unde‡
_WIN32


27 #ifde‡
_WIN32


29 
	~<wödows.h
>

30 
	~<wösock2.h
>

31 
	~<ws2t˝ù.h
>

32 
	~<¥o˚ss.h
>

33 
	~<f˙é.h
>

34 
	~<io.h
>

35 
	~<sys/°©.h
>

36 
	~<î∫o.h
>

37 
	~<˘y≥.h
>

39 
	#OS_PATH_SEPARATOR
 '\\'

	)

40 
	#OS_PATH_SEPARATOR_STR
 "\\"

	)

41 
	#ENV_PATH_SEPARATOR_STR
 ";"

	)

43 
CRITICAL_SECTION
 
	tadb_muãx_t
;

45 
	#ADB_MUTEX_DEFINE
(
x
Ë
adb_muãx_t
 
	)
x

49 
	#ADB_MUTEX
(
x
Ë
adb_muãx_t
 x;

	)

50 
	~"muãx_li°.h
"

52 
adb_sysdïs_öô
();

54 
__ölöe__
 
	$adb_muãx_lock
–
adb_muãx_t
* 
lock
 )

56 
	`E¡îCrôiˇlSe˘i⁄
–
lock
 );

57 
	}
}

59 
__ölöe__
 
	$adb_muãx_u∆ock
–
adb_muãx_t
* 
lock
 )

61 
	`LóveCrôiˇlSe˘i⁄
–
lock
 );

62 
	}
}

64 °ru˘ { 
	mtid
; } 
	tadb_thªad_t
;

66 * (*
	tadb_thªad_func_t
)(* 
	t¨g
);

68 (*
	twö_thªad_func_t
)(* 
	t¨g
);

70 
__ölöe__
 
	$adb_thªad_¸óã
–
adb_thªad_t
 *
thªad
, 
adb_thªad_func_t
 
func
, * 
¨g
)

72 
thªad
->
tid
 = 
	`_begöthªad
–(
wö_thªad_func_t
)
func
, 0, 
¨g
 );

73 i‡(
thªad
->
tid
 == ()-1L) {

77 
	}
}

79 
__ölöe__
 
	$˛o£_⁄_exec
(
fd
)

82 
	}
}

84 
dißbÀ_t˝_«gÀ
(
fd
);

86 
	#l°©
 
°©


	)

88 
	#S_ISLNK
(
m
Ë0

	)

90 
__ölöe__
 
	$adb_u∆ök
(c⁄° * 
∑th
)

92 
rc
 = 
	`u∆ök
(
∑th
);

94 i‡(
rc
 =-1 && 
î∫o
 =
EACCES
) {

97 
rc
 = 
	`chmod
(
∑th
, 
_S_IREAD
|
_S_IWRITE
 );

98 i‡(
rc
 == 0)

99 
rc
 = 
	`u∆ök
(
∑th
);

101  
rc
;

102 
	}
}

103 #unde‡
u∆ök


104 
	#u∆ök
 
___xxx_u∆ök


	)

106 
__ölöe__
 
	$adb_mkdú
(c⁄° * 
∑th
, 
mode
)

108  
	`_mkdú
(
∑th
);

109 
	}
}

110 #unde‡
mkdú


111 
	#mkdú
 
___xxx_mkdú


	)

113 
adb_›í
(c⁄° * 
∑th
, 
›ti⁄s
);

114 
adb_¸ót
(c⁄° * 
∑th
, 
mode
);

115 
adb_ªad
(
fd
, * 
buf
, 
Àn
);

116 
adb_wrôe
(
fd
, c⁄° * 
buf
, 
Àn
);

117 
adb_l£ek
(
fd
, 
pos
, 
whîe
);

118 
adb_shutdown
(
fd
);

119 
adb_˛o£
(
fd
);

121 
__ölöe__
 
	$unix_˛o£
(
fd
)

123  
	`˛o£
(
fd
);

124 
	}
}

125 #unde‡
˛o£


126 
	#˛o£
 
____xxx_˛o£


	)

128 
__ölöe__
 
	$unix_ªad
(
fd
, * 
buf
, 
size_t
 
Àn
)

130  
	`ªad
(
fd
, 
buf
, 
Àn
);

131 
	}
}

132 #unde‡
ªad


133 
	#ªad
 
___xxx_ªad


	)

135 
__ölöe__
 
	$unix_wrôe
(
fd
, c⁄° * 
buf
, 
size_t
 
Àn
)

137  
	`wrôe
(
fd
, 
buf
, 
Àn
);

138 
	}
}

139 #unde‡
wrôe


140 
	#wrôe
 
___xxx_wrôe


	)

142 
__ölöe__
 
	$adb_›í_mode
(c⁄° * 
∑th
, 
›ti⁄s
, 
mode
)

144  
	`adb_›í
(
∑th
, 
›ti⁄s
);

145 
	}
}

147 
__ölöe__
 
	$unix_›í
(c⁄° * 
∑th
, 
›ti⁄s
,...)

149 i‡((
›ti⁄s
 & 
O_CREAT
) == 0)

151  
	`›í
(
∑th
, 
›ti⁄s
);

155 
mode
;

156 
va_li°
 
¨gs
;

157 
	`va_°¨t
–
¨gs
, 
›ti⁄s
 );

158 
mode
 = 
	`va_¨g
–
¨gs
, );

159 
	`va_íd
–
¨gs
 );

160  
	`›í
(
∑th
, 
›ti⁄s
, 
mode
);

162 
	}
}

163 
	#›í
 
___xxx_unix_›í


	)

167 * 
lﬂd_fûe
(c⁄° * 
∑th«me
, * 
psize
);

170 
sockë_lo›back_˛õ¡
(
p‹t
, 
ty≥
);

171 
sockë_√tw‹k_˛õ¡
(c⁄° *
ho°
, 
p‹t
, 
ty≥
);

172 
sockë_lo›back_£rvî
(
p‹t
, 
ty≥
);

173 
sockë_öaddr_™y_£rvî
(
p‹t
, 
ty≥
);

177 
	#FDE_READ
 0x0001

	)

178 
	#FDE_WRITE
 0x0002

	)

179 
	#FDE_ERROR
 0x0004

	)

180 
	#FDE_DONT_CLOSE
 0x0080

	)

182 
fdevít
 
	tfdevít
;

184 (*
	tfd_func
)(
	tfd
, 
	tevíts
, *
	tu£rd©a
);

186 
fdevít
 *
	`fdevít_¸óã
(
fd
, 
fd_func
 
func
, *
¨g
);

187 
	`fdevít_de°roy
(
fdevít
 *
fde
);

188 
	`fdevít_ö°Æl
(
fdevít
 *
fde
, 
fd
, 
fd_func
 
func
, *
¨g
);

189 
	`fdevít_ªmove
(
fdevít
 *
ôem
);

190 
	`fdevít_£t
(
fdevít
 *
fde
, 
evíts
);

191 
	`fdevít_add
(
fdevít
 *
fde
, 
evíts
);

192 
	`fdevít_dñ
(
fdevít
 *
fde
, 
evíts
);

193 
	`fdevít_lo›
();

195 
	sfdevít
 {

196 
fdevít
 *
√xt
;

197 
fdevít
 *
¥ev
;

199 
fd
;

200 
f‹˚_eof
;

202 
°©e
;

203 
evíts
;

205 
fd_func
 
func
;

206 *
¨g
;

209 
__ölöe__
 
	$adb_¶ìp_ms
–
m£c⁄ds
 )

211 
	`SÀï
–
m£c⁄ds
 );

212 
	}
}

214 
adb_sockë_ac˚±
(
£rvîfd
, 
sockaddr
* 
addr
, 
sockÀn_t
 *
addæí
);

216 #unde‡
ac˚±


217 
	#ac˚±
 
___xxx_ac˚±


	)

219 
__ölöe__
 
	$adb_sockë_£tbufsize
–
fd
, 
bufsize
 )

221 
›t
 = 
bufsize
;

222  
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (c⁄° *)&
›t
, (opt));

223 
	}
}

225 
adb_sockë∑ú
–
sv
[2] );

227 
__ölöe__
 * 
	$adb_dú°¨t
–c⁄° * 
∑th
 )

229 * 
p
 = 
	`°rchr
(
∑th
, '/');

230 * 
p2
 = 
	`°rchr
(
∑th
, '\\');

232 i‡–!
p
 )

233 
p
 = 
p2
;

234 i‡–
p2
 &&Ö2 > 
p
 )

235 
p
 = 
p2
;

237  
p
;

238 
	}
}

240 
__ölöe__
 * 
	$adb_dú°›
–c⁄° * 
∑th
 )

242 * 
p
 = 
	`°ºchr
(
∑th
, '/');

243 * 
p2
 = 
	`°ºchr
(
∑th
, '\\');

245 i‡–!
p
 )

246 
p
 = 
p2
;

247 i‡–
p2
 &&Ö2 > 
p
 )

248 
p
 = 
p2
;

250  
p
;

251 
	}
}

253 
__ölöe__
 
	$adb_is_absﬁuã_ho°_∑th
–c⁄° * 
∑th
 )

255  
	`ißÕha
(
∑th
[0]) &&Öath[1] == ':' &&Öath[2] == '\\';

256 
	}
}

258 * 
adb_°πok_r
(*
°r
, c⁄° *
dñim
, **
ßvïå
);

262 
	~"fdevít.h
"

263 
	~<cutûs/sockës.h
>

264 
	~<cutûs/¥›îtõs.h
>

265 
	~<cutûs/misc.h
>

266 
	~<sig«l.h
>

267 
	~<sys/waô.h
>

268 
	~<sys/°©.h
>

269 
	~<f˙é.h
>

271 
	~<±hªad.h
>

272 
	~<uni°d.h
>

273 
	~<f˙é.h
>

274 
	~<°d¨g.h
>

275 
	~<√töë/ö.h
>

276 
	~<√töë/t˝.h
>

277 
	~<°rög.h
>

279 
	#OS_PATH_SEPARATOR
 '/'

	)

280 
	#OS_PATH_SEPARATOR_STR
 "/"

	)

281 
	#ENV_PATH_SEPARATOR_STR
 ":"

	)

283 
±hªad_muãx_t
 
	tadb_muãx_t
;

285 
	#ADB_MUTEX_INITIALIZER
 
PTHREAD_MUTEX_INITIALIZER


	)

286 
	#adb_muãx_öô
 
±hªad_muãx_öô


	)

287 
	#adb_muãx_lock
 
±hªad_muãx_lock


	)

288 
	#adb_muãx_u∆ock
 
±hªad_muãx_u∆ock


	)

289 
	#adb_muãx_de°roy
 
±hªad_muãx_de°roy


	)

291 
	#ADB_MUTEX_DEFINE
(
m
Ë
adb_muãx_t
 m = 
PTHREAD_MUTEX_INITIALIZER


	)

293 
	#adb_c⁄d_t
 
±hªad_c⁄d_t


	)

294 
	#adb_c⁄d_öô
 
±hªad_c⁄d_öô


	)

295 
	#adb_c⁄d_waô
 
±hªad_c⁄d_waô


	)

296 
	#adb_c⁄d_brﬂdˇ°
 
±hªad_c⁄d_brﬂdˇ°


	)

297 
	#adb_c⁄d_sig«l
 
±hªad_c⁄d_sig«l


	)

298 
	#adb_c⁄d_de°roy
 
±hªad_c⁄d_de°roy


	)

301 
	#ADB_MUTEX
(
x
Ë
adb_muãx_t
 x;

	)

302 
	~"muãx_li°.h
"

304 
__ölöe__
 
	$˛o£_⁄_exec
(
fd
)

306 
	`f˙é
–
fd
, 
F_SETFD
, 
FD_CLOEXEC
 );

307 
	}
}

309 
__ölöe__
 
	$unix_›í
(c⁄° * 
∑th
, 
›ti⁄s
,...)

311 i‡((
›ti⁄s
 & 
O_CREAT
) == 0)

313  
	`›í
(
∑th
, 
›ti⁄s
);

317 
mode
;

318 
va_li°
 
¨gs
;

319 
	`va_°¨t
–
¨gs
, 
›ti⁄s
 );

320 
mode
 = 
	`va_¨g
–
¨gs
, );

321 
	`va_íd
–
¨gs
 );

322  
	`›í
(
∑th
, 
›ti⁄s
, 
mode
);

324 
	}
}

326 
__ölöe__
 
	$adb_›í_mode
–c⁄° * 
∑th«me
, 
›ti⁄s
, 
mode
 )

328  
	`›í
–
∑th«me
, 
›ti⁄s
, 
mode
 );

329 
	}
}

332 
__ölöe__
 
	$adb_›í
–c⁄° * 
∑th«me
, 
›ti⁄s
 )

334 
fd
 = 
	`›í
–
∑th«me
, 
›ti⁄s
 );

335 i‡(
fd
 < 0)

337 
	`˛o£_⁄_exec
–
fd
 );

338  
fd
;

339 
	}
}

340 #unde‡
›í


341 
	#›í
 
___xxx_›í


	)

343 
__ölöe__
 
	$adb_shutdown
(
fd
)

345  
	`shutdown
(
fd
, 
SHUT_RDWR
);

346 
	}
}

347 #unde‡
shutdown


348 
	#shutdown
 
____xxx_shutdown


	)

350 
__ölöe__
 
	$adb_˛o£
(
fd
)

352  
	`˛o£
(
fd
);

353 
	}
}

354 #unde‡
˛o£


355 
	#˛o£
 
____xxx_˛o£


	)

358 
__ölöe__
 
	$adb_ªad
(
fd
, * 
buf
, 
size_t
 
Àn
)

360  
	`ªad
(
fd
, 
buf
, 
Àn
);

361 
	}
}

363 #unde‡
ªad


364 
	#ªad
 
___xxx_ªad


	)

366 
__ölöe__
 
	$adb_wrôe
(
fd
, c⁄° * 
buf
, 
size_t
 
Àn
)

368  
	`wrôe
(
fd
, 
buf
, 
Àn
);

369 
	}
}

370 #unde‡
wrôe


371 
	#wrôe
 
___xxx_wrôe


	)

373 
__ölöe__
 
	$adb_l£ek
(
fd
, 
pos
, 
whîe
)

375  
	`l£ek
(
fd
, 
pos
, 
whîe
);

376 
	}
}

377 #unde‡
l£ek


378 
	#l£ek
 
___xxx_l£ek


	)

380 
__ölöe__
 
	$adb_u∆ök
(c⁄° * 
∑th
)

382  
	`u∆ök
(
∑th
);

383 
	}
}

384 #unde‡
u∆ök


385 
	#u∆ök
 
___xxx_u∆ök


	)

387 
__ölöe__
 
	$adb_¸ót
(c⁄° * 
∑th
, 
mode
)

389 
fd
 = 
	`¸ót
(
∑th
, 
mode
);

391 i‡–
fd
 < 0 )

394 
	`˛o£_⁄_exec
(
fd
);

395  
fd
;

396 
	}
}

397 #unde‡
¸ót


398 
	#¸ót
 
___xxx_¸ót


	)

400 
__ölöe__
 
	$adb_sockë_ac˚±
(
£rvîfd
, 
sockaddr
* 
addr
, 
sockÀn_t
 *
addæí
)

402 
fd
;

404 
fd
 = 
	`ac˚±
(
£rvîfd
, 
addr
, 
addæí
);

405 i‡(
fd
 >= 0)

406 
	`˛o£_⁄_exec
(
fd
);

408  
fd
;

409 
	}
}

411 #unde‡
ac˚±


412 
	#ac˚±
 
___xxx_ac˚±


	)

414 
	#unix_ªad
 
adb_ªad


	)

415 
	#unix_wrôe
 
adb_wrôe


	)

416 
	#unix_˛o£
 
adb_˛o£


	)

418 
±hªad_t
 
	tadb_thªad_t
;

420 * (*
	tadb_thªad_func_t
)–* 
	t¨g
 );

422 
__ölöe__
 
	$adb_thªad_¸óã
–
adb_thªad_t
 *
±hªad
, 
adb_thªad_func_t
 
°¨t
, * 
¨g
 )

424 
±hªad_©å_t
 
©å
;

426 
	`±hªad_©å_öô
 (&
©å
);

427 
	`±hªad_©å_£tdëach°©e
 (&
©å
, 
PTHREAD_CREATE_DETACHED
);

429  
	`±hªad_¸óã
–
±hªad
, &
©å
, 
°¨t
, 
¨g
 );

430 
	}
}

432 
__ölöe__
 
	$adb_sockë_£tbufsize
–
fd
, 
bufsize
 )

434 
›t
 = 
bufsize
;

435  
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
›t
, (opt));

436 
	}
}

438 
__ölöe__
 
	$dißbÀ_t˝_«gÀ
(
fd
)

440 
⁄
 = 1;

441 
	`£tsock›t
–
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*)&
⁄
, (on) );

442 
	}
}

445 
__ölöe__
 
	$unix_sockë∑ú
–
d
, 
ty≥
, 
¥Ÿocﬁ
, 
sv
[2] )

447  
	`sockë∑ú
–
d
, 
ty≥
, 
¥Ÿocﬁ
, 
sv
 );

448 
	}
}

450 
__ölöe__
 
	$adb_sockë∑ú
–
sv
[2] )

452 
rc
;

454 
rc
 = 
	`unix_sockë∑ú
–
AF_UNIX
, 
SOCK_STREAM
, 0, 
sv
 );

455 i‡(
rc
 < 0)

458 
	`˛o£_⁄_exec
–
sv
[0] );

459 
	`˛o£_⁄_exec
–
sv
[1] );

461 
	}
}

463 #unde‡
sockë∑ú


464 
	#sockë∑ú
 
___xxx_sockë∑ú


	)

466 
__ölöe__
 
	$adb_¶ìp_ms
–
m£c⁄ds
 )

468 
	`u¶ìp
–
m£c⁄ds
*1000 );

469 
	}
}

471 
__ölöe__
 
	$adb_mkdú
(c⁄° * 
∑th
, 
mode
)

473  
	`mkdú
(
∑th
, 
mode
);

474 
	}
}

475 #unde‡
mkdú


476 
	#mkdú
 
___xxx_mkdú


	)

478 
__ölöe__
 
	$adb_sysdïs_öô
()

480 
	}
}

482 
__ölöe__
 * 
	$adb_dú°¨t
(c⁄° * 
∑th
)

484  
	`°rchr
(
∑th
, '/');

485 
	}
}

487 
__ölöe__
 * 
	$adb_dú°›
(c⁄° * 
∑th
)

489  
	`°ºchr
(
∑th
, '/');

490 
	}
}

492 
__ölöe__
 
	$adb_is_absﬁuã_ho°_∑th
–c⁄° * 
∑th
 )

494  
∑th
[0] == '/';

495 
	}
}

497 
__ölöe__
 * 
	$adb_°πok_r
(*
°r
, c⁄° *
dñim
, **
ßvïå
)

499  
	`°πok_r
(
°r
, 
dñim
, 
ßvïå
);

500 
	}
}

501 #unde‡
°πok_r


502 
	#°πok_r
 
___xxx_°πok_r


	)

	@sysdeps_win32.c

1 
	~"sysdïs.h
"

2 
	~<wödows.h
>

3 
	~<wösock2.h
>

4 
	~<°dio.h
>

5 
	~<î∫o.h
>

6 
	#TRACE_TAG
 
TRACE_SYSDEPS


	)

7 
	~"adb.h
"

9 
Áèl
(c⁄° *
fmt
, ...);

11 
	#as£π
(
c⁄d
Ëdÿ{ i‡(!(c⁄d)Ë
	`Áèl
–"as£πi⁄ faûed '%s' o¿%s:%ld\n", #c⁄d, 
__FILE__
, 
__LINE__
 ); } 0)

	)

21 *
	$lﬂd_fûe
(c⁄° *
‚
, *
_sz
)

23 
HANDLE
 
fûe
;

24 *
d©a
;

25 
DWORD
 
fûe_size
;

27 
fûe
 = 
	`Cª©eFûe
–
‚
,

28 
GENERIC_READ
,

29 
FILE_SHARE_READ
,

30 
NULL
,

31 
OPEN_EXISTING
,

33 
NULL
 );

35 i‡(
fûe
 =
INVALID_HANDLE_VALUE
)

36  
NULL
;

38 
fûe_size
 = 
	`GëFûeSize
–
fûe
, 
NULL
 );

39 
d©a
 = 
NULL
;

41 i‡(
fûe_size
 > 0) {

42 
d©a
 = (*Ë
	`mÆloc
–
fûe_size
 + 1 );

43 i‡(
d©a
 =
NULL
) {

44 
	`D
("lﬂd_fûe: couldÇŸáŒoˇã %ld byãs\n", 
fûe_size
 );

45 
fûe_size
 = 0;

47 
DWORD
 
out_byãs
;

49 i‡–!
	`RódFûe
–
fûe
, 
d©a
, 
fûe_size
, &
out_byãs
, 
NULL
 ) ||

50 
out_byãs
 !
fûe_size
 )

52 
	`D
("lﬂd_fûe: couldÇŸÑód %ld byã†‰om '%s'\n", 
fûe_size
, 
‚
);

53 
	`‰ì
(
d©a
);

54 
d©a
 = 
NULL
;

55 
fûe_size
 = 0;

59 
	`Clo£H™dÀ
–
fûe
 );

61 *
_sz
 = (Ë
fûe_size
;

62  
d©a
;

63 
	}
}

73 c⁄° 
	tFHCœssRec_
* 
	tFHCœss
;

75 
FHRec_
* 
	tFH
;

77 
EvítHookRec_
* 
	tEvítHook
;

79 
	sFHCœssRec_


81 (*
	m_fh_öô
Ë–
FH
 
	mf
 );

82 (*
	m_fh_˛o£
)–
FH
 
	mf
 );

83 (*
	m_fh_l£ek
)–
FH
 
	mf
, 
	mpos
, 
	m‹igö
 );

84 (*
	m_fh_ªad
Ë–
FH
 
	mf
, * 
	mbuf
, 
	mÀn
 );

85 (*
	m_fh_wrôe
)–
FH
 
	mf
, c⁄° * 
	mbuf
, 
	mÀn
 );

86 (*
	m_fh_hook
Ë–
FH
 
	mf
, 
	mevíts
, 
EvítHook
 
	mhook
 );

88 } 
	tFHCœssRec
;

91 
SockëPaúRec_
* 
	tSockëPaú
;

93 
	sFHRec_


95 
FHCœss
 
	m˛azz
;

96 
	mu£d
;

97 
	meof
;

99 
HANDLE
 
	mh™dÀ
;

100 
SOCKET
 
	msockë
;

101 
SockëPaú
 
	m∑ú
;

102 } 
	mu
;

104 
HANDLE
 
	mevít
;

105 
	mmask
;

107 
	m«me
[32];

109 } 
	tFHRec
;

111 
	#fh_h™dÀ
 
u
.
h™dÀ


	)

112 
	#fh_sockë
 
u
.
sockë


	)

113 
	#fh_∑ú
 
u
.
∑ú


	)

115 
	#WIN32_FH_BASE
 100

	)

117 
	#WIN32_MAX_FHS
 128

	)

119 
adb_muãx_t
 
	g_wö32_lock
;

120 
FHRec
 
	g_wö32_fhs
[ 
WIN32_MAX_FHS
 ];

121 
	g_wö32_fh_cou¡
;

123 
FH


124 
	$_fh_‰om_öt
–
fd
 )

126 
FH
 
f
;

128 
fd
 -
WIN32_FH_BASE
;

130 i‡(
fd
 < 0 || fd >
_wö32_fh_cou¡
) {

131 
	`D
–"_fh_‰om_öt: invÆid fd %d\n", 
fd
 + 
WIN32_FH_BASE
 );

132 
î∫o
 = 
EBADF
;

133  
NULL
;

136 
f
 = &
_wö32_fhs
[
fd
];

138 i‡(
f
->
u£d
 == 0) {

139 
	`D
–"_fh_‰om_öt: invÆid fd %d\n", 
fd
 + 
WIN32_FH_BASE
 );

140 
î∫o
 = 
EBADF
;

141  
NULL
;

144  
f
;

145 
	}
}

149 
	$_fh_to_öt
–
FH
 
f
 )

151 i‡(
f
 && f->
u£d
 && f >
_wö32_fhs
 && f < _wö32_fh†+ 
WIN32_MAX_FHS
)

152  ()(
f
 - 
_wö32_fhs
Ë+ 
WIN32_FH_BASE
;

155 
	}
}

157 
FH


158 
	$_fh_Æloc
–
FHCœss
 
˛azz
 )

160 
¬
;

161 
FH
 
f
 = 
NULL
;

163 
	`adb_muãx_lock
–&
_wö32_lock
 );

165 i‡(
_wö32_fh_cou¡
 < 
WIN32_MAX_FHS
) {

166 
f
 = &
_wö32_fhs
[ 
_wö32_fh_cou¡
++ ];

167 
Exô
;

170 
¬
 = 0;Ç¿< 
WIN32_MAX_FHS
;Çn++) {

171 i‡–
_wö32_fhs
[
¬
].
˛azz
 =
NULL
) {

172 
f
 = &
_wö32_fhs
[
¬
];

173 
Exô
;

176 
	`D
( "_fh_alloc:Ço more free file descriptors\n" );

177 
Exô
:

178 i‡(
f
) {

179 
f
->
˛azz
 = clazz;

180 
f
->
u£d
 = 1;

181 
f
->
eof
 = 0;

182 
˛azz
->
	`_fh_öô
(
f
);

184 
	`adb_muãx_u∆ock
–&
_wö32_lock
 );

185  
f
;

186 
	}
}

190 
	$_fh_˛o£
–
FH
 
f
 )

192 i‡–
f
->
u£d
 ) {

193 
f
->
˛azz
->
	`_fh_˛o£
( f );

194 
f
->
u£d
 = 0;

195 
f
->
eof
 = 0;

196 
f
->
˛azz
 = 
NULL
;

199 
	}
}

202 c⁄° 
FHCœssRec
 
	g_fh_fûe_˛ass
;

203 c⁄° 
FHCœssRec
 
	g_fh_sockë_˛ass
;

214 
	$_fh_fûe_öô
–
FH
 
f
 )

216 
f
->
fh_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

217 
	}
}

220 
	$_fh_fûe_˛o£
–
FH
 
f
 )

222 
	`Clo£H™dÀ
–
f
->
fh_h™dÀ
 );

223 
f
->
fh_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

225 
	}
}

228 
	$_fh_fûe_ªad
–
FH
 
f
, * 
buf
, 
Àn
 )

230 
DWORD
 
ªad_byãs
;

232 i‡–!
	`RódFûe
–
f
->
fh_h™dÀ
, 
buf
, (
DWORD
)
Àn
, &
ªad_byãs
, 
NULL
 ) ) {

233 
	`D
–"adb_ªad: couldÇŸÑód %d byã†‰om %s\n", 
Àn
, 
f
->
«me
 );

234 
î∫o
 = 
EIO
;

236 } i‡(
ªad_byãs
 < (
DWORD
)
Àn
) {

237 
f
->
eof
 = 1;

239  ()
ªad_byãs
;

240 
	}
}

243 
	$_fh_fûe_wrôe
–
FH
 
f
, c⁄° * 
buf
, 
Àn
 )

245 
DWORD
 
wrŸe_byãs
;

247 i‡–!
	`WrôeFûe
–
f
->
fh_h™dÀ
, 
buf
, (
DWORD
)
Àn
, &
wrŸe_byãs
, 
NULL
 ) ) {

248 
	`D
–"adb_fûe_wrôe: couldÇŸ wrôê%d byã†‰om %s\n", 
Àn
, 
f
->
«me
 );

249 
î∫o
 = 
EIO
;

251 } i‡(
wrŸe_byãs
 < (
DWORD
)
Àn
) {

252 
f
->
eof
 = 1;

254  ()
wrŸe_byãs
;

255 
	}
}

258 
	$_fh_fûe_l£ek
–
FH
 
f
, 
pos
, 
‹igö
 )

260 
DWORD
 
mëhod
;

261 
DWORD
 
ªsu…
;

263 
‹igö
)

265 
SEEK_SET
: 
mëhod
 = 
FILE_BEGIN
; ;

266 
SEEK_CUR
: 
mëhod
 = 
FILE_CURRENT
; ;

267 
SEEK_END
: 
mëhod
 = 
FILE_END
; ;

269 
î∫o
 = 
EINVAL
;

273 
ªsu…
 = 
	`SëFûePoöãr
–
f
->
fh_h™dÀ
, 
pos
, 
NULL
, 
mëhod
 );

274 i‡(
ªsu…
 =
INVALID_SET_FILE_POINTER
) {

275 
î∫o
 = 
EIO
;

278 
f
->
eof
 = 0;

280  ()
ªsu…
;

281 
	}
}

283 
_fh_fûe_hook
–
FH
 
f
, 
evít
, 
EvítHook
 
evíthook
 );

285 c⁄° 
FHCœssRec
 
	g_fh_fûe_˛ass
 =

287 
_fh_fûe_öô
,

288 
_fh_fûe_˛o£
,

289 
_fh_fûe_l£ek
,

290 
_fh_fûe_ªad
,

291 
_fh_fûe_wrôe
,

292 
_fh_fûe_hook


303 
	$adb_›í
(c⁄° * 
∑th
, 
›ti⁄s
)

305 
FH
 
f
;

307 
DWORD
 
desúedAc˚ss
 = 0;

308 
DWORD
 
sh¨eMode
 = 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
;

310 
›ti⁄s
) {

311 
O_RDONLY
:

312 
desúedAc˚ss
 = 
GENERIC_READ
;

314 
O_WRONLY
:

315 
desúedAc˚ss
 = 
GENERIC_WRITE
;

317 
O_RDWR
:

318 
desúedAc˚ss
 = 
GENERIC_READ
 | 
GENERIC_WRITE
;

321 
	`D
("adb_›í: invÆid o±i⁄†(0x%0x)\n", 
›ti⁄s
);

322 
î∫o
 = 
EINVAL
;

326 
f
 = 
	`_fh_Æloc
–&
_fh_fûe_˛ass
 );

327 i‡–!
f
 ) {

328 
î∫o
 = 
ENOMEM
;

332 
f
->
fh_h™dÀ
 = 
	`Cª©eFûe
–
∑th
, 
desúedAc˚ss
, 
sh¨eMode
, 
NULL
, 
OPEN_EXISTING
,

333 0, 
NULL
 );

335 i‡–
f
->
fh_h™dÀ
 =
INVALID_HANDLE_VALUE
 ) {

336 
	`_fh_˛o£
(
f
);

337 
	`D
–"adb_›í: couldÇŸ o≥¿'%s':", 
∑th
 );

338 
	`GëLa°Eº‹
()) {

339 
ERROR_FILE_NOT_FOUND
:

340 
	`D
( "fileÇot found\n" );

341 
î∫o
 = 
ENOENT
;

344 
ERROR_PATH_NOT_FOUND
:

345 
	`D
( "pathÇot found\n" );

346 
î∫o
 = 
ENOTDIR
;

350 
	`D
( "unknownÉrror\n" );

351 
î∫o
 = 
ENOENT
;

356 
	`¢¥ötf
–
f
->
«me
, (f->«me), "%d(%s)", 
	`_fh_to_öt
(f), 
∑th
 );

357 
	`D
–"adb_›í: '%s' => fd %d\n", 
∑th
, 
	`_fh_to_öt
(
f
) );

358  
	`_fh_to_öt
(
f
);

359 
	}
}

362 
	$adb_¸ót
(c⁄° * 
∑th
, 
mode
)

364 
FH
 
f
;

366 
f
 = 
	`_fh_Æloc
–&
_fh_fûe_˛ass
 );

367 i‡–!
f
 ) {

368 
î∫o
 = 
ENOMEM
;

372 
f
->
fh_h™dÀ
 = 
	`Cª©eFûe
–
∑th
, 
GENERIC_WRITE
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

373 
NULL
, 
CREATE_ALWAYS
, 
FILE_ATTRIBUTE_NORMAL
,

374 
NULL
 );

376 i‡–
f
->
fh_h™dÀ
 =
INVALID_HANDLE_VALUE
 ) {

377 
	`_fh_˛o£
(
f
);

378 
	`D
–"adb_¸ót: couldÇŸ o≥¿'%s':", 
∑th
 );

379 
	`GëLa°Eº‹
()) {

380 
ERROR_FILE_NOT_FOUND
:

381 
	`D
( "fileÇot found\n" );

382 
î∫o
 = 
ENOENT
;

385 
ERROR_PATH_NOT_FOUND
:

386 
	`D
( "pathÇot found\n" );

387 
î∫o
 = 
ENOTDIR
;

391 
	`D
( "unknownÉrror\n" );

392 
î∫o
 = 
ENOENT
;

396 
	`¢¥ötf
–
f
->
«me
, (f->«me), "%d(%s)", 
	`_fh_to_öt
(f), 
∑th
 );

397 
	`D
–"adb_¸ót: '%s' => fd %d\n", 
∑th
, 
	`_fh_to_öt
(
f
) );

398  
	`_fh_to_öt
(
f
);

399 
	}
}

402 
	$adb_ªad
(
fd
, * 
buf
, 
Àn
)

404 
FH
 
f
 = 
	`_fh_‰om_öt
(
fd
);

406 i‡(
f
 =
NULL
) {

410  
f
->
˛azz
->
	`_fh_ªad
–f, 
buf
, 
Àn
 );

411 
	}
}

414 
	$adb_wrôe
(
fd
, c⁄° * 
buf
, 
Àn
)

416 
FH
 
f
 = 
	`_fh_‰om_öt
(
fd
);

418 i‡(
f
 =
NULL
) {

422  
f
->
˛azz
->
	`_fh_wrôe
(f, 
buf
, 
Àn
);

423 
	}
}

426 
	$adb_l£ek
(
fd
, 
pos
, 
whîe
)

428 
FH
 
f
 = 
	`_fh_‰om_öt
(
fd
);

430 i‡(!
f
) {

434  
f
->
˛azz
->
	`_fh_l£ek
(f, 
pos
, 
whîe
);

435 
	}
}

438 
	$adb_shutdown
(
fd
)

440 
FH
 
f
 = 
	`_fh_‰om_öt
(
fd
);

442 i‡(!
f
) {

446 
	`D
–"adb_shutdown: %s\n", 
f
->
«me
);

447 
	`shutdown
–
f
->
fh_sockë
, 
SD_BOTH
 );

449 
	}
}

452 
	$adb_˛o£
(
fd
)

454 
FH
 
f
 = 
	`_fh_‰om_öt
(
fd
);

456 i‡(!
f
) {

460 
	`D
–"adb_˛o£: %s\n", 
f
->
«me
);

461 
	`_fh_˛o£
(
f
);

463 
	}
}

474 
	$_sockë_£t_î∫o
( )

476 
	`WSAGëLa°Eº‹
()) {

477 0: 
î∫o
 = 0; ;

478 
WSAEWOULDBLOCK
: 
î∫o
 = 
EAGAIN
; ;

479 
WSAEINTR
: 
î∫o
 = 
EINTR
; ;

481 
	`D
–"_sockë_£t_î∫o: unh™dÀd vÆuê%d\n", 
	`WSAGëLa°Eº‹
() );

482 
î∫o
 = 
EINVAL
;

484 
	}
}

487 
	$_fh_sockë_öô
–
FH
 
f
 )

489 
f
->
fh_sockë
 = 
INVALID_SOCKET
;

490 
f
->
evít
 = 
	`WSACª©eEvít
();

491 
f
->
mask
 = 0;

492 
	}
}

495 
	$_fh_sockë_˛o£
–
FH
 
f
 )

498 
	`shutdown
–
f
->
fh_sockë
, 
SD_BOTH
 );

499 
	`˛o£sockë
–
f
->
fh_sockë
 );

500 
f
->
fh_sockë
 = 
INVALID_SOCKET
;

501 
	`Clo£H™dÀ
–
f
->
evít
 );

502 
f
->
mask
 = 0;

504 
	}
}

507 
	$_fh_sockë_l£ek
–
FH
 
f
, 
pos
, 
‹igö
 )

509 
î∫o
 = 
EPIPE
;

511 
	}
}

514 
	$_fh_sockë_ªad
–
FH
 
f
, * 
buf
, 
Àn
 )

516 
ªsu…
 = 
	`ªcv
–
f
->
fh_sockë
, 
buf
, 
Àn
, 0 );

517 i‡(
ªsu…
 =
SOCKET_ERROR
) {

518 
	`_sockë_£t_î∫o
();

519 
ªsu…
 = -1;

521  
ªsu…
;

522 
	}
}

525 
	$_fh_sockë_wrôe
–
FH
 
f
, c⁄° * 
buf
, 
Àn
 )

527 
ªsu…
 = 
	`£nd
–
f
->
fh_sockë
, 
buf
, 
Àn
, 0 );

528 i‡(
ªsu…
 =
SOCKET_ERROR
) {

529 
	`_sockë_£t_î∫o
();

530 
ªsu…
 = -1;

532  
ªsu…
;

533 
	}
}

535 
_fh_sockë_hook
–
FH
 
f
, 
evít
, 
EvítHook
 
hook
 );

537 c⁄° 
FHCœssRec
 
	g_fh_sockë_˛ass
 =

539 
_fh_sockë_öô
,

540 
_fh_sockë_˛o£
,

541 
_fh_sockë_l£ek
,

542 
_fh_sockë_ªad
,

543 
_fh_sockë_wrôe
,

544 
_fh_sockë_hook


555 
	~<wösock2.h
>

557 
	g_wösock_öô
;

560 
	$_˛ónup_wösock
( )

562 
	`WSACÀ™up
();

563 
	}
}

566 
	$_öô_wösock
( )

568 i‡(!
_wösock_öô
) {

569 
WSADATA
 
wßD©a
;

570 
rc
 = 
	`WSASèπup
–
	`MAKEWORD
(2,2), &
wßD©a
);

571 i‡(
rc
 != 0) {

572 
	`Áèl
( "adb: couldÇot initialize Winsock\n" );

574 
	`©exô
–
_˛ónup_wösock
 );

575 
_wösock_öô
 = 1;

577 
	}
}

579 
	$sockë_lo›back_˛õ¡
(
p‹t
, 
ty≥
)

581 
FH
 
f
 = 
	`_fh_Æloc
–&
_fh_sockë_˛ass
 );

582 
sockaddr_ö
 
addr
;

583 
SOCKET
 
s
;

585 i‡(!
f
)

588 i‡(!
_wösock_öô
)

589 
	`_öô_wösock
();

591 
	`mem£t
(&
addr
, 0, (addr));

592 
addr
.
sö_Ámûy
 = 
AF_INET
;

593 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

594 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

596 
s
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

597 if(
s
 =
INVALID_SOCKET
) {

598 
	`D
("socket_loopback_client: couldÇot create socket\n" );

599 
	`_fh_˛o£
(
f
);

603 
f
->
fh_sockë
 = 
s
;

604 if(
	`c⁄√˘
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

605 
	`D
("sockë_lo›back_˛õ¡: couldÇŸ c⁄√˘Åÿ%s:%d\n", 
ty≥
 !
SOCK_STREAM
 ? "udp" : "t˝", 
p‹t
 );

606 
	`_fh_˛o£
(
f
);

609 
	`¢¥ötf
–
f
->
«me
, (f->«me), "%d÷o-˛õ¡:%s%d)", 
	`_fh_to_öt
(f), 
ty≥
 !
SOCK_STREAM
 ? "udp:" : "", 
p‹t
 );

610 
	`D
–"sockë_lo›back_˛õ¡:Ö‹à%dÅy≥ %†=> fd %d\n", 
p‹t
, 
ty≥
 !
SOCK_STREAM
 ? "udp" : "t˝", 
	`_fh_to_öt
(
f
) );

611  
	`_fh_to_öt
(
f
);

612 
	}
}

614 
	#LISTEN_BACKLOG
 4

	)

616 
	$sockë_lo›back_£rvî
(
p‹t
, 
ty≥
)

618 
FH
 
f
 = 
	`_fh_Æloc
–&
_fh_sockë_˛ass
 );

619 
sockaddr_ö
 
addr
;

620 
SOCKET
 
s
;

621 
n
;

623 i‡(!
f
) {

627 i‡(!
_wösock_öô
)

628 
	`_öô_wösock
();

630 
	`mem£t
(&
addr
, 0, (addr));

631 
addr
.
sö_Ámûy
 = 
AF_INET
;

632 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

633 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

635 
s
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

636 if(
s
 =
INVALID_SOCKET
)  -1;

638 
f
->
fh_sockë
 = 
s
;

640 
n
 = 1;

641 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_EXCLUSIVEADDRUSE
, (c⁄° *)&
n
, (n));

643 if(
	`böd
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

644 
	`_fh_˛o£
(
f
);

647 i‡(
ty≥
 =
SOCK_STREAM
) {

648 
ªt
;

650 
ªt
 = 
	`li°í
(
s
, 
LISTEN_BACKLOG
);

651 i‡(
ªt
 < 0) {

652 
	`_fh_˛o£
(
f
);

656 
	`¢¥ötf
–
f
->
«me
, (f->«me), "%d÷o-£rvî:%s%d)", 
	`_fh_to_öt
(f), 
ty≥
 !
SOCK_STREAM
 ? "udp:" : "", 
p‹t
 );

657 
	`D
–"sockë_lo›back_£rvî:Ö‹à%dÅy≥ %†=> fd %d\n", 
p‹t
, 
ty≥
 !
SOCK_STREAM
 ? "udp" : "t˝", 
	`_fh_to_öt
(
f
) );

658  
	`_fh_to_öt
(
f
);

659 
	}
}

662 
	$sockë_√tw‹k_˛õ¡
(c⁄° *
ho°
, 
p‹t
, 
ty≥
)

664 
FH
 
f
 = 
	`_fh_Æloc
–&
_fh_sockë_˛ass
 );

665 
ho°ít
 *
hp
;

666 
sockaddr_ö
 
addr
;

667 
SOCKET
 
s
;

669 i‡(!
f
)

672 i‡(!
_wösock_öô
)

673 
	`_öô_wösock
();

675 
hp
 = 
	`gëho°by«me
(
ho°
);

676 if(
hp
 == 0) {

677 
	`_fh_˛o£
(
f
);

681 
	`mem£t
(&
addr
, 0, (addr));

682 
addr
.
sö_Ámûy
 = 
hp
->
h_addπy≥
;

683 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

684 
	`mem˝y
(&
addr
.
sö_addr
, 
hp
->
h_addr
, hp->
h_Àngth
);

686 
s
 = 
	`sockë
(
hp
->
h_addπy≥
, 
ty≥
, 0);

687 if(
s
 =
INVALID_SOCKET
) {

688 
	`_fh_˛o£
(
f
);

691 
f
->
fh_sockë
 = 
s
;

693 if(
	`c⁄√˘
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

694 
	`_fh_˛o£
(
f
);

698 
	`¢¥ötf
–
f
->
«me
, (f->«me), "%d“ë-˛õ¡:%s%d)", 
	`_fh_to_öt
(f), 
ty≥
 !
SOCK_STREAM
 ? "udp:" : "", 
p‹t
 );

699 
	`D
–"sockë_√tw‹k_˛õ¡: ho° '%s'Ö‹à%dÅy≥ %†=> fd %d\n", 
ho°
, 
p‹t
, 
ty≥
 !
SOCK_STREAM
 ? "udp" : "t˝", 
	`_fh_to_öt
(
f
) );

700  
	`_fh_to_öt
(
f
);

701 
	}
}

704 
	$sockë_öaddr_™y_£rvî
(
p‹t
, 
ty≥
)

706 
FH
 
f
 = 
	`_fh_Æloc
–&
_fh_sockë_˛ass
 );

707 
sockaddr_ö
 
addr
;

708 
SOCKET
 
s
;

709 
n
;

711 i‡(!
f
)

714 i‡(!
_wösock_öô
)

715 
	`_öô_wösock
();

717 
	`mem£t
(&
addr
, 0, (addr));

718 
addr
.
sö_Ámûy
 = 
AF_INET
;

719 
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

720 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

722 
s
 = 
	`sockë
(
AF_INET
, 
ty≥
, 0);

723 if(
s
 =
INVALID_SOCKET
) {

724 
	`_fh_˛o£
(
f
);

728 
f
->
fh_sockë
 = 
s
;

729 
n
 = 1;

730 
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_EXCLUSIVEADDRUSE
, (c⁄° *)&
n
, (n));

732 if(
	`böd
(
s
, (
sockaddr
 *Ë&
addr
, (addr)) < 0) {

733 
	`_fh_˛o£
(
f
);

737 i‡(
ty≥
 =
SOCK_STREAM
) {

738 
ªt
;

740 
ªt
 = 
	`li°í
(
s
, 
LISTEN_BACKLOG
);

741 i‡(
ªt
 < 0) {

742 
	`_fh_˛o£
(
f
);

746 
	`¢¥ötf
–
f
->
«me
, (f->«me), "%d◊ny-£rvî:%s%d)", 
	`_fh_to_öt
(f), 
ty≥
 !
SOCK_STREAM
 ? "udp:" : "", 
p‹t
 );

747 
	`D
–"sockë_öaddr_£rvî:Ö‹à%dÅy≥ %†=> fd %d\n", 
p‹t
, 
ty≥
 !
SOCK_STREAM
 ? "udp" : "t˝", 
	`_fh_to_öt
(
f
) );

748  
	`_fh_to_öt
(
f
);

749 
	}
}

751 #unde‡
ac˚±


752 
	$adb_sockë_ac˚±
(
£rvîfd
, 
sockaddr
* 
addr
, 
sockÀn_t
 *
addæí
)

754 
FH
 
£rvîfh
 = 
	`_fh_‰om_öt
(
£rvîfd
);

755 
FH
 
fh
;

757 i‡–!
£rvîfh
 || sîvîfh->
˛azz
 !&
_fh_sockë_˛ass
 ) {

758 
	`D
–"adb_sockë_ac˚±: invÆid fd %d\n", 
£rvîfd
 );

762 
fh
 = 
	`_fh_Æloc
–&
_fh_sockë_˛ass
 );

763 i‡(!
fh
) {

764 
	`D
( "adb_socket_accept:ÇotÉnough memoryÅoállocateáccepted socket descriptor\n" );

768 
fh
->
fh_sockë
 = 
	`ac˚±
–
£rvîfh
->fh_sockë, 
addr
, 
addæí
 );

769 i‡(
fh
->
fh_sockë
 =
INVALID_SOCKET
) {

770 
	`_fh_˛o£
–
fh
 );

771 
	`D
–"adb_sockë_ac˚±:ác˚± o¿fd %dÑëu∫Éº‹ %ld\n", 
£rvîfd
, 
	`GëLa°Eº‹
() );

775 
	`¢¥ötf
–
fh
->
«me
, (fh->«me), "%d◊c˚±:%s)", 
	`_fh_to_öt
(fh), 
£rvîfh
->name );

776 
	`D
–"adb_sockë_ac˚± o¿fd %dÑëu∫†fd %d\n", 
£rvîfd
, 
	`_fh_to_öt
(
fh
) );

777  
	`_fh_to_öt
(
fh
);

778 
	}
}

781 
	$dißbÀ_t˝_«gÀ
(
fd
)

783 
FH
 
fh
 = 
	`_fh_‰om_öt
(
fd
);

784 
⁄
;

786 i‡–!
fh
 || fh->
˛azz
 !&
_fh_sockë_˛ass
 )

789 
	`£tsock›t
–
fh
->
fh_sockë
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (c⁄° *)&
⁄
, (on) );

790 
	}
}

827 
	#BIP_BUFFER_SIZE
 4096

	)

830 
	~<°dio.h
>

831 
	#BIPD
(
x
Ë
D
 
	)
x

832 
	#BIPDUMP
 
bù_dump_hex


	)

834 
	$bù_dump_hex
–c⁄° * 
±r
, 
size_t
 
Àn
 )

836 
¬
, 
Àn2
 = 
Àn
;

838 i‡(
Àn2
 > 8)Üen2 = 8;

840 
¬
 = 0;Ç¿< 
Àn2
;Çn++)

841 
	`¥ötf
("%02x", 
±r
[
¬
]);

842 
	`¥ötf
(" ");

844 
¬
 = 0;Ç¿< 
Àn2
;Çn++) {

845 
c
 = 
±r
[
¬
];

846 i‡(
c
 < 32 || c > 127)

847 
c
 = '.';

848 
	`¥ötf
("%c", 
c
);

850 
	`¥ötf
("\n");

851 
	`fÊush
(
°dout
);

852 
	}
}

855 
	#BIPD
(
x
Ëdÿ{} 0)

	)

856 
	#BIPDUMP
(
p
,
l
Ë
	`BIPD
’)

	)

859 
	sBùBuf„rRec_


861 
	ma_°¨t
;

862 
	ma_íd
;

863 
	mb_íd
;

864 
	mfdö
;

865 
	mfdout
;

866 
	m˛o£d
;

867 
	mˇn_wrôe
;

868 
HANDLE
 
	mevt_wrôe
;

869 
	mˇn_ªad
;

870 
HANDLE
 
	mevt_ªad
;

871 
CRITICAL_SECTION
 
	mlock
;

872 
	mbuff
[ 
BIP_BUFFER_SIZE
 ];

874 } 
	tBùBuf„rRec
, *
	tBùBuf„r
;

877 
	$bù_buf„r_öô
–
BùBuf„r
 
buf„r
 )

879 
	`D
–"bô_buf„r_öô %p\n", 
buf„r
 );

880 
buf„r
->
a_°¨t
 = 0;

881 
buf„r
->
a_íd
 = 0;

882 
buf„r
->
b_íd
 = 0;

883 
buf„r
->
ˇn_wrôe
 = 1;

884 
buf„r
->
ˇn_ªad
 = 0;

885 
buf„r
->
fdö
 = 0;

886 
buf„r
->
fdout
 = 0;

887 
buf„r
->
˛o£d
 = 0;

888 
buf„r
->
evt_wrôe
 = 
	`Cª©eEvít
–
NULL
, 
TRUE
, TRUE, NULL );

889 
buf„r
->
evt_ªad
 = 
	`Cª©eEvít
–
NULL
, 
TRUE
, 
FALSE
, NULL );

890 
	`InôülizeCrôiˇlSe˘i⁄
–&
buf„r
->
lock
 );

891 
	}
}

894 
	$bù_buf„r_˛o£
–
BùBuf„r
 
bù
 )

896 
bù
->
˛o£d
 = 1;

898 i‡(!
bù
->
ˇn_ªad
) {

899 
	`SëEvít
–
bù
->
evt_ªad
 );

901 i‡(!
bù
->
ˇn_wrôe
) {

902 
	`SëEvít
–
bù
->
evt_wrôe
 );

904 
	}
}

907 
	$bù_buf„r_d⁄e
–
BùBuf„r
 
bù
 )

909 
	`BIPD
(–"bù_buf„r_d⁄e: %d->%d\n", 
bù
->
fdö
, bù->
fdout
 ));

910 
	`Clo£H™dÀ
–
bù
->
evt_ªad
 );

911 
	`Clo£H™dÀ
–
bù
->
evt_wrôe
 );

912 
	`DñëeCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

913 
	}
}

916 
	$bù_buf„r_wrôe
–
BùBuf„r
 
bù
, c⁄° * 
§c
, 
Àn
 )

918 
avaû
, 
cou¡
 = 0;

920 i‡(
Àn
 <= 0)

923 
	`BIPD
(–"bù_buf„r_wrôe:É¡î %d->%dÜí %d\n", 
bù
->
fdö
, bù->
fdout
, 
Àn
 ));

924 
	`BIPDUMP
–
§c
, 
Àn
 );

926 
	`E¡îCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

928 !
bù
->
ˇn_wrôe
) {

929 
ªt
;

930 
	`LóveCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

932 i‡(
bù
->
˛o£d
) {

933 
î∫o
 = 
EPIPE
;

937 
ªt
 = 
	`WaôF‹SögÀObje˘
–
bù
->
evt_wrôe
, 
INFINITE
 );

938 i‡(
ªt
 !
WAIT_OBJECT_0
) {

939 
	`D
–"bù_buf„r_wrôe:Éº‹ %d->%d WaôF‹SögÀObje˘Ñëu∫ed %d,Éº‹ %ld\n", 
bù
->
fdö
, bù->
fdout
, 
ªt
, 
	`GëLa°Eº‹
() );

942 i‡(
bù
->
˛o£d
) {

943 
î∫o
 = 
EPIPE
;

946 
	`E¡îCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

949 
	`BIPD
(–"bù_buf„r_wrôe:Éxe¯%d->%dÜí %d\n", 
bù
->
fdö
, bù->
fdout
, 
Àn
 ));

951 
avaû
 = 
BIP_BUFFER_SIZE
 - 
bù
->
a_íd
;

952 i‡(
avaû
 > 0)

955 i‡(
avaû
 > 
Àn
)

956 
avaû
 = 
Àn
;

958 
	`mem˝y
–
bù
->
buff
 + bù->
a_íd
, 
§c
, 
avaû
 );

959 
§c
 +
avaû
;

960 
cou¡
 +
avaû
;

961 
Àn
 -
avaû
;

963 
bù
->
a_íd
 +
avaû
;

964 i‡(
bù
->
a_íd
 =
BIP_BUFFER_SIZE
 && bù->
a_°¨t
 == 0) {

965 
bù
->
ˇn_wrôe
 = 0;

966 
	`Re£tEvít
–
bù
->
evt_wrôe
 );

967 
Exô
;

971 i‡(
Àn
 == 0)

972 
Exô
;

974 
avaû
 = 
bù
->
a_°¨t
 - bù->
b_íd
;

975 
	`as£π
–
avaû
 > 0 );

977 i‡(
avaû
 > 
Àn
)

978 
avaû
 = 
Àn
;

980 
	`mem˝y
–
bù
->
buff
 + bù->
b_íd
, 
§c
, 
avaû
 );

981 
cou¡
 +
avaû
;

982 
bù
->
b_íd
 +
avaû
;

984 i‡(
bù
->
b_íd
 =bù->
a_°¨t
) {

985 
bù
->
ˇn_wrôe
 = 0;

986 
	`Re£tEvít
–
bù
->
evt_wrôe
 );

989 
Exô
:

990 
	`as£π
–
cou¡
 > 0 );

992 i‡–!
bù
->
ˇn_ªad
 ) {

993 
bù
->
ˇn_ªad
 = 1;

994 
	`SëEvít
–
bù
->
evt_ªad
 );

997 
	`BIPD
(( "bip_buffer_write:Éxit %d->%d count %d (as=%dáe=%d be=%d cw=%d cr=%d\n",

998 
bù
->
fdö
, bù->
fdout
, 
cou¡
, bù->
a_°¨t
, bù->
a_íd
, bù->
b_íd
, bù->
ˇn_wrôe
, bù->
ˇn_ªad
 ));

999 
	`LóveCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

1001  
cou¡
;

1002 
	}
}

1005 
	$bù_buf„r_ªad
–
BùBuf„r
 
bù
, * 
d°
, 
Àn
 )

1007 
avaû
, 
cou¡
 = 0;

1009 i‡(
Àn
 <= 0)

1012 
	`BIPD
(–"bù_buf„r_ªad:É¡î %d->%dÜí %d\n", 
bù
->
fdö
, bù->
fdout
, 
Àn
 ));

1014 
	`E¡îCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

1015  !
bù
->
ˇn_ªad
 )

1018 
	`LóveCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

1019 
î∫o
 = 
EAGAIN
;

1022 
ªt
;

1023 
	`LóveCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

1025 i‡(
bù
->
˛o£d
) {

1026 
î∫o
 = 
EPIPE
;

1030 
ªt
 = 
	`WaôF‹SögÀObje˘
–
bù
->
evt_ªad
, 
INFINITE
 );

1031 i‡(
ªt
 !
WAIT_OBJECT_0
) {

1032 
	`D
–"bù_buf„r_ªad:Éº‹ %d->%d WaôF‹SögÀObje˘Ñëu∫ed %d,Éº‹ %ld\n", 
bù
->
fdö
, bù->
fdout
, 
ªt
, 
	`GëLa°Eº‹
());

1035 i‡(
bù
->
˛o£d
) {

1036 
î∫o
 = 
EPIPE
;

1039 
	`E¡îCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

1043 
	`BIPD
(–"bù_buf„r_ªad:Éxe¯%d->%dÜí %d\n", 
bù
->
fdö
, bù->
fdout
, 
Àn
 ));

1045 
avaû
 = 
bù
->
a_íd
 - bù->
a_°¨t
;

1046 
	`as£π
–
avaû
 > 0 );

1048 i‡(
avaû
 > 
Àn
)

1049 
avaû
 = 
Àn
;

1051 
	`mem˝y
–
d°
, 
bù
->
buff
 + bù->
a_°¨t
, 
avaû
 );

1052 
d°
 +
avaû
;

1053 
cou¡
 +
avaû
;

1054 
Àn
 -
avaû
;

1056 
bù
->
a_°¨t
 +
avaû
;

1057 i‡(
bù
->
a_°¨t
 < bù->
a_íd
)

1058 
Exô
;

1060 
bù
->
a_°¨t
 = 0;

1061 
bù
->
a_íd
 = bù->
b_íd
;

1062 
bù
->
b_íd
 = 0;

1064 
avaû
 = 
bù
->
a_íd
;

1065 i‡(
avaû
 > 0) {

1066 i‡(
avaû
 > 
Àn
)

1067 
avaû
 = 
Àn
;

1068 
	`mem˝y
–
d°
, 
bù
->
buff
, 
avaû
 );

1069 
cou¡
 +
avaû
;

1070 
bù
->
a_°¨t
 +
avaû
;

1072 i‡–
bù
->
a_°¨t
 < bù->
a_íd
 )

1073 
Exô
;

1075 
bù
->
a_°¨t
 = bù->
a_íd
 = 0;

1078 
bù
->
ˇn_ªad
 = 0;

1079 
	`Re£tEvít
–
bù
->
evt_ªad
 );

1081 
Exô
:

1082 
	`as£π
–
cou¡
 > 0 );

1084 i‡(!
bù
->
ˇn_wrôe
 ) {

1085 
bù
->
ˇn_wrôe
 = 1;

1086 
	`SëEvít
–
bù
->
evt_wrôe
 );

1089 
	`BIPDUMP
–(c⁄° *)
d°
 - 
cou¡
, count );

1090 
	`BIPD
(( "bip_buffer_read:Éxit %d->%d count %d (as=%dáe=%d be=%d cw=%d cr=%d\n",

1091 
bù
->
fdö
, bù->
fdout
, 
cou¡
, bù->
a_°¨t
, bù->
a_íd
, bù->
b_íd
, bù->
ˇn_wrôe
, bù->
ˇn_ªad
 ));

1092 
	`LóveCrôiˇlSe˘i⁄
–&
bù
->
lock
 );

1094  
cou¡
;

1095 
	}
}

1097 
	sSockëPaúRec_


1099 
BùBuf„rRec
 
	ma2b_bù
;

1100 
BùBuf„rRec
 
	mb2a_bù
;

1101 
FH
 
	ma_fd
;

1102 
	mu£d
;

1104 } 
	tSockëPaúRec
;

1106 
	$_fh_sockë∑ú_öô
–
FH
 
f
 )

1108 
f
->
fh_∑ú
 = 
NULL
;

1109 
	}
}

1112 
	$_fh_sockë∑ú_˛o£
–
FH
 
f
 )

1114 i‡–
f
->
fh_∑ú
 ) {

1115 
SockëPaú
 
∑ú
 = 
f
->
fh_∑ú
;

1117 i‡–
f
 =
∑ú
->
a_fd
 ) {

1118 
∑ú
->
a_fd
 = 
NULL
;

1121 
	`bù_buf„r_˛o£
–&
∑ú
->
b2a_bù
 );

1122 
	`bù_buf„r_˛o£
–&
∑ú
->
a2b_bù
 );

1124 i‡–--
∑ú
->
u£d
 == 0 ) {

1125 
	`bù_buf„r_d⁄e
–&
∑ú
->
b2a_bù
 );

1126 
	`bù_buf„r_d⁄e
–&
∑ú
->
a2b_bù
 );

1127 
	`‰ì
–
∑ú
 );

1129 
f
->
fh_∑ú
 = 
NULL
;

1132 
	}
}

1135 
	$_fh_sockë∑ú_l£ek
–
FH
 
f
, 
pos
, 
‹igö
 )

1137 
î∫o
 = 
ESPIPE
;

1139 
	}
}

1142 
	$_fh_sockë∑ú_ªad
–
FH
 
f
, * 
buf
, 
Àn
 )

1144 
SockëPaú
 
∑ú
 = 
f
->
fh_∑ú
;

1145 
BùBuf„r
 
bù
;

1147 i‡(!
∑ú
)

1150 i‡–
f
 =
∑ú
->
a_fd
 )

1151 
bù
 = &
∑ú
->
b2a_bù
;

1153 
bù
 = &
∑ú
->
a2b_bù
;

1155  
	`bù_buf„r_ªad
–
bù
, 
buf
, 
Àn
 );

1156 
	}
}

1159 
	$_fh_sockë∑ú_wrôe
–
FH
 
f
, c⁄° * 
buf
, 
Àn
 )

1161 
SockëPaú
 
∑ú
 = 
f
->
fh_∑ú
;

1162 
BùBuf„r
 
bù
;

1164 i‡(!
∑ú
)

1167 i‡–
f
 =
∑ú
->
a_fd
 )

1168 
bù
 = &
∑ú
->
a2b_bù
;

1170 
bù
 = &
∑ú
->
b2a_bù
;

1172  
	`bù_buf„r_wrôe
–
bù
, 
buf
, 
Àn
 );

1173 
	}
}

1176 
_fh_sockë∑ú_hook
–
FH
 
f
, 
evít
, 
EvítHook
 
hook
 );

1178 c⁄° 
FHCœssRec
 
	g_fh_sockë∑ú_˛ass
 =

1180 
_fh_sockë∑ú_öô
,

1181 
_fh_sockë∑ú_˛o£
,

1182 
_fh_sockë∑ú_l£ek
,

1183 
_fh_sockë∑ú_ªad
,

1184 
_fh_sockë∑ú_wrôe
,

1185 
_fh_sockë∑ú_hook


1189 
	$adb_sockë∑ú
–
sv
[2] )

1191 
FH
 
Á
, 
fb
;

1192 
SockëPaú
 
∑ú
;

1194 
Á
 = 
	`_fh_Æloc
–&
_fh_sockë∑ú_˛ass
 );

1195 
fb
 = 
	`_fh_Æloc
–&
_fh_sockë∑ú_˛ass
 );

1197 i‡(!
Á
 || !
fb
)

1198 
Faû
;

1200 
∑ú
 = 
	`mÆloc
( (*pair) );

1201 i‡(
∑ú
 =
NULL
) {

1202 
	`D
("adb_socketpair:ÇotÉnough memoryÅoállocateÖipes\n" );

1203 
Faû
;

1206 
	`bù_buf„r_öô
–&
∑ú
->
a2b_bù
 );

1207 
	`bù_buf„r_öô
–&
∑ú
->
b2a_bù
 );

1209 
Á
->
fh_∑ú
 = 
∑ú
;

1210 
fb
->
fh_∑ú
 = 
∑ú
;

1211 
∑ú
->
u£d
 = 2;

1212 
∑ú
->
a_fd
 = 
Á
;

1214 
sv
[0] = 
	`_fh_to_öt
(
Á
);

1215 
sv
[1] = 
	`_fh_to_öt
(
fb
);

1217 
∑ú
->
a2b_bù
.
fdö
 = 
sv
[0];

1218 
∑ú
->
a2b_bù
.
fdout
 = 
sv
[1];

1219 
∑ú
->
b2a_bù
.
fdö
 = 
sv
[1];

1220 
∑ú
->
b2a_bù
.
fdout
 = 
sv
[0];

1222 
	`¢¥ötf
–
Á
->
«me
, (Á->«me), "%d’aú:%d)", 
sv
[0], sv[1] );

1223 
	`¢¥ötf
–
fb
->
«me
, (fb->«me), "%d’aú:%d)", 
sv
[1], sv[0] );

1224 
	`D
–"adb_sockë∑ú:Ñëu∫†(%d, %d)\n", 
sv
[0], sv[1] );

1227 
Faû
:

1228 
	`_fh_˛o£
(
fb
);

1229 
	`_fh_˛o£
(
Á
);

1231 
	}
}

1244 
	#FATAL
(
x
...Ë
	`Áèl
(
__FUNCTION__
, x)

	)

1246 #i‡
DEBUG


1247 
	$dump_fde
(
fdevít
 *
fde
, c⁄° *
öfo
)

1249 
	`Ârötf
(
°dîr
,"FDE #%03d %c%c%¯%s\n", 
fde
->
fd
,

1250 
fde
->
°©e
 & 
FDE_READ
 ? 'R' : ' ',

1251 
fde
->
°©e
 & 
FDE_WRITE
 ? 'W' : ' ',

1252 
fde
->
°©e
 & 
FDE_ERROR
 ? 'E' : ' ',

1253 
öfo
);

1254 
	}
}

1256 
	#dump_fde
(
fde
, 
öfo
Ëdÿ{ } 0)

	)

1259 
	#FDE_EVENTMASK
 0x00ff

	)

1260 
	#FDE_STATEMASK
 0xff00

	)

1262 
	#FDE_ACTIVE
 0x0100

	)

1263 
	#FDE_PENDING
 0x0200

	)

1264 
	#FDE_CREATED
 0x0400

	)

1266 
fdevít_∂i°_íqueue
(
fdevít
 *
node
);

1267 
fdevít_∂i°_ªmove
(
fdevít
 *
node
);

1268 
fdevít
 *
fdevít_∂i°_dequeue
();

1270 
fdevít
 
	gli°_≥ndög
 = {

1271 .
√xt
 = &
li°_≥ndög
,

1272 .
	g¥ev
 = &
li°_≥ndög
,

1275 
fdevít
 **
	gfd_èbÀ
 = 0;

1276 
	gfd_èbÀ_max
 = 0;

1278 
EvítLo›îRec_
* 
	tEvítLo›î
;

1280 
	sEvítHookRec_


1282 
EvítHook
 
	m√xt
;

1283 
FH
 
	mfh
;

1284 
HANDLE
 
	mh
;

1285 
	mw™ãd
;

1286 
	mªady
;

1287 * 
	maux
;

1288 (*
	m¥ï¨e
)–
EvítHook
 
	mhook
 );

1289 (*
	m°¨t
Ë–
EvítHook
 
	mhook
 );

1290 (*
	m°›
Ë–
EvítHook
 
	mhook
 );

1291 (*
	mcheck
Ë–
EvítHook
 
	mhook
 );

1292 (*
	m≥ek
Ë–
EvítHook
 
	mhook
 );

1293 } 
	tEvítHookRec
;

1295 
EvítHook
 
	g_‰ì_hooks
;

1297 
EvítHook


1298 
	$evít_hook_Æloc
–
FH
 
fh
 )

1300 
EvítHook
 
hook
 = 
_‰ì_hooks
;

1301 i‡(
hook
 !
NULL
)

1302 
_‰ì_hooks
 = 
hook
->
√xt
;

1304 
hook
 = 
	`mÆloc
( (*hook) );

1305 i‡(
hook
 =
NULL
)

1306 
	`Áèl
( "couldÇotállocateÉvent hook\n" );

1308 
hook
->
√xt
 = 
NULL
;

1309 
hook
->
fh
 = fh;

1310 
hook
->
w™ãd
 = 0;

1311 
hook
->
ªady
 = 0;

1312 
hook
->
h
 = 
INVALID_HANDLE_VALUE
;

1313 
hook
->
aux
 = 
NULL
;

1315 
hook
->
¥ï¨e
 = 
NULL
;

1316 
hook
->
°¨t
 = 
NULL
;

1317 
hook
->
°›
 = 
NULL
;

1318 
hook
->
check
 = 
NULL
;

1319 
hook
->
≥ek
 = 
NULL
;

1321  
hook
;

1322 
	}
}

1325 
	$evít_hook_‰ì
–
EvítHook
 
hook
 )

1327 
hook
->
fh
 = 
NULL
;

1328 
hook
->
w™ãd
 = 0;

1329 
hook
->
ªady
 = 0;

1330 
hook
->
√xt
 = 
_‰ì_hooks
;

1331 
_‰ì_hooks
 = 
hook
;

1332 
	}
}

1336 
	$evít_hook_sig«l
–
EvítHook
 
hook
 )

1338 
FH
 
f
 = 
hook
->
fh
;

1339 
fd
 = 
	`_fh_to_öt
(
f
);

1340 
fdevít
* 
fde
 = 
fd_èbÀ
[ 
fd
 - 
WIN32_FH_BASE
 ];

1342 i‡(
fde
 !
NULL
 && fde->
fd
 == fd) {

1343 i‡((
fde
->
°©e
 & 
FDE_PENDING
) == 0) {

1344 
fde
->
°©e
 |
FDE_PENDING
;

1345 
	`fdevít_∂i°_íqueue
–
fde
 );

1347 
fde
->
evíts
 |
hook
->
w™ãd
;

1349 
	}
}

1352 
	#MAX_LOOPER_HANDLES
 
WIN32_MAX_FHS


	)

1354 
	sEvítLo›îRec_


1356 
EvítHook
 
	mhooks
;

1357 
HANDLE
 
	mhèb
[ 
MAX_LOOPER_HANDLES
 ];

1358 
	mhèb_cou¡
;

1360 } 
	tEvítLo›îRec
;

1362 
EvítHook
*

1363 
	$evít_lo›î_föd_p
–
EvítLo›î
 
lo›î
, 
FH
 
fh
 )

1365 
EvítHook
 *
≤ode
 = &
lo›î
->
hooks
;

1366 
EvítHook
 
node
 = *
≤ode
;

1368 i‡–
node
 =
NULL
 ||Çode->
fh
 == fh )

1370 
≤ode
 = &
node
->
√xt
;

1371 
node
 = *
≤ode
;

1373  
≤ode
;

1374 
	}
}

1377 
	$evít_lo›î_hook
–
EvítLo›î
 
lo›î
, 
fd
, 
evíts
 )

1379 
FH
 
f
 = 
	`_fh_‰om_öt
(
fd
);

1380 
EvítHook
 *
≤ode
;

1381 
EvítHook
 
node
;

1383 i‡(
f
 =
NULL
) {

1384 
	`D
("evít_lo›î_hook: invÆid fd=%d\n", 
fd
);

1388 
≤ode
 = 
	`evít_lo›î_föd_p
–
lo›î
, 
f
 );

1389 
node
 = *
≤ode
;

1390 i‡–
node
 =
NULL
 ) {

1391 
node
 = 
	`evít_hook_Æloc
–
f
 );

1392 
node
->
√xt
 = *
≤ode
;

1393 *
≤ode
 = 
node
;

1396 i‡–(
node
->
w™ãd
 & 
evíts
) !=Évents ) {

1398 
	`D
("event_looper_hook: call hook for %d (new=%x, old=%x)\n",

1399 
fd
, 
node
->
w™ãd
, 
evíts
);

1400 
f
->
˛azz
->
	`_fh_hook
–f, 
evíts
 & ~
node
->
w™ãd
,Çode );

1401 
node
->
w™ãd
 |
evíts
;

1403 
	`D
("event_looper_hook: ignoringÉvents %x for %d wanted=%x)\n",

1404 
evíts
, 
fd
, 
node
->
w™ãd
);

1406 
	}
}

1409 
	$evít_lo›î_unhook
–
EvítLo›î
 
lo›î
, 
fd
, 
evíts
 )

1411 
FH
 
fh
 = 
	`_fh_‰om_öt
(
fd
);

1412 
EvítHook
 *
≤ode
 = 
	`evít_lo›î_föd_p
–
lo›î
, 
fh
 );

1413 
EvítHook
 
node
 = *
≤ode
;

1415 i‡(
node
 !
NULL
) {

1416 
evíts2
 = 
evíts
 & 
node
->
w™ãd
;

1417 i‡–
evíts2
 == 0 ) {

1418 
	`D
–"evít_lo›î_unhook:Évít†%xÇŸÑegi°îed f‹ fd %d\n", 
evíts
, 
fd
 );

1421 
node
->
w™ãd
 &~
evíts2
;

1422 i‡(!
node
->
w™ãd
) {

1423 *
≤ode
 = 
node
->
√xt
;

1424 
	`evít_hook_‰ì
–
node
 );

1427 
	}
}

1448 
	#WAIT_ALL_CHUNK_SIZE
 63

	)

1451 
	sWaôF‹AŒP¨am
 {

1455 
HANDLE
 
	mmaö_evít
;

1464 
LONG
 vﬁ©ûê*
	msig«Àd_ödex
;

1466 
HANDLE
* 
	mh™dÀs
;

1468 
	mh™dÀs_cou¡
;

1470 
	mfú°_h™dÀ_ödex
;

1472 
HANDLE
 
	mthªad
;

1473 } 
	tWaôF‹AŒP¨am
;

1476 
__°dˇŒ


1477 
	$_ö_waôî_thªad
(* 
¨g
)

1479 
HANDLE
 
waô_⁄
[
WAIT_ALL_CHUNK_SIZE
 + 1];

1480 
ªs
;

1481 
WaôF‹AŒP¨am
* c⁄° 
∑øm
 = (WaôF‹AŒP¨am*)
¨g
;

1485 
waô_⁄
[0] = 
∑øm
->
maö_evít
;

1487 
	`mem˝y
(
waô_⁄
 + 1, 
∑øm
->
h™dÀs
,Ö¨am->
h™dÀs_cou¡
 * (
HANDLE
));

1489 
ªs
 = 
	`WaôF‹Mu…ùÀObje˘s
(
∑øm
->
h™dÀs_cou¡
 + 1, 
waô_⁄
, 
FALSE
, 
INFINITE
);

1490 i‡(
ªs
 > 0 &&Ñe†< (
∑øm
->
h™dÀs_cou¡
 + 1)) {

1493 
	`I¡îlockedCom∑ªExch™ge
(
∑øm
->
sig«Àd_ödex
,

1494 
ªs
 - 1L + 
∑øm
->
fú°_h™dÀ_ödex
, -1L);

1498 
	`SëEvít
(
∑øm
->
maö_evít
);

1500 
	`_ídthªadex
(0);

1502 
	}
}

1513 
	$_waô_f‹_Æl
(
HANDLE
* 
h™dÀs
, 
h™dÀs_cou¡
)

1515 
WaôF‹AŒP¨am
* 
thªads
;

1516 
HANDLE
 
maö_evít
;

1517 
chunks
, 
chunk
, 
ªmaös
;

1529 vﬁ©ûê
LONG
 
sig_ödex
 = -1;

1532 
chunks
 = 
h™dÀs_cou¡
 / 
WAIT_ALL_CHUNK_SIZE
;

1533 
ªmaös
 = 
h™dÀs_cou¡
 % 
WAIT_ALL_CHUNK_SIZE
;

1534 
thªads
 = (
WaôF‹AŒP¨am
*)
	`mÆloc
((
chunks
 + (
ªmaös
 ? 1 : 0)) *

1535 (
WaôF‹AŒP¨am
));

1536 i‡(
thªads
 =
NULL
) {

1537 
	`D
("U«bÀÅÿÆloˇãÅhªadáºay f‹ %d h™dÀs.", 
h™dÀs_cou¡
);

1538  ()
WAIT_FAILED
;

1543 
maö_evít
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, NULL);

1544 i‡(
maö_evít
 =
NULL
) {

1545 
	`D
("U«bÀÅÿ¸óã maöÉvít. Eº‹: %d", 
	`GëLa°Eº‹
());

1546 
	`‰ì
(
thªads
);

1547  ()
WAIT_FAILED
;

1554 
chunk
 = 0; chunk < 
chunks
; chunk++) {

1555 
thªads
[
chunk
].
maö_evít
 = main_event;

1556 
thªads
[
chunk
].
sig«Àd_ödex
 = &
sig_ödex
;

1557 
thªads
[
chunk
].
fú°_h™dÀ_ödex
 = 
WAIT_ALL_CHUNK_SIZE
 * chunk;

1558 
thªads
[
chunk
].
h™dÀs
 = h™dÀ†+Åhªads[chunk].
fú°_h™dÀ_ödex
;

1559 
thªads
[
chunk
].
h™dÀs_cou¡
 = 
WAIT_ALL_CHUNK_SIZE
;

1561 i‡(
ªmaös
) {

1562 
thªads
[
chunk
].
maö_evít
 = main_event;

1563 
thªads
[
chunk
].
sig«Àd_ödex
 = &
sig_ödex
;

1564 
thªads
[
chunk
].
fú°_h™dÀ_ödex
 = 
WAIT_ALL_CHUNK_SIZE
 * chunk;

1565 
thªads
[
chunk
].
h™dÀs
 = h™dÀ†+Åhªads[chunk].
fú°_h™dÀ_ödex
;

1566 
thªads
[
chunk
].
h™dÀs_cou¡
 = 
ªmaös
;

1567 
chunks
++;

1571 
chunk
 = 0; chunk < 
chunks
; chunk++) {

1574 
thªads
[
chunk
].
thªad
 = (
HANDLE
)
	`_begöthªadex
(
NULL
, 0, 
_ö_waôî_thªad
,

1575 &
thªads
[
chunk
], 0, 
NULL
);

1576 i‡(
thªads
[
chunk
].
thªad
 =
NULL
) {

1578 
	`D
("UnableÅo createá waitingÅhread %d of %d.Érrno=%d",

1579 
chunk
, 
chunks
, 
î∫o
);

1580 
chunks
 = 
chunk
;

1581 
	`SëEvít
(
maö_evít
);

1587 
	`WaôF‹SögÀObje˘
(
maö_evít
, 
INFINITE
);

1590 
chunk
 = 0; chunk < 
chunks
; chunk++) {

1591 
	`WaôF‹SögÀObje˘
(
thªads
[
chunk
].
thªad
, 
INFINITE
);

1592 
	`Clo£H™dÀ
(
thªads
[
chunk
].
thªad
);

1595 
	`Clo£H™dÀ
(
maö_evít
);

1596 
	`‰ì
(
thªads
);

1599 c⁄° 
ªt
 = ()
	`I¡îlockedCom∑ªExch™ge
(&
sig_ödex
, -1, -1);

1600  (
ªt
 >0Ë?Ñë : ()
WAIT_FAILED
;

1601 
	}
}

1603 
EvítLo›îRec
 
	gwö32_lo›î
;

1605 
	$fdevít_öô
()

1607 
wö32_lo›î
.
hèb_cou¡
 = 0;

1608 
wö32_lo›î
.
hooks
 = 
NULL
;

1609 
	}
}

1611 
	$fdevít_c⁄√˘
(
fdevít
 *
fde
)

1613 
EvítLo›î
 
lo›î
 = &
wö32_lo›î
;

1614 
evíts
 = 
fde
->
°©e
 & 
FDE_EVENTMASK
;

1616 i‡(
evíts
 != 0)

1617 
	`evít_lo›î_hook
–
lo›î
, 
fde
->
fd
, 
evíts
 );

1618 
	}
}

1620 
	$fdevít_disc⁄√˘
(
fdevít
 *
fde
)

1622 
EvítLo›î
 
lo›î
 = &
wö32_lo›î
;

1623 
evíts
 = 
fde
->
°©e
 & 
FDE_EVENTMASK
;

1625 i‡(
evíts
 != 0)

1626 
	`evít_lo›î_unhook
–
lo›î
, 
fde
->
fd
, 
evíts
 );

1627 
	}
}

1629 
	$fdevít_upd©e
(
fdevít
 *
fde
, 
evíts
)

1631 
EvítLo›î
 
lo›î
 = &
wö32_lo›î
;

1632 
evíts0
 = 
fde
->
°©e
 & 
FDE_EVENTMASK
;

1634 i‡(
evíts
 !
evíts0
) {

1635 
ªmoves
 = 
evíts0
 & ~
evíts
;

1636 
adds
 = 
evíts
 & ~
evíts0
;

1637 i‡(
ªmoves
) {

1638 
	`D
("fdevít_upd©e:Ñemovê%x from %d\n", 
ªmoves
, 
fde
->
fd
);

1639 
	`evít_lo›î_unhook
–
lo›î
, 
fde
->
fd
, 
ªmoves
 );

1641 i‡(
adds
) {

1642 
	`D
("fdevít_upd©e:ádd %xÅÿ%d\n", 
adds
, 
fde
->
fd
);

1643 
	`evít_lo›î_hook
 ( 
lo›î
, 
fde
->
fd
, 
adds
 );

1646 
	}
}

1648 
	$fdevít_¥o˚ss
()

1650 
EvítLo›î
 
lo›î
 = &
wö32_lo›î
;

1651 
EvítHook
 
hook
;

1652 
gŸ⁄e
 = 0;

1655 
hook
 = 
lo›î
->
hooks
; hook; hook = hook->
√xt
) {

1656 
hook
->
ªady
 = 0;

1657 i‡(
hook
->
¥ï¨e
) {

1658 
hook
->
	`¥ï¨e
(hook);

1659 i‡(
hook
->
ªady
 != 0) {

1660 
	`evít_hook_sig«l
–
hook
 );

1661 
gŸ⁄e
 = 1;

1667 i‡(!
gŸ⁄e
)

1669 
lo›î
->
hèb_cou¡
 = 0;

1671 
hook
 = 
lo›î
->
hooks
; hook; hook = hook->
√xt
)

1673 i‡(
hook
->
°¨t
 && !hook->
	`°¨t
(hook)) {

1674 
	`D
( "fdevent_process:Érror when startingá hook\n" );

1677 i‡(
hook
->
h
 !
INVALID_HANDLE_VALUE
) {

1678 
¬
;

1680 
¬
 = 0;Ç¿< 
lo›î
->
hèb_cou¡
;Çn++)

1682 i‡–
lo›î
->
hèb
[
¬
] =
hook
->
h
 )

1683 
D⁄tAdd
;

1685 
lo›î
->
hèb
[Üo›î->
hèb_cou¡
++ ] = 
hook
->
h
;

1686 
D⁄tAdd
:

1691 i‡(
lo›î
->
hèb_cou¡
 == 0) {

1692 
	`D
( "fdevent_process:ÇothingÅo wait for !!\n" );

1698 
waô_ªt
;

1700 
	`D
–"adb_wö32: waôög f‹ %dÉvíts\n", 
lo›î
->
hèb_cou¡
 );

1701 i‡(
lo›î
->
hèb_cou¡
 > 
MAXIMUM_WAIT_OBJECTS
) {

1702 
	`D
("h™dÀ cou¡ %dÉx˚ed†MAXIMUM_WAIT_OBJECTS.\n", 
lo›î
->
hèb_cou¡
);

1703 
waô_ªt
 = 
	`_waô_f‹_Æl
(
lo›î
->
hèb
,Üo›î->
hèb_cou¡
);

1705 
waô_ªt
 = 
	`WaôF‹Mu…ùÀObje˘s
–
lo›î
->
hèb_cou¡
,Üo›î->
hèb
, 
FALSE
, 
INFINITE
 );

1707 i‡(
waô_ªt
 =()
WAIT_FAILED
) {

1708 
	`D
–"adb_wö32: waô faûed,Éº‹ %ld\n", 
	`GëLa°Eº‹
() );

1710 
	`D
–"adb_wö32: gŸ o√ (ödex %d)\n", 
waô_ªt
 );

1715 i‡(()
waô_ªt
 < ()
lo›î
->
hèb_cou¡
)

1717 
hook
 = 
lo›î
->
hooks
; hook; hook = hook->
√xt
)

1719 i‡–
lo›î
->
hèb
[
waô_ªt
] =
hook
->
h
 &&

1720 (!
hook
->
check
 || hook->
	`check
(hook)) )

1722 
	`D
–"adb_wö32: sig«lög %†f‹ %x\n", 
hook
->
fh
->
«me
, hook->
ªady
 );

1723 
	`evít_hook_sig«l
–
hook
 );

1724 
gŸ⁄e
 = 1;

1731 !
gŸ⁄e
);

1733 
hook
 = 
lo›î
->
hooks
; hook; hook = hook->
√xt
) {

1734 i‡(
hook
->
°›
)

1735 
hook
->
	`°›
( hook );

1739 
hook
 = 
lo›î
->
hooks
; hook; hook = hook->
√xt
) {

1740 i‡(
hook
->
≥ek
 && hook->
	`≥ek
(hook))

1741 
	`evít_hook_sig«l
–
hook
 );

1743 
	}
}

1746 
	$fdevít_ªgi°î
(
fdevít
 *
fde
)

1748 
fd
 = 
fde
->fd - 
WIN32_FH_BASE
;

1750 if(
fd
 < 0) {

1751 
	`FATAL
("bogu†√g©ivêfd (%d)\n", 
fde
->
fd
);

1754 if(
fd
 >
fd_èbÀ_max
) {

1755 
ﬁdmax
 = 
fd_èbÀ_max
;

1756 if(
fde
->
fd
 > 32000) {

1757 
	`FATAL
("bogu†huuuugêfd (%d)\n", 
fde
->
fd
);

1759 if(
fd_èbÀ_max
 == 0) {

1760 
	`fdevít_öô
();

1761 
fd_èbÀ_max
 = 256;

1763 
fd_èbÀ_max
 <
fd
) {

1764 
fd_èbÀ_max
 *= 2;

1766 
fd_èbÀ
 = 
	`ªÆloc
(fd_èbÀ, (
fdevít
*Ë* 
fd_èbÀ_max
);

1767 if(
fd_èbÀ
 == 0) {

1768 
	`FATAL
("couldÇŸÉx∑nd fd_èbÀÅÿ%dÉ¡rõs\n", 
fd_èbÀ_max
);

1770 
	`mem£t
(
fd_èbÀ
 + 
ﬁdmax
, 0, (Ë* (
fd_èbÀ_max
 - oldmax));

1773 
fd_èbÀ
[
fd
] = 
fde
;

1774 
	}
}

1776 
	$fdevít_uƒegi°î
(
fdevít
 *
fde
)

1778 
fd
 = 
fde
->fd - 
WIN32_FH_BASE
;

1780 if((
fd
 < 0Ë|| (fd >
fd_èbÀ_max
)) {

1781 
	`FATAL
("fd ouào‡øngê(%d)\n", 
fde
->
fd
);

1784 if(
fd_èbÀ
[
fd
] !
fde
) {

1785 
	`FATAL
("fd_table out of sync");

1788 
fd_èbÀ
[
fd
] = 0;

1790 if(!(
fde
->
°©e
 & 
FDE_DONT_CLOSE
)) {

1791 
	`dump_fde
(
fde
, "close");

1792 
	`adb_˛o£
(
fde
->
fd
);

1794 
	}
}

1796 
	$fdevít_∂i°_íqueue
(
fdevít
 *
node
)

1798 
fdevít
 *
li°
 = &
li°_≥ndög
;

1800 
node
->
√xt
 = 
li°
;

1801 
node
->
¥ev
 = 
li°
->prev;

1802 
node
->
¥ev
->
√xt
 =Çode;

1803 
li°
->
¥ev
 = 
node
;

1804 
	}
}

1806 
	$fdevít_∂i°_ªmove
(
fdevít
 *
node
)

1808 
node
->
¥ev
->
√xt
 =Çode->next;

1809 
node
->
√xt
->
¥ev
 =Çode->prev;

1810 
node
->
√xt
 = 0;

1811 
node
->
¥ev
 = 0;

1812 
	}
}

1814 
fdevít
 *
	$fdevít_∂i°_dequeue
()

1816 
fdevít
 *
li°
 = &
li°_≥ndög
;

1817 
fdevít
 *
node
 = 
li°
->
√xt
;

1819 if(
node
 =
li°
)  0;

1821 
li°
->
√xt
 = 
node
->next;

1822 
li°
->
√xt
->
¥ev
 =Üist;

1823 
node
->
√xt
 = 0;

1824 
node
->
¥ev
 = 0;

1826  
node
;

1827 
	}
}

1829 
fdevít
 *
	$fdevít_¸óã
(
fd
, 
fd_func
 
func
, *
¨g
)

1831 
fdevít
 *
fde
 = (fdevít*Ë
	`mÆloc
((fdevent));

1832 if(
fde
 == 0)  0;

1833 
	`fdevít_ö°Æl
(
fde
, 
fd
, 
func
, 
¨g
);

1834 
fde
->
°©e
 |
FDE_CREATED
;

1835  
fde
;

1836 
	}
}

1838 
	$fdevít_de°roy
(
fdevít
 *
fde
)

1840 if(
fde
 == 0) ;

1841 if(!(
fde
->
°©e
 & 
FDE_CREATED
)) {

1842 
	`FATAL
("fdê%∞nŸ cª©ed by fdevít_¸óã()\n", 
fde
);

1844 
	`fdevít_ªmove
(
fde
);

1845 
	}
}

1847 
	$fdevít_ö°Æl
(
fdevít
 *
fde
, 
fd
, 
fd_func
 
func
, *
¨g
)

1849 
	`mem£t
(
fde
, 0, (
fdevít
));

1850 
fde
->
°©e
 = 
FDE_ACTIVE
;

1851 
fde
->
fd
 = fd;

1852 
fde
->
func
 = func;

1853 
fde
->
¨g
 =árg;

1855 
	`fdevít_ªgi°î
(
fde
);

1856 
	`dump_fde
(
fde
, "connect");

1857 
	`fdevít_c⁄√˘
(
fde
);

1858 
fde
->
°©e
 |
FDE_ACTIVE
;

1859 
	}
}

1861 
	$fdevít_ªmove
(
fdevít
 *
fde
)

1863 if(
fde
->
°©e
 & 
FDE_PENDING
) {

1864 
	`fdevít_∂i°_ªmove
(
fde
);

1867 if(
fde
->
°©e
 & 
FDE_ACTIVE
) {

1868 
	`fdevít_disc⁄√˘
(
fde
);

1869 
	`dump_fde
(
fde
, "disconnect");

1870 
	`fdevít_uƒegi°î
(
fde
);

1873 
fde
->
°©e
 = 0;

1874 
fde
->
evíts
 = 0;

1875 
	}
}

1878 
	$fdevít_£t
(
fdevít
 *
fde
, 
evíts
)

1880 
evíts
 &
FDE_EVENTMASK
;

1882 if((
fde
->
°©e
 & 
FDE_EVENTMASK
Ë=()
evíts
) ;

1884 if(
fde
->
°©e
 & 
FDE_ACTIVE
) {

1885 
	`fdevít_upd©e
(
fde
, 
evíts
);

1886 
	`dump_fde
(
fde
, "update");

1889 
fde
->
°©e
 = (fde->°©ê& 
FDE_STATEMASK
Ë| 
evíts
;

1891 if(
fde
->
°©e
 & 
FDE_PENDING
) {

1896 
fde
->
evíts
 &= (~events);

1897 if(
fde
->
evíts
 == 0) {

1898 
	`fdevít_∂i°_ªmove
(
fde
);

1899 
fde
->
°©e
 &(~
FDE_PENDING
);

1902 
	}
}

1904 
	$fdevít_add
(
fdevít
 *
fde
, 
evíts
)

1906 
	`fdevít_£t
(

1907 
fde
, (fde->
°©e
 & 
FDE_EVENTMASK
Ë| (
evíts
 & FDE_EVENTMASK));

1908 
	}
}

1910 
	$fdevít_dñ
(
fdevít
 *
fde
, 
evíts
)

1912 
	`fdevít_£t
(

1913 
fde
, (fde->
°©e
 & 
FDE_EVENTMASK
Ë& (~(
evíts
 & FDE_EVENTMASK)));

1914 
	}
}

1916 
	$fdevít_lo›
()

1918 
fdevít
 *
fde
;

1921 #i‡
DEBUG


1922 
	`Ârötf
(
°dîr
,"--- ---- waiting forÉvents\n");

1924 
	`fdevít_¥o˚ss
();

1926 (
fde
 = 
	`fdevít_∂i°_dequeue
())) {

1927 
evíts
 = 
fde
->events;

1928 
fde
->
evíts
 = 0;

1929 
fde
->
°©e
 &(~
FDE_PENDING
);

1930 
	`dump_fde
(
fde
, "callback");

1931 
fde
->
	`func
(fde->
fd
, 
evíts
, fde->
¨g
);

1934 
	}
}

1939 
	$_evít_fûe_¥ï¨e
–
EvítHook
 
hook
 )

1941 i‡(
hook
->
w™ãd
 & (
FDE_READ
|
FDE_WRITE
)) {

1943 
hook
->
ªady
 |hook->
w™ãd
 & (
FDE_READ
|
FDE_WRITE
);

1945 
	}
}

1947 
	$_evít_fûe_≥ek
–
EvítHook
 
hook
 )

1949  (
hook
->
w™ãd
 & (
FDE_READ
|
FDE_WRITE
));

1950 
	}
}

1952 
	$_fh_fûe_hook
–
FH
 
f
, 
evíts
, 
EvítHook
 
hook
 )

1954 
hook
->
h
 = 
f
->
fh_h™dÀ
;

1955 
hook
->
¥ï¨e
 = 
_evít_fûe_¥ï¨e
;

1956 
hook
->
≥ek
 = 
_evít_fûe_≥ek
;

1957 
	}
}

1962 
	$_evít_sockë_vîify
–
EvítHook
 
hook
, 
WSANETWORKEVENTS
* 
evts
 )

1964 i‡–
evts
->
lNëw‹kEvíts
 & (
FD_READ
|
FD_ACCEPT
|
FD_CLOSE
) ) {

1965 i‡(
hook
->
w™ãd
 & 
FDE_READ
)

1966 
hook
->
ªady
 |
FDE_READ
;

1967 i‡((
evts
->
iEº‹Code
[
FD_READ
] !0Ë&& 
hook
->
w™ãd
 & 
FDE_ERROR
)

1968 
hook
->
ªady
 |
FDE_ERROR
;

1970 i‡–
evts
->
lNëw‹kEvíts
 & (
FD_WRITE
|
FD_CONNECT
|
FD_CLOSE
) ) {

1971 i‡(
hook
->
w™ãd
 & 
FDE_WRITE
)

1972 
hook
->
ªady
 |
FDE_WRITE
;

1973 i‡((
evts
->
iEº‹Code
[
FD_WRITE
] !0Ë&& 
hook
->
w™ãd
 & 
FDE_ERROR
)

1974 
hook
->
ªady
 |
FDE_ERROR
;

1976 i‡–
evts
->
lNëw‹kEvíts
 & 
FD_OOB
 ) {

1977 i‡(
hook
->
w™ãd
 & 
FDE_ERROR
)

1978 
hook
->
ªady
 |
FDE_ERROR
;

1980 
	}
}

1982 
	$_evít_sockë_¥ï¨e
–
EvítHook
 
hook
 )

1984 
WSANETWORKEVENTS
 
evts
;

1987 i‡(!
	`WSAEnumNëw‹kEvíts
–
hook
->
fh
->
fh_sockë
, 
NULL
, &
evts
 ))

1988 
	`_evít_sockë_vîify
–
hook
, &
evts
 );

1989 
	}
}

1991 
	$_sockë_w™ãd_to_Êags
–
w™ãd
 )

1993 
Êags
 = 0;

1994 i‡(
w™ãd
 & 
FDE_READ
)

1995 
Êags
 |
FD_READ
 | 
FD_ACCEPT
 | 
FD_CLOSE
;

1997 i‡(
w™ãd
 & 
FDE_WRITE
)

1998 
Êags
 |
FD_WRITE
 | 
FD_CONNECT
 | 
FD_CLOSE
;

2000 i‡(
w™ãd
 & 
FDE_ERROR
)

2001 
Êags
 |
FD_OOB
;

2003  
Êags
;

2004 
	}
}

2006 
	$_evít_sockë_°¨t
–
EvítHook
 
hook
 )

2009 
FH
 
fh
 = 
hook
->fh;

2010 
Êags
 = 
	`_sockë_w™ãd_to_Êags
–
hook
->
w™ãd
 );

2012 
hook
->
h
 = 
fh
->
evít
;

2013 i‡(
hook
->
h
 =
INVALID_HANDLE_VALUE
) {

2014 
	`D
–"_evít_sockë_°¨t:Çÿevíàf‹ %s\n", 
fh
->
«me
 );

2018 i‡–
Êags
 !
fh
->
mask
 ) {

2019 
	`D
–"_evít_sockë_°¨t: hookög %†f‹ %x (Êag†%ld)\n", 
hook
->
fh
->
«me
, hook->
w™ãd
, 
Êags
 );

2020 i‡–
	`WSAEvítSñe˘
–
fh
->
fh_sockë
, 
hook
->
h
, 
Êags
 ) ) {

2021 
	`D
–"_evít_sockë_°¨t: WSAEvítSñe˘(Ëf‹ %†Áûed,Éº‹ %d\n", 
hook
->
fh
->
«me
, 
	`WSAGëLa°Eº‹
() );

2022 
	`Clo£H™dÀ
–
hook
->
h
 );

2023 
hook
->
h
 = 
INVALID_HANDLE_VALUE
;

2024 
	`exô
(1);

2027 
fh
->
mask
 = 
Êags
;

2030 
	}
}

2032 
	$_evít_sockë_°›
–
EvítHook
 
hook
 )

2034 
hook
->
h
 = 
INVALID_HANDLE_VALUE
;

2035 
	}
}

2037 
	$_evít_sockë_check
–
EvítHook
 
hook
 )

2039 
ªsu…
 = 0;

2040 
FH
 
fh
 = 
hook
->fh;

2041 
WSANETWORKEVENTS
 
evts
;

2043 i‡(!
	`WSAEnumNëw‹kEvíts
–
fh
->
fh_sockë
, 
hook
->
h
, &
evts
 ) ) {

2044 
	`_evít_sockë_vîify
–
hook
, &
evts
 );

2045 
ªsu…
 = (
hook
->
ªady
 != 0);

2046 i‡(
ªsu…
) {

2047 
	`Re£tEvít
–
hook
->
h
 );

2050 
	`D
–"_evít_sockë_check %†ªtu∫†%d\n", 
fh
->
«me
, 
ªsu…
 );

2051  
ªsu…
;

2052 
	}
}

2054 
	$_evít_sockë_≥ek
–
EvítHook
 
hook
 )

2056 
WSANETWORKEVENTS
 
evts
;

2057 
FH
 
fh
 = 
hook
->fh;

2060 i‡(!
	`WSAEnumNëw‹kEvíts
–
fh
->
fh_sockë
, 
NULL
, &
evts
 )) {

2061 
	`_evít_sockë_vîify
–
hook
, &
evts
 );

2062 i‡(
hook
->
ªady
)

2063 
	`Re£tEvít
–
hook
->
h
 );

2066  
hook
->
ªady
 != 0;

2067 
	}
}

2071 
	$_fh_sockë_hook
–
FH
 
f
, 
evíts
, 
EvítHook
 
hook
 )

2073 
hook
->
¥ï¨e
 = 
_evít_sockë_¥ï¨e
;

2074 
hook
->
°¨t
 = 
_evít_sockë_°¨t
;

2075 
hook
->
°›
 = 
_evít_sockë_°›
;

2076 
hook
->
check
 = 
_evít_sockë_check
;

2077 
hook
->
≥ek
 = 
_evít_sockë_≥ek
;

2079 
	`_evít_sockë_°¨t
–
hook
 );

2080 
	}
}

2085 
	$_evít_sockë∑ú_¥ï¨e
–
EvítHook
 
hook
 )

2087 
FH
 
fh
 = 
hook
->fh;

2088 
SockëPaú
 
∑ú
 = 
fh
->
fh_∑ú
;

2089 
BùBuf„r
 
rbù
 = (
∑ú
->
a_fd
 =
fh
Ë? &∑ú->
b2a_bù
 : &∑ú->
a2b_bù
;

2090 
BùBuf„r
 
wbù
 = (
∑ú
->
a_fd
 =
fh
Ë? &∑ú->
a2b_bù
 : &∑ú->
b2a_bù
;

2092 i‡(
hook
->
w™ãd
 & 
FDE_READ
 && 
rbù
->
ˇn_ªad
)

2093 
hook
->
ªady
 |
FDE_READ
;

2095 i‡(
hook
->
w™ãd
 & 
FDE_WRITE
 && 
wbù
->
ˇn_wrôe
)

2096 
hook
->
ªady
 |
FDE_WRITE
;

2097 
	}
}

2099 
	$_evít_sockë∑ú_°¨t
–
EvítHook
 
hook
 )

2101 
FH
 
fh
 = 
hook
->fh;

2102 
SockëPaú
 
∑ú
 = 
fh
->
fh_∑ú
;

2103 
BùBuf„r
 
rbù
 = (
∑ú
->
a_fd
 =
fh
Ë? &∑ú->
b2a_bù
 : &∑ú->
a2b_bù
;

2104 
BùBuf„r
 
wbù
 = (
∑ú
->
a_fd
 =
fh
Ë? &∑ú->
a2b_bù
 : &∑ú->
b2a_bù
;

2106 i‡(
hook
->
w™ãd
 =
FDE_READ
)

2107 
hook
->
h
 = 
rbù
->
evt_ªad
;

2109 i‡(
hook
->
w™ãd
 =
FDE_WRITE
)

2110 
hook
->
h
 = 
wbù
->
evt_wrôe
;

2113 
	`D
("_event_socketpair_start: can't handle FDE_READ+FDE_WRITE\n" );

2116 
	`D
( "_event_socketpair_start: hook %s for %x wanted=%x\n",

2117 
hook
->
fh
->
«me
, 
	`_fh_to_öt
(fh), hook->
w™ãd
);

2119 
	}
}

2121 
	$_evít_sockë∑ú_≥ek
–
EvítHook
 
hook
 )

2123 
	`_evít_sockë∑ú_¥ï¨e
–
hook
 );

2124  
hook
->
ªady
 != 0;

2125 
	}
}

2127 
	$_fh_sockë∑ú_hook
–
FH
 
fh
, 
evíts
, 
EvítHook
 
hook
 )

2129 
hook
->
¥ï¨e
 = 
_evít_sockë∑ú_¥ï¨e
;

2130 
hook
->
°¨t
 = 
_evít_sockë∑ú_°¨t
;

2131 
hook
->
≥ek
 = 
_evít_sockë∑ú_≥ek
;

2132 
	}
}

2136 
	$adb_sysdïs_öô
( )

2138 
	#ADB_MUTEX
(
x
Ë
	`InôülizeCrôiˇlSe˘i⁄
–& x );

	)

2139 
	~"muãx_li°.h
"

2140 
	`InôülizeCrôiˇlSe˘i⁄
–&
_wö32_lock
 );

2141 
	}
}

2175 
	$adb_°πok_r
(*
s
, c⁄° *
dñim
, **
œ°
)

2177 *
•™p
;

2178 
c
, 
sc
;

2179 *
tok
;

2182 i‡(
s
 =
NULL
 && (†*
œ°
) == NULL)

2183  (
NULL
);

2188 
c⁄t
:

2189 
c
 = *
s
++;

2190 
•™p
 = (*)
dñim
; (
sc
 = *spanp++) != 0;) {

2191 i‡(
c
 =
sc
)

2192 
c⁄t
;

2195 i‡(
c
 == 0) {

2196 *
œ°
 = 
NULL
;

2197  (
NULL
);

2199 
tok
 = 
s
 - 1;

2206 
c
 = *
s
++;

2207 
•™p
 = (*)
dñim
;

2209 i‡((
sc
 = *
•™p
++Ë=
c
) {

2210 i‡(
c
 == 0)

2211 
s
 = 
NULL
;

2213 
s
[-1] = 0;

2214 *
œ°
 = 
s
;

2215  (
tok
);

2217 } 
sc
 != 0);

2220 
	}
}

	@test_track_devices.c

2 
	~<√tdb.h
>

3 
	~<sys/sockë.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<î∫o.h
>

7 
	~<mem‹y.h
>

10 
	$∑nic
–c⁄° * 
msg
 )

12 
	`Ârötf
(
°dîr
, "PANIC: %s: %s\n", 
msg
, 
	`°ªº‹
(
î∫o
));

13 
	`exô
(1);

14 
	}
}

17 
	$unix_wrôe
–
fd
, c⁄° * 
buf
, 
Àn
 )

19 
ªsu…
 = 0;

20 
Àn
 > 0) {

21 
Àn2
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

22 i‡(
Àn2
 < 0) {

23 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

27 
ªsu…
 +
Àn2
;

28 
Àn
 -
Àn2
;

29 
buf
 +
Àn2
;

31  
ªsu…
;

32 
	}
}

35 
	$unix_ªad
–
fd
, * 
buf
, 
Àn
 )

37 
ªsu…
 = 0;

38 
Àn
 > 0) {

39 
Àn2
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

40 i‡(
Àn2
 < 0) {

41 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

45 
ªsu…
 +
Àn2
;

46 
Àn
 -
Àn2
;

47 
buf
 +
Àn2
;

49  
ªsu…
;

50 
	}
}

53 
	$maö
( )

55 
ªt
, 
s
;

56 
sockaddr_ö
 
£rvî
;

57 
buf„r
[1024];

58 c⁄° * 
ªque°
 = "host:track-devices";

59 
Àn
;

61 
	`mem£t
–&
£rvî
, 0, (server) );

62 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

63 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(5037);

64 
£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

66 
s
 = 
	`sockë
–
PF_INET
, 
SOCK_STREAM
, 0 );

67 
ªt
 = 
	`c⁄√˘
–
s
, (
sockaddr
*Ë&
£rvî
, (server) );

68 i‡(
ªt
 < 0Ë
	`∑nic
( "couldÇot connectÅo server" );

71 
Àn
 = 
	`¢¥ötf
–
buf„r
,  buf„r, "%04x%s", 
	`°æí
(
ªque°
),Ñequest );

72 i‡(
	`unix_wrôe
(
s
, 
buf„r
, 
Àn
) < 0)

73 
	`∑nic
( "couldÇot sendÑequest" );

76 i‡(
	`unix_ªad
(
s
, 
buf„r
, 4) != 4)

77 
	`∑nic
( "couldÇotÑeadÑequest" );

79 
	`¥ötf
–"£rvîánswî: %.*s\n", 4, 
buf„r
 );

83 
hód
[5] = "0000";

85 i‡(
	`unix_ªad
(
s
, 
hód
, 4) < 0)

86 
	`∑nic
("couldÇotÑeadÜength");

88 i‡–
	`ssˇnf
–
hód
, "%04x", &
Àn
 ) != 1 )

89 
	`∑nic
("couldÇot decodeÜength");

91 i‡(
	`unix_ªad
(
s
, 
buf„r
, 
Àn
) !=Üen)

92 
	`∑nic
("couldÇotÑead data");

94 
	`¥ötf
–"ª˚ived hódî %.*†(%d byãs):\n%.*s", 4, 
hód
, 
Àn
,Üí, 
buf„r
 );

96 
	`˛o£
(
s
);

97 
	}
}

	@test_track_jdwp.c

2 
	~<√tdb.h
>

3 
	~<sys/sockë.h
>

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<î∫o.h
>

7 
	~<mem‹y.h
>

10 
	$∑nic
–c⁄° * 
msg
 )

12 
	`Ârötf
(
°dîr
, "PANIC: %s: %s\n", 
msg
, 
	`°ªº‹
(
î∫o
));

13 
	`exô
(1);

14 
	}
}

17 
	$unix_wrôe
–
fd
, c⁄° * 
buf
, 
Àn
 )

19 
ªsu…
 = 0;

20 
Àn
 > 0) {

21 
Àn2
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

22 i‡(
Àn2
 < 0) {

23 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

27 
ªsu…
 +
Àn2
;

28 
Àn
 -
Àn2
;

29 
buf
 +
Àn2
;

31  
ªsu…
;

32 
	}
}

35 
	$unix_ªad
–
fd
, * 
buf
, 
Àn
 )

37 
ªsu…
 = 0;

38 
Àn
 > 0) {

39 
Àn2
 = 
	`ªad
(
fd
, 
buf
, 
Àn
);

40 i‡(
Àn2
 < 0) {

41 i‡(
î∫o
 =
EINTR
 ||Éºnÿ=
EAGAIN
)

45 
ªsu…
 +
Àn2
;

46 
Àn
 -
Àn2
;

47 
buf
 +
Àn2
;

49  
ªsu…
;

50 
	}
}

53 
	$maö
( )

55 
ªt
, 
s
;

56 
sockaddr_ö
 
£rvî
;

57 
buf„r
[1024];

58 c⁄° * 
ªque°
 = "track-jdwp";

59 
Àn
;

61 
	`mem£t
–&
£rvî
, 0, (server) );

62 
£rvî
.
sö_Ámûy
 = 
AF_INET
;

63 
£rvî
.
sö_p‹t
 = 
	`ht⁄s
(5037);

64 
£rvî
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

66 
s
 = 
	`sockë
–
PF_INET
, 
SOCK_STREAM
, 0 );

67 
ªt
 = 
	`c⁄√˘
–
s
, (
sockaddr
*Ë&
£rvî
, (server) );

68 i‡(
ªt
 < 0Ë
	`∑nic
( "couldÇot connectÅo server" );

71 
Àn
 = 
	`¢¥ötf
–
buf„r
,  buf„r, "%04x%s", 
	`°æí
(
ªque°
),Ñequest );

72 i‡(
	`unix_wrôe
(
s
, 
buf„r
, 
Àn
) < 0)

73 
	`∑nic
( "couldÇot sendÑequest" );

76 i‡(
	`unix_ªad
(
s
, 
buf„r
, 4) != 4)

77 
	`∑nic
( "couldÇotÑeadÑequest" );

79 
	`¥ötf
–"£rvîánswî: %.*s\n", 4, 
buf„r
 );

83 
hód
[5] = "0000";

85 i‡(
	`unix_ªad
(
s
, 
hód
, 4) < 0)

86 
	`∑nic
("couldÇotÑeadÜength");

88 i‡–
	`ssˇnf
–
hód
, "%04x", &
Àn
 ) != 1 )

89 
	`∑nic
("couldÇot decodeÜength");

91 i‡(
	`unix_ªad
(
s
, 
buf„r
, 
Àn
) !=Üen)

92 
	`∑nic
("couldÇotÑead data");

94 
	`¥ötf
–"ª˚ived hódî %.*†(%d byãs):\n%.*s", 4, 
hód
, 
Àn
,Üí, 
buf„r
 );

96 
	`˛o£
(
s
);

97 
	}
}

	@transport.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<°rög.h
>

21 
	~<î∫o.h
>

23 
	~"sysdïs.h
"

25 
	#TRACE_TAG
 
TRACE_TRANSPORT


	)

26 
	~"adb.h
"

28 
å™•‹t_uƒef
(
©øn•‹t
 *
t
);

30 
©øn•‹t
 
	gå™•‹t_li°
 = {

31 .
√xt
 = &
å™•‹t_li°
,

32 .
	g¥ev
 = &
å™•‹t_li°
,

35 
ADB_MUTEX_DEFINE
–
å™•‹t_lock
 );

37 #i‡
ADB_TRACE


38 
	#MAX_DUMP_HEX_LEN
 16

	)

39 
	$dump_hex
–c⁄° * 
±r
, 
size_t
 
Àn
 )

41 
¬
, 
Àn2
 = 
Àn
;

44 
buf„r
[
MAX_DUMP_HEX_LEN
 *2 + 1 + MAX_DUMP_HEX_LEN + 1 ], *
pb
 = buffer;

46 i‡(
Àn2
 > 
MAX_DUMP_HEX_LEN
)Üen2 = MAX_DUMP_HEX_LEN;

48 
¬
 = 0;Ç¿< 
Àn2
;Çn++) {

49 
	`•rötf
(
pb
, "%02x", 
±r
[
¬
]);

50 
pb
 += 2;

52 
	`•rötf
(
pb
++, " ");

54 
¬
 = 0;Ç¿< 
Àn2
;Çn++) {

55 
c
 = 
±r
[
¬
];

56 i‡(
c
 < 32 || c > 127)

57 
c
 = '.';

58 *
pb
++ = 
c
;

60 *
pb
++ = '\0';

61 
	`DR
("%s\n", 
buf„r
);

62 
	}
}

66 
	$kick_å™•‹t
(
©øn•‹t
* 
t
)

68 i‡(
t
 && !t->
kicked
)

70 
kicked
;

72 
	`adb_muãx_lock
(&
å™•‹t_lock
);

73 
kicked
 = 
t
->kicked;

74 i‡(!
kicked
)

75 
t
->
kicked
 = 1;

76 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

78 i‡(!
kicked
)

79 
t
->
	`kick
(t);

81 
	}
}

84 
	$run_å™•‹t_disc⁄√˘s
(
©øn•‹t
* 
t
)

86 
adisc⁄√˘
* 
dis
 = 
t
->
disc⁄√˘s
.
√xt
;

88 
	`D
("%s:Ñun_å™•‹t_disc⁄√˘s\n", 
t
->
£rül
);

89 
dis
 !&
t
->
disc⁄√˘s
) {

90 
adisc⁄√˘
* 
√xt
 = 
dis
->next;

91 
dis
->
	`func
–dis->
›aque
, 
t
 );

92 
dis
 = 
√xt
;

94 
	}
}

96 #i‡
ADB_TRACE


98 
	$dump_∑ckë
(c⁄° * 
«me
, c⁄° * 
func
, 
≠ackë
* 
p
)

100 
comm™d
 = 
p
->
msg
.command;

101 
Àn
 = 
p
->
msg
.
d©a_Àngth
;

102 
cmd
[9];

103 
¨g0
[12], 
¨g1
[12];

104 
n
;

106 
n
 = 0;Ç < 4;Ç++) {

107 
b
 = (
comm™d
 >> (
n
*8)) & 255;

108 i‡(
b
 < 32 || b >= 127)

110 
cmd
[
n
] = ()
b
;

112 i‡(
n
 == 4) {

113 
cmd
[4] = 0;

117 
	`¢¥ötf
(
cmd
,  cmd, "%08x", 
comm™d
);

120 i‡(
p
->
msg
.
¨g0
 < 256U)

121 
	`¢¥ötf
(
¨g0
, árg0, "%d", 
p
->
msg
.arg0);

123 
	`¢¥ötf
(
¨g0
, árg0, "0x%x", 
p
->
msg
.arg0);

125 i‡(
p
->
msg
.
¨g1
 < 256U)

126 
	`¢¥ötf
(
¨g1
, árg1, "%d", 
p
->
msg
.arg1);

128 
	`¢¥ötf
(
¨g1
, árg1, "0x%x", 
p
->
msg
.arg1);

130 
	`D
("%s: %s: [%s]árg0=%sárg1=%s (len=%d) ",

131 
«me
, 
func
, 
cmd
, 
¨g0
, 
¨g1
, 
Àn
);

132 
	`dump_hex
(
p
->
d©a
, 
Àn
);

133 
	}
}

137 
	$ªad_∑ckë
(
fd
, c⁄° * 
«me
, 
≠ackë
** 
µackë
)

139 *
p
 = (*)
µackë
;

140 
r
;

141 
Àn
 = (*
µackë
);

142 
buff
[8];

143 i‡(!
«me
) {

144 
	`¢¥ötf
(
buff
,  buff, "fd=%d", 
fd
);

145 
«me
 = 
buff
;

147 
Àn
 > 0) {

148 
r
 = 
	`adb_ªad
(
fd
, 
p
, 
Àn
);

149 if(
r
 > 0) {

150 
Àn
 -
r
;

151 
p
 +
r
;

153 
	`D
("%s:Ñód_∑ckë (fd=%d),Éº‹Ñë=%dÉºno=%d: %s\n", 
«me
, 
fd
, 
r
, 
î∫o
, 
	`°ªº‹
(errno));

154 if((
r
 < 0Ë&& (
î∫o
 =
EINTR
)) ;

159 #i‡
ADB_TRACE


160 i‡(
ADB_TRACING
) {

161 
	`dump_∑ckë
(
«me
, "‰omÑemŸe", *
µackë
);

165 
	}
}

168 
	$wrôe_∑ckë
(
fd
, c⁄° * 
«me
, 
≠ackë
** 
µackë
)

170 *
p
 = (*Ë
µackë
;

171 
r
, 
Àn
 = (
µackë
);

172 
buff
[8];

173 i‡(!
«me
) {

174 
	`¢¥ötf
(
buff
,  buff, "fd=%d", 
fd
);

175 
«me
 = 
buff
;

178 #i‡
ADB_TRACE


179 i‡(
ADB_TRACING
) {

180 
	`dump_∑ckë
(
«me
, "tÿªmŸe", *
µackë
);

183 
Àn
 = (
µackë
);

184 
Àn
 > 0) {

185 
r
 = 
	`adb_wrôe
(
fd
, 
p
, 
Àn
);

186 if(
r
 > 0) {

187 
Àn
 -
r
;

188 
p
 +
r
;

190 
	`D
("%s: wrôe_∑ckë (fd=%dËîr‹Ñë=%dÉºno=%d: %s\n", 
«me
, 
fd
, 
r
, 
î∫o
, 
	`°ªº‹
(errno));

191 if((
r
 < 0Ë&& (
î∫o
 =
EINTR
)) ;

196 
	}
}

198 
	$å™•‹t_sockë_evíts
(
fd
, 
evíts
, *
_t
)

200 
©øn•‹t
 *
t
 = 
_t
;

201 
	`D
("å™•‹t_sockë_evíts(fd=%d,Évíts=%04x,...)\n", 
fd
, 
evíts
);

202 if(
evíts
 & 
FDE_READ
){

203 
≠ackë
 *
p
 = 0;

204 if(
	`ªad_∑ckë
(
fd
, 
t
->
£rül
, &
p
)){

205 
	`D
("%s: faûedÅÿªadÖackë fromÅøn•‹àsockë o¿fd %d\n", 
t
->
£rül
, 
fd
);

207 
	`h™dÀ_∑ckë
(
p
, (
©øn•‹t
 *Ë
_t
);

210 
	}
}

212 
	$£nd_∑ckë
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
)

214 *
x
;

215 
sum
;

216 
cou¡
;

218 
p
->
msg
.
magic
 =Ö->msg.
comm™d
 ^ 0xffffffff;

220 
cou¡
 = 
p
->
msg
.
d©a_Àngth
;

221 
x
 = (*Ë
p
->
d©a
;

222 
sum
 = 0;

223 
cou¡
-- > 0){

224 
sum
 +*
x
++;

226 
p
->
msg
.
d©a_check
 = 
sum
;

228 
	`¥öt_∑ckë
("£nd", 
p
);

230 i‡(
t
 =
NULL
) {

231 
	`D
("Transport isÇull \n");

233 
î∫o
 = 0;

234 
	`Áèl_î∫o
("Transport isÇull");

237 if(
	`wrôe_∑ckë
(
t
->
å™•‹t_sockë
,Å->
£rül
, &
p
)){

238 
	`Áèl_î∫o
("cannotÉnqueueÖacket onÅransport socket");

240 
	}
}

255 *
	$ouçut_thªad
(*
_t
)

257 
©øn•‹t
 *
t
 = 
_t
;

258 
≠ackë
 *
p
;

260 
	`D
("%s: startingÅransport outputÅhread on fd %d, SYNC online (%d)\n",

261 
t
->
£rül
,Å->
fd
,Å->
sync_tokí
 + 1);

262 
p
 = 
	`gë_≠ackë
();

263 
p
->
msg
.
comm™d
 = 
A_SYNC
;

264 
p
->
msg
.
¨g0
 = 1;

265 
p
->
msg
.
¨g1
 = ++(
t
->
sync_tokí
);

266 
p
->
msg
.
magic
 = 
A_SYNC
 ^ 0xffffffff;

267 if(
	`wrôe_∑ckë
(
t
->
fd
,Å->
£rül
, &
p
)) {

268 
	`put_≠ackë
(
p
);

269 
	`D
("%s: faûedÅÿwrôêSYNCÖackë\n", 
t
->
£rül
);

270 
o›s
;

273 
	`D
("%s: d©®pum∞°¨ãd\n", 
t
->
£rül
);

275 
p
 = 
	`gë_≠ackë
();

277 if(
t
->
	`ªad_‰om_ªmŸe
(
p
,Å) == 0){

278 
	`D
("%s:ÑeceivedÑemoteÖacket, sendingÅoÅransport\n",

279 
t
->
£rül
);

280 if(
	`wrôe_∑ckë
(
t
->
fd
,Å->
£rül
, &
p
)){

281 
	`put_≠ackë
(
p
);

282 
	`D
("%s: faûedÅÿwrôê≠ackëÅÿå™•‹t\n", 
t
->
£rül
);

283 
o›s
;

286 
	`D
("%s:ÑemŸêªad faûed f‹Åøn•‹t\n", 
t
->
£rül
);

287 
	`put_≠ackë
(
p
);

292 
	`D
("%s: SYNC ofÊöêf‹Åøn•‹t\n", 
t
->
£rül
);

293 
p
 = 
	`gë_≠ackë
();

294 
p
->
msg
.
comm™d
 = 
A_SYNC
;

295 
p
->
msg
.
¨g0
 = 0;

296 
p
->
msg
.
¨g1
 = 0;

297 
p
->
msg
.
magic
 = 
A_SYNC
 ^ 0xffffffff;

298 if(
	`wrôe_∑ckë
(
t
->
fd
,Å->
£rül
, &
p
)) {

299 
	`put_≠ackë
(
p
);

300 
	`D
("%s: faûedÅÿwrôêSYNCá∑ckëÅÿå™•‹t", 
t
->
£rül
);

303 
o›s
:

304 
	`D
("%s:Åøn•‹àouçuàthªad i†exôög\n", 
t
->
£rül
);

305 
	`kick_å™•‹t
(
t
);

306 
	`å™•‹t_uƒef
(
t
);

308 
	}
}

310 *
	$öput_thªad
(*
_t
)

312 
©øn•‹t
 *
t
 = 
_t
;

313 
≠ackë
 *
p
;

314 
a˘ive
 = 0;

316 
	`D
("%s: startingÅransport inputÅhread,Ñeading from fd %d\n",

317 
t
->
£rül
,Å->
fd
);

320 if(
	`ªad_∑ckë
(
t
->
fd
,Å->
£rül
, &
p
)) {

321 
	`D
("%s: failedÅoÑeadápacket fromÅransport on fd %d\n",

322 
t
->
£rül
,Å->
fd
 );

325 if(
p
->
msg
.
comm™d
 =
A_SYNC
){

326 if(
p
->
msg
.
¨g0
 == 0) {

327 
	`D
("%s:Åøn•‹àSYNC ofÊöe\n", 
t
->
£rül
);

328 
	`put_≠ackë
(
p
);

331 if(
p
->
msg
.
¨g1
 =
t
->
sync_tokí
) {

332 
	`D
("%s:Åøn•‹àSYNC o∆öe\n", 
t
->
£rül
);

333 
a˘ive
 = 1;

335 
	`D
("%s:Åransport ignoring SYNC %d != %d\n",

336 
t
->
£rül
, 
p
->
msg
.
¨g1
,Å->
sync_tokí
);

340 if(
a˘ive
) {

341 
	`D
("%s:Åøn•‹àgŸÖackë, sídögÅÿªmŸe\n", 
t
->
£rül
);

342 
t
->
	`wrôe_to_ªmŸe
(
p
,Å);

344 
	`D
("%s:Åøn•‹àign‹ögÖackë whûêofÊöe\n", 
t
->
£rül
);

348 
	`put_≠ackë
(
p
);

353 
	`˛o£_Æl_sockës
(
t
);

355 
	`D
("%s:Åøn•‹àöpuàthªad i†exôög, fd %d\n", 
t
->
£rül
,Å->
fd
);

356 
	`kick_å™•‹t
(
t
);

357 
	`å™•‹t_uƒef
(
t
);

359 
	}
}

362 
	gå™•‹t_ªgi°øti⁄_£nd
 = -1;

363 
	gå™•‹t_ªgi°øti⁄_ªcv
 = -1;

364 
fdevít
 
	gå™•‹t_ªgi°øti⁄_fde
;

367 #i‡
ADB_HOST


368 
	$li°_å™•‹ts_msg
(* 
buf„r
, 
size_t
 
buf„æí
)

370 
hód
[5];

371 
Àn
;

373 
Àn
 = 
	`li°_å™•‹ts
(
buf„r
+4, 
buf„æí
-4, 0);

374 
	`¢¥ötf
(
hód
, (hód), "%04x", 
Àn
);

375 
	`mem˝y
(
buf„r
, 
hód
, 4);

376 
Àn
 += 4;

377  
Àn
;

378 
	}
}

385 
devi˚_åackî
 
	tdevi˚_åackî
;

386 
	sdevi˚_åackî
 {

387 
asockë
 
	msockë
;

388 
	mupd©e_√eded
;

389 
devi˚_åackî
* 
	m√xt
;

393 
devi˚_åackî
* 
	gdevi˚_åackî_li°
;

396 
	$devi˚_åackî_ªmove
–
devi˚_åackî
* 
åackî
 )

398 
devi˚_åackî
** 
≤ode
 = &
devi˚_åackî_li°
;

399 
devi˚_åackî
* 
node
 = *
≤ode
;

401 
	`adb_muãx_lock
–&
å™•‹t_lock
 );

402 
node
) {

403 i‡(
node
 =
åackî
) {

404 *
≤ode
 = 
node
->
√xt
;

407 
≤ode
 = &
node
->
√xt
;

408 
node
 = *
≤ode
;

410 
	`adb_muãx_u∆ock
–&
å™•‹t_lock
 );

411 
	}
}

414 
	$devi˚_åackî_˛o£
–
asockë
* 
sockë
 )

416 
devi˚_åackî
* 
åackî
 = (devi˚_åackî*Ë
sockë
;

417 
asockë
* 
≥î
 = 
sockë
->peer;

419 
	`D
–"devi˚Åøckî %∞ªmoved\n", 
åackî
);

420 i‡(
≥î
) {

421 
≥î
->≥î = 
NULL
;

422 
≥î
->
	`˛o£
(peer);

424 
	`devi˚_åackî_ªmove
(
åackî
);

425 
	`‰ì
(
åackî
);

426 
	}
}

429 
	$devi˚_åackî_íqueue
–
asockë
* 
sockë
, 
≠ackë
* 
p
 )

432 
	`put_≠ackë
(
p
);

433 
	`devi˚_åackî_˛o£
(
sockë
);

435 
	}
}

438 
	$devi˚_åackî_£nd
–
devi˚_åackî
* 
åackî
,

439 c⁄° * 
buf„r
,

440 
Àn
 )

442 
≠ackë
* 
p
 = 
	`gë_≠ackë
();

443 
asockë
* 
≥î
 = 
åackî
->
sockë
.peer;

445 
	`mem˝y
(
p
->
d©a
, 
buf„r
, 
Àn
);

446 
p
->
Àn
 =Üen;

447  
≥î
->
	`íqueue
–≥î, 
p
 );

448 
	}
}

452 
	$devi˚_åackî_ªady
–
asockë
* 
sockë
 )

454 
devi˚_åackî
* 
åackî
 = (devi˚_åackî*Ë
sockë
;

458 i‡(
åackî
->
upd©e_√eded
 > 0) {

459 
buf„r
[1024];

460 
Àn
;

462 
åackî
->
upd©e_√eded
 = 0;

464 
Àn
 = 
	`li°_å™•‹ts_msg
(
buf„r
, (buffer));

465 
	`devi˚_åackî_£nd
(
åackî
, 
buf„r
, 
Àn
);

467 
	}
}

470 
asockë
*

471 
	$¸óã_devi˚_åackî
()

473 
devi˚_åackî
* 
åackî
 = 
	`ˇŒoc
(1,(*tracker));

475 if(
åackî
 =0Ë
	`Áèl
("cannotállocate deviceÅracker");

477 
	`D
–"devi˚Åøckî %∞¸óãd\n", 
åackî
);

479 
åackî
->
sockë
.
íqueue
 = 
devi˚_åackî_íqueue
;

480 
åackî
->
sockë
.
ªady
 = 
devi˚_åackî_ªady
;

481 
åackî
->
sockë
.
˛o£
 = 
devi˚_åackî_˛o£
;

482 
åackî
->
upd©e_√eded
 = 1;

484 
åackî
->
√xt
 = 
devi˚_åackî_li°
;

485 
devi˚_åackî_li°
 = 
åackî
;

487  &
åackî
->
sockë
;

488 
	}
}

492 
	$upd©e_å™•‹ts
()

494 
buf„r
[1024];

495 
Àn
;

496 
devi˚_åackî
* 
åackî
;

498 
Àn
 = 
	`li°_å™•‹ts_msg
(
buf„r
, (buffer));

500 
åackî
 = 
devi˚_åackî_li°
;

501 
åackî
 !
NULL
) {

502 
devi˚_åackî
* 
√xt
 = 
åackî
->next;

504 
	`devi˚_åackî_£nd
(
åackî
, 
buf„r
, 
Àn
);

505 
åackî
 = 
√xt
;

507 
	}
}

509 
	$upd©e_å™•‹ts
()

512 
	}
}

515 
tmsg
 
	ttmsg
;

516 
	stmsg


518 
©øn•‹t
 *
	må™•‹t
;

519 
	ma˘i⁄
;

523 
	$å™•‹t_ªad_a˘i⁄
(
fd
, 
tmsg
* 
m
)

525 *
p
 = (*)
m
;

526 
Àn
 = (*
m
);

527 
r
;

529 
Àn
 > 0) {

530 
r
 = 
	`adb_ªad
(
fd
, 
p
, 
Àn
);

531 if(
r
 > 0) {

532 
Àn
 -
r
;

533 
p
 +
r
;

535 if((
r
 < 0Ë&& (
î∫o
 =
EINTR
)) ;

536 
	`D
("transport_read_action: on fd %d,Érror %d: %s\n",

537 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

542 
	}
}

545 
	$å™•‹t_wrôe_a˘i⁄
(
fd
, 
tmsg
* 
m
)

547 *
p
 = (*)
m
;

548 
Àn
 = (*
m
);

549 
r
;

551 
Àn
 > 0) {

552 
r
 = 
	`adb_wrôe
(
fd
, 
p
, 
Àn
);

553 if(
r
 > 0) {

554 
Àn
 -
r
;

555 
p
 +
r
;

557 if((
r
 < 0Ë&& (
î∫o
 =
EINTR
)) ;

558 
	`D
("transport_write_action: on fd %d,Érror %d: %s\n",

559 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

564 
	}
}

566 
	$å™•‹t_ªgi°øti⁄_func
(
_fd
, 
ev
, *
d©a
)

568 
tmsg
 
m
;

569 
adb_thªad_t
 
ouçut_thªad_±r
;

570 
adb_thªad_t
 
öput_thªad_±r
;

571 
s
[2];

572 
©øn•‹t
 *
t
;

574 if(!(
ev
 & 
FDE_READ
)) {

578 if(
	`å™•‹t_ªad_a˘i⁄
(
_fd
, &
m
)) {

579 
	`Áèl_î∫o
("cannotÑeadÅransportÑegistration socket");

582 
t
 = 
m
.
å™•‹t
;

584 if(
m
.
a˘i⁄
 == 0){

585 
	`D
("å™•‹t: %†ªmovögánd fªe'ög %d\n", 
t
->
£rül
,Å->
å™•‹t_sockë
);

590 
	`fdevít_ªmove
(&(
t
->
å™•‹t_fde
));

591 
	`adb_˛o£
(
t
->
fd
);

593 
	`adb_muãx_lock
(&
å™•‹t_lock
);

594 
t
->
√xt
->
¥ev
 =Å->prev;

595 
t
->
¥ev
->
√xt
 =Å->next;

596 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

598 
	`run_å™•‹t_disc⁄√˘s
(
t
);

600 i‡(
t
->
¥odu˘
)

601 
	`‰ì
(
t
->
¥odu˘
);

602 i‡(
t
->
£rül
)

603 
	`‰ì
(
t
->
£rül
);

604 i‡(
t
->
modñ
)

605 
	`‰ì
(
t
->
modñ
);

606 i‡(
t
->
devi˚
)

607 
	`‰ì
(
t
->
devi˚
);

608 i‡(
t
->
dev∑th
)

609 
	`‰ì
(
t
->
dev∑th
);

611 
	`mem£t
(
t
,0xì,(
©øn•‹t
));

612 
	`‰ì
(
t
);

614 
	`upd©e_å™•‹ts
();

619 i‡(
t
->
c⁄√˘i⁄_°©e
 !
CS_NOPERM
) {

621 
t
->
ªf_cou¡
 = 2;

623 if(
	`adb_sockë∑ú
(
s
)) {

624 
	`Áèl_î∫o
("cannot openÅransport socketpair");

627 
	`D
("å™•‹t: %†(%d,%dË°¨tög\n", 
t
->
£rül
, 
s
[0], s[1]);

629 
t
->
å™•‹t_sockë
 = 
s
[0];

630 
t
->
fd
 = 
s
[1];

632 
	`fdevít_ö°Æl
(&(
t
->
å™•‹t_fde
),

633 
t
->
å™•‹t_sockë
,

634 
å™•‹t_sockë_evíts
,

635 
t
);

637 
	`fdevít_£t
(&(
t
->
å™•‹t_fde
), 
FDE_READ
);

639 if(
	`adb_thªad_¸óã
(&
öput_thªad_±r
, 
öput_thªad
, 
t
)){

640 
	`Áèl_î∫o
("cannot create inputÅhread");

643 if(
	`adb_thªad_¸óã
(&
ouçut_thªad_±r
, 
ouçut_thªad
, 
t
)){

644 
	`Áèl_î∫o
("cannot create outputÅhread");

649 
	`adb_muãx_lock
(&
å™•‹t_lock
);

650 
t
->
√xt
 = &
å™•‹t_li°
;

651 
t
->
¥ev
 = 
å™•‹t_li°
.prev;

652 
t
->
√xt
->
¥ev
 =Å;

653 
t
->
¥ev
->
√xt
 =Å;

654 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

656 
t
->
disc⁄√˘s
.
√xt
 =Å->disc⁄√˘s.
¥ev
 = &t->disconnects;

658 
	`upd©e_å™•‹ts
();

659 
	}
}

661 
	$öô_å™•‹t_ªgi°øti⁄
()

663 
s
[2];

665 if(
	`adb_sockë∑ú
(
s
)){

666 
	`Áèl_î∫o
("cannot openÅransportÑegistration socketpair");

669 
å™•‹t_ªgi°øti⁄_£nd
 = 
s
[0];

670 
å™•‹t_ªgi°øti⁄_ªcv
 = 
s
[1];

672 
	`fdevít_ö°Æl
(&
å™•‹t_ªgi°øti⁄_fde
,

673 
å™•‹t_ªgi°øti⁄_ªcv
,

674 
å™•‹t_ªgi°øti⁄_func
,

677 
	`fdevít_£t
(&
å™•‹t_ªgi°øti⁄_fde
, 
FDE_READ
);

678 
	}
}

681 
	$ªgi°î_å™•‹t
(
©øn•‹t
 *
å™•‹t
)

683 
tmsg
 
m
;

684 
m
.
å™•‹t
 =Åransport;

685 
m
.
a˘i⁄
 = 1;

686 
	`D
("å™•‹t: %†ªgi°îed\n", 
å™•‹t
->
£rül
);

687 if(
	`å™•‹t_wrôe_a˘i⁄
(
å™•‹t_ªgi°øti⁄_£nd
, &
m
)) {

688 
	`Áèl_î∫o
("cannot writeÅransportÑegistration socket\n");

690 
	}
}

692 
	$ªmove_å™•‹t
(
©øn•‹t
 *
å™•‹t
)

694 
tmsg
 
m
;

695 
m
.
å™•‹t
 =Åransport;

696 
m
.
a˘i⁄
 = 0;

697 
	`D
("å™•‹t: %†ªmoved\n", 
å™•‹t
->
£rül
);

698 if(
	`å™•‹t_wrôe_a˘i⁄
(
å™•‹t_ªgi°øti⁄_£nd
, &
m
)) {

699 
	`Áèl_î∫o
("cannot writeÅransportÑegistration socket\n");

701 
	}
}

704 
	$å™•‹t_uƒef_locked
(
©øn•‹t
 *
t
)

706 
t
->
ªf_cou¡
--;

707 i‡(
t
->
ªf_cou¡
 == 0) {

708 
	`D
("å™•‹t: %†uƒe‡(kickögánd closög)\n", 
t
->
£rül
);

709 i‡(!
t
->
kicked
) {

710 
t
->
kicked
 = 1;

711 
t
->
	`kick
(t);

713 
t
->
	`˛o£
(t);

714 
	`ªmove_å™•‹t
(
t
);

716 
	`D
("å™•‹t: %†uƒe‡(cou¡=%d)\n", 
t
->
£rül
,Å->
ªf_cou¡
);

718 
	}
}

720 
	$å™•‹t_uƒef
(
©øn•‹t
 *
t
)

722 i‡(
t
) {

723 
	`adb_muãx_lock
(&
å™•‹t_lock
);

724 
	`å™•‹t_uƒef_locked
(
t
);

725 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

727 
	}
}

729 
	$add_å™•‹t_disc⁄√˘
(
©øn•‹t
* 
t
, 
adisc⁄√˘
* 
dis
)

731 
	`adb_muãx_lock
(&
å™•‹t_lock
);

732 
dis
->
√xt
 = &
t
->
disc⁄√˘s
;

733 
dis
->
¥ev
 = dis->
√xt
->prev;

734 
dis
->
¥ev
->
√xt
 = dis;

735 
dis
->
√xt
->
¥ev
 = dis;

736 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

737 
	}
}

739 
	$ªmove_å™•‹t_disc⁄√˘
(
©øn•‹t
* 
t
, 
adisc⁄√˘
* 
dis
)

741 
dis
->
¥ev
->
√xt
 = dis->next;

742 
dis
->
√xt
->
¥ev
 = dis->prev;

743 
dis
->
√xt
 = dis->
¥ev
 = dis;

744 
	}
}

746 
	$quÆ_ch¨_is_övÆid
(
ch
)

748 i‡('A' <
ch
 && ch <= 'Z')

750 i‡('a' <
ch
 && ch <= 'z')

752 i‡('0' <
ch
 && ch <= '9')

755 
	}
}

757 
	$quÆ_m©ch
(c⁄° *
to_ã°
,

758 c⁄° *
¥efix
, c⁄° *
quÆ
, 
ßnôize_quÆ
)

760 i‡(!
to_ã°
 || !*to_test)

762  !
quÆ
 || !*qual;

764 i‡(!
quÆ
)

767 i‡(
¥efix
) {

768 *
¥efix
) {

769 i‡(*
¥efix
++ !*
to_ã°
++)

774 *
quÆ
) {

775 
ch
 = *
quÆ
++;

776 i‡(
ßnôize_quÆ
 && 
	`quÆ_ch¨_is_övÆid
(
ch
))

777 
ch
 = '_';

778 i‡(
ch
 !*
to_ã°
++)

783  !*
to_ã°
;

784 
	}
}

786 
©øn•‹t
 *
	$acquúe_⁄e_å™•‹t
(
°©e
, 
å™•‹t_ty≥
 
ây≥
, c⁄° * 
£rül
, ** 
îr‹_out
)

788 
©øn•‹t
 *
t
;

789 
©øn•‹t
 *
ªsu…
 = 
NULL
;

790 
ambiguous
 = 0;

792 
ªåy
:

793 i‡(
îr‹_out
)

794 *
îr‹_out
 = "deviceÇot found";

796 
	`adb_muãx_lock
(&
å™•‹t_lock
);

797 
t
 = 
å™•‹t_li°
.
√xt
;Å != &transport_list;Å =Å->next) {

798 i‡(
t
->
c⁄√˘i⁄_°©e
 =
CS_NOPERM
) {

799 i‡(
îr‹_out
)

800 *
îr‹_out
 = "insufficientÖermissions for device";

805 i‡(
£rül
) {

806 i‡((
t
->
£rül
 && !
	`°rcmp
(serial,Å->serial)) ||

807 (
t
->
dev∑th
 && !
	`°rcmp
(
£rül
,Å->devpath)) ||

808 
	`quÆ_m©ch
(
£rül
, "¥odu˘:", 
t
->
¥odu˘
, 0) ||

809 
	`quÆ_m©ch
(
£rül
, "modñ:", 
t
->
modñ
, 1) ||

810 
	`quÆ_m©ch
(
£rül
, "devi˚:", 
t
->
devi˚
, 0)) {

811 i‡(
ªsu…
) {

812 i‡(
îr‹_out
)

813 *
îr‹_out
 = "moreÅhan one device";

814 
ambiguous
 = 1;

815 
ªsu…
 = 
NULL
;

818 
ªsu…
 = 
t
;

821 i‡(
ây≥
 =
kTøn•‹tUsb
 && 
t
->
ty≥
 == kTransportUsb) {

822 i‡(
ªsu…
) {

823 i‡(
îr‹_out
)

824 *
îr‹_out
 = "moreÅhan one device";

825 
ambiguous
 = 1;

826 
ªsu…
 = 
NULL
;

829 
ªsu…
 = 
t
;

830 } i‡(
ây≥
 =
kTøn•‹tLoˇl
 && 
t
->
ty≥
 == kTransportLocal) {

831 i‡(
ªsu…
) {

832 i‡(
îr‹_out
)

833 *
îr‹_out
 = "moreÅhan oneÉmulator";

834 
ambiguous
 = 1;

835 
ªsu…
 = 
NULL
;

838 
ªsu…
 = 
t
;

839 } i‡(
ây≥
 =
kTøn•‹tAny
) {

840 i‡(
ªsu…
) {

841 i‡(
îr‹_out
)

842 *
îr‹_out
 = "moreÅhan one deviceándÉmulator";

843 
ambiguous
 = 1;

844 
ªsu…
 = 
NULL
;

847 
ªsu…
 = 
t
;

851 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

853 i‡(
ªsu…
) {

855 i‡(
ªsu…
 &&Ñesu…->
c⁄√˘i⁄_°©e
 =
CS_OFFLINE
) {

856 i‡(
îr‹_out
)

857 *
îr‹_out
 = "device offline";

858 
ªsu…
 = 
NULL
;

861 i‡(
ªsu…
 && 
°©e
 !
CS_ANY
 &&Ñesu…->
c⁄√˘i⁄_°©e
 != state) {

862 i‡(
îr‹_out
)

863 *
îr‹_out
 = "invalid device state";

864 
ªsu…
 = 
NULL
;

868 i‡(
ªsu…
) {

870 i‡(
îr‹_out
)

871 *
îr‹_out
 = 
NULL
;

872 } i‡(
°©e
 !
CS_ANY
 && (
£rül
 || !
ambiguous
)) {

873 
	`adb_¶ìp_ms
(1000);

874 
ªåy
;

877  
ªsu…
;

878 
	}
}

880 #i‡
ADB_HOST


881 c⁄° *
	$°©íame
(
©øn•‹t
 *
t
)

883 
t
->
c⁄√˘i⁄_°©e
){

884 
CS_OFFLINE
:  "offline";

885 
CS_BOOTLOADER
:  "bootloader";

886 
CS_DEVICE
:  "device";

887 
CS_HOST
:  "host";

888 
CS_RECOVERY
:  "recovery";

889 
CS_SIDELOAD
:  "sideload";

890 
CS_NOPERM
:  "noÖermissions";

893 
	}
}

895 
	$add_quÆ
(**
buf
, 
size_t
 *
buf_size
,

896 c⁄° *
¥efix
, c⁄° *
quÆ
, 
ßnôize_quÆ
)

898 
size_t
 
Àn
;

899 
¥efix_Àn
;

901 i‡(!
buf
 || !*bu‡|| !
buf_size
 || !*buf_sizê|| !
quÆ
 || !*qual)

904 
Àn
 = 
	`¢¥ötf
(*
buf
, *
buf_size
, "%s%n%s", 
¥efix
, &
¥efix_Àn
, 
quÆ
);

906 i‡(
ßnôize_quÆ
) {

907 *
˝
;

908 
˝
 = *
buf
 + 
¥efix_Àn
; c∞< *bu‡+ 
Àn
; cp++) {

909 i‡(
	`quÆ_ch¨_is_övÆid
(*
˝
))

910 *
˝
 = '_';

914 *
buf_size
 -
Àn
;

915 *
buf
 +
Àn
;

916 
	}
}

918 
size_t
 
	$f‹m©_å™•‹t
(
©øn•‹t
 *
t
, *
buf
, 
size_t
 
bufsize
,

919 
l⁄g_li°ög
)

921 c⁄° * 
£rül
 = 
t
->serial;

922 i‡(!
£rül
 || !serial[0])

923 
£rül
 = "????????????";

925 i‡(!
l⁄g_li°ög
) {

926  
	`¢¥ötf
(
buf
, 
bufsize
, "%s\t%s\n", 
£rül
, 
	`°©íame
(
t
));

928 
size_t
 
Àn
, 
ªmaöög
 = 
bufsize
;

930 
Àn
 = 
	`¢¥ötf
(
buf
, 
ªmaöög
, "%-22†%s", 
£rül
, 
	`°©íame
(
t
));

931 
ªmaöög
 -
Àn
;

932 
buf
 +
Àn
;

934 
	`add_quÆ
(&
buf
, &
ªmaöög
, " ", 
t
->
dev∑th
, 0);

935 
	`add_quÆ
(&
buf
, &
ªmaöög
, "Örodu˘:", 
t
->
¥odu˘
, 0);

936 
	`add_quÆ
(&
buf
, &
ªmaöög
, " modñ:", 
t
->
modñ
, 1);

937 
	`add_quÆ
(&
buf
, &
ªmaöög
, " devi˚:", 
t
->
devi˚
, 0);

939 
Àn
 = 
	`¢¥ötf
(
buf
, 
ªmaöög
, "\n");

940 
ªmaöög
 -
Àn
;

942  
bufsize
 - 
ªmaöög
;

944 
	}
}

946 
	$li°_å™•‹ts
(*
buf
, 
size_t
 
bufsize
, 
l⁄g_li°ög
)

948 * 
p
 = 
buf
;

949 * 
íd
 = 
buf
 + 
bufsize
;

950 
Àn
;

951 
©øn•‹t
 *
t
;

954 
	`adb_muãx_lock
(&
å™•‹t_lock
);

955 
t
 = 
å™•‹t_li°
.
√xt
;Å != &transport_list;Å =Å->next) {

956 
Àn
 = 
	`f‹m©_å™•‹t
(
t
, 
p
, 
íd
 -Ö, 
l⁄g_li°ög
);

957 i‡(
p
 + 
Àn
 >
íd
) {

961 
p
 +
Àn
;

963 
p
[0] = 0;

964 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

965  
p
 - 
buf
;

966 
	}
}

970 
	$˛o£_usb_devi˚s
()

972 
©øn•‹t
 *
t
;

974 
	`adb_muãx_lock
(&
å™•‹t_lock
);

975 
t
 = 
å™•‹t_li°
.
√xt
;Å != &transport_list;Å =Å->next) {

976 i‡–!
t
->
kicked
 ) {

977 
t
->
kicked
 = 1;

978 
t
->
	`kick
(t);

981 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

982 
	}
}

985 
	$ªgi°î_sockë_å™•‹t
(
s
, c⁄° *
£rül
, 
p‹t
, 
loˇl
)

987 
©øn•‹t
 *
t
 = 
	`ˇŒoc
(1, (atransport));

988 
buff
[32];

990 i‡(!
£rül
) {

991 
	`¢¥ötf
(
buff
,  buff, "T-%p", 
t
);

992 
£rül
 = 
buff
;

994 
	`D
("å™•‹t: %†öô'ög f‹ sockë %d, o¿p‹à%d\n", 
£rül
, 
s
, 
p‹t
);

995 i‡–
	`öô_sockë_å™•‹t
(
t
, 
s
, 
p‹t
, 
loˇl
) < 0 ) {

996 
	`adb_˛o£
(
s
);

997 
	`‰ì
(
t
);

1000 if(
£rül
) {

1001 
t
->
£rül
 = 
	`°rdup
(serial);

1003 
	`ªgi°î_å™•‹t
(
t
);

1004 
	}
}

1006 #i‡
ADB_HOST


1007 
©øn•‹t
 *
	$föd_å™•‹t
(c⁄° *
£rül
)

1009 
©øn•‹t
 *
t
;

1011 
	`adb_muãx_lock
(&
å™•‹t_lock
);

1012 
t
 = 
å™•‹t_li°
.
√xt
;Å != &transport_list;Å =Å->next) {

1013 i‡(
t
->
£rül
 && !
	`°rcmp
(serial,Å->serial)) {

1017 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

1019 i‡(
t
 !&
å™•‹t_li°
)

1020  
t
;

1023 
	}
}

1025 
	$uƒegi°î_å™•‹t
(
©øn•‹t
 *
t
)

1027 
	`adb_muãx_lock
(&
å™•‹t_lock
);

1028 
t
->
√xt
->
¥ev
 =Å->prev;

1029 
t
->
¥ev
->
√xt
 =Å->next;

1030 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

1032 
	`kick_å™•‹t
(
t
);

1033 
	`å™•‹t_uƒef
(
t
);

1034 
	}
}

1037 
	$uƒegi°î_Æl_t˝_å™•‹ts
()

1039 
©øn•‹t
 *
t
, *
√xt
;

1040 
	`adb_muãx_lock
(&
å™•‹t_lock
);

1041 
t
 = 
å™•‹t_li°
.
√xt
;Å != &transport_list;Å =Çext) {

1042 
√xt
 = 
t
->next;

1043 i‡(
t
->
ty≥
 =
kTøn•‹tLoˇl
 &&Å->
adb_p‹t
 == 0) {

1044 
t
->
√xt
->
¥ev
 =Å->prev;

1045 
t
->
¥ev
->
√xt
 =Çext;

1047 i‡(!
t
->
kicked
)

1049 
t
->
kicked
 = 1;

1050 
t
->
	`kick
(t);

1052 
	`å™•‹t_uƒef_locked
(
t
);

1056 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

1057 
	}
}

1061 
	$ªgi°î_usb_å™•‹t
(
usb_h™dÀ
 *
usb
, c⁄° *
£rül
, c⁄° *
dev∑th
, 
wrôóbÀ
)

1063 
©øn•‹t
 *
t
 = 
	`ˇŒoc
(1, (atransport));

1064 
	`D
("å™•‹t: %∞öô'ög f‹ usb_h™dÀ %∞(¢='%s')\n", 
t
, 
usb
,

1065 
£rül
 ? serial : "");

1066 
	`öô_usb_å™•‹t
(
t
, 
usb
, (
wrôóbÀ
 ? 
CS_OFFLINE
 : 
CS_NOPERM
));

1067 if(
£rül
) {

1068 
t
->
£rül
 = 
	`°rdup
(serial);

1070 if(
dev∑th
) {

1071 
t
->
dev∑th
 = 
	`°rdup
(devpath);

1073 
	`ªgi°î_å™•‹t
(
t
);

1074 
	}
}

1077 
	$uƒegi°î_usb_å™•‹t
(
usb_h™dÀ
 *
usb
)

1079 
©øn•‹t
 *
t
;

1080 
	`adb_muãx_lock
(&
å™•‹t_lock
);

1081 
t
 = 
å™•‹t_li°
.
√xt
;Å != &transport_list;Å =Å->next) {

1082 i‡(
t
->
usb
 =usb &&Å->
c⁄√˘i⁄_°©e
 =
CS_NOPERM
) {

1083 
t
->
√xt
->
¥ev
 =Å->prev;

1084 
t
->
¥ev
->
√xt
 =Å->next;

1088 
	`adb_muãx_u∆ock
(&
å™•‹t_lock
);

1089 
	}
}

1091 #unde‡
TRACE_TAG


1092 
	#TRACE_TAG
 
TRACE_RWX


	)

1094 
	$ªadx
(
fd
, *
±r
, 
size_t
 
Àn
)

1096 *
p
 = 
±r
;

1097 
r
;

1098 #i‡
ADB_TRACE


1099 
Àn0
 = 
Àn
;

1101 
	`D
("ªadx: fd=%d w™ãd=%d\n", 
fd
, ()
Àn
);

1102 
Àn
 > 0) {

1103 
r
 = 
	`adb_ªad
(
fd
, 
p
, 
Àn
);

1104 if(
r
 > 0) {

1105 
Àn
 -
r
;

1106 
p
 +
r
;

1108 i‡(
r
 < 0) {

1109 
	`D
("ªadx: fd=%dÉº‹ %d: %s\n", 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

1110 i‡(
î∫o
 =
EINTR
)

1113 
	`D
("ªadx: fd=%d disc⁄√˘ed\n", 
fd
);

1119 #i‡
ADB_TRACE


1120 
	`D
("ªadx: fd=%d w™ãd=%d gŸ=%d\n", 
fd
, 
Àn0
,Üí0 - 
Àn
);

1121 
	`dump_hex
–
±r
, 
Àn0
 );

1124 
	}
}

1126 
	$wrôex
(
fd
, c⁄° *
±r
, 
size_t
 
Àn
)

1128 *
p
 = (*Ë
±r
;

1129 
r
;

1131 #i‡
ADB_TRACE


1132 
	`D
("wrôex: fd=%dÜí=%d: ", 
fd
, ()
Àn
);

1133 
	`dump_hex
–
±r
, 
Àn
 );

1135 
Àn
 > 0) {

1136 
r
 = 
	`adb_wrôe
(
fd
, 
p
, 
Àn
);

1137 if(
r
 > 0) {

1138 
Àn
 -
r
;

1139 
p
 +
r
;

1141 i‡(
r
 < 0) {

1142 
	`D
("wrôex: fd=%dÉº‹ %d: %s\n", 
fd
, 
î∫o
, 
	`°ªº‹
(errno));

1143 i‡(
î∫o
 =
EINTR
)

1146 
	`D
("wrôex: fd=%d disc⁄√˘ed\n", 
fd
);

1152 
	}
}

1154 
	$check_hódî
(
≠ackë
 *
p
)

1156 if(
p
->
msg
.
magic
 !’->msg.
comm™d
 ^ 0xffffffff)) {

1157 
	`D
("check_header(): invalid magic\n");

1161 if(
p
->
msg
.
d©a_Àngth
 > 
MAX_PAYLOAD
) {

1162 
	`D
("check_hódî(): %d > MAX_PAYLOAD\n", 
p
->
msg
.
d©a_Àngth
);

1167 
	}
}

1169 
	$check_d©a
(
≠ackë
 *
p
)

1171 
cou¡
, 
sum
;

1172 *
x
;

1174 
cou¡
 = 
p
->
msg
.
d©a_Àngth
;

1175 
x
 = 
p
->
d©a
;

1176 
sum
 = 0;

1177 
cou¡
-- > 0) {

1178 
sum
 +*
x
++;

1181 if(
sum
 !
p
->
msg
.
d©a_check
) {

1186 
	}
}

	@transport.h

17 #i‚de‡
__TRANSPORT_H


18 
	#__TRANSPORT_H


	)

24 
ªadx
(
fd
, *
±r
, 
size_t
 
Àn
);

25 
wrôex
(
fd
, c⁄° *
±r
, 
size_t
 
Àn
);

	@transport_local.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

20 
	~<î∫o.h
>

22 
	~"sysdïs.h
"

23 
	~<sys/ty≥s.h
>

25 
	#TRACE_TAG
 
TRACE_TRANSPORT


	)

26 
	~"adb.h
"

28 #ifde‡
HAVE_BIG_ENDIAN


29 
	#H4
(
x
Ë(((xË& 0xFF000000Ë>> 24Ë| (((xË& 0x00FF0000Ë>> 8Ë| (((xË& 0x0000FF00Ë<< 8Ë| (((xË& 0x000000FFË<< 24)

	)

30 
ölöe
 
	$fix_ídüns
(
≠ackë
 *
p
)

32 
p
->
msg
.
comm™d
 = 
	`H4
(p->msg.command);

33 
p
->
msg
.
¨g0
 = 
	`H4
(p->msg.arg0);

34 
p
->
msg
.
¨g1
 = 
	`H4
(p->msg.arg1);

35 
p
->
msg
.
d©a_Àngth
 = 
	`H4
(p->msg.data_length);

36 
p
->
msg
.
d©a_check
 = 
	`H4
(p->msg.data_check);

37 
p
->
msg
.
magic
 = 
	`H4
(p->msg.magic);

38 
	}
}

40 
	#fix_ídüns
(
p
Ëdÿ{} 0)

	)

43 #i‡
ADB_HOST


48 
	#ADB_LOCAL_TRANSPORT_MAX
 16

	)

50 
ADB_MUTEX_DEFINE
–
loˇl_å™•‹ts_lock
 );

52 
©øn•‹t
* 
	gloˇl_å™•‹ts
[ 
ADB_LOCAL_TRANSPORT_MAX
 ];

55 
	$ªmŸe_ªad
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
)

57 if(
	`ªadx
(
t
->
sfd
, &
p
->
msg
, (
amesßge
))){

58 
	`D
("remoteÜocal:ÑeadÅerminated (message)\n");

62 
	`fix_ídüns
(
p
);

64 #i‡0 && 
deföed
 
HAVE_BIG_ENDIAN


65 
	`D
("readÑemoteÖacket: %04xárg0=%0xárg1=%0x data_length=%0x data_check=%0x magic=%0x\n",

66 
p
->
msg
.
comm™d
,Ö->msg.
¨g0
,Ö->msg.
¨g1
,Ö->msg.
d©a_Àngth
,Ö->msg.
d©a_check
,Ö->msg.
magic
);

68 if(
	`check_hódî
(
p
)) {

69 
	`D
("bad header:Åerminated (data)\n");

73 if(
	`ªadx
(
t
->
sfd
, 
p
->
d©a
,Ö->
msg
.
d©a_Àngth
)){

74 
	`D
("remoteÜocal:Åerminated (data)\n");

78 if(
	`check_d©a
(
p
)) {

79 
	`D
("bad data:Åerminated (data)\n");

84 
	}
}

86 
	$ªmŸe_wrôe
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
)

88 
Àngth
 = 
p
->
msg
.
d©a_Àngth
;

90 
	`fix_ídüns
(
p
);

92 #i‡0 && 
deföed
 
HAVE_BIG_ENDIAN


93 
	`D
("writeÑemoteÖacket: %04xárg0=%0xárg1=%0x data_length=%0x data_check=%0x magic=%0x\n",

94 
p
->
msg
.
comm™d
,Ö->msg.
¨g0
,Ö->msg.
¨g1
,Ö->msg.
d©a_Àngth
,Ö->msg.
d©a_check
,Ö->msg.
magic
);

96 if(
	`wrôex
(
t
->
sfd
, &
p
->
msg
, (
amesßge
Ë+ 
Àngth
)) {

97 
	`D
("remoteÜocal: writeÅerminated\n");

102 
	}
}

105 
	$loˇl_c⁄√˘
(
p‹t
) {

106  
	`loˇl_c⁄√˘_¨bôøry_p‹ts
(
p‹t
-1,Öort);

107 
	}
}

109 
	$loˇl_c⁄√˘_¨bôøry_p‹ts
(
c⁄sﬁe_p‹t
, 
adb_p‹t
)

111 
buf
[64];

112 
fd
 = -1;

114 #i‡
ADB_HOST


115 c⁄° *
ho°
 = 
	`gëív
("ADBHOST");

116 i‡(
ho°
) {

117 
fd
 = 
	`sockë_√tw‹k_˛õ¡
(
ho°
, 
adb_p‹t
, 
SOCK_STREAM
);

120 i‡(
fd
 < 0) {

121 
fd
 = 
	`sockë_lo›back_˛õ¡
(
adb_p‹t
, 
SOCK_STREAM
);

124 i‡(
fd
 >= 0) {

125 
	`D
("˛õ¡: c⁄√˘ed o¿ªmŸê⁄ fd %d\n", 
fd
);

126 
	`˛o£_⁄_exec
(
fd
);

127 
	`dißbÀ_t˝_«gÀ
(
fd
);

128 
	`¢¥ötf
(
buf
,  buf, "%s%d", 
LOCAL_CLIENT_PREFIX
, 
c⁄sﬁe_p‹t
);

129 
	`ªgi°î_sockë_å™•‹t
(
fd
, 
buf
, 
adb_p‹t
, 1);

133 
	}
}

136 *
	$˛õ¡_sockë_thªad
(*
x
)

138 #i‡
ADB_HOST


139 
p‹t
 = 
DEFAULT_ADB_LOCAL_TRANSPORT_PORT
;

140 
cou¡
 = 
ADB_LOCAL_TRANSPORT_MAX
;

142 
	`D
("transport: client_socket_thread() starting\n");

147  ; 
cou¡
 > 0; cou¡--, 
p‹t
 += 2 ) {

148 (Ë
	`loˇl_c⁄√˘
(
p‹t
);

152 
	}
}

154 *
	$£rvî_sockë_thªad
(* 
¨g
)

156 
£rvîfd
, 
fd
;

157 
sockaddr
 
addr
;

158 
sockÀn_t
 
Æí
;

159 
p‹t
 = ()
¨g
;

161 
	`D
("transport: server_socket_thread() starting\n");

162 
£rvîfd
 = -1;

164 if(
£rvîfd
 == -1) {

165 
£rvîfd
 = 
	`sockë_öaddr_™y_£rvî
(
p‹t
, 
SOCK_STREAM
);

166 if(
£rvîfd
 < 0) {

167 
	`D
("server: cannot bind socket yet\n");

168 
	`adb_¶ìp_ms
(1000);

171 
	`˛o£_⁄_exec
(
£rvîfd
);

174 
Æí
 = (
addr
);

175 
	`D
("£rvî:ÅryögÅÿgëÇew c⁄√˘i⁄ from %d\n", 
p‹t
);

176 
fd
 = 
	`adb_sockë_ac˚±
(
£rvîfd
, &
addr
, &
Æí
);

177 if(
fd
 >= 0) {

178 
	`D
("£rvî:Çew c⁄√˘i⁄ o¿fd %d\n", 
fd
);

179 
	`˛o£_⁄_exec
(
fd
);

180 
	`dißbÀ_t˝_«gÀ
(
fd
);

181 
	`ªgi°î_sockë_å™•‹t
(
fd
, "ho°", 
p‹t
, 1);

184 
	`D
("transport: server_socket_thread()Éxiting\n");

186 
	}
}

189 #i‡!
ADB_HOST


194 #unde‡
›í


195 #unde‡
wrôe


196 
	#›í
 
adb_›í


	)

197 
	#wrôe
 
adb_wrôe


	)

198 
	~<qemu/qemu_pùe.h
>

199 #unde‡
›í


200 #unde‡
wrôe


201 
	#›í
 
___xxx_›í


	)

202 
	#wrôe
 
___xxx_wrôe


	)

232 *
	$qemu_sockë_thªad
(* 
¨g
)

235 c⁄° 
_ac˚±_ªq
[] = "accept";

237 c⁄° 
_°¨t_ªq
[] = "start";

239 c⁄° 
_ok_ª•
[] = "ok";

241 c⁄° 
p‹t
 = ()
¨g
;

242 
ªs
, 
fd
;

243 
tmp
[256];

244 
c⁄_«me
[32];

246 
	`D
("transport: qemu_socket_thread() starting\n");

249 
	`¢¥ötf
(
c⁄_«me
, (c⁄_«me), "qemud:adb:%d", 
p‹t
);

252 
fd
 = 
	`qemu_pùe_›í
(
c⁄_«me
);

253 i‡(
fd
 < 0) {

256 
adb_thªad_t
 
thr
;

257 
	`D
("adb service isÇotávailable. Falling backÅo TCP socket.\n");

258 
	`adb_thªad_¸óã
(&
thr
, 
£rvî_sockë_thªad
, 
¨g
);

268 
ªs
 = 
	`adb_wrôe
(
fd
, 
_ac˚±_ªq
, 
	`°æí
(_accept_req));

269 i‡((
size_t
)
ªs
 =
	`°æí
(
_ac˚±_ªq
)) {

272 
ªs
 = 
	`adb_ªad
(
fd
, 
tmp
, (tmp));

273 i‡(
ªs
 !2 || 
	`memcmp
(
tmp
, 
_ok_ª•
, 2)) {

274 
	`D
("Accepting ADB host connection has failed.\n");

275 
	`adb_˛o£
(
fd
);

279 
	`ªgi°î_sockë_å™•‹t
(
fd
, "ho°", 
p‹t
, 1);

280 
	`adb_wrôe
(
fd
, 
_°¨t_ªq
, 
	`°æí
(_start_req));

284 
fd
 = 
	`qemu_pùe_›í
(
c⁄_«me
);

285 i‡(
fd
 < 0) {

286 
	`D
("adb service become unavailable.\n");

290 
	`D
("U«bÀÅÿ£ndÅhê'%s'Ñeque°ÅÿADB sîvi˚.\n", 
_ac˚±_ªq
);

294 
	`D
("transport: qemu_socket_thread()Éxiting\n");

296 
	}
}

299 
	$loˇl_öô
(
p‹t
)

301 
adb_thªad_t
 
thr
;

302 * (*
func
)(*);

304 if(
HOST
) {

305 
func
 = 
˛õ¡_sockë_thªad
;

307 #i‡
ADB_HOST


308 
func
 = 
£rvî_sockë_thªad
;

312 
is_qemu
[
PROPERTY_VALUE_MAX
];

313 
	`¥›îty_gë
("ro.kî√l.qemu", 
is_qemu
, "");

314 i‡(!
	`°rcmp
(
is_qemu
, "1")) {

316 
func
 = 
qemu_sockë_thªad
;

319 
func
 = 
£rvî_sockë_thªad
;

324 
	`D
("å™•‹t:Üoˇ»%†öô\n", 
HOST
 ? "client" : "server");

326 if(
	`adb_thªad_¸óã
(&
thr
, 
func
, (*)
p‹t
)) {

327 
	`Áèl_î∫o
("cannot createÜocal socket %sÅhread",

328 
HOST
 ? "client" : "server");

330 
	}
}

332 
	$ªmŸe_kick
(
©øn•‹t
 *
t
)

334 
fd
 = 
t
->
sfd
;

335 
t
->
sfd
 = -1;

336 
	`adb_shutdown
(
fd
);

337 
	`adb_˛o£
(
fd
);

339 #i‡
ADB_HOST


340 if(
HOST
) {

341 
¬
;

342 
	`adb_muãx_lock
–&
loˇl_å™•‹ts_lock
 );

343 
¬
 = 0;Ç¿< 
ADB_LOCAL_TRANSPORT_MAX
;Çn++) {

344 i‡(
loˇl_å™•‹ts
[
¬
] =
t
) {

345 
loˇl_å™•‹ts
[
¬
] = 
NULL
;

349 
	`adb_muãx_u∆ock
–&
loˇl_å™•‹ts_lock
 );

352 
	}
}

354 
	$ªmŸe_˛o£
(
©øn•‹t
 *
t
)

356 
	`adb_˛o£
(
t
->
fd
);

357 
	}
}

360 #i‡
ADB_HOST


362 
©øn•‹t
* 
	$föd_emuœt‹_å™•‹t_by_adb_p‹t_locked
(
adb_p‹t
)

364 
i
;

365 
i
 = 0; i < 
ADB_LOCAL_TRANSPORT_MAX
; i++) {

366 i‡(
loˇl_å™•‹ts
[
i
] &&Üoˇl_å™•‹ts[i]->
adb_p‹t
 ==ádb_port) {

367  
loˇl_å™•‹ts
[
i
];

370  
NULL
;

371 
	}
}

373 
©øn•‹t
* 
	$föd_emuœt‹_å™•‹t_by_adb_p‹t
(
adb_p‹t
)

375 
	`adb_muãx_lock
–&
loˇl_å™•‹ts_lock
 );

376 
©øn•‹t
* 
ªsu…
 = 
	`föd_emuœt‹_å™•‹t_by_adb_p‹t_locked
(
adb_p‹t
);

377 
	`adb_muãx_u∆ock
–&
loˇl_å™•‹ts_lock
 );

378  
ªsu…
;

379 
	}
}

382 
	$gë_avaûabÀ_loˇl_å™•‹t_ödex_locked
()

384 
i
;

385 
i
 = 0; i < 
ADB_LOCAL_TRANSPORT_MAX
; i++) {

386 i‡(
loˇl_å™•‹ts
[
i
] =
NULL
) {

387  
i
;

391 
	}
}

393 
	$gë_avaûabÀ_loˇl_å™•‹t_ödex
()

395 
	`adb_muãx_lock
–&
loˇl_å™•‹ts_lock
 );

396 
ªsu…
 = 
	`gë_avaûabÀ_loˇl_å™•‹t_ödex_locked
();

397 
	`adb_muãx_u∆ock
–&
loˇl_å™•‹ts_lock
 );

398  
ªsu…
;

399 
	}
}

402 
	$öô_sockë_å™•‹t
(
©øn•‹t
 *
t
, 
s
, 
adb_p‹t
, 
loˇl
)

404 
Áû
 = 0;

406 
t
->
kick
 = 
ªmŸe_kick
;

407 
t
->
˛o£
 = 
ªmŸe_˛o£
;

408 
t
->
ªad_‰om_ªmŸe
 = 
ªmŸe_ªad
;

409 
t
->
wrôe_to_ªmŸe
 = 
ªmŸe_wrôe
;

410 
t
->
sfd
 = 
s
;

411 
t
->
sync_tokí
 = 1;

412 
t
->
c⁄√˘i⁄_°©e
 = 
CS_OFFLINE
;

413 
t
->
ty≥
 = 
kTøn•‹tLoˇl
;

414 
t
->
adb_p‹t
 = 0;

416 #i‡
ADB_HOST


417 i‡(
HOST
 && 
loˇl
) {

418 
	`adb_muãx_lock
–&
loˇl_å™•‹ts_lock
 );

420 
t
->
adb_p‹t
 =ádb_port;

421 
©øn•‹t
* 
exi°ög_å™•‹t
 =

422 
	`föd_emuœt‹_å™•‹t_by_adb_p‹t_locked
(
adb_p‹t
);

423 
ödex
 = 
	`gë_avaûabÀ_loˇl_å™•‹t_ödex_locked
();

424 i‡(
exi°ög_å™•‹t
 !
NULL
) {

425 
	`D
("localÅransport forÖort %dálreadyÑegistered (%p)?\n",

426 
adb_p‹t
, 
exi°ög_å™•‹t
);

427 
Áû
 = -1;

428 } i‡(
ödex
 < 0) {

430 
	`D
("cannotÑegister moreÉmulators. Maximum is %d\n",

431 
ADB_LOCAL_TRANSPORT_MAX
);

432 
Áû
 = -1;

434 
loˇl_å™•‹ts
[
ödex
] = 
t
;

437 
	`adb_muãx_u∆ock
–&
loˇl_å™•‹ts_lock
 );

440  
Áû
;

441 
	}
}

	@transport_usb.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<°rög.h
>

21 
	~<sysdïs.h
>

23 
	#TRACE_TAG
 
TRACE_TRANSPORT


	)

24 
	~"adb.h
"

26 #i‡
ADB_HOST


27 
	~"usb_víd‹s.h
"

30 #ifde‡
HAVE_BIG_ENDIAN


31 
	#H4
(
x
Ë(((xË& 0xFF000000Ë>> 24Ë| (((xË& 0x00FF0000Ë>> 8Ë| (((xË& 0x0000FF00Ë<< 8Ë| (((xË& 0x000000FFË<< 24)

	)

32 
ölöe
 
	$fix_ídüns
(
≠ackë
 *
p
)

34 
p
->
msg
.
comm™d
 = 
	`H4
(p->msg.command);

35 
p
->
msg
.
¨g0
 = 
	`H4
(p->msg.arg0);

36 
p
->
msg
.
¨g1
 = 
	`H4
(p->msg.arg1);

37 
p
->
msg
.
d©a_Àngth
 = 
	`H4
(p->msg.data_length);

38 
p
->
msg
.
d©a_check
 = 
	`H4
(p->msg.data_check);

39 
p
->
msg
.
magic
 = 
	`H4
(p->msg.magic);

40 
	}
}

41 
	$ho°_to_À32
(
n
)

43  
	`H4
(
n
);

44 
	}
}

46 
	#fix_ídüns
(
p
Ëdÿ{} 0)

	)

47 
	$ho°_to_À32
(
n
)

49  
n
;

50 
	}
}

53 
	$ªmŸe_ªad
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
)

55 if(
	`usb_ªad
(
t
->
usb
, &
p
->
msg
, (
amesßge
))){

56 
	`D
("remote usb:ÑeadÅerminated (message)\n");

60 
	`fix_ídüns
(
p
);

62 if(
	`check_hódî
(
p
)) {

63 
	`D
("remote usb: check_header failed\n");

67 if(
p
->
msg
.
d©a_Àngth
) {

68 if(
	`usb_ªad
(
t
->
usb
, 
p
->
d©a
,Ö->
msg
.
d©a_Àngth
)){

69 
	`D
("remote usb:Åerminated (data)\n");

74 if(
	`check_d©a
(
p
)) {

75 
	`D
("remote usb: check_data failed\n");

80 
	}
}

82 
	$ªmŸe_wrôe
(
≠ackë
 *
p
, 
©øn•‹t
 *
t
)

84 
size
 = 
p
->
msg
.
d©a_Àngth
;

86 
	`fix_ídüns
(
p
);

88 if(
	`usb_wrôe
(
t
->
usb
, &
p
->
msg
, (
amesßge
))) {

89 
	`D
("remote usb: 1 - writeÅerminated\n");

92 if(
p
->
msg
.
d©a_Àngth
 == 0)  0;

93 if(
	`usb_wrôe
(
t
->
usb
, &
p
->
d©a
, 
size
)) {

94 
	`D
("remote usb: 2 - writeÅerminated\n");

99 
	}
}

101 
	$ªmŸe_˛o£
(
©øn•‹t
 *
t
)

103 
	`usb_˛o£
(
t
->
usb
);

104 
t
->
usb
 = 0;

105 
	}
}

107 
	$ªmŸe_kick
(
©øn•‹t
 *
t
)

109 
	`usb_kick
(
t
->
usb
);

110 
	}
}

112 
	$öô_usb_å™•‹t
(
©øn•‹t
 *
t
, 
usb_h™dÀ
 *
h
, 
°©e
)

114 
	`D
("transport: usb\n");

115 
t
->
˛o£
 = 
ªmŸe_˛o£
;

116 
t
->
kick
 = 
ªmŸe_kick
;

117 
t
->
ªad_‰om_ªmŸe
 = 
ªmŸe_ªad
;

118 
t
->
wrôe_to_ªmŸe
 = 
ªmŸe_wrôe
;

119 
t
->
sync_tokí
 = 1;

120 
t
->
c⁄√˘i⁄_°©e
 = 
°©e
;

121 
t
->
ty≥
 = 
kTøn•‹tUsb
;

122 
t
->
usb
 = 
h
;

124 #i‡
ADB_HOST


125 
HOST
 = 1;

127 
HOST
 = 0;

129 
	}
}

131 #i‡
ADB_HOST


132 
	$is_adb_öãrÁ˚
(
vid
, 
pid
, 
usb_˛ass
, 
usb_sub˛ass
, 
usb_¥Ÿocﬁ
)

134 
i
;

135 
i
 = 0; i < 
víd‹IdCou¡
; i++) {

136 i‡(
vid
 =
víd‹Ids
[
i
]) {

137 i‡(
usb_˛ass
 =
ADB_CLASS
 && 
usb_sub˛ass
 =
ADB_SUBCLASS
 &&

138 
usb_¥Ÿocﬁ
 =
ADB_PROTOCOL
) {

147 
	}
}

	@usb_libusb.c

20 
	~<sys/ídün.h
>

21 
	~<sys/io˘l.h
>

22 
	~<sys/ty≥s.h
>

23 
	~<sys/uio.h
>

25 
	~<îr.h
>

26 
	~<î∫o.h
>

27 
	~<pﬁl.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rögs.h
>

31 
	~<°rög.h
>

32 
	~<sy£xôs.h
>

33 
	~<uni°d.h
>

34 
	~<libusb.h
>

35 
	~"sysdïs.h
"

37 
	#TRACE_TAG
 
TRACE_USB


	)

38 
	~"adb.h
"

40 
adb_muãx_t
 
	gusb_lock
 = 
ADB_MUTEX_INITIALIZER
;

41 
libusb_c⁄ãxt
 *
	g˘x
 = 
NULL
;

43 
	susb_h™dÀ


45 
usb_h™dÀ
 *
	m¥ev
;

46 
usb_h™dÀ
 *
	m√xt
;

48 
libusb_devi˚
 *
	mdev
;

49 
libusb_devi˚_h™dÀ
 *
	mdevh
;

50 
	möãrÁ˚
;

51 
uöt8_t
 
	mdev_bus
;

52 
uöt8_t
 
	mdev_addr
;

54 
	mzîo_mask
;

55 
	míd_poöt_addªss
[2];

56 
	m£rül
[128];

58 
adb_c⁄d_t
 
	mnŸify
;

59 
adb_muãx_t
 
	mlock
;

62 
usb_h™dÀ
 
	gh™dÀ_li°
 = {

63 .
¥ev
 = &
h™dÀ_li°
,

64 .
	g√xt
 = &
h™dÀ_li°
,

68 
	$usb_˛ónup
()

70 
	`libusb_exô
(
˘x
);

71 
	}
}

74 
	$ªp‹t_bulk_libusb_îr‹
(
r
)

76 
r
) {

77 
LIBUSB_ERROR_TIMEOUT
:

78 
	`D
("TransferÅimeout\n");

81 
LIBUSB_ERROR_PIPE
:

82 
	`D
("ControlÑequest isÇot supported\n");

85 
LIBUSB_ERROR_OVERFLOW
:

86 
	`D
("Device offered more data\n");

89 
LIBUSB_ERROR_NO_DEVICE
 :

90 
	`D
("Device was disconnected\n");

94 
	`D
("Eº‹ %d durögÅøns„r\n", 
r
);

97 
	}
}

100 
	$usb_bulk_wrôe
(
usb_h™dÀ
 *
uh
, c⁄° *
d©a
, 
Àn
)

102 
r
 = 0;

103 
å™s„ºed
 = 0;

105 
r
 = 
	`libusb_bulk_å™s„r
(
uh
->
devh
, uh->
íd_poöt_addªss
[1], (*)
d©a
, 
Àn
,

106 &
å™s„ºed
, 0);

108 i‡(
r
 != 0) {

109 
	`D
("usb_bulk_write(): ");

110 
	`ªp‹t_bulk_libusb_îr‹
(
r
);

111  
r
;

114  (
å™s„ºed
);

115 
	}
}

118 
	$usb_bulk_ªad
(
usb_h™dÀ
 *
uh
, *
d©a
, 
Àn
)

120 
r
 = 0;

121 
å™s„ºed
 = 0;

123 
r
 = 
	`libusb_bulk_å™s„r
(
uh
->
devh
, uh->
íd_poöt_addªss
[0], 
d©a
, 
Àn
,

124 &
å™s„ºed
, 0);

126 i‡(
r
 != 0) {

127 
	`D
("usb_bulk_read(): ");

128 
	`ªp‹t_bulk_libusb_îr‹
(
r
);

129  
r
;

132  (
å™s„ºed
);

133 
	}
}

136 
	$usb_wrôe
(
usb_h™dÀ
 *
uh
, c⁄° *
_d©a
, 
Àn
)

138 *
d©a
 = (*Ë
_d©a
;

139 
n
;

140 
√ed_zîo
 = 0;

142 i‡(
uh
->
zîo_mask
 == 1) {

143 i‡(!(
Àn
 & 
uh
->
zîo_mask
)) {

144 
√ed_zîo
 = 1;

148 
	`D
("usb_wrôe(): %p:%d ->Åøn•‹à%p\n", 
_d©a
, 
Àn
, 
uh
);

150 
Àn
 > 0) {

151 
x„r
 = (
Àn
 > 4096) ? 4096 :Üen;

153 
n
 = 
	`usb_bulk_wrôe
(
uh
, 
d©a
, 
x„r
);

155 i‡(
n
 !
x„r
) {

156 
	`D
("usb_wrôe(): faûed f‹Åøn•‹à%∞(%d byã†À·)\n", 
uh
, 
Àn
);

160 
Àn
 -
x„r
;

161 
d©a
 +
x„r
;

164 i‡(
√ed_zîo
){

165 
n
 = 
	`usb_bulk_wrôe
(
uh
, 
_d©a
, 0);

167 i‡(
n
 < 0) {

168 
	`D
("usb_wrôe(): faûedÅÿföish o≥øti⁄ f‹Åøn•‹à%p\n", 
uh
);

170  
n
;

174 
	}
}

177 
	$usb_ªad
(
usb_h™dÀ
 *
uh
, *
_d©a
, 
Àn
)

179 *
d©a
 = (*Ë
_d©a
;

180 
n
;

182 
	`D
("usb_ªad(): %p:%d <-Åøn•‹à%p\n", 
_d©a
, 
Àn
, 
uh
);

184 
Àn
 > 0) {

185 
x„r
 = (
Àn
 > 4096) ? 4096 :Üen;

187 
n
 = 
	`usb_bulk_ªad
(
uh
, 
d©a
, 
x„r
);

189 i‡(
n
 !
x„r
) {

190 i‡(
n
 > 0) {

191 
d©a
 +
n
;

192 
Àn
 -
n
;

196 
	`D
("usb_ªad(): faûed f‹Åøn•‹à%∞(%d byã†À·)\n", 
uh
, 
Àn
);

200 
Àn
 -
x„r
;

201 
d©a
 +
x„r
;

205 
	}
}

208 
	$usb_˛o£
(
usb_h™dÀ
 *
h
)

210 
	`D
("usb_˛o£(): closögÅøn•‹à%p\n", 
h
);

211 
	`adb_muãx_lock
(&
usb_lock
);

213 
h
->
√xt
->
¥ev
 = h->prev;

214 
h
->
¥ev
->
√xt
 = h->next;

215 
h
->
¥ev
 = 
NULL
;

216 
h
->
√xt
 = 
NULL
;

218 
	`libusb_ªÀa£_öãrÁ˚
(
h
->
devh
, h->
öãrÁ˚
);

219 
	`libusb_˛o£
(
h
->
devh
);

220 
	`libusb_uƒef_devi˚
(
h
->
dev
);

222 
	`adb_muãx_u∆ock
(&
usb_lock
);

224 
	`‰ì
(
h
);

227 
	}
}

229 
	$usb_kick
(
usb_h™dÀ
 *
h
)

231 
	`D
("usb_cick(): kickögÅøn•‹à%p\n", 
h
);

233 
	`adb_muãx_lock
(&
h
->
lock
);

234 
	`uƒegi°î_usb_å™•‹t
(
h
);

235 
	`adb_muãx_u∆ock
(&
h
->
lock
);

237 
h
->
√xt
->
¥ev
 = h->prev;

238 
h
->
¥ev
->
√xt
 = h->next;

239 
h
->
¥ev
 = 
NULL
;

240 
h
->
√xt
 = 
NULL
;

242 
	`libusb_ªÀa£_öãrÁ˚
(
h
->
devh
, h->
öãrÁ˚
);

243 
	`libusb_˛o£
(
h
->
devh
);

244 
	`libusb_uƒef_devi˚
(
h
->
dev
);

245 
	`‰ì
(
h
);

246 
	}
}

249 
	$check_usb_öãrÁ˚
(
libusb_öãrÁ˚
 *
öãrÁ˚
,

250 
libusb_devi˚_des¸ùt‹
 *
desc
,

251 
usb_h™dÀ
 *
uh
)

253 
e
;

255 i‡(
öãrÁ˚
->
num_Æt£âög
 == 0) {

256 
	`D
("check_usb_interface(): No interface settings\n");

260 
libusb_öãrÁ˚_des¸ùt‹
 *
idesc
 = &
öãrÁ˚
->
Æt£âög
[0];

262 i‡(
idesc
->
bNumEndpoöts
 != 2) {

263 
	`D
("check_usb_interface(): Interface haveÇot 2Éndpoints, ignoring\n");

267 
e
 = 0;É < 
idesc
->
bNumEndpoöts
;É++) {

268 
libusb_ídpoöt_des¸ùt‹
 *
edesc
 = &
idesc
->
ídpoöt
[
e
];

270 i‡(
edesc
->
bmAâribuãs
 !
LIBUSB_TRANSFER_TYPE_BULK
) {

271 
	`D
("check_usb_interface(): Endpoint (%u) isÇot bulk (%u), ignoring\n",

272 
edesc
->
bmAâribuãs
, 
LIBUSB_TRANSFER_TYPE_BULK
);

276 i‡(
edesc
->
bEndpoötAddªss
 & 
LIBUSB_ENDPOINT_IN
)

277 
uh
->
íd_poöt_addªss
[0] = 
edesc
->
bEndpoötAddªss
;

279 
uh
->
íd_poöt_addªss
[1] = 
edesc
->
bEndpoötAddªss
;

282 i‡(
idesc
->
bI¡îÁ˚PrŸocﬁ
 == 0x01) {

283 
uh
->
zîo_mask
 = 
edesc
->
wMaxPackëSize
 - 1;

284 
	`D
("check_usb_interface(): Forced Android interfaceÖrotocol v.1\n");

288 
	`D
("check_usb_interface(): Device: %04x:%04x "

290 
desc
->
idVíd‹
, desc->
idProdu˘
, 
idesc
->
bI¡îÁ˚Cœss
,

291 
idesc
->
bI¡îÁ˚SubCœss
, idesc->
bI¡îÁ˚PrŸocﬁ
,

292 
uh
->
íd_poöt_addªss
[0], uh->end_point_address[1]);

294 i‡(!
	`is_adb_öãrÁ˚
(
desc
->
idVíd‹
, desc->
idProdu˘
,

295 
idesc
->
bI¡îÁ˚Cœss
, idesc->
bI¡îÁ˚SubCœss
,

296 
idesc
->
bI¡îÁ˚PrŸocﬁ
))

298 
	`D
("not matches\n");

302 
	`D
("matches\n");

304 
	}
}

307 
	$check_usb_öãrÁ˚s
(
libusb_c⁄fig_des¸ùt‹
 *
c⁄fig
,

308 
libusb_devi˚_des¸ùt‹
 *
desc
, 
usb_h™dÀ
 *
uh
)

310 
i
;

312 
i
 = 0; i < 
c⁄fig
->
bNumI¡îÁ˚s
; ++i) {

313 i‡(
	`check_usb_öãrÁ˚
(&
c⁄fig
->
öãrÁ˚
[
i
], 
desc
, 
uh
) != -1) {

315 
	`D
("check_usb_interfaces(): Interface %d of %04x:%04x "

316 "m©che†Android devi˚\n", 
i
, 
desc
->
idVíd‹
,

317 
desc
->
idProdu˘
);

319  
i
;

324 
	}
}

327 
	$ªgi°î_devi˚
(
usb_h™dÀ
 *
uh
, c⁄° *
£rül
)

329 
	`D
("register_device(): Registering %p [%s]ás USBÅransport\n",

330 
uh
, 
£rül
);

332 
usb_h™dÀ
 *
usb

NULL
;

334 
usb
 = 
	`ˇŒoc
(1, (
usb_h™dÀ
));

335 
	`mem˝y
(
usb
, 
uh
, (
usb_h™dÀ
));

336 
	`°r˝y
(
usb
->
£rül
, 
uh
->serial);

338 
	`adb_c⁄d_öô
(&
usb
->
nŸify
, 0);

339 
	`adb_muãx_öô
(&
usb
->
lock
, 0);

341 
	`adb_muãx_lock
(&
usb_lock
);

343 
usb
->
√xt
 = &
h™dÀ_li°
;

344 
usb
->
¥ev
 = 
h™dÀ_li°
.prev;

345 
usb
->
¥ev
->
√xt
 = usb;

346 
usb
->
√xt
->
¥ev
 = usb;

348 
	`adb_muãx_u∆ock
(&
usb_lock
);

350 
	`ªgi°î_usb_å™•‹t
(
usb
, 
£rül
, 
NULL
, 1);

353 
	}
}

356 
	$Æªady_ªgi°îed
(
usb_h™dÀ
 *
uh
)

358 
usb_h™dÀ
 *
usb

NULL
;

359 
exi°s
 = 0;

361 
	`adb_muãx_lock
(&
usb_lock
);

363 
usb
 = 
h™dÀ_li°
.
√xt
; usb != &handle_list; usb = usb->next) {

364 i‡((
usb
->
dev_bus
 =
uh
->dev_bus) &&

365 (
usb
->
dev_addr
 =
uh
->dev_addr))

367 
exi°s
 = 1;

372 
	`adb_muãx_u∆ock
(&
usb_lock
);

374  
exi°s
;

375 
	}
}

378 
	$check_devi˚
(
libusb_devi˚
 *
dev
)

380 
usb_h™dÀ
 
uh
;

381 
i
 = 0;

382 
found
 = -1;

383 
£rül
[256] = {0};

385 
libusb_devi˚_des¸ùt‹
 
desc
;

386 
libusb_c⁄fig_des¸ùt‹
 *
c⁄fig
 = 
NULL
;

388 
r
 = 
	`libusb_gë_devi˚_des¸ùt‹
(
dev
, &
desc
);

390 i‡(
r
 !
LIBUSB_SUCCESS
) {

391 
	`D
("check_device(): FailedÅo get device descriptor\n");

395 i‡((
desc
.
idVíd‹
 =0Ë&& (desc.
idProdu˘
 == 0))

398 
	`D
("check_device(): Probing usb device %04x:%04x\n",

399 
desc
.
idVíd‹
, desc.
idProdu˘
);

401 i‡(!
	`is_adb_öãrÁ˚
 (
desc
.
idVíd‹
, desc.
idProdu˘
,

402 
ADB_CLASS
, 
ADB_SUBCLASS
, 
ADB_PROTOCOL
))

404 
	`D
("check_device(): Ignored due unknown vendor id\n");

408 
uh
.
dev_bus
 = 
	`libusb_gë_bus_numbî
(
dev
);

409 
uh
.
dev_addr
 = 
	`libusb_gë_devi˚_addªss
(
dev
);

411 i‡(
	`Æªady_ªgi°îed
(&
uh
)) {

412 
	`D
("check_device(): Device (bus: %d,áddress: %d) "

413 "i†ÆªadyÑegi°îed\n", 
uh
.
dev_bus
, uh.
dev_addr
);

417 
	`D
("check_device(): Device bus: %d,áddress: %d\n",

418 
uh
.
dev_bus
, uh.
dev_addr
);

420 
r
 = 
	`libusb_gë_a˘ive_c⁄fig_des¸ùt‹
(
dev
, &
c⁄fig
);

422 i‡(
r
 != 0) {

423 i‡(
r
 =
LIBUSB_ERROR_NOT_FOUND
) {

424 
	`D
("check_device(): Device %4x:%4x is unconfigured\n",

425 
desc
.
idVíd‹
, desc.
idProdu˘
);

429 
	`D
("check_device(): FailedÅo get configuration for %4x:%4x\n",

430 
desc
.
idVíd‹
, desc.
idProdu˘
);

434 i‡(
c⁄fig
 =
NULL
) {

435 
	`D
("check_device(): Sanity check failedáfter "

440 i‡(
c⁄fig
->
öãrÁ˚
 !
NULL
) {

441 
found
 = 
	`check_usb_öãrÁ˚s
(
c⁄fig
, &
desc
, &
uh
);

445 
	`libusb_‰ì_c⁄fig_des¸ùt‹
(
c⁄fig
);

447 
r
 = 
	`libusb_›í
(
dev
, &
uh
.
devh
);

448 
uh
.
dev
 = dev;

450 i‡(
r
 != 0) {

451 
r
) {

452 
LIBUSB_ERROR_NO_MEM
:

453 
	`D
("check_device(): MemoryállocationÖroblem\n");

456 
LIBUSB_ERROR_ACCESS
:

457 
	`D
("check_device(): PermissionsÖroblem, "

461 
LIBUSB_ERROR_NO_DEVICE
:

462 
	`D
("check_device(): Device disconected, bad cable?\n");

466 
	`D
("check_devi˚():ÜibusbÅriggîedÉº‹ %d\n", 
r
);

469 
found
 = -1;

472 i‡(
found
 >= 0) {

473 
	`D
("check_device(): Device matches Android interface\n");

475 
	`mem£t
(
£rül
, 0, (serial));

476 
uh
.
öãrÁ˚
 = 
found
;

478 
r
 = 
	`libusb_˛aim_öãrÁ˚
(
uh
.
devh
, uh.
öãrÁ˚
);

480 i‡(
r
 < 0) {

481 
	`D
("check_device(): FailedÅo claim interface %d\n",

482 
uh
.
öãrÁ˚
);

484 
Áû
;

487 i‡(
desc
.
iSîülNumbî
) {

489 
uöt16_t
 
buf„r
[128] = {0};

490 
uöt16_t
 
œnguages
[128] = {0};

491 
œnguageCou¡
 = 0;

493 
	`mem£t
(
œnguages
, 0, (languages));

494 
r
 = 
	`libusb_c⁄åﬁ_å™s„r
(
uh
.
devh
,

495 
LIBUSB_ENDPOINT_IN
 | 
LIBUSB_REQUEST_TYPE_STANDARD
 | 
LIBUSB_RECIPIENT_DEVICE
,

496 
LIBUSB_REQUEST_GET_DESCRIPTOR
, 
LIBUSB_DT_STRING
 << 8,

497 0, (
uöt8_t
 *)
œnguages
, (languages), 0);

499 i‡(
r
 <= 0) {

500 
	`D
("check_device(): FailedÅo getÜanguages count\n");

501 
Áû
;

504 
œnguageCou¡
 = (
r
 - 2) / 2;

506 
i
 = 1; i <
œnguageCou¡
; ++i) {

507 
	`mem£t
(
buf„r
, 0, (buffer));

509 
r
 = 
	`libusb_c⁄åﬁ_å™s„r
(
uh
.
devh
,

510 
LIBUSB_ENDPOINT_IN
 | 
LIBUSB_REQUEST_TYPE_STANDARD
 | 
LIBUSB_RECIPIENT_DEVICE
,

511 
LIBUSB_REQUEST_GET_DESCRIPTOR
, (
LIBUSB_DT_STRING
 << 8Ë| 
desc
.
iSîülNumbî
,

512 
œnguages
[
i
], (
uöt8_t
 *)
buf„r
, (buffer), 0);

514 i‡(
r
 > 0) {

515 
j
 = 0;

516 
r
 /= 2;

518 
j
 = 1; j < 
r
; ++j)

519 
£rül
[
j
 - 1] = 
buf„r
[j];

521 
£rül
[
j
 - 1] = '\0';

526 i‡(
	`ªgi°î_devi˚
(&
uh
, 
£rül
) == 0) {

527 
	`D
("check_device(): FailedÅoÑegister device\n");

528 
Áû_öãrÁ˚
;

531 
	`libusb_ªf_devi˚
(
dev
);

537 
Áû_öãrÁ˚
:

538 
	`libusb_ªÀa£_öãrÁ˚
(
uh
.
devh
, uh.
öãrÁ˚
);

540 
Áû
:

541 
	`libusb_˛o£
(
uh
.
devh
);

542 
uh
.
devh
 = 
NULL
;

543 
	}
}

546 
	$check_devi˚_c⁄√˘ed
(
usb_h™dÀ
 *
uh
)

548 
r
 = 
	`libusb_kî√l_drivî_a˘ive
(
uh
->
devh
, uh->
öãrÁ˚
);

550 i‡(
r
 =
LIBUSB_ERROR_NO_DEVICE
)

553 i‡(
r
 < 0)

557 
	}
}

560 
	$kick_disc⁄√˘ed
()

562 
usb_h™dÀ
 *
usb

NULL
;

564 
	`adb_muãx_lock
(&
usb_lock
);

566 
usb
 = 
h™dÀ_li°
.
√xt
; usb != &handle_list; usb = usb->next) {

568 i‡(
	`check_devi˚_c⁄√˘ed
(
usb
) == 0) {

569 
	`D
("kick_disconnected(): Transport %p isÇot onlineánymore\n",

570 
usb
);

572 
	`usb_kick
(
usb
);

576 
	`adb_muãx_u∆ock
(&
usb_lock
);

577 
	}
}

580 
	$sˇn_usb_devi˚s
()

582 
	`D
("scan_usb_devices(): started\n");

584 
libusb_devi˚
 **
devs

NULL
;

585 
libusb_devi˚
 *
dev

NULL
;

586 
ssize_t
 
˙t
 = 
	`libusb_gë_devi˚_li°
(
˘x
, &
devs
);

588 i‡(
˙t
 < 0) {

589 
	`D
("scan_usb_devices(): FailedÅo get deviceÜist (error: %d)\n",

590 
˙t
);

595 
i
 = 0;

597 (
dev
 = 
devs
[
i
++]Ë!
NULL
) {

598 
	`check_devi˚
(
dev
);

601 
	`libusb_‰ì_devi˚_li°
(
devs
, 1);

602 
	}
}

605 
	$devi˚_pﬁl_thªad
(* 
unu£d
)

607 
	`D
("device_poll_thread(): Created USB scanÅhread\n");

610 
	`¶ìp
(5);

611 
	`kick_disc⁄√˘ed
();

612 
	`sˇn_usb_devi˚s
();

616  (
NULL
);

617 
	}
}

620 
	$sigÆrm_h™dÀr
(
signo
)

623 
	}
}

626 
	$usb_öô
()

628 
	`D
("usb_init(): started\n");

629 
adb_thªad_t
 
tid
;

630 
siga˘i⁄
 
a˘i⁄s
;

632 
r
 = 
	`libusb_öô
(&
˘x
);

634 i‡(
r
 !
LIBUSB_SUCCESS
) {

635 
	`îr
(
EX_IOERR
, "FailedÅo initÜibusb\n");

638 
	`mem£t
(&
a˘i⁄s
, 0, (actions));

640 
	`sigem±y£t
(&
a˘i⁄s
.
ß_mask
);

642 
a˘i⁄s
.
ß_Êags
 = 0;

643 
a˘i⁄s
.
ß_h™dÀr
 = 
sigÆrm_h™dÀr
;

645 
	`siga˘i⁄
(
SIGALRM
, &
a˘i⁄s
, 
NULL
);

648 
	`sˇn_usb_devi˚s
();

651 i‡(
	`adb_thªad_¸óã
(&
tid
, 
devi˚_pﬁl_thªad
, 
NULL
)) {

652 
	`îr
(
EX_IOERR
, "cannot create USB scanÅhread\n");

655 
	`D
("usb_init(): finished\n");

656 
	}
}

	@usb_linux.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<°rög.h
>

22 
	~<sys/io˘l.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/time.h
>

25 
	~<dúít.h
>

26 
	~<f˙é.h
>

27 
	~<î∫o.h
>

28 
	~<˘y≥.h
>

30 
	~<löux/usbdevi˚_fs.h
>

31 
	~<löux/vîsi⁄.h
>

32 #i‡
LINUX_VERSION_CODE
 > 
KERNEL_VERSION
(2, 6, 20)

33 
	~<löux/usb/ch9.h
>

35 
	~<löux/usb_ch9.h
>

37 
	~<asm/byã‹dî.h
>

39 
	~"sysdïs.h
"

41 
	#TRACE_TAG
 
TRACE_USB


	)

42 
	~"adb.h
"

46 
	#DBGX
(
x
...)

	)

48 
ADB_MUTEX_DEFINE
–
usb_lock
 );

50 
	susb_h™dÀ


52 
usb_h™dÀ
 *
	m¥ev
;

53 
usb_h™dÀ
 *
	m√xt
;

55 
	m‚ame
[64];

56 
	mdesc
;

57 
	mï_ö
;

58 
	mï_out
;

60 
	mzîo_mask
;

61 
	mwrôóbÀ
;

63 
usbdevfs_urb
 
	murb_ö
;

64 
usbdevfs_urb
 
	murb_out
;

66 
	murb_ö_busy
;

67 
	murb_out_busy
;

68 
	mdód
;

70 
adb_c⁄d_t
 
	mnŸify
;

71 
adb_muãx_t
 
	mlock
;

74 
	mm¨k
;

77 
±hªad_t
 
	mª≠î_thªad
;

80 
usb_h™dÀ
 
	gh™dÀ_li°
 = {

81 .
¥ev
 = &
h™dÀ_li°
,

82 .
	g√xt
 = &
h™dÀ_li°
,

85 
	$known_devi˚
(c⁄° *
dev_«me
)

87 
usb_h™dÀ
 *
usb
;

89 
	`adb_muãx_lock
(&
usb_lock
);

90 
usb
 = 
h™dÀ_li°
.
√xt
; usb != &handle_list; usb = usb->next){

91 if(!
	`°rcmp
(
usb
->
‚ame
, 
dev_«me
)) {

93 
usb
->
m¨k
 = 1;

94 
	`adb_muãx_u∆ock
(&
usb_lock
);

98 
	`adb_muãx_u∆ock
(&
usb_lock
);

100 
	}
}

102 
	$kick_disc⁄√˘ed_devi˚s
()

104 
usb_h™dÀ
 *
usb
;

106 
	`adb_muãx_lock
(&
usb_lock
);

108 
usb
 = 
h™dÀ_li°
.
√xt
; usb != &handle_list; usb = usb->next){

109 i‡(
usb
->
m¨k
 == 0) {

110 
	`usb_kick
(
usb
);

112 
usb
->
m¨k
 = 0;

115 
	`adb_muãx_u∆ock
(&
usb_lock
);

117 
	}
}

119 
ªgi°î_devi˚
(c⁄° *
dev_«me
, c⁄° *
dev∑th
,

120 
ï_ö
, 
ï_out
,

121 
ifc
, 
£rül_ödex
, 
zîo_mask
);

123 
ölöe
 
	$bad«me
(c⁄° *
«me
)

125 *
«me
) {

126 if(!
	`isdigô
(*
«me
++))  1;

129 
	}
}

131 
föd_usb_devi˚
(c⁄° *
ba£
,

132 (*
ªgi°î_devi˚_ˇŒback
)

135 
bu¢ame
[32], 
dev«me
[32];

136 
loˇl_ï_ö
, 
loˇl_ï_out
;

137 
DIR
 *
busdú
 , *
devdú
 ;

138 
dúít
 *
de
;

139 
fd
 ;

141 
busdú
 = 
	`›ídú
(
ba£
);

142 if(
busdú
 == 0) ;

144 (
de
 = 
	`ªaddú
(
busdú
)) != 0) {

145 if(
	`bad«me
(
de
->
d_«me
)) ;

147 
	`¢¥ötf
(
bu¢ame
,  bu¢ame, "%s/%s", 
ba£
, 
de
->
d_«me
);

148 
devdú
 = 
	`›ídú
(
bu¢ame
);

149 if(
devdú
 == 0) ;

152 (
de
 = 
	`ªaddú
(
devdú
))) {

153 
devdesc
[4096];

154 * 
buÂå
 = 
devdesc
;

155 * 
bu„nd
;

156 
usb_devi˚_des¸ùt‹
* 
devi˚
;

157 
usb_c⁄fig_des¸ùt‹
* 
c⁄fig
;

158 
usb_öãrÁ˚_des¸ùt‹
* 
öãrÁ˚
;

159 
usb_ídpoöt_des¸ùt‹
 *
ï1
, *
ï2
;

160 
zîo_mask
 = 0;

161 
vid
, 
pid
;

162 
size_t
 
des˛ígth
;

164 if(
	`bad«me
(
de
->
d_«me
)) ;

165 
	`¢¥ötf
(
dev«me
,  dev«me, "%s/%s", 
bu¢ame
, 
de
->
d_«me
);

167 if(
	`known_devi˚
(
dev«me
)) {

168 
	`DBGX
("skùpög %s\n", 
dev«me
);

173 if((
fd
 = 
	`unix_›í
(
dev«me
, 
O_RDONLY
)) < 0) {

177 
des˛ígth
 = 
	`adb_ªad
(
fd
, 
devdesc
, (devdesc));

178 
bu„nd
 = 
buÂå
 + 
des˛ígth
;

181 i‡(
des˛ígth
 < 
USB_DT_DEVICE_SIZE
 + 
USB_DT_CONFIG_SIZE
) {

182 
	`D
("des˛ígth %d i†toÿsmÆl\n", 
des˛ígth
);

183 
	`adb_˛o£
(
fd
);

187 
devi˚
 = (
usb_devi˚_des¸ùt‹
*)
buÂå
;

188 
buÂå
 +
USB_DT_DEVICE_SIZE
;

190 if((
devi˚
->
bLígth
 !
USB_DT_DEVICE_SIZE
Ë|| (devi˚->
bDes¸ùt‹Ty≥
 !
USB_DT_DEVICE
)) {

191 
	`adb_˛o£
(
fd
);

195 
vid
 = 
devi˚
->
idVíd‹
;

196 
pid
 = 
devi˚
->
idProdu˘
;

197 
	`DBGX
("[ %†i†V:%04x P:%04x ]\n", 
dev«me
, 
vid
, 
pid
);

200 
c⁄fig
 = (
usb_c⁄fig_des¸ùt‹
 *)
buÂå
;

201 
buÂå
 +
USB_DT_CONFIG_SIZE
;

202 i‡(
c⁄fig
->
bLígth
 !
USB_DT_CONFIG_SIZE
 || c⁄fig->
bDes¸ùt‹Ty≥
 !
USB_DT_CONFIG
) {

203 
	`D
("usb_config_descriptorÇot found\n");

204 
	`adb_˛o£
(
fd
);

209 
buÂå
 < 
bu„nd
) {

210 
Àngth
 = 
buÂå
[0];

211 
ty≥
 = 
buÂå
[1];

213 i‡(
ty≥
 =
USB_DT_INTERFACE
) {

214 
öãrÁ˚
 = (
usb_öãrÁ˚_des¸ùt‹
 *)
buÂå
;

215 
buÂå
 +
Àngth
;

217 i‡(
Àngth
 !
USB_DT_INTERFACE_SIZE
) {

218 
	`D
("interface descriptor has wrong size\n");

222 
	`DBGX
("bInterfaceClass: %d, bInterfaceSubClass: %d,"

224 
öãrÁ˚
->
bI¡îÁ˚Cœss
, i¡îÁ˚->
bI¡îÁ˚SubCœss
,

225 
öãrÁ˚
->
bI¡îÁ˚PrŸocﬁ
, i¡îÁ˚->
bNumEndpoöts
);

227 i‡(
öãrÁ˚
->
bNumEndpoöts
 == 2 &&

228 
	`is_adb_öãrÁ˚
(
vid
, 
pid
, 
öãrÁ˚
->
bI¡îÁ˚Cœss
,

229 
öãrÁ˚
->
bI¡îÁ˚SubCœss
, i¡îÁ˚->
bI¡îÁ˚PrŸocﬁ
)) {

231 
°©
 
°
;

232 
∑thbuf
[128];

233 
lök
[256];

234 *
dev∑th
 = 
NULL
;

236 
	`DBGX
("looking for bulkÉndpoints\n");

238 
ï1
 = (
usb_ídpoöt_des¸ùt‹
 *)
buÂå
;

239 
buÂå
 +
USB_DT_ENDPOINT_SIZE
;

240 
ï2
 = (
usb_ídpoöt_des¸ùt‹
 *)
buÂå
;

241 
buÂå
 +
USB_DT_ENDPOINT_SIZE
;

243 i‡(
buÂå
 > 
devdesc
 + 
des˛ígth
 ||

244 
ï1
->
bLígth
 !
USB_DT_ENDPOINT_SIZE
 ||

245 
ï1
->
bDes¸ùt‹Ty≥
 !
USB_DT_ENDPOINT
 ||

246 
ï2
->
bLígth
 !
USB_DT_ENDPOINT_SIZE
 ||

247 
ï2
->
bDes¸ùt‹Ty≥
 !
USB_DT_ENDPOINT
) {

248 
	`D
("endpointsÇot found\n");

253 i‡(
ï1
->
bmAâribuãs
 !
USB_ENDPOINT_XFER_BULK
 ||

254 
ï2
->
bmAâribuãs
 !
USB_ENDPOINT_XFER_BULK
) {

255 
	`D
("bulkÉndpointsÇot found\n");

259 if(
öãrÁ˚
->
bI¡îÁ˚PrŸocﬁ
 == 0x01) {

260 
zîo_mask
 = 
ï1
->
wMaxPackëSize
 - 1;

264 i‡(
ï1
->
bEndpoötAddªss
 & 
USB_ENDPOINT_DIR_MASK
) {

265 
loˇl_ï_ö
 = 
ï1
->
bEndpoötAddªss
;

266 
loˇl_ï_out
 = 
ï2
->
bEndpoötAddªss
;

268 
loˇl_ï_ö
 = 
ï2
->
bEndpoötAddªss
;

269 
loˇl_ï_out
 = 
ï1
->
bEndpoötAddªss
;

273 i‡(!
	`f°©
(
fd
, &
°
Ë&& 
	`S_ISCHR
(°.
°_mode
)) {

274 *
¶ash
;

275 
ssize_t
 
lök_Àn
;

276 
	`¢¥ötf
(
∑thbuf
, (pathbuf), "/sys/dev/char/%d:%d",

277 
	`maj‹
(
°
.
°_rdev
), 
	`mö‹
(st.st_rdev));

278 
lök_Àn
 = 
	`ªadlök
(
∑thbuf
, 
lök
, (link) - 1);

279 i‡(
lök_Àn
 > 0) {

280 
lök
[
lök_Àn
] = '\0';

281 
¶ash
 = 
	`°ºchr
(
lök
, '/');

282 i‡(
¶ash
) {

283 
	`¢¥ötf
(
∑thbuf
, (pathbuf),

284 "usb:%s", 
¶ash
 + 1);

285 
dev∑th
 = 
∑thbuf
;

290 
	`ªgi°î_devi˚_ˇŒback
(
dev«me
, 
dev∑th
,

291 
loˇl_ï_ö
, 
loˇl_ï_out
,

292 
öãrÁ˚
->
bI¡îÁ˚Numbî
, 
devi˚
->
iSîülNumbî
, 
zîo_mask
);

296 
buÂå
 +
Àngth
;

300 
	`adb_˛o£
(
fd
);

302 
	`˛o£dú
(
devdú
);

304 
	`˛o£dú
(
busdú
);

305 
	}
}

307 
	$usb_˛ónup
()

309 
	}
}

311 
	$usb_bulk_wrôe
(
usb_h™dÀ
 *
h
, c⁄° *
d©a
, 
Àn
)

313 
usbdevfs_urb
 *
urb
 = &
h
->
urb_out
;

314 
ªs
;

315 
timevÆ
 
tv
;

316 
time•ec
 
ts
;

318 
	`mem£t
(
urb
, 0, (*urb));

319 
urb
->
ty≥
 = 
USBDEVFS_URB_TYPE_BULK
;

320 
urb
->
ídpoöt
 = 
h
->
ï_out
;

321 
urb
->
°©us
 = -1;

322 
urb
->
buf„r
 = (*Ë
d©a
;

323 
urb
->
buf„r_Àngth
 = 
Àn
;

325 
	`D
("++ write ++\n");

327 
	`adb_muãx_lock
(&
h
->
lock
);

328 if(
h
->
dód
) {

329 
ªs
 = -1;

330 
Áû
;

333 
ªs
 = 
	`io˘l
(
h
->
desc
, 
USBDEVFS_SUBMITURB
, 
urb
);

334 } (
ªs
 < 0Ë&& (
î∫o
 =
EINTR
));

336 if(
ªs
 < 0) {

337 
Áû
;

340 
ªs
 = -1;

341 
h
->
urb_out_busy
 = 1;

344 
	`gëtimeofday
(&
tv
, 
NULL
);

345 
ts
.
tv_£c
 = 
tv
.tv_sec + 5;

346 
ts
.
tv_n£c
 = 
tv
.
tv_u£c
 * 1000L;

347 
ªs
 = 
	`±hªad_c⁄d_timedwaô
(&
h
->
nŸify
, &h->
lock
, &
ts
);

348 if(
ªs
 < 0 || 
h
->
dód
) {

351 if(
h
->
urb_out_busy
 == 0) {

352 if(
urb
->
°©us
 == 0) {

353 
ªs
 = 
urb
->
a˘uÆ_Àngth
;

358 
Áû
:

359 
	`adb_muãx_u∆ock
(&
h
->
lock
);

360 
	`D
("-- write --\n");

361  
ªs
;

362 
	}
}

364 
	$usb_bulk_ªad
(
usb_h™dÀ
 *
h
, *
d©a
, 
Àn
)

366 
usbdevfs_urb
 *
urb
 = &
h
->
urb_ö
;

367 
usbdevfs_urb
 *
out
 = 
NULL
;

368 
ªs
;

370 
	`mem£t
(
urb
, 0, (*urb));

371 
urb
->
ty≥
 = 
USBDEVFS_URB_TYPE_BULK
;

372 
urb
->
ídpoöt
 = 
h
->
ï_ö
;

373 
urb
->
°©us
 = -1;

374 
urb
->
buf„r
 = 
d©a
;

375 
urb
->
buf„r_Àngth
 = 
Àn
;

378 
	`adb_muãx_lock
(&
h
->
lock
);

379 if(
h
->
dód
) {

380 
ªs
 = -1;

381 
Áû
;

384 
ªs
 = 
	`io˘l
(
h
->
desc
, 
USBDEVFS_SUBMITURB
, 
urb
);

385 } (
ªs
 < 0Ë&& (
î∫o
 =
EINTR
));

387 if(
ªs
 < 0) {

388 
Áû
;

391 
h
->
urb_ö_busy
 = 1;

393 
	`D
("[Ñeap urb - wait ]\n");

394 
h
->
ª≠î_thªad
 = 
	`±hªad_£lf
();

395 
	`adb_muãx_u∆ock
(&
h
->
lock
);

396 
ªs
 = 
	`io˘l
(
h
->
desc
, 
USBDEVFS_REAPURB
, &
out
);

397 
ßved_î∫o
 = 
î∫o
;

398 
	`adb_muãx_lock
(&
h
->
lock
);

399 
h
->
ª≠î_thªad
 = 0;

400 if(
h
->
dód
) {

401 
ªs
 = -1;

404 if(
ªs
 < 0) {

405 if(
ßved_î∫o
 =
EINTR
) {

408 
	`D
("[Ñeap urb -Érror ]\n");

411 
	`D
("[ urb @%p status = %d,áctual = %d ]\n",

412 
out
, out->
°©us
, out->
a˘uÆ_Àngth
);

414 if(
out
 =&
h
->
urb_ö
) {

415 
	`D
("[Ñeap urb - IN complete ]\n");

416 
h
->
urb_ö_busy
 = 0;

417 if(
urb
->
°©us
 == 0) {

418 
ªs
 = 
urb
->
a˘uÆ_Àngth
;

420 
ªs
 = -1;

424 if(
out
 =&
h
->
urb_out
) {

425 
	`D
("[Ñeap urb - OUT compelete ]\n");

426 
h
->
urb_out_busy
 = 0;

427 
	`adb_c⁄d_brﬂdˇ°
(&
h
->
nŸify
);

430 
Áû
:

431 
	`adb_muãx_u∆ock
(&
h
->
lock
);

432  
ªs
;

433 
	}
}

436 
	$usb_wrôe
(
usb_h™dÀ
 *
h
, c⁄° *
_d©a
, 
Àn
)

438 *
d©a
 = (*Ë
_d©a
;

439 
n
;

440 
√ed_zîo
 = 0;

442 if(
h
->
zîo_mask
) {

447 if(!(
Àn
 & 
h
->
zîo_mask
)) {

448 
√ed_zîo
 = 1;

452 
Àn
 > 0) {

453 
x„r
 = (
Àn
 > 4096) ? 4096 :Üen;

455 
n
 = 
	`usb_bulk_wrôe
(
h
, 
d©a
, 
x„r
);

456 if(
n
 !
x„r
) {

457 
	`D
("ERROR:Ç = %d,Érrno = %d (%s)\n",

458 
n
, 
î∫o
, 
	`°ªº‹
(errno));

462 
Àn
 -
x„r
;

463 
d©a
 +
x„r
;

466 if(
√ed_zîo
){

467 
n
 = 
	`usb_bulk_wrôe
(
h
, 
_d©a
, 0);

468  
n
;

472 
	}
}

474 
	$usb_ªad
(
usb_h™dÀ
 *
h
, *
_d©a
, 
Àn
)

476 *
d©a
 = (*Ë
_d©a
;

477 
n
;

479 
	`D
("++ usb_read ++\n");

480 
Àn
 > 0) {

481 
x„r
 = (
Àn
 > 4096) ? 4096 :Üen;

483 
	`D
("[ usbÑód %d fd = %d], f«me=%s\n", 
x„r
, 
h
->
desc
, h->
‚ame
);

484 
n
 = 
	`usb_bulk_ªad
(
h
, 
d©a
, 
x„r
);

485 
	`D
("[ usbÑód %d ] = %d, f«me=%s\n", 
x„r
, 
n
, 
h
->
‚ame
);

486 if(
n
 !
x„r
) {

487 if((
î∫o
 =
ETIMEDOUT
Ë&& (
h
->
desc
 != -1)) {

488 
	`D
("[Åimeout ]\n");

489 if(
n
 > 0){

490 
d©a
 +
n
;

491 
Àn
 -
n
;

495 
	`D
("ERROR:Ç = %d,Érrno = %d (%s)\n",

496 
n
, 
î∫o
, 
	`°ªº‹
(errno));

500 
Àn
 -
x„r
;

501 
d©a
 +
x„r
;

504 
	`D
("-- usb_read --\n");

506 
	}
}

508 
	$usb_kick
(
usb_h™dÀ
 *
h
)

510 
	`D
("[ kickög %∞(fd = %dË]\n", 
h
, h->
desc
);

511 
	`adb_muãx_lock
(&
h
->
lock
);

512 if(
h
->
dód
 == 0) {

513 
h
->
dód
 = 1;

515 i‡(
h
->
wrôóbÀ
) {

520 i‡(
h
->
ª≠î_thªad
) {

521 
	`±hªad_kûl
(
h
->
ª≠î_thªad
, 
SIGALRM
);

529 
	`io˘l
(
h
->
desc
, 
USBDEVFS_DISCARDURB
, &h->
urb_ö
);

530 
	`io˘l
(
h
->
desc
, 
USBDEVFS_DISCARDURB
, &h->
urb_out
);

531 
h
->
urb_ö
.
°©us
 = -
ENODEV
;

532 
h
->
urb_out
.
°©us
 = -
ENODEV
;

533 
h
->
urb_ö_busy
 = 0;

534 
h
->
urb_out_busy
 = 0;

535 
	`adb_c⁄d_brﬂdˇ°
(&
h
->
nŸify
);

537 
	`uƒegi°î_usb_å™•‹t
(
h
);

540 
	`adb_muãx_u∆ock
(&
h
->
lock
);

541 
	}
}

543 
	$usb_˛o£
(
usb_h™dÀ
 *
h
)

545 
	`D
("[ usb close ... ]\n");

546 
	`adb_muãx_lock
(&
usb_lock
);

547 
h
->
√xt
->
¥ev
 = h->prev;

548 
h
->
¥ev
->
√xt
 = h->next;

549 
h
->
¥ev
 = 0;

550 
h
->
√xt
 = 0;

552 
	`adb_˛o£
(
h
->
desc
);

553 
	`D
("[ usb clo£d %∞(fd = %dË]\n", 
h
, h->
desc
);

554 
	`adb_muãx_u∆ock
(&
usb_lock
);

556 
	`‰ì
(
h
);

558 
	}
}

560 
	$ªgi°î_devi˚
(c⁄° *
dev_«me
, c⁄° *
dev∑th
,

561 
ï_ö
, 
ï_out
,

562 
öãrÁ˚
, 
£rül_ödex
, 
zîo_mask
)

564 
usb_h™dÀ
* 
usb
 = 0;

565 
n
 = 0;

566 
£rül
[256];

576 
	`adb_muãx_lock
(&
usb_lock
);

577 
usb
 = 
h™dÀ_li°
.
√xt
; usb != &handle_list; usb = usb->next){

578 if(!
	`°rcmp
(
usb
->
‚ame
, 
dev_«me
)) {

579 
	`adb_muãx_u∆ock
(&
usb_lock
);

583 
	`adb_muãx_u∆ock
(&
usb_lock
);

585 
	`D
("[ usbÜocatedÇew device %s (%d/%d/%d) ]\n",

586 
dev_«me
, 
ï_ö
, 
ï_out
, 
öãrÁ˚
);

587 
usb
 = 
	`ˇŒoc
(1, (
usb_h™dÀ
));

588 
	`°r˝y
(
usb
->
‚ame
, 
dev_«me
);

589 
usb
->
ï_ö
 =Ép_in;

590 
usb
->
ï_out
 =Ép_out;

591 
usb
->
zîo_mask
 = zero_mask;

592 
usb
->
wrôóbÀ
 = 1;

594 
	`adb_c⁄d_öô
(&
usb
->
nŸify
, 0);

595 
	`adb_muãx_öô
(&
usb
->
lock
, 0);

597 
usb
->
m¨k
 = 1;

598 
usb
->
ª≠î_thªad
 = 0;

600 
usb
->
desc
 = 
	`unix_›í
(usb->
‚ame
, 
O_RDWR
);

601 if(
usb
->
desc
 < 0) {

603 
usb
->
desc
 = 
	`unix_›í
(usb->
‚ame
, 
O_RDONLY
);

604 if(
usb
->
desc
 < 0Ë
Áû
;

605 
usb
->
wrôóbÀ
 = 0;

606 
	`D
("[ usb o≥¿ªad-⁄ly %†fd = %d]\n", 
usb
->
‚ame
, usb->
desc
);

608 
	`D
("[ usb o≥¿%†fd = %d]\n", 
usb
->
‚ame
, usb->
desc
);

609 
n
 = 
	`io˘l
(
usb
->
desc
, 
USBDEVFS_CLAIMINTERFACE
, &
öãrÁ˚
);

610 if(
n
 !0Ë
Áû
;

614 
£rül
[0] = 0;

615 
	`mem£t
(
£rül
, 0, (serial));

616 i‡(
£rül_ödex
) {

617 
usbdevfs_˘æå™s„r
 
˘æ
;

618 
__u16
 
buf„r
[128];

619 
__u16
 
œnguages
[128];

620 
i
, 
ªsu…
;

621 
œnguageCou¡
 = 0;

623 
	`mem£t
(
œnguages
, 0, (languages));

624 
	`mem£t
(&
˘æ
, 0, (ctrl));

627 
˘æ
.
bReque°Ty≥
 = 
USB_DIR_IN
|
USB_TYPE_STANDARD
|
USB_RECIP_DEVICE
;

628 
˘æ
.
bReque°
 = 
USB_REQ_GET_DESCRIPTOR
;

629 
˘æ
.
wVÆue
 = (
USB_DT_STRING
 << 8) | 0;

630 
˘æ
.
wIndex
 = 0;

631 
˘æ
.
wLígth
 = (
œnguages
);

632 
˘æ
.
d©a
 = 
œnguages
;

633 
˘æ
.
timeout
 = 1000;

635 
ªsu…
 = 
	`io˘l
(
usb
->
desc
, 
USBDEVFS_CONTROL
, &
˘æ
);

636 i‡(
ªsu…
 > 0)

637 
œnguageCou¡
 = (
ªsu…
 - 2) / 2;

639 
i
 = 1; i <
œnguageCou¡
; i++) {

640 
	`mem£t
(
buf„r
, 0, (buffer));

641 
	`mem£t
(&
˘æ
, 0, (ctrl));

643 
˘æ
.
bReque°Ty≥
 = 
USB_DIR_IN
|
USB_TYPE_STANDARD
|
USB_RECIP_DEVICE
;

644 
˘æ
.
bReque°
 = 
USB_REQ_GET_DESCRIPTOR
;

645 
˘æ
.
wVÆue
 = (
USB_DT_STRING
 << 8Ë| 
£rül_ödex
;

646 
˘æ
.
wIndex
 = 
	`__À16_to_˝u
(
œnguages
[
i
]);

647 
˘æ
.
wLígth
 = (
buf„r
);

648 
˘æ
.
d©a
 = 
buf„r
;

649 
˘æ
.
timeout
 = 1000;

651 
ªsu…
 = 
	`io˘l
(
usb
->
desc
, 
USBDEVFS_CONTROL
, &
˘æ
);

652 i‡(
ªsu…
 > 0) {

653 
i
;

655 
ªsu…
 /= 2;

656 
i
 = 1; i < 
ªsu…
; i++)

657 
£rül
[
i
 - 1] = 
	`__À16_to_˝u
(
buf„r
[i]);

658 
£rül
[
i
 - 1] = 0;

665 
	`adb_muãx_lock
(&
usb_lock
);

666 
usb
->
√xt
 = &
h™dÀ_li°
;

667 
usb
->
¥ev
 = 
h™dÀ_li°
.prev;

668 
usb
->
¥ev
->
√xt
 = usb;

669 
usb
->
√xt
->
¥ev
 = usb;

670 
	`adb_muãx_u∆ock
(&
usb_lock
);

672 
	`ªgi°î_usb_å™•‹t
(
usb
, 
£rül
, 
dev∑th
, usb->
wrôóbÀ
);

675 
Áû
:

676 
	`D
("[ usb open %sÉrror=%d,Érr_str = %s]\n",

677 
usb
->
‚ame
, 
î∫o
, 
	`°ªº‹
(errno));

678 if(
usb
->
desc
 >= 0) {

679 
	`adb_˛o£
(
usb
->
desc
);

681 
	`‰ì
(
usb
);

682 
	}
}

684 * 
	$devi˚_pﬁl_thªad
(* 
unu£d
)

686 
	`D
("Created deviceÅhread\n");

689 
	`föd_usb_devi˚
("/dev/bus/usb", 
ªgi°î_devi˚
);

690 
	`kick_disc⁄√˘ed_devi˚s
();

691 
	`¶ìp
(1);

693  
NULL
;

694 
	}
}

696 
	$sigÆrm_h™dÀr
(
signo
)

699 
	}
}

701 
	$usb_öô
()

703 
adb_thªad_t
 
tid
;

704 
siga˘i⁄
 
a˘i⁄s
;

706 
	`mem£t
(&
a˘i⁄s
, 0, (actions));

707 
	`sigem±y£t
(&
a˘i⁄s
.
ß_mask
);

708 
a˘i⁄s
.
ß_Êags
 = 0;

709 
a˘i⁄s
.
ß_h™dÀr
 = 
sigÆrm_h™dÀr
;

710 
	`siga˘i⁄
(
SIGALRM
,& 
a˘i⁄s
, 
NULL
);

712 if(
	`adb_thªad_¸óã
(&
tid
, 
devi˚_pﬁl_thªad
, 
NULL
)){

713 
	`Áèl_î∫o
("cannot create inputÅhread");

715 
	}
}

	@usb_linux_client.c

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<uni°d.h
>

20 
	~<°rög.h
>

22 
	~<löux/usb/ch9.h
>

23 
	~<löux/usb/fun˘i⁄fs.h
>

24 
	~<sys/io˘l.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<dúít.h
>

27 
	~<î∫o.h
>

29 
	~"sysdïs.h
"

31 
	#TRACE_TAG
 
TRACE_USB


	)

32 
	~"adb.h
"

34 
	#MAX_PACKET_SIZE_FS
 64

	)

35 
	#MAX_PACKET_SIZE_HS
 512

	)

37 
	#˝u_to_À16
(
x
Ë
	`htﬁe16
(x)

	)

38 
	#˝u_to_À32
(
x
Ë
	`htﬁe32
(x)

	)

40 
	susb_h™dÀ


42 
adb_c⁄d_t
 
	mnŸify
;

43 
adb_muãx_t
 
	mlock
;

45 (*
	mwrôe
)(
usb_h™dÀ
 *
	mh
, c⁄° *
	md©a
, 
	mÀn
);

46 (*
	mªad
)(
usb_h™dÀ
 *
	mh
, *
	md©a
, 
	mÀn
);

47 (*
	mkick
)(
usb_h™dÀ
 *
	mh
);

50 
	mfd
;

53 
	mc⁄åﬁ
;

54 
	mbulk_out
;

55 
	mbulk_ö
;

59 
usb_fun˘i⁄fs_descs_hód
 
	mhódî
;

61 
usb_öãrÁ˚_des¸ùt‹
 
	mötf
;

62 
usb_ídpoöt_des¸ùt‹_no_audio
 
	msour˚
;

63 
usb_ídpoöt_des¸ùt‹_no_audio
 
	msök
;

64 } 
__©åibuã__
((
∑cked
)Ë
	mfs_descs
, 
	mhs_descs
;

65 } 
__©åibuã__
((
∑cked
)Ë
	gdes¸ùt‹s
 = {

66 .
hódî
 = {

67 .
magic
 = 
˝u_to_À32
(
FUNCTIONFS_DESCRIPTORS_MAGIC
),

68 .
	gÀngth
 = 
˝u_to_À32
((
des¸ùt‹s
)),

69 .
	gfs_cou¡
 = 3,

70 .
	ghs_cou¡
 = 3,

72 .
	gfs_descs
 = {

73 .
ötf
 = {

74 .
bLígth
 = (
des¸ùt‹s
.
fs_descs
.
ötf
),

75 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

76 .
	gbI¡îÁ˚Numbî
 = 0,

77 .
	gbNumEndpoöts
 = 2,

78 .
	gbI¡îÁ˚Cœss
 = 
ADB_CLASS
,

79 .
	gbI¡îÁ˚SubCœss
 = 
ADB_SUBCLASS
,

80 .
	gbI¡îÁ˚PrŸocﬁ
 = 
ADB_PROTOCOL
,

81 .
	giI¡îÁ˚
 = 1,

83 .
	gsour˚
 = {

84 .
bLígth
 = (
des¸ùt‹s
.
fs_descs
.
sour˚
),

85 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

86 .
	gbEndpoötAddªss
 = 1 | 
USB_DIR_OUT
,

87 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

88 .
	gwMaxPackëSize
 = 
MAX_PACKET_SIZE_FS
,

90 .
	gsök
 = {

91 .
bLígth
 = (
des¸ùt‹s
.
fs_descs
.
sök
),

92 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

93 .
	gbEndpoötAddªss
 = 2 | 
USB_DIR_IN
,

94 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

95 .
	gwMaxPackëSize
 = 
MAX_PACKET_SIZE_FS
,

98 .
	ghs_descs
 = {

99 .
ötf
 = {

100 .
bLígth
 = (
des¸ùt‹s
.
hs_descs
.
ötf
),

101 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_INTERFACE
,

102 .
	gbI¡îÁ˚Numbî
 = 0,

103 .
	gbNumEndpoöts
 = 2,

104 .
	gbI¡îÁ˚Cœss
 = 
ADB_CLASS
,

105 .
	gbI¡îÁ˚SubCœss
 = 
ADB_SUBCLASS
,

106 .
	gbI¡îÁ˚PrŸocﬁ
 = 
ADB_PROTOCOL
,

107 .
	giI¡îÁ˚
 = 1,

109 .
	gsour˚
 = {

110 .
bLígth
 = (
des¸ùt‹s
.
hs_descs
.
sour˚
),

111 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

112 .
	gbEndpoötAddªss
 = 1 | 
USB_DIR_OUT
,

113 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

114 .
	gwMaxPackëSize
 = 
MAX_PACKET_SIZE_HS
,

116 .
	gsök
 = {

117 .
bLígth
 = (
des¸ùt‹s
.
hs_descs
.
sök
),

118 .
	gbDes¸ùt‹Ty≥
 = 
USB_DT_ENDPOINT
,

119 .
	gbEndpoötAddªss
 = 2 | 
USB_DIR_IN
,

120 .
	gbmAâribuãs
 = 
USB_ENDPOINT_XFER_BULK
,

121 .
	gwMaxPackëSize
 = 
MAX_PACKET_SIZE_HS
,

126 
	#STR_INTERFACE_
 "ADB I¡îÁ˚"

	)

129 
usb_fun˘i⁄fs_°rögs_hód
 
	mhódî
;

131 
__À16
 
	mcode
;

132 c⁄° 
	m°r1
[(
STR_INTERFACE_
)];

133 } 
__©åibuã__
((
∑cked
)Ë
	mœng0
;

134 } 
__©åibuã__
((
∑cked
)Ë
	g°rögs
 = {

135 .
hódî
 = {

136 .
magic
 = 
˝u_to_À32
(
FUNCTIONFS_STRINGS_MAGIC
),

137 .
	gÀngth
 = 
˝u_to_À32
((
°rögs
)),

138 .
	g°r_cou¡
 = 
˝u_to_À32
(1),

139 .
	gœng_cou¡
 = 
˝u_to_À32
(1),

141 .
	gœng0
 = {

142 
˝u_to_À16
(0x0409),

143 
STR_INTERFACE_
,

149 *
	$usb_adb_›í_thªad
(*
x
)

151 
usb_h™dÀ
 *
usb
 = (usb_h™dÀ *)
x
;

152 
fd
;

156 
	`adb_muãx_lock
(&
usb
->
lock
);

157 
usb
->
fd
 != -1)

158 
	`adb_c⁄d_waô
(&
usb
->
nŸify
, &usb->
lock
);

159 
	`adb_muãx_u∆ock
(&
usb
->
lock
);

161 
	`D
("[ usb_thread - opening device ]\n");

164 
fd
 = 
	`unix_›í
("/dev/™droid_adb", 
O_RDWR
);

165 i‡(
fd
 < 0) {

167 
fd
 = 
	`unix_›í
("/dev/™droid", 
O_RDWR
);

169 i‡(
fd
 < 0) {

170 
	`adb_¶ìp_ms
(1000);

172 } 
fd
 < 0);

173 
	`D
("[ opening device succeeded ]\n");

175 
	`˛o£_⁄_exec
(
fd
);

176 
usb
->
fd
 = fd;

178 
	`D
("[ usb_thread -Ñegistering device ]\n");

179 
	`ªgi°î_usb_å™•‹t
(
usb
, 0, 0, 1);

184 
	}
}

186 
	$usb_adb_wrôe
(
usb_h™dÀ
 *
h
, c⁄° *
d©a
, 
Àn
)

188 
n
;

190 
	`D
("abouàtÿwrôê(fd=%d,Üí=%d)\n", 
h
->
fd
, 
Àn
);

191 
n
 = 
	`adb_wrôe
(
h
->
fd
, 
d©a
, 
Àn
);

192 if(
n
 !
Àn
) {

193 
	`D
("ERROR: fd = %d,Ç = %d,Érrno = %d (%s)\n",

194 
h
->
fd
, 
n
, 
î∫o
, 
	`°ªº‹
(errno));

197 
	`D
("[ d⁄êfd=%d ]\n", 
h
->
fd
);

199 
	}
}

201 
	$usb_adb_ªad
(
usb_h™dÀ
 *
h
, *
d©a
, 
Àn
)

203 
n
;

205 
	`D
("abouàtÿªad (fd=%d,Üí=%d)\n", 
h
->
fd
, 
Àn
);

206 
n
 = 
	`adb_ªad
(
h
->
fd
, 
d©a
, 
Àn
);

207 if(
n
 !
Àn
) {

208 
	`D
("ERROR: fd = %d,Ç = %d,Érrno = %d (%s)\n",

209 
h
->
fd
, 
n
, 
î∫o
, 
	`°ªº‹
(errno));

212 
	`D
("[ d⁄êfd=%d ]\n", 
h
->
fd
);

214 
	}
}

216 
	$usb_adb_kick
(
usb_h™dÀ
 *
h
)

218 
	`D
("usb_kick\n");

219 
	`adb_muãx_lock
(&
h
->
lock
);

220 
	`adb_˛o£
(
h
->
fd
);

221 
h
->
fd
 = -1;

224 
	`adb_c⁄d_sig«l
(&
h
->
nŸify
);

225 
	`adb_muãx_u∆ock
(&
h
->
lock
);

226 
	}
}

228 
	$usb_adb_öô
()

230 
usb_h™dÀ
 *
h
;

231 
adb_thªad_t
 
tid
;

232 
fd
;

234 
h
 = 
	`ˇŒoc
(1, (
usb_h™dÀ
));

236 
h
->
wrôe
 = 
usb_adb_wrôe
;

237 
h
->
ªad
 = 
usb_adb_ªad
;

238 
h
->
kick
 = 
usb_adb_kick
;

239 
h
->
fd
 = -1;

241 
	`adb_c⁄d_öô
(&
h
->
nŸify
, 0);

242 
	`adb_muãx_öô
(&
h
->
lock
, 0);

249 
fd
 = 
	`unix_›í
("/dev/™droid_adb_íabÀ", 
O_RDWR
);

250 i‡(
fd
 < 0) {

251 
	`D
("failedÅo open /dev/android_adb_enable\n");

253 
	`˛o£_⁄_exec
(
fd
);

256 
	`D
("[ usb_init - startingÅhread ]\n");

257 if(
	`adb_thªad_¸óã
(&
tid
, 
usb_adb_›í_thªad
, 
h
)){

258 
	`Áèl_î∫o
("cannot create usbÅhread");

260 
	}
}

263 
	$öô_fun˘i⁄fs
(
usb_h™dÀ
 *
h
)

265 
ssize_t
 
ªt
;

267 
	`D
("OPENING %s\n", 
USB_FFS_ADB_EP0
);

268 
h
->
c⁄åﬁ
 = 
	`adb_›í
(
USB_FFS_ADB_EP0
, 
O_RDWR
);

269 i‡(
h
->
c⁄åﬁ
 < 0) {

270 
	`D
("[ %s: c™nŸ o≥¿c⁄åﬁÉndpoöt:Éºno=%d]\n", 
USB_FFS_ADB_EP0
, 
î∫o
);

271 
îr
;

274 
ªt
 = 
	`adb_wrôe
(
h
->
c⁄åﬁ
, &
des¸ùt‹s
, (descriptors));

275 i‡(
ªt
 < 0) {

276 
	`D
("[ %s: wrôêdes¸ùt‹†Áûed:Éºno=%d ]\n", 
USB_FFS_ADB_EP0
, 
î∫o
);

277 
îr
;

280 
ªt
 = 
	`adb_wrôe
(
h
->
c⁄åﬁ
, &
°rögs
, (strings));

281 i‡(
ªt
 < 0) {

282 
	`D
("[ %s: wrôög såög†Áûed:Éºno=%d]\n", 
USB_FFS_ADB_EP0
, 
î∫o
);

283 
îr
;

286 
h
->
bulk_out
 = 
	`adb_›í
(
USB_FFS_ADB_OUT
, 
O_RDWR
);

287 i‡(
h
->
bulk_out
 < 0) {

288 
	`D
("[ %s: c™nŸ o≥¿bulk-ouàï:Éºno=%d ]\n", 
USB_FFS_ADB_OUT
, 
î∫o
);

289 
îr
;

292 
h
->
bulk_ö
 = 
	`adb_›í
(
USB_FFS_ADB_IN
, 
O_RDWR
);

293 i‡(
h
->
bulk_ö
 < 0) {

294 
	`D
("[ %s: c™nŸ o≥¿bulk-öÉp:Éºno=%d ]\n", 
USB_FFS_ADB_IN
, 
î∫o
);

295 
îr
;

300 
îr
:

301 i‡(
h
->
bulk_ö
 > 0) {

302 
	`adb_˛o£
(
h
->
bulk_ö
);

303 
h
->
bulk_ö
 = -1;

305 i‡(
h
->
bulk_out
 > 0) {

306 
	`adb_˛o£
(
h
->
bulk_out
);

307 
h
->
bulk_out
 = -1;

309 i‡(
h
->
c⁄åﬁ
 > 0) {

310 
	`adb_˛o£
(
h
->
c⁄åﬁ
);

311 
h
->
c⁄åﬁ
 = -1;

314 
	}
}

316 *
	$usb_ffs_›í_thªad
(*
x
)

318 
usb_h™dÀ
 *
usb
 = (usb_h™dÀ *)
x
;

322 
	`adb_muãx_lock
(&
usb
->
lock
);

323 
usb
->
c⁄åﬁ
 != -1)

324 
	`adb_c⁄d_waô
(&
usb
->
nŸify
, &usb->
lock
);

325 
	`adb_muãx_u∆ock
(&
usb
->
lock
);

328 
	`öô_fun˘i⁄fs
(
usb
);

330 i‡(
usb
->
c⁄åﬁ
 >= 0)

333 
	`adb_¶ìp_ms
(1000);

336 
	`D
("[ usb_thread -Ñegistering device ]\n");

337 
	`ªgi°î_usb_å™•‹t
(
usb
, 0, 0, 1);

342 
	}
}

344 
	$bulk_wrôe
(
bulk_ö
, c⁄° *
buf
, 
size_t
 
Àngth
)

346 
size_t
 
cou¡
 = 0;

347 
ªt
;

350 
ªt
 = 
	`adb_wrôe
(
bulk_ö
, 
buf
 + 
cou¡
, 
Àngth
 - count);

351 i‡(
ªt
 < 0) {

352 i‡(
î∫o
 !
EINTR
)

353  
ªt
;

355 
cou¡
 +
ªt
;

357 } 
cou¡
 < 
Àngth
);

359 
	`D
("[ bulk_wrôêd⁄êfd=%d ]\n", 
bulk_ö
);

360  
cou¡
;

361 
	}
}

363 
	$usb_ffs_wrôe
(
usb_h™dÀ
 *
h
, c⁄° *
d©a
, 
Àn
)

365 
n
;

367 
	`D
("abouàtÿwrôê(fd=%d,Üí=%d)\n", 
h
->
bulk_ö
, 
Àn
);

368 
n
 = 
	`bulk_wrôe
(
h
->
bulk_ö
, 
d©a
, 
Àn
);

369 i‡(
n
 !
Àn
) {

370 
	`D
("ERROR: fd = %d,Ç = %d,Érrno = %d (%s)\n",

371 
h
->
bulk_ö
, 
n
, 
î∫o
, 
	`°ªº‹
(errno));

374 
	`D
("[ d⁄êfd=%d ]\n", 
h
->
bulk_ö
);

376 
	}
}

378 
	$bulk_ªad
(
bulk_out
, *
buf
, 
size_t
 
Àngth
)

380 
size_t
 
cou¡
 = 0;

381 
ªt
;

384 
ªt
 = 
	`adb_ªad
(
bulk_out
, 
buf
 + 
cou¡
, 
Àngth
 - count);

385 i‡(
ªt
 < 0) {

386 i‡(
î∫o
 !
EINTR
) {

387 
	`D
("[ bulk_read failed fd=%dÜength=%d count=%d ]\n",

388 
bulk_out
, 
Àngth
, 
cou¡
);

389  
ªt
;

392 
cou¡
 +
ªt
;

394 } 
cou¡
 < 
Àngth
);

396  
cou¡
;

397 
	}
}

399 
	$usb_ffs_ªad
(
usb_h™dÀ
 *
h
, *
d©a
, 
Àn
)

401 
n
;

403 
	`D
("abouàtÿªad (fd=%d,Üí=%d)\n", 
h
->
bulk_out
, 
Àn
);

404 
n
 = 
	`bulk_ªad
(
h
->
bulk_out
, 
d©a
, 
Àn
);

405 i‡(
n
 !
Àn
) {

406 
	`D
("ERROR: fd = %d,Ç = %d,Érrno = %d (%s)\n",

407 
h
->
bulk_out
, 
n
, 
î∫o
, 
	`°ªº‹
(errno));

410 
	`D
("[ d⁄êfd=%d ]\n", 
h
->
bulk_out
);

412 
	}
}

414 
	$usb_ffs_kick
(
usb_h™dÀ
 *
h
)

416 
îr
;

418 
îr
 = 
	`io˘l
(
h
->
bulk_ö
, 
FUNCTIONFS_CLEAR_HALT
);

419 i‡(
îr
 < 0)

420 
	`D
("[ kick: sour˚ (fd=%dË˛ó∏hÆàÁûed (%dË]", 
h
->
bulk_ö
, 
î∫o
);

422 
îr
 = 
	`io˘l
(
h
->
bulk_out
, 
FUNCTIONFS_CLEAR_HALT
);

423 i‡(
îr
 < 0)

424 
	`D
("[ kick: sök (fd=%dË˛ó∏hÆàÁûed (%dË]", 
h
->
bulk_out
, 
î∫o
);

426 
	`adb_muãx_lock
(&
h
->
lock
);

427 
	`adb_˛o£
(
h
->
c⁄åﬁ
);

428 
	`adb_˛o£
(
h
->
bulk_out
);

429 
	`adb_˛o£
(
h
->
bulk_ö
);

430 
h
->
c⁄åﬁ
 = h->
bulk_out
 = h->
bulk_ö
 = -1;

433 
	`adb_c⁄d_sig«l
(&
h
->
nŸify
);

434 
	`adb_muãx_u∆ock
(&
h
->
lock
);

435 
	}
}

437 
	$usb_ffs_öô
()

439 
usb_h™dÀ
 *
h
;

440 
adb_thªad_t
 
tid
;

442 
	`D
("[ usb_init - using FunctionFS ]\n");

444 
h
 = 
	`ˇŒoc
(1, (
usb_h™dÀ
));

446 
h
->
wrôe
 = 
usb_ffs_wrôe
;

447 
h
->
ªad
 = 
usb_ffs_ªad
;

448 
h
->
kick
 = 
usb_ffs_kick
;

450 
h
->
c⁄åﬁ
 = -1;

451 
h
->
bulk_out
 = -1;

452 
h
->
bulk_out
 = -1;

454 
	`adb_c⁄d_öô
(&
h
->
nŸify
, 0);

455 
	`adb_muãx_öô
(&
h
->
lock
, 0);

457 
	`D
("[ usb_init - startingÅhread ]\n");

458 i‡(
	`adb_thªad_¸óã
(&
tid
, 
usb_ffs_›í_thªad
, 
h
)){

459 
	`Áèl_î∫o
("[ cannot create usbÅhread ]\n");

461 
	}
}

463 
	$usb_öô
()

465 i‡(
	`ac˚ss
(
USB_FFS_ADB_EP0
, 
F_OK
) == 0)

466 
	`usb_ffs_öô
();

468 
	`usb_adb_öô
();

469 
	}
}

471 
	$usb_˛ónup
()

473 
	}
}

475 
	$usb_wrôe
(
usb_h™dÀ
 *
h
, c⁄° *
d©a
, 
Àn
)

477  
h
->
	`wrôe
(h, 
d©a
, 
Àn
);

478 
	}
}

480 
	$usb_ªad
(
usb_h™dÀ
 *
h
, *
d©a
, 
Àn
)

482  
h
->
	`ªad
(h, 
d©a
, 
Àn
);

483 
	}
}

484 
	$usb_˛o£
(
usb_h™dÀ
 *
h
)

487 
	}
}

489 
	$usb_kick
(
usb_h™dÀ
 *
h
)

491 
h
->
	`kick
(h);

492 
	}
}

	@usb_osx.c

17 
	~<C‹eFound©i⁄/C‹eFound©i⁄.h
>

19 
	~<IOKô/IOKôLib.h
>

20 
	~<IOKô/IOCFPlugIn.h
>

21 
	~<IOKô/usb/IOUSBLib.h
>

22 
	~<IOKô/IOMesßge.h
>

23 
	~<mach/mach_p‹t.h
>

25 
	~"sysdïs.h
"

27 
	~<°dio.h
>

29 
	#TRACE_TAG
 
TRACE_USB


	)

30 
	~"adb.h
"

31 
	~"usb_víd‹s.h
"

33 
	#DBG
 
D


	)

35 
IONŸifiˇti⁄P‹tRef
 
	gnŸifiˇti⁄P‹t
 = 0;

36 
io_ôî©‹_t
* 
	gnŸifiˇti⁄Iãøt‹s
;

38 
	susb_h™dÀ


40 
UI¡8
 
	mbulkIn
;

41 
UI¡8
 
	mbulkOut
;

42 
IOUSBI¡îÁ˚I¡îÁ˚
 **
	möãrÁ˚
;

43 
io_obje˘_t
 
	musbNŸifiˇti⁄
;

44 
	mzîo_mask
;

47 
CFRunLo›Ref
 
	gcuºítRunLo›
 = 0;

48 
±hªad_muãx_t
 
	g°¨t_lock
;

49 
±hªad_c⁄d_t
 
	g°¨t_c⁄d
;

52 
AndroidI¡îÁ˚Added
(*
ªfC⁄
, 
io_ôî©‹_t
 
ôî©‹
);

53 
AndroidI¡îÁ˚NŸify
(*
ªfC⁄
, 
io_ôî©‹_t
 
ôî©‹
,

54 
«tuøl_t
 
mesßgeTy≥
,

55 *
mesßgeArgumít
);

56 
usb_h™dÀ
* 
CheckI¡îÁ˚
(
IOUSBI¡îÁ˚I¡îÁ˚
 **
iÁ˚
,

57 
UI¡16
 
víd‹
, UI¡16 
¥odu˘
);

60 
	$InôUSB
()

62 
CFMuèbÀDi˘i⁄¨yRef
 
m©chögDi˘
;

63 
CFRunLo›Sour˚Ref
 
runLo›Sour˚
;

64 
SI¡32
 
víd‹
, 
if_sub˛ass
, 
if_¥Ÿocﬁ
;

65 
i
;

69 
nŸifiˇti⁄P‹t
 = 
	`IONŸifiˇti⁄P‹tCª©e
(
kIOMa°îP‹tDeÁu…
);

70 
runLo›Sour˚
 = 
	`IONŸifiˇti⁄P‹tGëRunLo›Sour˚
(
nŸifiˇti⁄P‹t
);

71 
	`CFRunLo›AddSour˚
(
	`CFRunLo›GëCuºít
(), 
runLo›Sour˚
, 
kCFRunLo›DeÁu…Mode
);

73 
	`mem£t
(
nŸifiˇti⁄Iãøt‹s
, 0, (notificationIterators));

76 
i
 = 0; i < 
víd‹IdCou¡
; i++) {

81 
m©chögDi˘
 = 
	`IOSîvi˚M©chög
(
kIOUSBI¡îÁ˚CœssName
);

83 i‡(!
m©chögDi˘
) {

84 
	`DBG
("ERR: Couldn't create USB matching dictionary.\n");

89 
víd‹
 = 
víd‹Ids
[
i
];

90 
if_sub˛ass
 = 
ADB_SUBCLASS
;

91 
if_¥Ÿocﬁ
 = 
ADB_PROTOCOL
;

92 
	`CFDi˘i⁄¨ySëVÆue
(
m©chögDi˘
, 
	`CFSTR
(
kUSBVíd‹ID
),

93 
	`CFNumbîCª©e
(
kCFAŒoˇt‹DeÁu…
,

94 
kCFNumbîSI¡32Ty≥
, &
víd‹
));

95 
	`CFDi˘i⁄¨ySëVÆue
(
m©chögDi˘
, 
	`CFSTR
(
kUSBI¡îÁ˚SubCœss
),

96 
	`CFNumbîCª©e
(
kCFAŒoˇt‹DeÁu…
,

97 
kCFNumbîSI¡32Ty≥
, &
if_sub˛ass
));

98 
	`CFDi˘i⁄¨ySëVÆue
(
m©chögDi˘
, 
	`CFSTR
(
kUSBI¡îÁ˚PrŸocﬁ
),

99 
	`CFNumbîCª©e
(
kCFAŒoˇt‹DeÁu…
,

100 
kCFNumbîSI¡32Ty≥
, &
if_¥Ÿocﬁ
));

101 
	`IOSîvi˚AddM©chögNŸifiˇti⁄
(

102 
nŸifiˇti⁄P‹t
,

103 
kIOFú°M©chNŸifiˇti⁄
,

104 
m©chögDi˘
,

105 
AndroidI¡îÁ˚Added
,

106 
NULL
,

107 &
nŸifiˇti⁄Iãøt‹s
[
i
]);

111 
	`AndroidI¡îÁ˚Added
(
NULL
, 
nŸifiˇti⁄Iãøt‹s
[
i
]);

115 
	}
}

118 
	$AndroidI¡îÁ˚Added
(*
ªfC⁄
, 
io_ôî©‹_t
 
ôî©‹
)

120 
kîn_ªtu∫_t
 
kr
;

121 
io_£rvi˚_t
 
usbDevi˚
;

122 
io_£rvi˚_t
 
usbI¡îÁ˚
;

123 
IOCFPlugInI¡îÁ˚
 **
∂ugInI¡îÁ˚
 = 
NULL
;

124 
IOUSBI¡îÁ˚I¡îÁ˚220
 **
iÁ˚
 = 
NULL
;

125 
IOUSBDevi˚I¡îÁ˚197
 **
dev
 = 
NULL
;

126 
HRESULT
 
ªsu…
;

127 
SI¡32
 
sc‹e
;

128 
UI¡32
 
loˇti⁄Id
;

129 
UI¡16
 
víd‹
;

130 
UI¡16
 
¥odu˘
;

131 
UI¡8
 
£rülIndex
;

132 
£rül
[256];

133 
dev∑thBuf
[64];

134 *
dev∑th
 = 
NULL
;

136 (
usbI¡îÁ˚
 = 
	`IOIãøt‹Next
(
ôî©‹
))) {

138 
kr
 = 
	`IOCª©ePlugInI¡îÁ˚F‹Sîvi˚
(
usbI¡îÁ˚
,

139 
kIOUSBI¡îÁ˚U£rClõ¡Ty≥ID
,

140 
kIOCFPlugInI¡îÁ˚ID
,

141 &
∂ugInI¡îÁ˚
, &
sc‹e
);

142 
	`IOObje˘Rñó£
(
usbI¡îÁ˚
);

143 i‡((
kIORëu∫Suc˚ss
 !
kr
Ë|| (!
∂ugInI¡îÁ˚
)) {

144 
	`DBG
("ERR: U«bÀÅÿ¸óãá¿öãrÁ˚Ölug-ö (%08x)\n", 
kr
);

149 
ªsu…
 = (*
∂ugInI¡îÁ˚
)->
	`QuîyI¡îÁ˚
(plugInInterface,

150 
	`CFUUIDGëUUIDByãs
(
kIOUSBI¡îÁ˚I¡îÁ˚ID
), (
LPVOID
)

151 &
iÁ˚
);

153 (*
∂ugInI¡îÁ˚
)->
	`Rñó£
(plugInInterface);

154 i‡(
ªsu…
 || !
iÁ˚
) {

155 
	`DBG
("ERR: Couldn'àquîyÅhêöãrÁ˚ (%08x)\n", (Ë
ªsu…
);

163 
kr
 = (*
iÁ˚
)->
	`GëDevi˚
(iÁ˚, &
usbDevi˚
);

164 i‡(
kIORëu∫Suc˚ss
 !
kr
 || !
usbDevi˚
) {

165 
	`DBG
("ERR: Couldn'àgøb devi˚ from i¡îÁ˚ (%08x)\n", 
kr
);

169 
∂ugInI¡îÁ˚
 = 
NULL
;

170 
sc‹e
 = 0;

172 
kr
 = 
	`IOCª©ePlugInI¡îÁ˚F‹Sîvi˚
(
usbDevi˚
,

173 
kIOUSBDevi˚U£rClõ¡Ty≥ID
,

174 
kIOCFPlugInI¡îÁ˚ID
,

175 &
∂ugInI¡îÁ˚
, &
sc‹e
);

177 ()
	`IOObje˘Rñó£
(
usbDevi˚
);

178 i‡((
kIORëu∫Suc˚ss
 !
kr
Ë|| (!
∂ugInI¡îÁ˚
)) {

179 
	`DBG
("ERR: U«bÀÅÿ¸óãá devi˚Ölug-ö (%08x)\n", 
kr
);

183 
ªsu…
 = (*
∂ugInI¡îÁ˚
)->
	`QuîyI¡îÁ˚
(plugInInterface,

184 
	`CFUUIDGëUUIDByãs
(
kIOUSBDevi˚I¡îÁ˚ID
), (
LPVOID
Ë&
dev
);

186 (*
∂ugInI¡îÁ˚
)->
	`Rñó£
(plugInInterface);

187 i‡(
ªsu…
 || !
dev
) {

188 
	`DBG
("ERR: Couldn't createá device interface (%08x)\n",

189 (Ë
ªsu…
);

196 
kr
 = (*
dev
)->
	`GëDevi˚Víd‹
(dev, &
víd‹
);

197 
kr
 = (*
dev
)->
	`GëDevi˚Produ˘
(dev, &
¥odu˘
);

198 
kr
 = (*
dev
)->
	`GëLoˇti⁄ID
(dev, &
loˇti⁄Id
);

199 i‡(
kr
 == 0) {

200 
	`¢¥ötf
(
dev∑thBuf
, (dev∑thBuf), "usb:%lX", 
loˇti⁄Id
);

201 
dev∑th
 = 
dev∑thBuf
;

203 
kr
 = (*
dev
)->
	`USBGëSîülNumbîSåögIndex
(dev, &
£rülIndex
);

205 i‡(
£rülIndex
 > 0) {

206 
IOUSBDevReque°
 
ªq
;

207 
UI¡16
 
buf„r
[256];

208 
UI¡16
 
œnguages
[128];

210 
	`mem£t
(
œnguages
, 0, (languages));

212 
ªq
.
bmReque°Ty≥
 =

213 
	`USBmakebmReque°Ty≥
(
kUSBIn
, 
kUSBSènd¨d
, 
kUSBDevi˚
);

214 
ªq
.
bReque°
 = 
kUSBRqGëDes¸ùt‹
;

215 
ªq
.
wVÆue
 = (
kUSBSåögDesc
 << 8) | 0;

216 
ªq
.
wIndex
 = 0;

217 
ªq
.
pD©a
 = 
œnguages
;

218 
ªq
.
wLígth
 = (
œnguages
);

219 
kr
 = (*
dev
)->
	`Devi˚Reque°
(dev, &
ªq
);

221 i‡(
kr
 =
kIORëu∫Suc˚ss
 && 
ªq
.
wLíD⁄e
 > 0) {

223 
œngCou¡
 = (
ªq
.
wLíD⁄e
 - 2Ë/ 2, 
œng
;

225 
œng
 = 1;Ü™g <
œngCou¡
;Üang++) {

227 
	`mem£t
(
buf„r
, 0, (buffer));

228 
	`mem£t
(&
ªq
, 0, (req));

230 
ªq
.
bmReque°Ty≥
 =

231 
	`USBmakebmReque°Ty≥
(
kUSBIn
, 
kUSBSènd¨d
, 
kUSBDevi˚
);

232 
ªq
.
bReque°
 = 
kUSBRqGëDes¸ùt‹
;

233 
ªq
.
wVÆue
 = (
kUSBSåögDesc
 << 8Ë| 
£rülIndex
;

234 
ªq
.
wIndex
 = 
œnguages
[
œng
];

235 
ªq
.
pD©a
 = 
buf„r
;

236 
ªq
.
wLígth
 = (
buf„r
);

237 
kr
 = (*
dev
)->
	`Devi˚Reque°
(dev, &
ªq
);

239 i‡(
kr
 =
kIORëu∫Suc˚ss
 && 
ªq
.
wLíD⁄e
 > 0) {

240 
i
, 
cou¡
;

244 
cou¡
 = (
ªq
.
wLíD⁄e
 - 1) / 2;

245 
i
 = 0; i < 
cou¡
; i++)

246 
£rül
[
i
] = 
buf„r
[i + 1];

247 
£rül
[
i
] = 0;

253 (*
dev
)->
	`Rñó£
(dev);

255 
	`DBG
("INFO: Found vid=%04xÖid=%04x sîül=%s\n", 
víd‹
, 
¥odu˘
,

256 
£rül
);

258 
usb_h™dÀ
* 
h™dÀ
 = 
	`CheckI¡îÁ˚
((
IOUSBI¡îÁ˚I¡îÁ˚
**)
iÁ˚
,

259 
víd‹
, 
¥odu˘
);

260 i‡(
h™dÀ
 =
NULL
) {

261 
	`DBG
("ERR: CouldÇŸ föd devi˚ i¡îÁ˚: %08x\n", 
kr
);

262 (*
iÁ˚
)->
	`Rñó£
(iface);

266 
	`DBG
("AndroidDeviceAdded callingÑegister_usb_transport\n");

267 
	`ªgi°î_usb_å™•‹t
(
h™dÀ
, (
£rül
[0] ? sîü»: 
NULL
), 
dev∑th
, 1);

272 
kr
 = 
	`IOSîvi˚AddI¡îe°NŸifiˇti⁄
(
nŸifiˇti⁄P‹t
,

273 
usbI¡îÁ˚
,

274 
kIOGíîÆI¡îe°
,

275 
AndroidI¡îÁ˚NŸify
,

276 
h™dÀ
,

277 &
h™dÀ
->
usbNŸifiˇti⁄
);

279 i‡(
kIORëu∫Suc˚ss
 !
kr
) {

280 
	`DBG
("ERR: U«bÀÅÿ¸óã i¡îe°ÇŸifiˇti⁄ (%08x)\n", 
kr
);

283 
	}
}

286 
	$AndroidI¡îÁ˚NŸify
(*
ªfC⁄
, 
io_£rvi˚_t
 
£rvi˚
, 
«tuøl_t
 
mesßgeTy≥
, *
mesßgeArgumít
)

288 
usb_h™dÀ
 *
h™dÀ
 = (usb_h™dÀ *)
ªfC⁄
;

290 i‡(
mesßgeTy≥
 =
kIOMesßgeSîvi˚IsTîmö©ed
) {

291 i‡(!
h™dÀ
) {

292 
	`DBG
("ERR: NULL handle\n");

295 
	`DBG
("AndroidInterfaceNotify\n");

296 
	`IOObje˘Rñó£
(
h™dÀ
->
usbNŸifiˇti⁄
);

297 
	`usb_kick
(
h™dÀ
);

299 
	}
}

303 
usb_h™dÀ
*

304 
	$CheckI¡îÁ˚
(
IOUSBI¡îÁ˚I¡îÁ˚
 **
öãrÁ˚
, 
UI¡16
 
víd‹
, UI¡16 
¥odu˘
)

306 
usb_h™dÀ
* 
h™dÀ
 = 
NULL
;

307 
IORëu∫
 
kr
;

308 
UI¡8
 
öãrÁ˚NumEndpoöts
, 
öãrÁ˚Cœss
, 
öãrÁ˚SubCœss
, 
öãrÁ˚PrŸocﬁ
;

309 
UI¡8
 
ídpoöt
;

314 
kr
 = (*
öãrÁ˚
)->
	`USBI¡îÁ˚O≥n
(interface);

315 i‡(
kr
 !
kIORëu∫Suc˚ss
) {

316 
	`DBG
("ERR: CouldÇŸ o≥¿öãrÁ˚: (%08x)\n", 
kr
);

317  
NULL
;

321 
kr
 = (*
öãrÁ˚
)->
	`GëNumEndpoöts
(öãrÁ˚, &
öãrÁ˚NumEndpoöts
);

322 i‡(
kr
 !
kIORëu∫Suc˚ss
) {

323 
	`DBG
("ERR: U«bÀÅÿgëÇumbî o‡ídpoöts: (%08x)\n", 
kr
);

324 
îr_gë_num_ï
;

328 i‡((*
öãrÁ˚
)->
	`GëI¡îÁ˚Cœss
(öãrÁ˚, &
öãrÁ˚Cœss
Ë!
kIORëu∫Suc˚ss
 ||

329 (*
öãrÁ˚
)->
	`GëI¡îÁ˚SubCœss
(öãrÁ˚, &
öãrÁ˚SubCœss
Ë!
kIORëu∫Suc˚ss
 ||

330 (*
öãrÁ˚
)->
	`GëI¡îÁ˚PrŸocﬁ
(öãrÁ˚, &
öãrÁ˚PrŸocﬁ
Ë!
kIORëu∫Suc˚ss
) {

331 
	`DBG
("ERR: UnableÅo get interface class, subclassándÖrotocol\n");

332 
îr_gë_öãrÁ˚_˛ass
;

337 i‡(!
	`is_adb_öãrÁ˚
(
víd‹
, 
¥odu˘
, 
öãrÁ˚Cœss
,

338 
öãrÁ˚SubCœss
, 
öãrÁ˚PrŸocﬁ
))

339 
îr_bad_adb_öãrÁ˚
;

341 
h™dÀ
 = 
	`ˇŒoc
(1, (
usb_h™dÀ
));

345 
ídpoöt
 = 0;Éndpoöà<
öãrÁ˚NumEndpoöts
;Éndpoint++) {

346 
UI¡8
 
å™s„rTy≥
;

347 
UI¡16
 
maxPackëSize
;

348 
UI¡8
 
öãrvÆ
;

349 
UI¡8
 
numbî
;

350 
UI¡8
 
dúe˘i⁄
;

352 
kr
 = (*
öãrÁ˚
)->
	`GëPùePr›îtõs
(öãrÁ˚, 
ídpoöt
, &
dúe˘i⁄
,

353 &
numbî
, &
å™s„rTy≥
, &
maxPackëSize
, &
öãrvÆ
);

355 i‡(
kIORëu∫Suc˚ss
 =
kr
) {

356 i‡(
kUSBBulk
 !
å™s„rTy≥
)

359 i‡(
kUSBIn
 =
dúe˘i⁄
)

360 
h™dÀ
->
bulkIn
 = 
ídpoöt
;

362 i‡(
kUSBOut
 =
dúe˘i⁄
)

363 
h™dÀ
->
bulkOut
 = 
ídpoöt
;

365 
h™dÀ
->
zîo_mask
 = 
maxPackëSize
 - 1;

367 
	`DBG
("ERR: FindDeviceInterface - couldÇot getÖipeÖroperties\n");

368 
îr_gë_pùe_¥›s
;

372 
h™dÀ
->
öãrÁ˚
 = interface;

373  
h™dÀ
;

375 
îr_gë_pùe_¥›s
:

376 
	`‰ì
(
h™dÀ
);

377 
îr_bad_adb_öãrÁ˚
:

378 
îr_gë_öãrÁ˚_˛ass
:

379 
îr_gë_num_ï
:

380 (*
öãrÁ˚
)->
	`USBI¡îÁ˚Clo£
(interface);

381  
NULL
;

382 
	}
}

385 * 
	$RunLo›Thªad
(* 
unu£d
)

387 
i
;

389 
	`InôUSB
();

391 
cuºítRunLo›
 = 
	`CFRunLo›GëCuºít
();

394 
	`adb_muãx_lock
(&
°¨t_lock
);

395 
	`adb_c⁄d_sig«l
(&
°¨t_c⁄d
);

396 
	`adb_muãx_u∆ock
(&
°¨t_lock
);

398 
	`CFRunLo›Run
();

399 
cuºítRunLo›
 = 0;

401 
i
 = 0; i < 
víd‹IdCou¡
; i++) {

402 
	`IOObje˘Rñó£
(
nŸifiˇti⁄Iãøt‹s
[
i
]);

404 
	`IONŸifiˇti⁄P‹tDe°roy
(
nŸifiˇti⁄P‹t
);

406 
	`DBG
("RunLoopThread done\n");

407  
NULL
;

408 
	}
}

411 
	göôülized
 = 0;

412 
	$usb_öô
()

414 i‡(!
öôülized
)

416 
adb_thªad_t
 
tid
;

418 
nŸifiˇti⁄Iãøt‹s
 = (
io_ôî©‹_t
*)
	`mÆloc
(

419 
víd‹IdCou¡
 * (
io_ôî©‹_t
));

421 
	`adb_muãx_öô
(&
°¨t_lock
, 
NULL
);

422 
	`adb_c⁄d_öô
(&
°¨t_c⁄d
, 
NULL
);

424 if(
	`adb_thªad_¸óã
(&
tid
, 
RunLo›Thªad
, 
NULL
))

425 
	`Áèl_î∫o
("cannot create inputÅhread");

428 
	`adb_muãx_lock
(&
°¨t_lock
);

429 
	`adb_c⁄d_waô
(&
°¨t_c⁄d
, &
°¨t_lock
);

430 
	`adb_muãx_u∆ock
(&
°¨t_lock
);

432 
	`adb_muãx_de°roy
(&
°¨t_lock
);

433 
	`adb_c⁄d_de°roy
(&
°¨t_c⁄d
);

435 
öôülized
 = 1;

437 
	}
}

439 
	$usb_˛ónup
()

441 
	`DBG
("usb_cleanup\n");

442 
	`˛o£_usb_devi˚s
();

443 i‡(
cuºítRunLo›
)

444 
	`CFRunLo›St›
(
cuºítRunLo›
);

446 i‡(
nŸifiˇti⁄Iãøt‹s
 !
NULL
) {

447 
	`‰ì
(
nŸifiˇti⁄Iãøt‹s
);

448 
nŸifiˇti⁄Iãøt‹s
 = 
NULL
;

450 
	}
}

452 
	$usb_wrôe
(
usb_h™dÀ
 *
h™dÀ
, c⁄° *
buf
, 
Àn
)

454 
IORëu∫
 
ªsu…
;

456 i‡(!
Àn
)

459 i‡(!
h™dÀ
)

462 i‡(
NULL
 =
h™dÀ
->
öãrÁ˚
) {

463 
	`DBG
("ERR: usb_write interface wasÇull\n");

467 i‡(0 =
h™dÀ
->
bulkOut
) {

468 
	`DBG
("ERR: bulkOutÉndpointÇotássigned\n");

472 
ªsu…
 =

473 (*
h™dÀ
->
öãrÁ˚
)->
	`WrôePùe
(

474 
h™dÀ
->
öãrÁ˚
, h™dÀ->
bulkOut
, (*)
buf
, 
Àn
);

476 i‡((
ªsu…
 =0Ë&& (
h™dÀ
->
zîo_mask
)) {

478 if(!(
Àn
 & 
h™dÀ
->
zîo_mask
)) {

479 
ªsu…
 =

480 (*
h™dÀ
->
öãrÁ˚
)->
	`WrôePùe
(

481 
h™dÀ
->
öãrÁ˚
, h™dÀ->
bulkOut
, (*)
buf
, 0);

485 i‡(0 =
ªsu…
)

488 
	`DBG
("ERR: usb_wrôêÁûed wôh sètu†%d\n", 
ªsu…
);

490 
	}
}

492 
	$usb_ªad
(
usb_h™dÀ
 *
h™dÀ
, *
buf
, 
Àn
)

494 
IORëu∫
 
ªsu…
;

495 
UI¡32
 
numByãs
 = 
Àn
;

497 i‡(!
Àn
) {

501 i‡(!
h™dÀ
) {

505 i‡(
NULL
 =
h™dÀ
->
öãrÁ˚
) {

506 
	`DBG
("ERR: usb_read interface wasÇull\n");

510 i‡(0 =
h™dÀ
->
bulkIn
) {

511 
	`DBG
("ERR: bulkInÉndpointÇotássigned\n");

515 
ªsu…
 =

516 (*
h™dÀ
->
öãrÁ˚
)->
	`RódPùe
(handle->interface,

517 
h™dÀ
->
bulkIn
, 
buf
, &
numByãs
);

519 i‡(0 =
ªsu…
)

522 
	`DBG
("ERR: usb_ªad faûed wôh sètu†%d\n", 
ªsu…
);

526 
	}
}

528 
	$usb_˛o£
(
usb_h™dÀ
 *
h™dÀ
)

531 
	}
}

533 
	$usb_kick
(
usb_h™dÀ
 *
h™dÀ
)

536 i‡(!
h™dÀ
)

539 i‡(
h™dÀ
->
öãrÁ˚
)

541 (*
h™dÀ
->
öãrÁ˚
)->
	`USBI¡îÁ˚Clo£
(handle->interface);

542 (*
h™dÀ
->
öãrÁ˚
)->
	`Rñó£
(handle->interface);

543 
h™dÀ
->
öãrÁ˚
 = 0;

545 
	}
}

	@usb_vendors.c

17 
	~"usb_víd‹s.h
"

19 
	~<°dio.h
>

21 #ifde‡
_WIN32


22 
	#WIN32_LEAN_AND_MEAN


	)

23 
	~"wödows.h
"

24 
	~"shlobj.h
"

26 
	~<uni°d.h
>

27 
	~<sys/°©.h
>

30 
	~"sysdïs.h
"

31 
	~"adb.h
"

33 
	#ANDROID_PATH
 ".™droid"

	)

34 
	#ANDROID_ADB_INI
 "adb_usb.öi"

	)

36 
	#TRACE_TAG
 
TRACE_USB


	)

39 
	#VENDOR_ID_GOOGLE
 0x18d1

	)

41 
	#VENDOR_ID_INTEL
 0x8087

	)

43 
	#VENDOR_ID_HTC
 0x0bb4

	)

45 
	#VENDOR_ID_SAMSUNG
 0x04e8

	)

47 
	#VENDOR_ID_MOTOROLA
 0x22b8

	)

49 
	#VENDOR_ID_LGE
 0x1004

	)

51 
	#VENDOR_ID_HUAWEI
 0x12D1

	)

53 
	#VENDOR_ID_ACER
 0x0502

	)

55 
	#VENDOR_ID_SONY_ERICSSON
 0x0FCE

	)

57 
	#VENDOR_ID_FOXCONN
 0x0489

	)

59 
	#VENDOR_ID_DELL
 0x413c

	)

61 
	#VENDOR_ID_NVIDIA
 0x0955

	)

63 
	#VENDOR_ID_GARMIN_ASUS
 0x091E

	)

65 
	#VENDOR_ID_SHARP
 0x04dd

	)

67 
	#VENDOR_ID_ZTE
 0x19D2

	)

69 
	#VENDOR_ID_KYOCERA
 0x0482

	)

71 
	#VENDOR_ID_PANTECH
 0x10A9

	)

73 
	#VENDOR_ID_QUALCOMM
 0x05c6

	)

75 
	#VENDOR_ID_OTGV
 0x2257

	)

77 
	#VENDOR_ID_NEC
 0x0409

	)

79 
	#VENDOR_ID_PMC
 0x04DA

	)

81 
	#VENDOR_ID_TOSHIBA
 0x0930

	)

83 
	#VENDOR_ID_SK_TELESYS
 0x1F53

	)

85 
	#VENDOR_ID_KT_TECH
 0x2116

	)

87 
	#VENDOR_ID_ASUS
 0x0b05

	)

89 
	#VENDOR_ID_PHILIPS
 0x0471

	)

91 
	#VENDOR_ID_TI
 0x0451

	)

93 
	#VENDOR_ID_FUNAI
 0x0F1C

	)

95 
	#VENDOR_ID_GIGABYTE
 0x0414

	)

97 
	#VENDOR_ID_IRIVER
 0x2420

	)

99 
	#VENDOR_ID_COMPAL
 0x1219

	)

101 
	#VENDOR_ID_T_AND_A
 0x1BBB

	)

103 
	#VENDOR_ID_LENOVOMOBILE
 0x2006

	)

105 
	#VENDOR_ID_LENOVO
 0x17EF

	)

107 
	#VENDOR_ID_VIZIO
 0xE040

	)

109 
	#VENDOR_ID_K_TOUCH
 0x24E3

	)

111 
	#VENDOR_ID_PEGATRON
 0x1D4D

	)

113 
	#VENDOR_ID_ARCHOS
 0x0E79

	)

115 
	#VENDOR_ID_POSITIVO
 0x1662

	)

117 
	#VENDOR_ID_FUJITSU
 0x04C5

	)

119 
	#VENDOR_ID_LUMIGON
 0x25E3

	)

121 
	#VENDOR_ID_QUANTA
 0x0408

	)

123 
	#VENDOR_ID_INQ_MOBILE
 0x2314

	)

125 
	#VENDOR_ID_SONY
 0x054C

	)

127 
	#VENDOR_ID_LAB126
 0x1949

	)

129 
	#VENDOR_ID_YULONG_COOLPAD
 0x1EBF

	)

131 
	#VENDOR_ID_KOBO
 0x2237

	)

133 
	#VENDOR_ID_TELEEPOCH
 0x2340

	)

137 
	gbuûtInVíd‹Ids
[] = {

138 
VENDOR_ID_GOOGLE
,

139 
VENDOR_ID_INTEL
,

140 
VENDOR_ID_HTC
,

141 
VENDOR_ID_SAMSUNG
,

142 
VENDOR_ID_MOTOROLA
,

143 
VENDOR_ID_LGE
,

144 
VENDOR_ID_HUAWEI
,

145 
VENDOR_ID_ACER
,

146 
VENDOR_ID_SONY_ERICSSON
,

147 
VENDOR_ID_FOXCONN
,

148 
VENDOR_ID_DELL
,

149 
VENDOR_ID_NVIDIA
,

150 
VENDOR_ID_GARMIN_ASUS
,

151 
VENDOR_ID_SHARP
,

152 
VENDOR_ID_ZTE
,

153 
VENDOR_ID_KYOCERA
,

154 
VENDOR_ID_PANTECH
,

155 
VENDOR_ID_QUALCOMM
,

156 
VENDOR_ID_OTGV
,

157 
VENDOR_ID_NEC
,

158 
VENDOR_ID_PMC
,

159 
VENDOR_ID_TOSHIBA
,

160 
VENDOR_ID_SK_TELESYS
,

161 
VENDOR_ID_KT_TECH
,

162 
VENDOR_ID_ASUS
,

163 
VENDOR_ID_PHILIPS
,

164 
VENDOR_ID_TI
,

165 
VENDOR_ID_FUNAI
,

166 
VENDOR_ID_GIGABYTE
,

167 
VENDOR_ID_IRIVER
,

168 
VENDOR_ID_COMPAL
,

169 
VENDOR_ID_T_AND_A
,

170 
VENDOR_ID_LENOVOMOBILE
,

171 
VENDOR_ID_LENOVO
,

172 
VENDOR_ID_VIZIO
,

173 
VENDOR_ID_K_TOUCH
,

174 
VENDOR_ID_PEGATRON
,

175 
VENDOR_ID_ARCHOS
,

176 
VENDOR_ID_POSITIVO
,

177 
VENDOR_ID_FUJITSU
,

178 
VENDOR_ID_LUMIGON
,

179 
VENDOR_ID_QUANTA
,

180 
VENDOR_ID_INQ_MOBILE
,

181 
VENDOR_ID_SONY
,

182 
VENDOR_ID_LAB126
,

183 
VENDOR_ID_YULONG_COOLPAD
,

184 
VENDOR_ID_KOBO
,

185 
VENDOR_ID_TELEEPOCH
,

188 
	#BUILT_IN_VENDOR_COUNT
 ((
buûtInVíd‹Ids
)/(buûtInVíd‹Ids[0]))

	)

191 
	#VENDOR_COUNT_MAX
 128

	)

193 
	gvíd‹Ids
[
VENDOR_COUNT_MAX
];

194 
	gvíd‹IdCou¡
 = 0;

196 
gë_adb_usb_öi
(* 
buff
, 
size_t
 
Àn
);

198 
	$usb_víd‹s_öô
()

200 i‡(
VENDOR_COUNT_MAX
 < 
BUILT_IN_VENDOR_COUNT
) {

201 
	`Ârötf
(
°dîr
, "VENDOR_COUNT_MAXÇot bigÉnough for built-in vendorÜist.\n");

202 
	`exô
(2);

206 
	`mem˝y
(
víd‹Ids
, 
buûtInVíd‹Ids
, (builtInVendorIds));

209 
víd‹IdCou¡
 = 
BUILT_IN_VENDOR_COUNT
;

211 i‡(
VENDOR_COUNT_MAX
 =
BUILT_IN_VENDOR_COUNT
)

214 
ãmp
[
PATH_MAX
];

215 i‡(
	`gë_adb_usb_öi
(
ãmp
, (temp)) == 0) {

216 
FILE
 * 
f
 = 
	`f›í
(
ãmp
, "rt");

218 i‡(
f
 !
NULL
) {

221 
	`fgës
(
ãmp
, —emp), 
f
Ë!
NULL
) {

222 i‡(
ãmp
[0] == '#')

225 
vÆue
 = 
	`°πﬁ
(
ãmp
, 
NULL
, 0);

226 i‡(
î∫o
 =
EINVAL
 ||Éºnÿ=
ERANGE
 || 
vÆue
 > 
INT_MAX
 || value < 0) {

227 
	`Ârötf
(
°dîr
, "InvÆid c⁄ã¡ i¿%s. Quôtög.\n", 
ANDROID_ADB_INI
);

228 
	`exô
(2);

231 
víd‹Ids
[
víd‹IdCou¡
++] = ()
vÆue
;

234 i‡(
víd‹IdCou¡
 =
VENDOR_COUNT_MAX
) {

240 
	}
}

245 
	$buûd_∑th
(* 
buff
, 
size_t
 
Àn
, c⁄° * 
f‹m©
, c⁄° * 
home
)

247 i‡(
	`¢¥ötf
(
buff
, 
Àn
, 
f‹m©
, 
home
, 
ANDROID_PATH
, 
ANDROID_ADB_INI
) >= (signed)len) {

252 
	}
}

255 
	$gë_adb_usb_öi
(* 
buff
, 
size_t
 
Àn
)

257 #ifde‡
_WIN32


258 c⁄° * 
home
 = 
	`gëív
("ANDROID_SDK_HOME");

259 i‡(
home
 !
NULL
) {

260  
	`buûd_∑th
(
buff
, 
Àn
, "%s\\%s\\%s", 
home
);

262 
∑th
[
MAX_PATH
];

263 
	`SHGëFﬁdîP©h
–
NULL
, 
CSIDL_PROFILE
, NULL, 0, 
∑th
);

264  
	`buûd_∑th
(
buff
, 
Àn
, "%s\\%s\\%s", 
∑th
);

267 c⁄° * 
home
 = 
	`gëív
("HOME");

268 i‡(
home
 =
NULL
)

269 
home
 = "/tmp";

271  
	`buûd_∑th
(
buff
, 
Àn
, "%s/%s/%s", 
home
);

273 
	}
}

	@usb_vendors.h

17 #i‚de‡
__USB_VENDORS_H


18 
	#__USB_VENDORS_H


	)

20 
víd‹Ids
[];

21 
víd‹IdCou¡
;

23 
usb_víd‹s_öô
();

	@usb_windows.c

17 
	~<wödows.h
>

18 
	~<wöîr‹.h
>

19 
	~<î∫o.h
>

20 
	~<usb100.h
>

21 
	~<adb_≠i.h
>

22 
	~<°dio.h
>

24 
	~"sysdïs.h
"

26 
	#TRACE_TAG
 
TRACE_USB


	)

27 
	~"adb.h
"

33 
	susb_h™dÀ
 {

35 
usb_h™dÀ
 *
	m¥ev
;

38 
usb_h™dÀ
 *
	m√xt
;

41 
ADBAPIHANDLE
 
	madb_öãrÁ˚
;

44 
ADBAPIHANDLE
 
	madb_ªad_pùe
;

47 
ADBAPIHANDLE
 
	madb_wrôe_pùe
;

50 * 
	möãrÁ˚_«me
;

53 
	mzîo_mask
;

57 c⁄° 
GUID
 
	gusb_˛ass_id
 = 
ANDROID_USB_CLASS_ID
;

60 
usb_h™dÀ
 
	gh™dÀ_li°
 = {

61 .
¥ev
 = &
h™dÀ_li°
,

62 .
	g√xt
 = &
h™dÀ_li°
,

66 
ADB_MUTEX_DEFINE
–
usb_lock
 );

69 
known_devi˚
(c⁄° * 
dev_«me
);

73 
known_devi˚_locked
(c⁄° * 
dev_«me
);

76 
ªgi°î_√w_devi˚
(
usb_h™dÀ
* 
h™dÀ
);

79 
ªcognized_devi˚
(
usb_h™dÀ
* 
h™dÀ
);

83 
föd_devi˚s
();

87 * 
devi˚_pﬁl_thªad
(* 
unu£d
);

90 
usb_öô
();

93 
usb_˛ónup
();

96 
usb_h™dÀ
* 
do_usb_›í
(c⁄° 
wch¨_t
* 
öãrÁ˚_«me
);

99 
usb_wrôe
(
usb_h™dÀ
* 
h™dÀ
, c⁄° * 
d©a
, 
Àn
);

102 
usb_ªad
(
usb_h™dÀ
 *
h™dÀ
, * 
d©a
, 
Àn
);

105 
usb_˛ónup_h™dÀ
(
usb_h™dÀ
* 
h™dÀ
);

108 
usb_kick
(
usb_h™dÀ
* 
h™dÀ
);

111 
usb_˛o£
(
usb_h™dÀ
* 
h™dÀ
);

114 c⁄° *
usb_«me
(
usb_h™dÀ
* 
h™dÀ
);

116 
	$known_devi˚_locked
(c⁄° * 
dev_«me
) {

117 
usb_h™dÀ
* 
usb
;

119 i‡(
NULL
 !
dev_«me
) {

121 
usb
 = 
h™dÀ_li°
.
√xt
; usb != &handle_list; usb = usb->next) {

123 if((
NULL
 !
usb
->
öãrÁ˚_«me
) &&

124 (0 =
	`°ricmp
(
usb
->
öãrÁ˚_«me
, 
dev_«me
))) {

131 
	}
}

133 
	$known_devi˚
(c⁄° * 
dev_«me
) {

134 
ªt
 = 0;

136 i‡(
NULL
 !
dev_«me
) {

137 
	`adb_muãx_lock
(&
usb_lock
);

138 
ªt
 = 
	`known_devi˚_locked
(
dev_«me
);

139 
	`adb_muãx_u∆ock
(&
usb_lock
);

142  
ªt
;

143 
	}
}

145 
	$ªgi°î_√w_devi˚
(
usb_h™dÀ
* 
h™dÀ
) {

146 i‡(
NULL
 =
h™dÀ
)

149 
	`adb_muãx_lock
(&
usb_lock
);

152 i‡(
	`known_devi˚_locked
(
h™dÀ
->
öãrÁ˚_«me
)) {

153 
	`adb_muãx_u∆ock
(&
usb_lock
);

158 
h™dÀ
->
√xt
 = &
h™dÀ_li°
;

159 
h™dÀ
->
¥ev
 = 
h™dÀ_li°
.prev;

160 
h™dÀ
->
¥ev
->
√xt
 = handle;

161 
h™dÀ
->
√xt
->
¥ev
 = handle;

163 
	`adb_muãx_u∆ock
(&
usb_lock
);

166 
	}
}

168 * 
	$devi˚_pﬁl_thªad
(* 
unu£d
) {

169 
	`D
("Created deviceÅhread\n");

172 
	`föd_devi˚s
();

173 
	`adb_¶ìp_ms
(1000);

176  
NULL
;

177 
	}
}

179 
	$usb_öô
() {

180 
adb_thªad_t
 
tid
;

182 if(
	`adb_thªad_¸óã
(&
tid
, 
devi˚_pﬁl_thªad
, 
NULL
)) {

183 
	`Áèl_î∫o
("cannot create inputÅhread");

185 
	}
}

187 
	$usb_˛ónup
() {

188 
	}
}

190 
usb_h™dÀ
* 
	$do_usb_›í
(c⁄° 
wch¨_t
* 
öãrÁ˚_«me
) {

192 
usb_h™dÀ
* 
ªt
 = (usb_h™dÀ*)
	`mÆloc
((usb_handle));

193 i‡(
NULL
 =
ªt
)

194  
NULL
;

197 
ªt
->
√xt
 =Ñet;

198 
ªt
->
¥ev
 =Ñet;

201 
ªt
->
adb_öãrÁ˚
 = 
	`AdbCª©eI¡îÁ˚ByName
(
öãrÁ˚_«me
);

203 i‡(
NULL
 =
ªt
->
adb_öãrÁ˚
) {

204 
	`‰ì
(
ªt
);

205 
î∫o
 = 
	`GëLa°Eº‹
();

206  
NULL
;

210 
ªt
->
adb_ªad_pùe
 =

211 
	`AdbO≥nDeÁu…BulkRódEndpoöt
(
ªt
->
adb_öãrÁ˚
,

212 
AdbO≥nAc˚ssTy≥RódWrôe
,

213 
AdbO≥nSh¨ögModeRódWrôe
);

214 i‡(
NULL
 !
ªt
->
adb_ªad_pùe
) {

216 
ªt
->
adb_wrôe_pùe
 =

217 
	`AdbO≥nDeÁu…BulkWrôeEndpoöt
(
ªt
->
adb_öãrÁ˚
,

218 
AdbO≥nAc˚ssTy≥RódWrôe
,

219 
AdbO≥nSh¨ögModeRódWrôe
);

220 i‡(
NULL
 !
ªt
->
adb_wrôe_pùe
) {

222 
«me_Àn
 = 0;

225 
	`AdbGëI¡îÁ˚Name
(
ªt
->
adb_öãrÁ˚
,

226 
NULL
,

227 &
«me_Àn
,

228 
åue
);

229 i‡(0 !
«me_Àn
) {

230 
ªt
->
öãrÁ˚_«me
 = (*)
	`mÆloc
(
«me_Àn
);

232 i‡(
NULL
 !
ªt
->
öãrÁ˚_«me
) {

234 i‡(
	`AdbGëI¡îÁ˚Name
(
ªt
->
adb_öãrÁ˚
,

235 
ªt
->
öãrÁ˚_«me
,

236 &
«me_Àn
,

237 
åue
)) {

239  
ªt
;

242 
	`SëLa°Eº‹
(
ERROR_OUTOFMEMORY
);

249 
ßved_î∫o
 = 
	`GëLa°Eº‹
();

250 
	`usb_˛ónup_h™dÀ
(
ªt
);

251 
	`‰ì
(
ªt
);

252 
	`SëLa°Eº‹
(
ßved_î∫o
);

254  
NULL
;

255 
	}
}

257 
	$usb_wrôe
(
usb_h™dÀ
* 
h™dÀ
, c⁄° * 
d©a
, 
Àn
) {

258 
time_out
 = 5000;

259 
wrôãn
 = 0;

260 
ªt
;

262 
	`D
("usb_wrôê%d\n", 
Àn
);

263 i‡(
NULL
 !
h™dÀ
) {

265 
ªt
 = 
	`AdbWrôeEndpoötSync
(
h™dÀ
->
adb_wrôe_pùe
,

266 (*)
d©a
,

267 ()
Àn
,

268 &
wrôãn
,

269 
time_out
);

270 
ßved_î∫o
 = 
	`GëLa°Eº‹
();

272 i‡(
ªt
) {

274 
	`D
("usb_wrôêgŸ: %ld,Éx≥˘ed: %d\n", 
wrôãn
, 
Àn
);

275 i‡(
wrôãn
 =()
Àn
) {

276 if(
h™dÀ
->
zîo_mask
 && (
Àn
 & handle->zero_mask) == 0) {

278 
	`AdbWrôeEndpoötSync
(
h™dÀ
->
adb_wrôe_pùe
,

279 (*)
d©a
,

281 &
wrôãn
,

282 
time_out
);

288 i‡(
ßved_î∫o
 =
ERROR_INVALID_HANDLE
)

289 
	`usb_kick
(
h™dÀ
);

291 
î∫o
 = 
ßved_î∫o
;

293 
	`D
("usb_write NULL handle\n");

294 
	`SëLa°Eº‹
(
ERROR_INVALID_HANDLE
);

297 
	`D
("usb_wrôêÁûed: %d\n", 
î∫o
);

300 
	}
}

302 
	$usb_ªad
(
usb_h™dÀ
 *
h™dÀ
, * 
d©a
, 
Àn
) {

303 
time_out
 = 0;

304 
ªad
 = 0;

305 
ªt
;

307 
	`D
("usb_ªad %d\n", 
Àn
);

308 i‡(
NULL
 !
h™dÀ
) {

309 
Àn
 > 0) {

310 
x„r
 = (
Àn
 > 4096) ? 4096 :Üen;

312 
ªt
 = 
	`AdbRódEndpoötSync
(
h™dÀ
->
adb_ªad_pùe
,

313 (*)
d©a
,

314 ()
x„r
,

315 &
ªad
,

316 
time_out
);

317 
ßved_î∫o
 = 
	`GëLa°Eº‹
();

318 
	`D
("usb_wrôêgŸ: %ld,Éx≥˘ed: %d,Éºno: %d\n", 
ªad
, 
x„r
, 
ßved_î∫o
);

319 i‡(
ªt
) {

320 
d©a
 +
ªad
;

321 
Àn
 -
ªad
;

323 i‡(
Àn
 == 0)

327 i‡(
ßved_î∫o
 =
ERROR_INVALID_HANDLE
)

328 
	`usb_kick
(
h™dÀ
);

331 
î∫o
 = 
ßved_î∫o
;

334 
	`D
("usb_read NULL handle\n");

335 
	`SëLa°Eº‹
(
ERROR_INVALID_HANDLE
);

338 
	`D
("usb_ªad faûed: %d\n", 
î∫o
);

341 
	}
}

343 
	$usb_˛ónup_h™dÀ
(
usb_h™dÀ
* 
h™dÀ
) {

344 i‡(
NULL
 !
h™dÀ
) {

345 i‡(
NULL
 !
h™dÀ
->
öãrÁ˚_«me
)

346 
	`‰ì
(
h™dÀ
->
öãrÁ˚_«me
);

347 i‡(
NULL
 !
h™dÀ
->
adb_wrôe_pùe
)

348 
	`AdbClo£H™dÀ
(
h™dÀ
->
adb_wrôe_pùe
);

349 i‡(
NULL
 !
h™dÀ
->
adb_ªad_pùe
)

350 
	`AdbClo£H™dÀ
(
h™dÀ
->
adb_ªad_pùe
);

351 i‡(
NULL
 !
h™dÀ
->
adb_öãrÁ˚
)

352 
	`AdbClo£H™dÀ
(
h™dÀ
->
adb_öãrÁ˚
);

354 
h™dÀ
->
öãrÁ˚_«me
 = 
NULL
;

355 
h™dÀ
->
adb_wrôe_pùe
 = 
NULL
;

356 
h™dÀ
->
adb_ªad_pùe
 = 
NULL
;

357 
h™dÀ
->
adb_öãrÁ˚
 = 
NULL
;

359 
	}
}

361 
	$usb_kick
(
usb_h™dÀ
* 
h™dÀ
) {

362 i‡(
NULL
 !
h™dÀ
) {

363 
	`adb_muãx_lock
(&
usb_lock
);

365 
	`usb_˛ónup_h™dÀ
(
h™dÀ
);

367 
	`adb_muãx_u∆ock
(&
usb_lock
);

369 
	`SëLa°Eº‹
(
ERROR_INVALID_HANDLE
);

370 
î∫o
 = 
ERROR_INVALID_HANDLE
;

372 
	}
}

374 
	$usb_˛o£
(
usb_h™dÀ
* 
h™dÀ
) {

375 
	`D
("usb_close\n");

377 i‡(
NULL
 !
h™dÀ
) {

379 
	`adb_muãx_lock
(&
usb_lock
);

381 i‡((
h™dÀ
->
√xt
 !h™dÀË&& (h™dÀ->
¥ev
 != handle)) {

382 
h™dÀ
->
√xt
->
¥ev
 = handle->prev;

383 
h™dÀ
->
¥ev
->
√xt
 = handle->next;

384 
h™dÀ
->
¥ev
 = handle;

385 
h™dÀ
->
√xt
 = handle;

388 
	`adb_muãx_u∆ock
(&
usb_lock
);

391 
	`usb_˛ónup_h™dÀ
(
h™dÀ
);

392 
	`‰ì
(
h™dÀ
);

396 
	}
}

398 c⁄° *
	$usb_«me
(
usb_h™dÀ
* 
h™dÀ
) {

399 i‡(
NULL
 =
h™dÀ
) {

400 
	`SëLa°Eº‹
(
ERROR_INVALID_HANDLE
);

401 
î∫o
 = 
ERROR_INVALID_HANDLE
;

402  
NULL
;

405  (c⁄° *)
h™dÀ
->
öãrÁ˚_«me
;

406 
	}
}

408 
	$ªcognized_devi˚
(
usb_h™dÀ
* 
h™dÀ
) {

409 i‡(
NULL
 =
h™dÀ
)

413 
USB_DEVICE_DESCRIPTOR
 
devi˚_desc
;

415 i‡(!
	`AdbGëUsbDevi˚Des¸ùt‹
(
h™dÀ
->
adb_öãrÁ˚
,

416 &
devi˚_desc
)) {

421 
USB_INTERFACE_DESCRIPTOR
 
öãrf_desc
;

423 i‡(!
	`AdbGëUsbI¡îÁ˚Des¸ùt‹
(
h™dÀ
->
adb_öãrÁ˚
,

424 &
öãrf_desc
)) {

429 i‡(2 !
öãrf_desc
.
bNumEndpoöts
) {

433 i‡(
	`is_adb_öãrÁ˚
(
devi˚_desc
.
idVíd‹
, devi˚_desc.
idProdu˘
,

434 
öãrf_desc
.
bI¡îÁ˚Cœss
, i¡îf_desc.
bI¡îÁ˚SubCœss
, i¡îf_desc.
bI¡îÁ˚PrŸocﬁ
)) {

436 if(
öãrf_desc
.
bI¡îÁ˚PrŸocﬁ
 == 0x01) {

437 
AdbEndpoötInf‹m©i⁄
 
ídpoöt_öfo
;

439 i‡(
	`AdbGëEndpoötInf‹m©i⁄
(
h™dÀ
->
adb_öãrÁ˚
, 0, &
ídpoöt_öfo
)) {

440 
h™dÀ
->
zîo_mask
 = 
ídpoöt_öfo
.
max_∑ckë_size
 - 1;

448 
	}
}

450 
	$föd_devi˚s
() {

451 
usb_h™dÀ
* 
h™dÀ
 = 
NULL
;

452 
íåy_buf„r
[2048];

453 
öãrf_«me
[2048];

454 
AdbI¡îÁ˚Info
* 
√xt_öãrÁ˚
 = (AdbI¡îÁ˚Info*)(&
íåy_buf„r
[0]);

455 
íåy_buf„r_size
 = (
íåy_buf„r
);

456 * 
c›y_«me
;

459 
ADBAPIHANDLE
 
íum_h™dÀ
 =

460 
	`AdbEnumI¡îÁ˚s
(
usb_˛ass_id
, 
åue
,Årue,Årue);

462 i‡(
NULL
 =
íum_h™dÀ
)

465 
	`AdbNextI¡îÁ˚
(
íum_h™dÀ
, 
√xt_öãrÁ˚
, &
íåy_buf„r_size
)) {

469 c⁄° 
wch¨_t
* 
wch¨_«me
 = 
√xt_öãrÁ˚
->
devi˚_«me
;

470 
c›y_«me
 = 
öãrf_«me
;

471 
L
'\0' !*
wch¨_«me
;

472 
wch¨_«me
++, 
c›y_«me
++) {

473 *
c›y_«me
 = ()(*
wch¨_«me
);

475 *
c›y_«me
 = '\0';

478 i‡(!
	`known_devi˚
(
öãrf_«me
)) {

480 
h™dÀ
 = 
	`do_usb_›í
(
√xt_öãrÁ˚
->
devi˚_«me
);

481 i‡(
NULL
 !
h™dÀ
) {

483 i‡(
	`ªcognized_devi˚
(
h™dÀ
)) {

484 
	`D
("addögáÇew devi˚ %s\n", 
öãrf_«me
);

485 
£rül_numbî
[512];

486 
£rül_numbî_Àn
 = (
£rül_numbî
);

487 i‡(
	`AdbGëSîülNumbî
(
h™dÀ
->
adb_öãrÁ˚
,

488 
£rül_numbî
,

489 &
£rül_numbî_Àn
,

490 
åue
)) {

492 i‡(
	`ªgi°î_√w_devi˚
(
h™dÀ
)) {

493 
	`ªgi°î_usb_å™•‹t
(
h™dÀ
, 
£rül_numbî
, 
NULL
, 1);

495 
	`D
("ªgi°î_√w_devi˚ faûed f‹ %s\n", 
öãrf_«me
);

496 
	`usb_˛ónup_h™dÀ
(
h™dÀ
);

497 
	`‰ì
(
h™dÀ
);

500 
	`D
("cannot get serialÇumber\n");

501 
	`usb_˛ónup_h™dÀ
(
h™dÀ
);

502 
	`‰ì
(
h™dÀ
);

505 
	`usb_˛ónup_h™dÀ
(
h™dÀ
);

506 
	`‰ì
(
h™dÀ
);

511 
íåy_buf„r_size
 = (
íåy_buf„r
);

514 
	`AdbClo£H™dÀ
(
íum_h™dÀ
);

515 
	}
}

	@utils.c

16 
	~"utûs.h
"

17 
	~<°d¨g.h
>

18 
	~<°dio.h
>

19 
	~<°rög.h
>

22 
	$buff_addc
 (* 
buff
, * 
buffEnd
, 
c
)

24 
avaû
 = 
buffEnd
 - 
buff
;

26 i‡(
avaû
 <= 0)

27  
buff
;

29 i‡(
avaû
 == 1) {

30 
buff
[0] = 0;

31  
buff
 + 1;

34 
buff
[0] = (Ë
c
;

35 
buff
[1] = 0;

36  
buff
 + 1;

37 
	}
}

40 
	$buff_adds
 (* 
buff
, * 
buffEnd
, c⁄° * 
s
)

42 
¶í
 = 
	`°æí
(
s
);

44  
	`buff_addb
(
buff
, 
buffEnd
, 
s
, 
¶í
);

45 
	}
}

48 
	$buff_addb
 (* 
buff
, * 
buffEnd
, c⁄° * 
d©a
, 
Àn
)

50 
avaû
 = (
buffEnd
 - 
buff
);

52 i‡(
avaû
 <0 || 
Àn
 <= 0)

53  
buff
;

55 i‡(
Àn
 > 
avaû
)

56 
Àn
 = 
avaû
;

58 
	`mem˝y
(
buff
, 
d©a
, 
Àn
);

60 
buff
 +
Àn
;

63 i‡(
buff
 >
buffEnd
) {

64 
buff
[-1] = 0;

66 
buff
[0] = 0;

68  
buff
;

69 
	}
}

72 
	$buff_add
 (* 
buff
, * 
buffEnd
, c⁄° * 
f‹m©
, ... )

74 
avaû
;

76 
avaû
 = (
buffEnd
 - 
buff
);

78 i‡(
avaû
 > 0) {

79 
va_li°
 
¨gs
;

80 
¬
;

82 
	`va_°¨t
(
¨gs
, 
f‹m©
);

83 
¬
 = 
	`v¢¥ötf
–
buff
, 
avaû
, 
f‹m©
, 
¨gs
);

84 
	`va_íd
(
¨gs
);

86 i‡(
¬
 < 0) {

91 
¬
 = 
avaû
;

93 i‡(
¬
 > 
avaû
) {

94 
¬
 = 
avaû
;

97 
buff
 +
¬
;

100 i‡(
buff
 >
buffEnd
)

101 
buff
[-1] = 0;

103 
buff
[0] = 0;

105  
buff
;

106 
	}
}

	@utils.h

16 #i‚de‡
_ADB_UTILS_H


17 
	#_ADB_UTILS_H


	)

45 * 
buff_addc
 (* 
buff
, * 
buffEnd
, 
c
);

48 * 
buff_adds
 (* 
buff
, * 
buffEnd
, c⁄° * 
s
);

53 * 
buff_addb
 (* 
buff
, * 
buffEnd
, c⁄° * 
d©a
, 
Àn
);

56 * 
buff_add
 (* 
buff
, * 
buffEnd
, c⁄° * 
f‹m©
, ... );

65 
	#BUFF_DECL
(
_buff
,
_curs‹
,
_íd
,
_size
) \

66 
_buff
[
_size
], *
_curs‹
=_buff, *
_íd
 = _curs‹ + (_size)

	)

	@
1
.
0
162
4295
adb.c
adb.h
adb_auth.h
adb_auth_client.c
adb_auth_host.c
adb_client.c
adb_client.h
backup_service.c
commandline.c
console.c
fdevent.c
fdevent.h
file_sync_client.c
file_sync_service.c
file_sync_service.h
framebuffer_service.c
get_my_path_darwin.c
get_my_path_freebsd.c
get_my_path_linux.c
get_my_path_windows.c
jdwp_service.c
libs/libcutils/abort_socket.c
libs/libcutils/android_reboot.c
libs/libcutils/arch-arm/memset32.S
libs/libcutils/arch-x86/android_memset16.S
libs/libcutils/arch-x86/android_memset32.S
libs/libcutils/arch-x86/cache_wrapper.S
libs/libcutils/arch-x86/sse2-memset16-atom.S
libs/libcutils/arch-x86/sse2-memset32-atom.S
libs/libcutils/array.c
libs/libcutils/ashmem-dev.c
libs/libcutils/ashmem-host.c
libs/libcutils/atomic.c
libs/libcutils/buffer.c
libs/libcutils/buffer.h
libs/libcutils/config_utils.c
libs/libcutils/cpu_info.c
libs/libcutils/cutils/abort_socket.h
libs/libcutils/cutils/android_reboot.h
libs/libcutils/cutils/array.h
libs/libcutils/cutils/ashmem.h
libs/libcutils/cutils/atomic-arm.h
libs/libcutils/cutils/atomic-inline.h
libs/libcutils/cutils/atomic-mips.h
libs/libcutils/cutils/atomic-x86.h
libs/libcutils/cutils/atomic.h
libs/libcutils/cutils/bitops.h
libs/libcutils/cutils/compiler.h
libs/libcutils/cutils/config_utils.h
libs/libcutils/cutils/cpu_info.h
libs/libcutils/cutils/debugger.h
libs/libcutils/cutils/dir_hash.h
libs/libcutils/cutils/event_tag_map.h
libs/libcutils/cutils/fs.h
libs/libcutils/cutils/hashmap.h
libs/libcutils/cutils/iosched_policy.h
libs/libcutils/cutils/jstring.h
libs/libcutils/cutils/klog.h
libs/libcutils/cutils/list.h
libs/libcutils/cutils/log.h
libs/libcutils/cutils/log_bak_for_android.h
libs/libcutils/cutils/logd.h
libs/libcutils/cutils/logger.h
libs/libcutils/cutils/logprint.h
libs/libcutils/cutils/memory.h
libs/libcutils/cutils/misc.h
libs/libcutils/cutils/mq.h
libs/libcutils/cutils/multiuser.h
libs/libcutils/cutils/native_handle.h
libs/libcutils/cutils/open_memstream.h
libs/libcutils/cutils/partition_utils.h
libs/libcutils/cutils/process_name.h
libs/libcutils/cutils/properties.h
libs/libcutils/cutils/qsort_r_compat.h
libs/libcutils/cutils/qtaguid.h
libs/libcutils/cutils/record_stream.h
libs/libcutils/cutils/sched_policy.h
libs/libcutils/cutils/selector.h
libs/libcutils/cutils/sockets.h
libs/libcutils/cutils/str_parms.h
libs/libcutils/cutils/threads.h
libs/libcutils/cutils/tztime.h
libs/libcutils/cutils/uevent.h
libs/libcutils/cutils/uio.h
libs/libcutils/cutils/zygote.h
libs/libcutils/debugger.c
libs/libcutils/dir_hash.c
libs/libcutils/dlmalloc_stubs.c
libs/libcutils/fs.c
libs/libcutils/hashmap.c
libs/libcutils/include/ashmem.h
libs/libcutils/iosched_policy.c
libs/libcutils/klog.c
libs/libcutils/list.c
libs/libcutils/load_file.c
libs/libcutils/loghack.h
libs/libcutils/memory.c
libs/libcutils/misc_rw.c
libs/libcutils/mq.c
libs/libcutils/multiuser.c
libs/libcutils/native_handle.c
libs/libcutils/open_memstream.c
libs/libcutils/partition_utils.c
libs/libcutils/private.h
libs/libcutils/process_name.c
libs/libcutils/properties.c
libs/libcutils/qsort_r_compat.c
libs/libcutils/qtaguid.c
libs/libcutils/record_stream.c
libs/libcutils/sched_policy.c
libs/libcutils/selector.c
libs/libcutils/socket_inaddr_any_server.c
libs/libcutils/socket_local.h
libs/libcutils/socket_local_client.c
libs/libcutils/socket_local_server.c
libs/libcutils/socket_loopback_client.c
libs/libcutils/socket_loopback_server.c
libs/libcutils/socket_network_client.c
libs/libcutils/sockets.c
libs/libcutils/str_parms.c
libs/libcutils/strdup16to8.c
libs/libcutils/strdup8to16.c
libs/libcutils/threads.c
libs/libcutils/tzfile.h
libs/libcutils/tzstrftime.c
libs/libcutils/tztime.c
libs/libcutils/uevent.c
libs/libcutils/uio.c
libs/libcutils/zygote.c
libs/libmincrypt/mincrypt/rsa.h
libs/libmincrypt/mincrypt/sha.h
libs/libmincrypt/rsa.c
libs/libmincrypt/rsa_e_3.c
libs/libmincrypt/rsa_e_f4.c
libs/libmincrypt/sha.c
libs/libmincrypt/tools/DumpPublicKey.java
log_service.c
mutex_list.h
private/android_filesystem_config.h
qemu/qemu.c
qemu/qemu.h
qemu/qemu_pipe.h
remount_service.c
services.c
sockets.c
sysdeps.h
sysdeps_win32.c
test_track_devices.c
test_track_jdwp.c
transport.c
transport.h
transport_local.c
transport_usb.c
usb_libusb.c
usb_linux.c
usb_linux_client.c
usb_osx.c
usb_vendors.c
usb_vendors.h
usb_windows.c
utils.c
utils.h
