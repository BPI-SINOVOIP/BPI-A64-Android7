!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPTING_CONNECTION	./libs/libcutils/mq.c	/^    ACCEPTING_CONNECTION,$/;"	e	enum:__anon7	file:
ADB_AUTH_RSAPUBLICKEY	./adb_auth.h	28;"	d
ADB_AUTH_SIGNATURE	./adb_auth.h	27;"	d
ADB_AUTH_TOKEN	./adb_auth.h	25;"	d
ADB_CLASS	./adb.h	438;"	d
ADB_KEY_FILE	./adb_auth_host.c	51;"	d	file:
ADB_LOCAL_TRANSPORT_MAX	./transport_local.c	48;"	d	file:
ADB_MUTEX	./mutex_list.h	26;"	d
ADB_MUTEX	./sysdeps.h	301;"	d
ADB_MUTEX	./sysdeps.h	49;"	d
ADB_MUTEX	./sysdeps_win32.c	2138;"	d	file:
ADB_MUTEX_DEFINE	./sysdeps.h	291;"	d
ADB_MUTEX_DEFINE	./sysdeps.h	45;"	d
ADB_MUTEX_INITIALIZER	./sysdeps.h	285;"	d
ADB_PROTOCOL	./adb.h	440;"	d
ADB_SERVER_VERSION	./adb.h	39;"	d
ADB_SUBCLASS	./adb.h	439;"	d
ADB_TRACE	./adb.h	344;"	d
ADB_TRACING	./adb.h	385;"	d
ADB_TRACING	./adb.h	419;"	d
ADB_VERSION_MAJOR	./adb.h	36;"	d
ADB_VERSION_MINOR	./adb.h	37;"	d
AID_ADB	./private/android_filesystem_config.h	47;"	d
AID_APP	./private/android_filesystem_config.h	84;"	d
AID_AUDIO	./private/android_filesystem_config.h	41;"	d
AID_BLUETOOTH	./private/android_filesystem_config.h	38;"	d
AID_CACHE	./private/android_filesystem_config.h	67;"	d
AID_CAMERA	./private/android_filesystem_config.h	42;"	d
AID_COMPASS	./private/android_filesystem_config.h	44;"	d
AID_DHCP	./private/android_filesystem_config.h	50;"	d
AID_DIAG	./private/android_filesystem_config.h	68;"	d
AID_DRM	./private/android_filesystem_config.h	55;"	d
AID_DRMRPC	./private/android_filesystem_config.h	62;"	d
AID_GPS	./private/android_filesystem_config.h	57;"	d
AID_GRAPHICS	./private/android_filesystem_config.h	39;"	d
AID_INET	./private/android_filesystem_config.h	74;"	d
AID_INPUT	./private/android_filesystem_config.h	40;"	d
AID_INSTALL	./private/android_filesystem_config.h	48;"	d
AID_ISOLATED_END	./private/android_filesystem_config.h	87;"	d
AID_ISOLATED_START	./private/android_filesystem_config.h	86;"	d
AID_KEYSTORE	./private/android_filesystem_config.h	53;"	d
AID_LOG	./private/android_filesystem_config.h	43;"	d
AID_MDNSR	./private/android_filesystem_config.h	56;"	d
AID_MEDIA	./private/android_filesystem_config.h	49;"	d
AID_MEDIA_RW	./private/android_filesystem_config.h	59;"	d
AID_MISC	./private/android_filesystem_config.h	81;"	d
AID_MOUNT	./private/android_filesystem_config.h	45;"	d
AID_MTP	./private/android_filesystem_config.h	60;"	d
AID_NET_ADMIN	./private/android_filesystem_config.h	76;"	d
AID_NET_BT	./private/android_filesystem_config.h	73;"	d
AID_NET_BT_ADMIN	./private/android_filesystem_config.h	72;"	d
AID_NET_BT_STACK	./private/android_filesystem_config.h	79;"	d
AID_NET_BW_ACCT	./private/android_filesystem_config.h	78;"	d
AID_NET_BW_STATS	./private/android_filesystem_config.h	77;"	d
AID_NET_RAW	./private/android_filesystem_config.h	75;"	d
AID_NFC	./private/android_filesystem_config.h	63;"	d
AID_NOBODY	./private/android_filesystem_config.h	82;"	d
AID_RADIO	./private/android_filesystem_config.h	37;"	d
AID_ROOT	./private/android_filesystem_config.h	33;"	d
AID_SDCARD_R	./private/android_filesystem_config.h	64;"	d
AID_SDCARD_RW	./private/android_filesystem_config.h	51;"	d
AID_SHARED_GID_END	./private/android_filesystem_config.h	92;"	d
AID_SHARED_GID_START	./private/android_filesystem_config.h	91;"	d
AID_SHELL	./private/android_filesystem_config.h	66;"	d
AID_SYSTEM	./private/android_filesystem_config.h	35;"	d
AID_UNUSED1	./private/android_filesystem_config.h	58;"	d
AID_UNUSED2	./private/android_filesystem_config.h	61;"	d
AID_USB	./private/android_filesystem_config.h	54;"	d
AID_USER	./private/android_filesystem_config.h	89;"	d
AID_VPN	./private/android_filesystem_config.h	52;"	d
AID_WIFI	./private/android_filesystem_config.h	46;"	d
ALL_PERMS	./libs/libcutils/fs.c	30;"	d	file:
ALOG	./libs/libcutils/cutils/log_bak_for_android.h	349;"	d
ALOG	./libs/libcutils/loghack.h	28;"	d
ALOGD	./libs/libcutils/cutils/log.h	45;"	d
ALOGD	./libs/libcutils/cutils/log_bak_for_android.h	102;"	d
ALOGD	./libs/libcutils/loghack.h	31;"	d
ALOGD_IF	./libs/libcutils/cutils/log_bak_for_android.h	106;"	d
ALOGE	./libs/libcutils/cutils/log_bak_for_android.h	144;"	d
ALOGE	./libs/libcutils/loghack.h	34;"	d
ALOGE_IF	./libs/libcutils/cutils/log_bak_for_android.h	148;"	d
ALOGI	./libs/libcutils/cutils/log.h	46;"	d
ALOGI	./libs/libcutils/cutils/log_bak_for_android.h	116;"	d
ALOGI	./libs/libcutils/loghack.h	32;"	d
ALOGI_IF	./libs/libcutils/cutils/log_bak_for_android.h	120;"	d
ALOGV	./libs/libcutils/cutils/log.h	44;"	d
ALOGV	./libs/libcutils/cutils/log_bak_for_android.h	79;"	d
ALOGV	./libs/libcutils/cutils/log_bak_for_android.h	81;"	d
ALOGV	./libs/libcutils/loghack.h	30;"	d
ALOGV_IF	./libs/libcutils/cutils/log_bak_for_android.h	89;"	d
ALOGV_IF	./libs/libcutils/cutils/log_bak_for_android.h	91;"	d
ALOGW	./libs/libcutils/cutils/log.h	47;"	d
ALOGW	./libs/libcutils/cutils/log_bak_for_android.h	130;"	d
ALOGW	./libs/libcutils/loghack.h	33;"	d
ALOGW_IF	./libs/libcutils/cutils/log_bak_for_android.h	134;"	d
ALOG_ASSERT	./libs/libcutils/cutils/log_bak_for_android.h	334;"	d
ANDROID_ADB_INI	./usb_vendors.c	34;"	d	file:
ANDROID_API	./libs/libcutils/cutils/compiler.h	42;"	d
ANDROID_CUTILS_ATOMIC_ARM_H	./libs/libcutils/cutils/atomic-arm.h	18;"	d
ANDROID_CUTILS_ATOMIC_H	./libs/libcutils/cutils/atomic.h	18;"	d
ANDROID_CUTILS_ATOMIC_INLINE_H	./libs/libcutils/cutils/atomic-inline.h	18;"	d
ANDROID_CUTILS_ATOMIC_MIPS_H	./libs/libcutils/cutils/atomic-mips.h	18;"	d
ANDROID_CUTILS_ATOMIC_X86_H	./libs/libcutils/cutils/atomic-x86.h	18;"	d
ANDROID_CUTILS_COMPILER_H	./libs/libcutils/cutils/compiler.h	18;"	d
ANDROID_CUTILS_MEMORY_H	./libs/libcutils/cutils/memory.h	18;"	d
ANDROID_INCLUDE_HARDWARE_QEMU_PIPE_H	./qemu/qemu_pipe.h	17;"	d
ANDROID_MEMBAR_FULL	./libs/libcutils/cutils/atomic-inline.h	57;"	d
ANDROID_MEMBAR_FULL	./libs/libcutils/cutils/atomic-inline.h	59;"	d
ANDROID_MEMBAR_STORE	./libs/libcutils/cutils/atomic-inline.h	63;"	d
ANDROID_MEMBAR_STORE	./libs/libcutils/cutils/atomic-inline.h	65;"	d
ANDROID_PATH	./adb_auth_host.c	50;"	d	file:
ANDROID_PATH	./usb_vendors.c	33;"	d	file:
ANDROID_RB_FLAG_NO_REMOUNT_RO	./libs/libcutils/cutils/android_reboot.h	29;"	d
ANDROID_RB_FLAG_NO_SYNC	./libs/libcutils/cutils/android_reboot.h	28;"	d
ANDROID_RB_POWEROFF	./libs/libcutils/cutils/android_reboot.h	24;"	d
ANDROID_RB_RESTART	./libs/libcutils/cutils/android_reboot.h	23;"	d
ANDROID_RB_RESTART2	./libs/libcutils/cutils/android_reboot.h	25;"	d
ANDROID_RESERVED_SOCKET_PREFIX	./libs/libcutils/socket_local.h	21;"	d
ANDROID_SOCKET_DIR	./libs/libcutils/cutils/sockets.h	33;"	d
ANDROID_SOCKET_ENV_PREFIX	./libs/libcutils/cutils/sockets.h	32;"	d
ANDROID_SOCKET_NAMESPACE_ABSTRACT	./libs/libcutils/cutils/sockets.h	81;"	d
ANDROID_SOCKET_NAMESPACE_FILESYSTEM	./libs/libcutils/cutils/sockets.h	85;"	d
ANDROID_SOCKET_NAMESPACE_RESERVED	./libs/libcutils/cutils/sockets.h	83;"	d
ARRAY_SIZE	./adb.c	35;"	d	file:
ASHMEM_DEVICE	./libs/libcutils/ashmem-dev.c	35;"	d	file:
ASHMEM_GET_NAME	./libs/libcutils/include/ashmem.h	38;"	d
ASHMEM_GET_PIN_STATUS	./libs/libcutils/include/ashmem.h	45;"	d
ASHMEM_GET_PROT_MASK	./libs/libcutils/include/ashmem.h	42;"	d
ASHMEM_GET_SIZE	./libs/libcutils/include/ashmem.h	40;"	d
ASHMEM_IS_PINNED	./libs/libcutils/cutils/ashmem.h	41;"	d
ASHMEM_IS_PINNED	./libs/libcutils/include/ashmem.h	28;"	d
ASHMEM_IS_UNPINNED	./libs/libcutils/cutils/ashmem.h	40;"	d
ASHMEM_IS_UNPINNED	./libs/libcutils/include/ashmem.h	27;"	d
ASHMEM_NAME_DEF	./libs/libcutils/cutils/ashmem.h	33;"	d
ASHMEM_NAME_DEF	./libs/libcutils/include/ashmem.h	20;"	d
ASHMEM_NAME_LEN	./libs/libcutils/cutils/ashmem.h	31;"	d
ASHMEM_NAME_LEN	./libs/libcutils/include/ashmem.h	18;"	d
ASHMEM_NOT_PURGED	./libs/libcutils/cutils/ashmem.h	36;"	d
ASHMEM_NOT_PURGED	./libs/libcutils/include/ashmem.h	23;"	d
ASHMEM_PIN	./libs/libcutils/include/ashmem.h	43;"	d
ASHMEM_PURGE_ALL_CACHES	./libs/libcutils/include/ashmem.h	46;"	d
ASHMEM_SET_NAME	./libs/libcutils/include/ashmem.h	37;"	d
ASHMEM_SET_PROT_MASK	./libs/libcutils/include/ashmem.h	41;"	d
ASHMEM_SET_SIZE	./libs/libcutils/include/ashmem.h	39;"	d
ASHMEM_UNPIN	./libs/libcutils/include/ashmem.h	44;"	d
ASHMEM_WAS_PURGED	./libs/libcutils/cutils/ashmem.h	37;"	d
ASHMEM_WAS_PURGED	./libs/libcutils/include/ashmem.h	24;"	d
AVGSECSPERYEAR	./libs/libcutils/private.h	353;"	d
A_AUTH	./adb.h	32;"	d
A_CLSE	./adb.h	30;"	d
A_CNXN	./adb.h	27;"	d
A_OKAY	./adb.h	29;"	d
A_OPEN	./adb.h	28;"	d
A_SYNC	./adb.h	26;"	d
A_VERSION	./adb.h	34;"	d
A_WRTE	./adb.h	31;"	d
AdbTrace	./adb.h	/^} AdbTrace;$/;"	t	typeref:enum:__anon31
AndroidEventLogType	./libs/libcutils/cutils/log_bak_for_android.h	/^} AndroidEventLogType;$/;"	t	typeref:enum:__anon14
AndroidInterfaceAdded	./usb_osx.c	/^AndroidInterfaceAdded(void *refCon, io_iterator_t iterator)$/;"	f	file:	signature:(void *refCon, io_iterator_t iterator)
AndroidInterfaceAdded	./usb_osx.c	/^static void AndroidInterfaceAdded(void *refCon, io_iterator_t iterator);$/;"	p	file:	signature:(void *refCon, io_iterator_t iterator)
AndroidInterfaceNotify	./usb_osx.c	/^AndroidInterfaceNotify(void *refCon, io_service_t service, natural_t messageType, void *messageArgument)$/;"	f	file:	signature:(void *refCon, io_service_t service, natural_t messageType, void *messageArgument)
AndroidInterfaceNotify	./usb_osx.c	/^static void AndroidInterfaceNotify(void *refCon, io_iterator_t iterator,$/;"	p	file:	signature:(void *refCon, io_iterator_t iterator, natural_t messageType, void *messageArgument)
AndroidLogEntry	./libs/libcutils/cutils/logprint.h	/^} AndroidLogEntry;$/;"	t	typeref:struct:AndroidLogEntry_t
AndroidLogEntry_t	./libs/libcutils/cutils/logprint.h	/^typedef struct AndroidLogEntry_t {$/;"	s
AndroidLogEntry_t::message	./libs/libcutils/cutils/logprint.h	/^    const char * message;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::messageLen	./libs/libcutils/cutils/logprint.h	/^    size_t messageLen;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::pid	./libs/libcutils/cutils/logprint.h	/^    int32_t pid;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::priority	./libs/libcutils/cutils/logprint.h	/^    android_LogPriority priority;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::tag	./libs/libcutils/cutils/logprint.h	/^    const char * tag;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::tid	./libs/libcutils/cutils/logprint.h	/^    int32_t tid;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::tv_nsec	./libs/libcutils/cutils/logprint.h	/^    long tv_nsec;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogEntry_t::tv_sec	./libs/libcutils/cutils/logprint.h	/^    time_t tv_sec;$/;"	m	struct:AndroidLogEntry_t	access:public
AndroidLogFormat	./libs/libcutils/cutils/logprint.h	/^typedef struct AndroidLogFormat_t AndroidLogFormat;$/;"	t	typeref:struct:AndroidLogFormat_t
AndroidLogPrintFormat	./libs/libcutils/cutils/logprint.h	/^} AndroidLogPrintFormat;$/;"	t	typeref:enum:__anon22
Array	./libs/libcutils/array.c	/^struct Array {$/;"	s	file:
Array	./libs/libcutils/cutils/array.h	/^typedef struct Array Array;$/;"	t	typeref:struct:Array
Array::capacity	./libs/libcutils/array.c	/^    int capacity;$/;"	m	struct:Array	file:	access:public
Array::contents	./libs/libcutils/array.c	/^    void** contents;$/;"	m	struct:Array	file:	access:public
Array::size	./libs/libcutils/array.c	/^    int size;$/;"	m	struct:Array	file:	access:public
BACKUP	./adb.h	/^    BACKUP,$/;"	e	enum:__anon30
BEGIN	./file_sync_client.c	/^static void BEGIN()$/;"	f	file:
BIGGEST	./libs/libcutils/tztime.c	132;"	d	file:
BIPD	./sysdeps_win32.c	855;"	d	file:
BIPDUMP	./sysdeps_win32.c	856;"	d	file:
BIP_BUFFER_SIZE	./sysdeps_win32.c	827;"	d	file:
BUFF_DECL	./utils.h	65;"	d
BUF_SIZE	./libs/libcutils/fs.c	31;"	d	file:
BUILT_IN_VENDOR_COUNT	./usb_vendors.c	188;"	d	file:
BYTES	./libs/libcutils/mq.c	/^    BYTES,$/;"	e	enum:__anon6	file:
BackupOperation	./adb.h	/^} BackupOperation;$/;"	t	typeref:enum:__anon30
BipBuffer	./sysdeps_win32.c	/^} BipBufferRec, *BipBuffer;$/;"	t	typeref:struct:BipBufferRec_	file:
BipBufferRec	./sysdeps_win32.c	/^} BipBufferRec, *BipBuffer;$/;"	t	typeref:struct:BipBufferRec_	file:
BipBufferRec_	./sysdeps_win32.c	/^typedef struct BipBufferRec_$/;"	s	file:
BipBufferRec_::a_end	./sysdeps_win32.c	/^    int                a_end;$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::a_start	./sysdeps_win32.c	/^    int                a_start;$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::b_end	./sysdeps_win32.c	/^    int                b_end;$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::buff	./sysdeps_win32.c	/^    unsigned char      buff[ BIP_BUFFER_SIZE ];$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::can_read	./sysdeps_win32.c	/^    int                can_read;   \/* boolean *\/$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::can_write	./sysdeps_win32.c	/^    int                can_write;  \/* boolean *\/$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::closed	./sysdeps_win32.c	/^    int                closed;$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::evt_read	./sysdeps_win32.c	/^    HANDLE             evt_read;   \/* event signaled when one can read from a buffer *\/$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::evt_write	./sysdeps_win32.c	/^    HANDLE             evt_write;  \/* event signaled when one can write to a buffer  *\/$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::fdin	./sysdeps_win32.c	/^    int                fdin;$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::fdout	./sysdeps_win32.c	/^    int                fdout;$/;"	m	struct:BipBufferRec_	file:	access:public
BipBufferRec_::lock	./sysdeps_win32.c	/^    CRITICAL_SECTION  lock;$/;"	m	struct:BipBufferRec_	file:	access:public
Buffer	./libs/libcutils/buffer.h	/^} Buffer;$/;"	t	typeref:struct:__anon1
BytesListener	./libs/libcutils/mq.c	/^typedef void BytesListener(Credentials credentials, char* bytes, size_t size);$/;"	t	file:
CACHE_COUNT	./libs/libcutils/tztime.c	229;"	d	file:
CAN_SET_SP_SYSTEM	./libs/libcutils/sched_policy.c	54;"	d	file:
CC_LIKELY	./libs/libcutils/cutils/compiler.h	25;"	d
CC_LIKELY	./libs/libcutils/cutils/compiler.h	28;"	d
CC_UNLIKELY	./libs/libcutils/cutils/compiler.h	26;"	d
CC_UNLIKELY	./libs/libcutils/cutils/compiler.h	29;"	d
CFI_POP	./libs/libcutils/arch-x86/sse2-memset16-atom.S	/^#define CFI_POP(REG)						\\$/;"	d
CFI_POP	./libs/libcutils/arch-x86/sse2-memset32-atom.S	/^#define CFI_POP(REG)						\\$/;"	d
CFI_PUSH	./libs/libcutils/arch-x86/sse2-memset16-atom.S	/^#define CFI_PUSH(REG)						\\$/;"	d
CFI_PUSH	./libs/libcutils/arch-x86/sse2-memset32-atom.S	/^#define CFI_PUSH(REG)						\\$/;"	d
CHUNK_SIZE	./adb.h	477;"	d
CLASS_SHIFT	./libs/libcutils/iosched_policy.c	38;"	d	file:
COMMAND_FILE	./libs/libcutils/misc_rw.c	/^static const char *COMMAND_FILE = "\/cache\/recovery\/command";$/;"	v	file:
CONDITION	./libs/libcutils/cutils/log_bak_for_android.h	214;"	d
CONDITION	./libs/libcutils/cutils/log_bak_for_android.h	85;"	d
CONNECTION	./libs/libcutils/mq.c	/^    CONNECTION, $/;"	e	enum:__anon6	file:
CONNECTION_ERROR	./libs/libcutils/mq.c	/^    CONNECTION_ERROR, $/;"	e	enum:__anon6	file:
CONNECTION_REQUEST	./libs/libcutils/mq.c	/^    CONNECTION_REQUEST, $/;"	e	enum:__anon6	file:
CS_ANY	./adb.h	465;"	d
CS_BOOTLOADER	./adb.h	467;"	d
CS_DEVICE	./adb.h	468;"	d
CS_HOST	./adb.h	469;"	d
CS_NOPERM	./adb.h	471;"	d
CS_OFFLINE	./adb.h	466;"	d
CS_RECOVERY	./adb.h	470;"	d
CS_SIDELOAD	./adb.h	472;"	d
CTRL_MAX_INPUT_LEN	./libs/libcutils/qtaguid.c	/^static const int CTRL_MAX_INPUT_LEN = 128;$/;"	v	file:
CTRL_PROCPATH	./libs/libcutils/qtaguid.c	/^static const char* CTRL_PROCPATH = "\/proc\/net\/xt_qtaguid\/ctrl";$/;"	v	file:
CheckInterface	./usb_osx.c	/^CheckInterface(IOUSBInterfaceInterface **interface, UInt16 vendor, UInt16 product)$/;"	f	file:	signature:(IOUSBInterfaceInterface **interface, UInt16 vendor, UInt16 product)
CheckInterface	./usb_osx.c	/^static usb_handle* CheckInterface(IOUSBInterfaceInterface **iface,$/;"	p	file:	signature:(IOUSBInterfaceInterface **iface, UInt16 vendor, UInt16 product)
Credentials	./libs/libcutils/mq.c	/^} Credentials;$/;"	t	typeref:struct:__anon5	file:
D	./adb.h	388;"	d
D	./adb.h	417;"	d
D	./fdevent.c	60;"	d	file:
D	./fdevent.c	81;"	d	file:
D	./qemu/qemu.c	34;"	d	file:
D	./qemu/qemu.c	36;"	d	file:
D	./qemu/qemu_pipe.h	29;"	d
DATAFILE	./libs/libcutils/tztime.c	40;"	d	file:
DATA_CACHE_SIZE	./libs/libcutils/arch-x86/cache_wrapper.S	/^#define DATA_CACHE_SIZE         (24*1024)             \/* Atom L1 Data Cache *\/$/;"	d
DATA_CACHE_SIZE_HALF	./libs/libcutils/arch-x86/cache_wrapper.S	/^#define DATA_CACHE_SIZE_HALF    (DATA_CACHE_SIZE \/ 2)$/;"	d
DAYSPERLYEAR	./libs/libcutils/tzfile.h	133;"	d
DAYSPERNYEAR	./libs/libcutils/tzfile.h	132;"	d
DAYSPERWEEK	./libs/libcutils/tzfile.h	131;"	d
DAY_OF_YEAR	./libs/libcutils/tztime.c	165;"	d	file:
DBG	./usb_osx.c	33;"	d	file:
DBGX	./usb_linux.c	46;"	d	file:
DBUG	./libs/libcutils/open_memstream.c	59;"	d	file:
DDMS_RAWIMAGE_VERSION	./framebuffer_service.c	53;"	d	file:
DEBUG	./fdevent.c	40;"	d	file:
DEBUGGER_ACTION_CRASH	./libs/libcutils/cutils/debugger.h	/^    DEBUGGER_ACTION_CRASH,$/;"	e	enum:__anon24
DEBUGGER_ACTION_DUMP_BACKTRACE	./libs/libcutils/cutils/debugger.h	/^    DEBUGGER_ACTION_DUMP_BACKTRACE,$/;"	e	enum:__anon24
DEBUGGER_ACTION_DUMP_TOMBSTONE	./libs/libcutils/cutils/debugger.h	/^    DEBUGGER_ACTION_DUMP_TOMBSTONE,$/;"	e	enum:__anon24
DEBUGGER_SOCKET_NAME	./libs/libcutils/cutils/debugger.h	26;"	d
DEFAULT_ADB_LOCAL_TRANSPORT_PORT	./adb.h	436;"	d
DEFAULT_ADB_PORT	./adb.h	431;"	d
DEFAULT_ADB_PORT	./adb.h	433;"	d
DIVISOR	./libs/libcutils/tzstrftime.c	698;"	d	file:
DQ	./adb.h	376;"	d
DQ	./adb.h	378;"	d
DR	./adb.h	403;"	d
DR	./adb.h	418;"	d
DUMPMAX	./adb.c	228;"	d	file:
D_lock	./adb.c	/^ADB_MUTEX_DEFINE( D_lock );$/;"	v
DeathListener	./libs/libcutils/mq.c	/^typedef void DeathListener(pid_t pid);$/;"	t	file:
DumpPublicKey	./libs/libmincrypt/tools/DumpPublicKey.java	/^class DumpPublicKey {$/;"	c
DumpPublicKey.check	./libs/libmincrypt/tools/DumpPublicKey.java	/^    static int check(RSAPublicKey key) throws Exception {$/;"	m	class:DumpPublicKey	access:default	signature:(RSAPublicKey key)
DumpPublicKey.main	./libs/libmincrypt/tools/DumpPublicKey.java	/^    public static void main(String[] args) {$/;"	m	class:DumpPublicKey	access:public	signature:(String[] args)
DumpPublicKey.print	./libs/libmincrypt/tools/DumpPublicKey.java	/^    static String print(RSAPublicKey key) throws Exception {$/;"	m	class:DumpPublicKey	access:default	signature:(RSAPublicKey key)
END	./file_sync_client.c	/^static void END()$/;"	f	file:
ENTRY	./libs/libcutils/arch-x86/sse2-memset16-atom.S	/^ENTRY (sse2_memset16_atom)$/;"	l
ENTRY	./libs/libcutils/arch-x86/sse2-memset32-atom.S	/^ENTRY (sse2_memset32_atom)$/;"	l
ENV_PATH_SEPARATOR_STR	./sysdeps.h	281;"	d
ENV_PATH_SEPARATOR_STR	./sysdeps.h	41;"	d
EPOCH_WDAY	./libs/libcutils/tzfile.h	162;"	d
EPOCH_YEAR	./libs/libcutils/tzfile.h	161;"	d
EVENT_TAG_MAP_FILE	./libs/libcutils/cutils/event_tag_map.h	24;"	d
EVENT_TYPE_INT	./libs/libcutils/cutils/log_bak_for_android.h	/^    EVENT_TYPE_INT      = 0,$/;"	e	enum:__anon14
EVENT_TYPE_LIST	./libs/libcutils/cutils/log_bak_for_android.h	/^    EVENT_TYPE_LIST     = 3,$/;"	e	enum:__anon14
EVENT_TYPE_LONG	./libs/libcutils/cutils/log_bak_for_android.h	/^    EVENT_TYPE_LONG     = 1,$/;"	e	enum:__anon14
EVENT_TYPE_STRING	./libs/libcutils/cutils/log_bak_for_android.h	/^    EVENT_TYPE_STRING   = 2,$/;"	e	enum:__anon14
EXIT_FAILURE	./libs/libcutils/private.h	188;"	d
EXIT_SUCCESS	./libs/libcutils/private.h	180;"	d
Entry	./libs/libcutils/hashmap.c	/^struct Entry {$/;"	s	file:
Entry	./libs/libcutils/hashmap.c	/^typedef struct Entry Entry;$/;"	t	typeref:struct:Entry	file:
Entry::hash	./libs/libcutils/hashmap.c	/^    int hash;$/;"	m	struct:Entry	file:	access:public
Entry::key	./libs/libcutils/hashmap.c	/^    void* key;$/;"	m	struct:Entry	file:	access:public
Entry::next	./libs/libcutils/hashmap.c	/^    Entry* next;$/;"	m	struct:Entry	file:	access:public
Entry::value	./libs/libcutils/hashmap.c	/^    void* value;$/;"	m	struct:Entry	file:	access:public
EventHook	./sysdeps_win32.c	/^typedef struct EventHookRec_*  EventHook;$/;"	t	typeref:struct:EventHookRec_	file:
EventHookRec	./sysdeps_win32.c	/^} EventHookRec;$/;"	t	typeref:struct:EventHookRec_	file:
EventHookRec_	./sysdeps_win32.c	/^typedef struct EventHookRec_$/;"	s	file:
EventHookRec_::aux	./sysdeps_win32.c	/^    void*        aux;$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::check	./sysdeps_win32.c	/^    int         (*check)  ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::fh	./sysdeps_win32.c	/^    FH           fh;$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::h	./sysdeps_win32.c	/^    HANDLE       h;$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::next	./sysdeps_win32.c	/^    EventHook    next;$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::peek	./sysdeps_win32.c	/^    int         (*peek)   ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::prepare	./sysdeps_win32.c	/^    void        (*prepare)( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::ready	./sysdeps_win32.c	/^    int          ready;    \/* ready event flags  *\/$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::start	./sysdeps_win32.c	/^    int         (*start)  ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::stop	./sysdeps_win32.c	/^    void        (*stop)   ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
EventHookRec_::wanted	./sysdeps_win32.c	/^    int          wanted;   \/* wanted event flags *\/$/;"	m	struct:EventHookRec_	file:	access:public
EventLooper	./sysdeps_win32.c	/^typedef struct EventLooperRec_*  EventLooper;$/;"	t	typeref:struct:EventLooperRec_	file:
EventLooperRec	./sysdeps_win32.c	/^} EventLooperRec;$/;"	t	typeref:struct:EventLooperRec_	file:
EventLooperRec_	./sysdeps_win32.c	/^typedef struct EventLooperRec_$/;"	s	file:
EventLooperRec_::hooks	./sysdeps_win32.c	/^    EventHook    hooks;$/;"	m	struct:EventLooperRec_	file:	access:public
EventLooperRec_::htab	./sysdeps_win32.c	/^    HANDLE       htab[ MAX_LOOPER_HANDLES ];$/;"	m	struct:EventLooperRec_	file:	access:public
EventLooperRec_::htab_count	./sysdeps_win32.c	/^    int          htab_count;$/;"	m	struct:EventLooperRec_	file:	access:public
EventTagMap	./libs/libcutils/cutils/event_tag_map.h	/^typedef struct EventTagMap EventTagMap;$/;"	t	typeref:struct:EventTagMap
FALSE	./libs/libcutils/private.h	263;"	d
FATAL	./fdevent.c	57;"	d	file:
FATAL	./sysdeps_win32.c	1244;"	d	file:
FDE_ACTIVE	./fdevent.c	88;"	d	file:
FDE_ACTIVE	./sysdeps_win32.c	1262;"	d	file:
FDE_CREATED	./fdevent.c	90;"	d	file:
FDE_CREATED	./sysdeps_win32.c	1264;"	d	file:
FDE_DONT_CLOSE	./fdevent.h	29;"	d
FDE_DONT_CLOSE	./sysdeps.h	180;"	d
FDE_ERROR	./fdevent.h	25;"	d
FDE_ERROR	./sysdeps.h	179;"	d
FDE_EVENTMASK	./fdevent.c	85;"	d	file:
FDE_EVENTMASK	./sysdeps_win32.c	1259;"	d	file:
FDE_PENDING	./fdevent.c	89;"	d	file:
FDE_PENDING	./sysdeps_win32.c	1263;"	d	file:
FDE_READ	./fdevent.h	23;"	d
FDE_READ	./sysdeps.h	177;"	d
FDE_STATEMASK	./fdevent.c	86;"	d	file:
FDE_STATEMASK	./sysdeps_win32.c	1260;"	d	file:
FDE_TIMEOUT	./fdevent.h	26;"	d
FDE_WRITE	./fdevent.h	24;"	d
FDE_WRITE	./sysdeps.h	178;"	d
FH	./sysdeps_win32.c	/^typedef struct FHRec_*          FH;$/;"	t	typeref:struct:FHRec_	file:
FHClass	./sysdeps_win32.c	/^typedef const struct FHClassRec_*   FHClass;$/;"	t	typeref:struct:FHClassRec_	file:
FHClassRec	./sysdeps_win32.c	/^} FHClassRec;$/;"	t	typeref:struct:FHClassRec_	file:
FHClassRec_	./sysdeps_win32.c	/^typedef struct FHClassRec_$/;"	s	file:
FHClassRec_::_fh_close	./sysdeps_win32.c	/^    int  (*_fh_close)( FH  f );$/;"	m	struct:FHClassRec_	file:	access:public
FHClassRec_::_fh_hook	./sysdeps_win32.c	/^    void (*_fh_hook) ( FH  f, int  events, EventHook  hook );$/;"	m	struct:FHClassRec_	file:	access:public
FHClassRec_::_fh_init	./sysdeps_win32.c	/^    void (*_fh_init) ( FH  f );$/;"	m	struct:FHClassRec_	file:	access:public
FHClassRec_::_fh_lseek	./sysdeps_win32.c	/^    int  (*_fh_lseek)( FH  f, int  pos, int  origin );$/;"	m	struct:FHClassRec_	file:	access:public
FHClassRec_::_fh_read	./sysdeps_win32.c	/^    int  (*_fh_read) ( FH  f, void*  buf, int  len );$/;"	m	struct:FHClassRec_	file:	access:public
FHClassRec_::_fh_write	./sysdeps_win32.c	/^    int  (*_fh_write)( FH  f, const void*  buf, int  len );$/;"	m	struct:FHClassRec_	file:	access:public
FHRec	./sysdeps_win32.c	/^} FHRec;$/;"	t	typeref:struct:FHRec_	file:
FHRec_	./sysdeps_win32.c	/^typedef struct FHRec_$/;"	s	file:
FHRec_::__anon27::handle	./sysdeps_win32.c	/^        HANDLE      handle;$/;"	m	union:FHRec_::__anon27	file:	access:public
FHRec_::__anon27::pair	./sysdeps_win32.c	/^        SocketPair  pair;$/;"	m	union:FHRec_::__anon27	file:	access:public
FHRec_::__anon27::socket	./sysdeps_win32.c	/^        SOCKET      socket;$/;"	m	union:FHRec_::__anon27	file:	access:public
FHRec_::clazz	./sysdeps_win32.c	/^    FHClass    clazz;$/;"	m	struct:FHRec_	file:	access:public
FHRec_::eof	./sysdeps_win32.c	/^    int        eof;$/;"	m	struct:FHRec_	file:	access:public
FHRec_::event	./sysdeps_win32.c	/^    HANDLE    event;$/;"	m	struct:FHRec_	file:	access:public
FHRec_::mask	./sysdeps_win32.c	/^    int       mask;$/;"	m	struct:FHRec_	file:	access:public
FHRec_::name	./sysdeps_win32.c	/^    char  name[32];$/;"	m	struct:FHRec_	file:	access:public
FHRec_::u	./sysdeps_win32.c	/^    } u;$/;"	m	struct:FHRec_	typeref:union:FHRec_::__anon27	file:	access:public
FHRec_::used	./sysdeps_win32.c	/^    int        used;$/;"	m	struct:FHRec_	file:	access:public
FILENAME_MAX	./libs/libcutils/private.h	204;"	d
FILENAME_MAX	./libs/libcutils/private.h	207;"	d
FILESYSTEM_SOCKET_PREFIX	./libs/libcutils/socket_local.h	20;"	d
FIRST_APPLICATION_UID	./libs/libcutils/cutils/misc.h	41;"	d
FORCE_LOWER_CASE	./libs/libcutils/tzstrftime.c	93;"	d	file:
FORMAT_BRIEF	./libs/libcutils/cutils/logprint.h	/^    FORMAT_BRIEF,$/;"	e	enum:__anon22
FORMAT_LONG	./libs/libcutils/cutils/logprint.h	/^    FORMAT_LONG,$/;"	e	enum:__anon22
FORMAT_OFF	./libs/libcutils/cutils/logprint.h	/^    FORMAT_OFF = 0,$/;"	e	enum:__anon22
FORMAT_PROCESS	./libs/libcutils/cutils/logprint.h	/^    FORMAT_PROCESS,$/;"	e	enum:__anon22
FORMAT_RAW	./libs/libcutils/cutils/logprint.h	/^    FORMAT_RAW,$/;"	e	enum:__anon22
FORMAT_TAG	./libs/libcutils/cutils/logprint.h	/^    FORMAT_TAG,$/;"	e	enum:__anon22
FORMAT_THREAD	./libs/libcutils/cutils/logprint.h	/^    FORMAT_THREAD,$/;"	e	enum:__anon22
FORMAT_THREADTIME	./libs/libcutils/cutils/logprint.h	/^    FORMAT_THREADTIME,$/;"	e	enum:__anon22
FORMAT_TIME	./libs/libcutils/cutils/logprint.h	/^    FORMAT_TIME,$/;"	e	enum:__anon22
F_OK	./libs/libcutils/private.h	117;"	d
GLOBAL_PACIFIER_PARAM	./libs/libcutils/qtaguid.c	/^static const char *GLOBAL_PACIFIER_PARAM = "\/sys\/module\/xt_qtaguid\/parameters\/passive";$/;"	v	file:
GNUC_or_lint	./libs/libcutils/private.h	301;"	d
GNUC_or_lint	./libs/libcutils/private.h	305;"	d
GRANDPARENTED	./libs/libcutils/private.h	28;"	d
H4	./transport_local.c	29;"	d	file:
H4	./transport_usb.c	31;"	d	file:
HAVE_ADJTIME	./libs/libcutils/private.h	36;"	d
HAVE_GETTEXT	./libs/libcutils/private.h	40;"	d
HAVE_INCOMPATIBLE_CTIME_R	./libs/libcutils/private.h	44;"	d
HAVE_SETTIMEOFDAY	./libs/libcutils/private.h	48;"	d
HAVE_STDINT_H	./libs/libcutils/private.h	134;"	d
HAVE_STRERROR	./libs/libcutils/private.h	52;"	d
HAVE_SYMLINK	./libs/libcutils/private.h	56;"	d
HAVE_SYS_STAT_H	./libs/libcutils/private.h	60;"	d
HAVE_SYS_WAIT_H	./libs/libcutils/private.h	64;"	d
HAVE_UNISTD_H	./libs/libcutils/private.h	68;"	d
HAVE_UTMPX_H	./libs/libcutils/private.h	72;"	d
HEADER_SIZE	./libs/libcutils/record_stream.c	31;"	d	file:
HOST	./adb.c	/^int HOST = 0;$/;"	v
HOURSPERDAY	./libs/libcutils/tzfile.h	130;"	d
HashAlgorithm	./libs/libcutils/cutils/dir_hash.h	/^} HashAlgorithm;$/;"	t	typeref:enum:__anon17
Hashmap	./libs/libcutils/cutils/hashmap.h	/^typedef struct Hashmap Hashmap;$/;"	t	typeref:struct:Hashmap
Hashmap	./libs/libcutils/hashmap.c	/^struct Hashmap {$/;"	s	file:
Hashmap::bucketCount	./libs/libcutils/hashmap.c	/^    size_t bucketCount;$/;"	m	struct:Hashmap	file:	access:public
Hashmap::buckets	./libs/libcutils/hashmap.c	/^    Entry** buckets;$/;"	m	struct:Hashmap	file:	access:public
Hashmap::equals	./libs/libcutils/hashmap.c	/^    bool (*equals)(void* keyA, void* keyB);$/;"	m	struct:Hashmap	file:	access:public
Hashmap::hash	./libs/libcutils/hashmap.c	/^    int (*hash)(void* key);$/;"	m	struct:Hashmap	file:	access:public
Hashmap::lock	./libs/libcutils/hashmap.c	/^    mutex_t lock; $/;"	m	struct:Hashmap	file:	access:public
Hashmap::size	./libs/libcutils/hashmap.c	/^    size_t size;$/;"	m	struct:Hashmap	file:	access:public
Header	./libs/libcutils/mq.c	/^} Header;$/;"	t	typeref:struct:__anon8	file:
ID_DATA	./file_sync_service.h	44;"	d
ID_DENT	./file_sync_service.h	42;"	d
ID_DONE	./file_sync_service.h	43;"	d
ID_FAIL	./file_sync_service.h	46;"	d
ID_LIST	./file_sync_service.h	38;"	d
ID_OKAY	./file_sync_service.h	45;"	d
ID_QUIT	./file_sync_service.h	47;"	d
ID_RECV	./file_sync_service.h	41;"	d
ID_SEND	./file_sync_service.h	40;"	d
ID_STAT	./file_sync_service.h	37;"	d
ID_ULNK	./file_sync_service.h	39;"	d
IF_ALOG	./libs/libcutils/cutils/log_bak_for_android.h	373;"	d
IF_ALOGD	./libs/libcutils/cutils/log_bak_for_android.h	173;"	d
IF_ALOGE	./libs/libcutils/cutils/log_bak_for_android.h	197;"	d
IF_ALOGI	./libs/libcutils/cutils/log_bak_for_android.h	181;"	d
IF_ALOGV	./libs/libcutils/cutils/log_bak_for_android.h	162;"	d
IF_ALOGV	./libs/libcutils/cutils/log_bak_for_android.h	164;"	d
IF_ALOGW	./libs/libcutils/cutils/log_bak_for_android.h	189;"	d
INDEXFILE	./libs/libcutils/tztime.c	39;"	d	file:
INITIALIZE	./libs/libcutils/private.h	312;"	d
INITIALIZE	./libs/libcutils/private.h	315;"	d
INITIAL_CAPACITY	./libs/libcutils/array.c	23;"	d	file:
INT32_MAX	./libs/libcutils/private.h	157;"	d
INT32_MIN	./libs/libcutils/private.h	160;"	d
INTLEN	./libs/libcutils/tztime.c	42;"	d	file:
INT_STRLEN_MAXIMUM	./libs/libcutils/private.h	290;"	d
INT_STRLEN_MAXIMUM	./libs/libcutils/tzstrftime.c	74;"	d	file:
IN_ALL	./libs/libcutils/tzstrftime.c	91;"	d	file:
IN_NONE	./libs/libcutils/tzstrftime.c	88;"	d	file:
IN_SOME	./libs/libcutils/tzstrftime.c	89;"	d	file:
IN_THIS	./libs/libcutils/tzstrftime.c	90;"	d	file:
IOPRIO_NORM	./libs/libcutils/iosched_policy.c	39;"	d	file:
InitUSB	./usb_osx.c	/^InitUSB()$/;"	f	file:
InputState	./libs/libcutils/mq.c	/^} InputState;$/;"	t	typeref:enum:__anon7	file:
IoSchedClass	./libs/libcutils/cutils/iosched_policy.h	/^} IoSchedClass;$/;"	t	typeref:enum:__anon23
IoSchedClass_BE	./libs/libcutils/cutils/iosched_policy.h	/^    IoSchedClass_BE,$/;"	e	enum:__anon23
IoSchedClass_IDLE	./libs/libcutils/cutils/iosched_policy.h	/^    IoSchedClass_IDLE,$/;"	e	enum:__anon23
IoSchedClass_NONE	./libs/libcutils/cutils/iosched_policy.h	/^    IoSchedClass_NONE,$/;"	e	enum:__anon23
IoSchedClass_RT	./libs/libcutils/cutils/iosched_policy.h	/^    IoSchedClass_RT,$/;"	e	enum:__anon23
JDWP_CONTROL_NAME	./jdwp_service.c	433;"	d	file:
JDWP_CONTROL_NAME_LEN	./jdwp_service.c	434;"	d	file:
JULIAN_DAY	./libs/libcutils/tztime.c	164;"	d	file:
JdwpControl	./jdwp_service.c	/^} JdwpControl;$/;"	t	typeref:struct:__anon44	file:
JdwpProcess	./jdwp_service.c	/^struct JdwpProcess {$/;"	s	file:
JdwpProcess	./jdwp_service.c	/^typedef struct JdwpProcess  JdwpProcess;$/;"	t	typeref:struct:JdwpProcess	file:
JdwpProcess::fde	./jdwp_service.c	/^    fdevent*      fde;$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::in_buff	./jdwp_service.c	/^    char          in_buff[4];  \/* input character to read PID *\/$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::in_len	./jdwp_service.c	/^    int           in_len;      \/* number from JDWP process    *\/$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::next	./jdwp_service.c	/^    JdwpProcess*  next;$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::out_count	./jdwp_service.c	/^    int           out_count;            \/* to send to the JDWP process      *\/$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::out_fds	./jdwp_service.c	/^    int           out_fds[MAX_OUT_FDS]; \/* output array of file descriptors *\/$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::pid	./jdwp_service.c	/^    int           pid;$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::prev	./jdwp_service.c	/^    JdwpProcess*  prev;$/;"	m	struct:JdwpProcess	file:	access:public
JdwpProcess::socket	./jdwp_service.c	/^    int           socket;$/;"	m	struct:JdwpProcess	file:	access:public
JdwpSocket	./jdwp_service.c	/^} JdwpSocket;$/;"	t	typeref:struct:__anon45	file:
JdwpTracker	./jdwp_service.c	/^struct JdwpTracker {$/;"	s	file:
JdwpTracker	./jdwp_service.c	/^typedef struct JdwpTracker  JdwpTracker;$/;"	t	typeref:struct:JdwpTracker	file:
JdwpTracker::need_update	./jdwp_service.c	/^    int           need_update;$/;"	m	struct:JdwpTracker	file:	access:public
JdwpTracker::next	./jdwp_service.c	/^    JdwpTracker*  next;$/;"	m	struct:JdwpTracker	file:	access:public
JdwpTracker::prev	./jdwp_service.c	/^    JdwpTracker*  prev;$/;"	m	struct:JdwpTracker	file:	access:public
JdwpTracker::socket	./jdwp_service.c	/^    asocket       socket;$/;"	m	struct:JdwpTracker	file:	access:public
KLOG_DEBUG	./libs/libcutils/cutils/klog.h	30;"	d
KLOG_DEFAULT_LEVEL	./libs/libcutils/cutils/klog.h	32;"	d
KLOG_ERROR	./libs/libcutils/cutils/klog.h	26;"	d
KLOG_INFO	./libs/libcutils/cutils/klog.h	29;"	d
KLOG_NOTICE	./libs/libcutils/cutils/klog.h	28;"	d
KLOG_WARNING	./libs/libcutils/cutils/klog.h	27;"	d
LAST_APPLICATION_UID	./libs/libcutils/cutils/misc.h	42;"	d
LISTEN_BACKLOG	./libs/libcutils/socket_inaddr_any_server.c	33;"	d	file:
LISTEN_BACKLOG	./libs/libcutils/socket_local_client.c	42;"	d	file:
LISTEN_BACKLOG	./libs/libcutils/socket_local_server.c	44;"	d	file:
LISTEN_BACKLOG	./libs/libcutils/socket_loopback_server.c	26;"	d	file:
LISTEN_BACKLOG	./sysdeps_win32.c	614;"	d	file:
LOCALE_HOME	./libs/libcutils/private.h	76;"	d
LOCAL_CLIENT_PREFIX	./adb.h	244;"	d
LOGE	./libs/libcutils/misc_rw.c	17;"	d	file:
LOGGER_ENTRY_MAX_LEN	./libs/libcutils/cutils/logger.h	64;"	d
LOGGER_ENTRY_MAX_PAYLOAD	./libs/libcutils/cutils/logger.h	57;"	d
LOGGER_FLUSH_LOG	./libs/libcutils/cutils/logger.h	75;"	d
LOGGER_GET_LOG_BUF_SIZE	./libs/libcutils/cutils/logger.h	72;"	d
LOGGER_GET_LOG_LEN	./libs/libcutils/cutils/logger.h	73;"	d
LOGGER_GET_NEXT_ENTRY_LEN	./libs/libcutils/cutils/logger.h	74;"	d
LOGGER_GET_VERSION	./libs/libcutils/cutils/logger.h	76;"	d
LOGGER_LOG_EVENTS	./libs/libcutils/cutils/logger.h	48;"	d
LOGGER_LOG_MAIN	./libs/libcutils/cutils/logger.h	46;"	d
LOGGER_LOG_RADIO	./libs/libcutils/cutils/logger.h	47;"	d
LOGGER_LOG_SYSTEM	./libs/libcutils/cutils/logger.h	49;"	d
LOGGER_SET_VERSION	./libs/libcutils/cutils/logger.h	77;"	d
LOG_ALWAYS_FATAL	./libs/libcutils/cutils/log_bak_for_android.h	301;"	d
LOG_ALWAYS_FATAL	./libs/libcutils/loghack.h	35;"	d
LOG_ALWAYS_FATAL_IF	./libs/libcutils/cutils/log_bak_for_android.h	294;"	d
LOG_BUF_MAX	./libs/libcutils/klog.c	45;"	d	file:
LOG_EVENT_INT	./libs/libcutils/cutils/log_bak_for_android.h	396;"	d
LOG_EVENT_LONG	./libs/libcutils/cutils/log_bak_for_android.h	403;"	d
LOG_EVENT_STRING	./libs/libcutils/cutils/log_bak_for_android.h	410;"	d
LOG_FATAL	./libs/libcutils/cutils/log_bak_for_android.h	315;"	d
LOG_FATAL	./libs/libcutils/cutils/log_bak_for_android.h	324;"	d
LOG_FATAL_IF	./libs/libcutils/cutils/log_bak_for_android.h	312;"	d
LOG_FATAL_IF	./libs/libcutils/cutils/log_bak_for_android.h	321;"	d
LOG_FILE_DIR	./log_service.c	29;"	d	file:
LOG_ID_EVENTS	./libs/libcutils/cutils/log_bak_for_android.h	/^    LOG_ID_EVENTS = 2,$/;"	e	enum:__anon15
LOG_ID_MAIN	./libs/libcutils/cutils/log_bak_for_android.h	/^    LOG_ID_MAIN = 0,$/;"	e	enum:__anon15
LOG_ID_MAX	./libs/libcutils/cutils/log_bak_for_android.h	/^    LOG_ID_MAX$/;"	e	enum:__anon15
LOG_ID_RADIO	./libs/libcutils/cutils/log_bak_for_android.h	/^    LOG_ID_RADIO = 1,$/;"	e	enum:__anon15
LOG_ID_SYSTEM	./libs/libcutils/cutils/log_bak_for_android.h	/^    LOG_ID_SYSTEM = 3,$/;"	e	enum:__anon15
LOG_NDEBUG	./libs/libcutils/cutils/log_bak_for_android.h	57;"	d
LOG_NDEBUG	./libs/libcutils/cutils/log_bak_for_android.h	59;"	d
LOG_PRI	./libs/libcutils/cutils/log_bak_for_android.h	357;"	d
LOG_PRI_VA	./libs/libcutils/cutils/log_bak_for_android.h	365;"	d
LOG_TAG	./libs/libcutils/buffer.c	17;"	d	file:
LOG_TAG	./libs/libcutils/cutils/log_bak_for_android.h	69;"	d
LOG_TAG	./libs/libcutils/fs.c	17;"	d	file:
LOG_TAG	./libs/libcutils/misc_rw.c	2;"	d	file:
LOG_TAG	./libs/libcutils/mq.c	17;"	d	file:
LOG_TAG	./libs/libcutils/native_handle.c	17;"	d	file:
LOG_TAG	./libs/libcutils/properties.c	17;"	d	file:
LOG_TAG	./libs/libcutils/qtaguid.c	20;"	d	file:
LOG_TAG	./libs/libcutils/sched_policy.c	19;"	d	file:
LOG_TAG	./libs/libcutils/selector.c	17;"	d	file:
LOG_TAG	./libs/libcutils/str_parms.c	17;"	d	file:
LOG_TAG	./libs/libcutils/zygote.c	17;"	d	file:
LOG_TAG	./qemu/qemu.c	21;"	d	file:
MASTER_CREDENTIALS	./libs/libcutils/mq.c	/^static const Credentials MASTER_CREDENTIALS = {0, 0, 0};$/;"	v	file:
MASTER_PATH	./libs/libcutils/mq.c	/^static const char* MASTER_PATH = "\/master.peer";$/;"	v	file:
MAX_CAPACITY	./libs/libcutils/array.c	24;"	d	file:
MAX_DUMP_HEX_LEN	./transport.c	38;"	d	file:
MAX_LOOPER_HANDLES	./sysdeps_win32.c	1352;"	d	file:
MAX_OUT_FDS	./jdwp_service.c	97;"	d	file:
MAX_PACKET_SIZE_FS	./usb_linux_client.c	34;"	d	file:
MAX_PACKET_SIZE_HS	./usb_linux_client.c	35;"	d	file:
MAX_PAYLOAD	./adb.h	24;"	d
MINSPERHOUR	./libs/libcutils/tzfile.h	129;"	d
MISC_DEVICE	./libs/libcutils/misc_rw.c	/^static const char *MISC_DEVICE = "\/dev\/by-name\/misc";$/;"	v	file:
MKID	./file_sync_service.h	30;"	d
MKID	./file_sync_service.h	34;"	d
MONSPERYEAR	./libs/libcutils/tzfile.h	136;"	d
MONTH_NTH_DAY_OF_WEEK	./libs/libcutils/tztime.c	166;"	d	file:
MULTIUSER_APP_PER_USER_RANGE	./libs/libcutils/cutils/multiuser.h	28;"	d
MUTEX_INITIALIZER	./libs/libcutils/cutils/threads.h	109;"	d
MUTEX_INITIALIZER	./libs/libcutils/cutils/threads.h	83;"	d
MY_TZNAME_MAX	./libs/libcutils/tztime.c	135;"	d	file:
MY_TZNAME_MAX	./libs/libcutils/tztime.c	138;"	d	file:
MemStream	./libs/libcutils/open_memstream.c	/^} MemStream;$/;"	t	typeref:struct:__anon4	file:
MqBytes	./libs/libcutils/cutils/mq.h	/^typedef struct MqBytes MqBytes;$/;"	t	typeref:struct:MqBytes
MqCloseListener	./libs/libcutils/cutils/mq.h	/^typedef void MqCloseListener(MqDestination* destination);$/;"	t
MqDestination	./libs/libcutils/cutils/mq.h	/^typedef struct MqDestination MqDestination;$/;"	t	typeref:struct:MqDestination
MqMessage	./libs/libcutils/cutils/mq.h	/^typedef struct MqMessage MqMessage;$/;"	t	typeref:struct:MqMessage
MqMessageListener	./libs/libcutils/cutils/mq.h	/^typedef void MqMessageListener(MqDestination* destination, MqMessage* message);$/;"	t
NAMELEN	./libs/libcutils/tztime.c	41;"	d	file:
NATIVE_HANDLE_H_	./libs/libcutils/cutils/native_handle.h	18;"	d
NOW	./file_sync_client.c	/^static long long NOW()$/;"	f	file:
OPEN_MODE	./libs/libcutils/tztime.c	50;"	d	file:
OPEN_MODE	./libs/libcutils/tztime.c	53;"	d	file:
OS_PATH_SEPARATOR	./sysdeps.h	279;"	d
OS_PATH_SEPARATOR	./sysdeps.h	39;"	d
OS_PATH_SEPARATOR_STR	./sysdeps.h	280;"	d
OS_PATH_SEPARATOR_STR	./sysdeps.h	40;"	d
OutgoingPacket	./libs/libcutils/mq.c	/^struct OutgoingPacket {$/;"	s	file:
OutgoingPacket	./libs/libcutils/mq.c	/^typedef struct OutgoingPacket OutgoingPacket;$/;"	t	typeref:struct:OutgoingPacket	file:
OutgoingPacket::__anon10::bytes	./libs/libcutils/mq.c	/^        Buffer* bytes;$/;"	m	union:OutgoingPacket::__anon10	file:	access:public
OutgoingPacket::__anon10::socket	./libs/libcutils/mq.c	/^        int socket;$/;"	m	union:OutgoingPacket::__anon10	file:	access:public
OutgoingPacket::context	./libs/libcutils/mq.c	/^    void* context;$/;"	m	struct:OutgoingPacket	file:	access:public
OutgoingPacket::free	./libs/libcutils/mq.c	/^    void (*free)(OutgoingPacket* packet);$/;"	m	struct:OutgoingPacket	file:	access:public
OutgoingPacket::header	./libs/libcutils/mq.c	/^    Header header; $/;"	m	struct:OutgoingPacket	file:	access:public
OutgoingPacket::nextPacket	./libs/libcutils/mq.c	/^    OutgoingPacket* nextPacket;$/;"	m	struct:OutgoingPacket	file:	access:public
P	./libs/libcutils/private.h	172;"	d
P	./libs/libcutils/tzstrftime.c	42;"	d	file:
PCTS	./libs/libcutils/tztime.c	1883;"	d	file:
PEER_HISTORY	./libs/libcutils/mq.c	40;"	d	file:
POLICY_DEBUG	./libs/libcutils/sched_policy.c	52;"	d	file:
POP	./libs/libcutils/arch-x86/sse2-memset16-atom.S	/^#define POP(REG)	popl REG; CFI_POP (REG)$/;"	d
POP	./libs/libcutils/arch-x86/sse2-memset32-atom.S	/^#define POP(REG)	popl REG; CFI_POP (REG)$/;"	d
PREFIX	./sockets.c	611;"	d	file:
PRIVATE_H	./libs/libcutils/private.h	3;"	d
PROCESS_NAME_DEVICE	./libs/libcutils/process_name.c	30;"	d	file:
PROPERTY_KEY_MAX	./libs/libcutils/cutils/properties.h	31;"	d
PROPERTY_VALUE_MAX	./libs/libcutils/cutils/properties.h	32;"	d
PUSH	./libs/libcutils/arch-x86/sse2-memset16-atom.S	/^#define PUSH(REG)	pushl REG; CFI_PUSH (REG)$/;"	d
PUSH	./libs/libcutils/arch-x86/sse2-memset32-atom.S	/^#define PUSH(REG)	pushl REG; CFI_PUSH (REG)$/;"	d
PacketType	./libs/libcutils/mq.c	/^} PacketType;$/;"	t	typeref:enum:__anon6	file:
Peer	./libs/libcutils/mq.c	/^} Peer;$/;"	t	typeref:struct:__anon11	file:
PeerProxy	./libs/libcutils/mq.c	/^struct PeerProxy {$/;"	s	file:
PeerProxy	./libs/libcutils/mq.c	/^typedef struct PeerProxy PeerProxy;$/;"	t	typeref:struct:PeerProxy	file:
PeerProxy::connecting	./libs/libcutils/mq.c	/^    PeerProxy* connecting;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::connections	./libs/libcutils/mq.c	/^    Hashmap* connections;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::credentials	./libs/libcutils/mq.c	/^    Credentials credentials;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::currentPacket	./libs/libcutils/mq.c	/^    OutgoingPacket* currentPacket;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::fd	./libs/libcutils/mq.c	/^    SelectableFd* fd;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::inputBuffer	./libs/libcutils/mq.c	/^    Buffer* inputBuffer;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::inputState	./libs/libcutils/mq.c	/^    InputState inputState;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::lastPacket	./libs/libcutils/mq.c	/^    OutgoingPacket* lastPacket;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::master	./libs/libcutils/mq.c	/^    bool master;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::outgoingHeader	./libs/libcutils/mq.c	/^    Buffer outgoingHeader;$/;"	m	struct:PeerProxy	file:	access:public
PeerProxy::peer	./libs/libcutils/mq.c	/^    Peer* peer;$/;"	m	struct:PeerProxy	file:	access:public
QEMU_DEBUG	./qemu/qemu.c	31;"	d	file:
QEMU_FALLBACK	./qemu/qemu.h	104;"	d
QEMU_FALLBACK	./qemu/qemu.h	91;"	d
QEMU_FALLBACK_VOID	./qemu/qemu.h	105;"	d
QEMU_FALLBACK_VOID	./qemu/qemu.h	96;"	d
QUIT	./console.c	35;"	d	file:
QemuChannel	./qemu/qemu.h	/^} QemuChannel;$/;"	t	typeref:struct:__anon28
READING_BYTES	./libs/libcutils/mq.c	/^    READING_BYTES,$/;"	e	enum:__anon7	file:
READING_HEADER	./libs/libcutils/mq.c	/^    READING_HEADER,$/;"	e	enum:__anon7	file:
READLEN	./libs/libcutils/tztime.c	43;"	d	file:
RESTORE	./adb.h	/^    RESTORE$/;"	e	enum:__anon30
RSANUMBYTES	./libs/libmincrypt/mincrypt/rsa.h	37;"	d
RSANUMWORDS	./libs/libmincrypt/mincrypt/rsa.h	38;"	d
RSAPublicKey	./libs/libmincrypt/mincrypt/rsa.h	/^typedef struct RSAPublicKey {$/;"	s
RSAPublicKey	./libs/libmincrypt/mincrypt/rsa.h	/^} RSAPublicKey;$/;"	t	typeref:struct:RSAPublicKey
RSAPublicKey::exponent	./libs/libmincrypt/mincrypt/rsa.h	/^    int exponent;             \/* 3 or 65537 *\/$/;"	m	struct:RSAPublicKey	access:public
RSAPublicKey::len	./libs/libmincrypt/mincrypt/rsa.h	/^    int len;                  \/* Length of n[] in number of uint32_t *\/$/;"	m	struct:RSAPublicKey	access:public
RSAPublicKey::n	./libs/libmincrypt/mincrypt/rsa.h	/^    uint32_t n[RSANUMWORDS];  \/* modulus as little endian array *\/$/;"	m	struct:RSAPublicKey	access:public
RSAPublicKey::n0inv	./libs/libmincrypt/mincrypt/rsa.h	/^    uint32_t n0inv;           \/* -1 \/ n[0] mod 2^32 *\/$/;"	m	struct:RSAPublicKey	access:public
RSAPublicKey::rr	./libs/libmincrypt/mincrypt/rsa.h	/^    uint32_t rr[RSANUMWORDS]; \/* R^2 as little endian array *\/$/;"	m	struct:RSAPublicKey	access:public
RSA_e_3_verify	./libs/libmincrypt/rsa.c	/^int RSA_e_3_verify(const RSAPublicKey *key,$/;"	p	file:	signature:(const RSAPublicKey *key, const uint8_t *signature, const int len, const uint8_t *sha)
RSA_e_3_verify	./libs/libmincrypt/rsa_e_3.c	/^int RSA_e_3_verify(const RSAPublicKey *key,$/;"	f	signature:(const RSAPublicKey *key, const uint8_t *signature, const int len, const uint8_t *sha)
RSA_e_f4_verify	./libs/libmincrypt/rsa.c	/^int RSA_e_f4_verify(const RSAPublicKey* key,$/;"	p	file:	signature:(const RSAPublicKey* key, const uint8_t* signature, const int len, const uint8_t* sha)
RSA_e_f4_verify	./libs/libmincrypt/rsa_e_f4.c	/^int RSA_e_f4_verify(const RSAPublicKey* key,$/;"	f	signature:(const RSAPublicKey* key, const uint8_t* signature, const int len, const uint8_t* sha)
RSA_to_RSAPublicKey	./adb_auth_host.c	/^static int RSA_to_RSAPublicKey(RSA *rsa, RSAPublicKey *pkey)$/;"	f	file:	signature:(RSA *rsa, RSAPublicKey *pkey)
RSA_verify	./adb_auth_host.c	36;"	d	file:
RSA_verify	./adb_auth_host.c	38;"	d	file:
RSA_verify	./libs/libmincrypt/mincrypt/rsa.h	/^int RSA_verify(const RSAPublicKey *key,$/;"	p	signature:(const RSAPublicKey *key, const uint8_t* signature, const int len, const uint8_t* sha)
RSA_verify	./libs/libmincrypt/rsa.c	/^int RSA_verify(const RSAPublicKey *key,$/;"	f	signature:(const RSAPublicKey *key, const uint8_t *signature, const int len, const uint8_t *sha)
R_OK	./libs/libcutils/private.h	120;"	d
RecordStream	./libs/libcutils/cutils/record_stream.h	/^typedef struct RecordStream RecordStream;$/;"	t	typeref:struct:RecordStream
RecordStream	./libs/libcutils/record_stream.c	/^struct RecordStream {$/;"	s	file:
RecordStream::buffer	./libs/libcutils/record_stream.c	/^    unsigned char *buffer;$/;"	m	struct:RecordStream	file:	access:public
RecordStream::buffer_end	./libs/libcutils/record_stream.c	/^    unsigned char *buffer_end;$/;"	m	struct:RecordStream	file:	access:public
RecordStream::fd	./libs/libcutils/record_stream.c	/^    int fd;$/;"	m	struct:RecordStream	file:	access:public
RecordStream::maxRecordLen	./libs/libcutils/record_stream.c	/^    size_t maxRecordLen;$/;"	m	struct:RecordStream	file:	access:public
RecordStream::read_end	./libs/libcutils/record_stream.c	/^    unsigned char *read_end;$/;"	m	struct:RecordStream	file:	access:public
RecordStream::unconsumed	./libs/libcutils/record_stream.c	/^    unsigned char *unconsumed;$/;"	m	struct:RecordStream	file:	access:public
RunLoopThread	./usb_osx.c	/^void* RunLoopThread(void* unused)$/;"	f	signature:(void* unused)
SAFE_SPRINTF	./fdevent.c	334;"	d	file:
SCHED_BATCH	./libs/libcutils/sched_policy.c	49;"	d	file:
SCHED_NORMAL	./libs/libcutils/sched_policy.c	45;"	d	file:
SECSPERDAY	./libs/libcutils/tzfile.h	135;"	d
SECSPERHOUR	./libs/libcutils/tzfile.h	134;"	d
SECSPERMIN	./libs/libcutils/tzfile.h	128;"	d
SECSPERREPEAT	./libs/libcutils/private.h	357;"	d
SECSPERREPEAT_BITS	./libs/libcutils/private.h	361;"	d
SENTINEL_FILE	./commandline.c	768;"	d	file:
SHA	./libs/libmincrypt/mincrypt/sha.h	/^const uint8_t* SHA(const void* data, int len, uint8_t* digest);$/;"	p	signature:(const void* data, int len, uint8_t* digest)
SHA	./libs/libmincrypt/sha.c	/^const uint8_t* SHA(const void *data, int len, uint8_t *digest) {$/;"	f	signature:(const void *data, int len, uint8_t *digest)
SHA1_Transform	./libs/libmincrypt/sha.c	/^static void SHA1_Transform(SHA_CTX* ctx) {$/;"	f	file:	signature:(SHA_CTX* ctx)
SHA1_transform	./libs/libmincrypt/sha.c	/^static void SHA1_transform(SHA_CTX *ctx) {$/;"	f	file:	signature:(SHA_CTX *ctx)
SHARED_CACHE_SIZE	./libs/libcutils/arch-x86/cache_wrapper.S	/^#define SHARED_CACHE_SIZE       (512*1024)            \/* Atom L2 Cache *\/$/;"	d
SHARED_CACHE_SIZE_HALF	./libs/libcutils/arch-x86/cache_wrapper.S	/^#define SHARED_CACHE_SIZE_HALF  (SHARED_CACHE_SIZE \/ 2)$/;"	d
SHA_1	./libs/libcutils/cutils/dir_hash.h	/^    SHA_1,$/;"	e	enum:__anon17
SHA_CTX	./libs/libmincrypt/mincrypt/sha.h	/^typedef struct SHA_CTX {$/;"	s
SHA_CTX	./libs/libmincrypt/mincrypt/sha.h	/^} SHA_CTX;$/;"	t	typeref:struct:SHA_CTX
SHA_CTX::__anon26::b	./libs/libmincrypt/mincrypt/sha.h	/^        uint8_t b[64];$/;"	m	union:SHA_CTX::__anon26	access:public
SHA_CTX::__anon26::w	./libs/libmincrypt/mincrypt/sha.h	/^        uint32_t w[16];$/;"	m	union:SHA_CTX::__anon26	access:public
SHA_CTX::buf	./libs/libmincrypt/mincrypt/sha.h	/^    uint8_t buf[64];$/;"	m	struct:SHA_CTX	access:public
SHA_CTX::buf	./libs/libmincrypt/mincrypt/sha.h	/^    } buf;$/;"	m	struct:SHA_CTX	typeref:union:SHA_CTX::__anon26	access:public
SHA_CTX::count	./libs/libmincrypt/mincrypt/sha.h	/^    uint64_t count;$/;"	m	struct:SHA_CTX	access:public
SHA_CTX::state	./libs/libmincrypt/mincrypt/sha.h	/^    uint32_t state[5];$/;"	m	struct:SHA_CTX	access:public
SHA_DIGEST_SIZE	./libs/libmincrypt/mincrypt/sha.h	57;"	d
SHA_F1	./libs/libmincrypt/sha.c	62;"	d	file:
SHA_F1	./libs/libmincrypt/sha.c	77;"	d	file:
SHA_F1	./libs/libmincrypt/sha.c	79;"	d	file:
SHA_F1	./libs/libmincrypt/sha.c	90;"	d	file:
SHA_F2	./libs/libmincrypt/sha.c	106;"	d	file:
SHA_F2	./libs/libmincrypt/sha.c	92;"	d	file:
SHA_F3	./libs/libmincrypt/sha.c	108;"	d	file:
SHA_F3	./libs/libmincrypt/sha.c	122;"	d	file:
SHA_F4	./libs/libmincrypt/sha.c	124;"	d	file:
SHA_F4	./libs/libmincrypt/sha.c	138;"	d	file:
SHA_final	./libs/libmincrypt/mincrypt/sha.h	/^const uint8_t* SHA_final(SHA_CTX* ctx);$/;"	p	signature:(SHA_CTX* ctx)
SHA_final	./libs/libmincrypt/sha.c	/^const uint8_t *SHA_final(SHA_CTX *ctx) {$/;"	f	signature:(SHA_CTX *ctx)
SHA_final	./libs/libmincrypt/sha.c	/^const uint8_t* SHA_final(SHA_CTX* ctx) {$/;"	f	signature:(SHA_CTX* ctx)
SHA_init	./libs/libmincrypt/mincrypt/sha.h	/^void SHA_init(SHA_CTX* ctx);$/;"	p	signature:(SHA_CTX* ctx)
SHA_init	./libs/libmincrypt/sha.c	/^void SHA_init(SHA_CTX* ctx) {$/;"	f	signature:(SHA_CTX* ctx)
SHA_update	./libs/libmincrypt/mincrypt/sha.h	/^void SHA_update(SHA_CTX* ctx, const void* data, int len);$/;"	p	signature:(SHA_CTX* ctx, const void* data, int len)
SHA_update	./libs/libmincrypt/sha.c	/^void SHA_update(SHA_CTX *ctx, const void *data, int len) {$/;"	f	signature:(SHA_CTX *ctx, const void *data, int len)
SHA_update	./libs/libmincrypt/sha.c	/^void SHA_update(SHA_CTX* ctx, const void* data, int len) {$/;"	f	signature:(SHA_CTX* ctx, const void* data, int len)
SHELL_COMMAND	./services.c	335;"	d	file:
SHELL_COMMAND	./services.c	337;"	d	file:
SHELL_EXIT_NOTIFY_FD	./fdevent.c	/^int SHELL_EXIT_NOTIFY_FD = -1;$/;"	v
SLOGD	./libs/libcutils/cutils/log_bak_for_android.h	231;"	d
SLOGD_IF	./libs/libcutils/cutils/log_bak_for_android.h	235;"	d
SLOGE	./libs/libcutils/cutils/log_bak_for_android.h	273;"	d
SLOGE_IF	./libs/libcutils/cutils/log_bak_for_android.h	277;"	d
SLOGI	./libs/libcutils/cutils/log_bak_for_android.h	245;"	d
SLOGI_IF	./libs/libcutils/cutils/log_bak_for_android.h	249;"	d
SLOGV	./libs/libcutils/cutils/log_bak_for_android.h	208;"	d
SLOGV	./libs/libcutils/cutils/log_bak_for_android.h	210;"	d
SLOGV_IF	./libs/libcutils/cutils/log_bak_for_android.h	218;"	d
SLOGV_IF	./libs/libcutils/cutils/log_bak_for_android.h	220;"	d
SLOGW	./libs/libcutils/cutils/log_bak_for_android.h	259;"	d
SLOGW_IF	./libs/libcutils/cutils/log_bak_for_android.h	263;"	d
SP_AUDIO_APP	./libs/libcutils/cutils/sched_policy.h	/^    SP_AUDIO_APP  = 3,$/;"	e	enum:__anon16
SP_AUDIO_SYS	./libs/libcutils/cutils/sched_policy.h	/^    SP_AUDIO_SYS  = 4,$/;"	e	enum:__anon16
SP_BACKGROUND	./libs/libcutils/cutils/sched_policy.h	/^    SP_BACKGROUND = 0,$/;"	e	enum:__anon16
SP_CNT	./libs/libcutils/cutils/sched_policy.h	/^    SP_CNT,$/;"	e	enum:__anon16
SP_DEFAULT	./libs/libcutils/cutils/sched_policy.h	/^    SP_DEFAULT    = -1,$/;"	e	enum:__anon16
SP_FOREGROUND	./libs/libcutils/cutils/sched_policy.h	/^    SP_FOREGROUND = 1,$/;"	e	enum:__anon16
SP_MAX	./libs/libcutils/cutils/sched_policy.h	/^    SP_MAX        = SP_CNT - 1,$/;"	e	enum:__anon16
SP_SYSTEM	./libs/libcutils/cutils/sched_policy.h	/^    SP_SYSTEM     = 2,  \/\/ can't be used with set_sched_policy()$/;"	e	enum:__anon16
SP_SYSTEM_DEFAULT	./libs/libcutils/cutils/sched_policy.h	/^    SP_SYSTEM_DEFAULT = SP_FOREGROUND,$/;"	e	enum:__anon16
STR_INTERFACE_	./usb_linux_client.c	126;"	d	file:
SYNC_DATA_MAX	./file_sync_service.h	85;"	d
SYSTEM_PROPERTY_PIPE_NAME	./libs/libcutils/cutils/properties.h	55;"	d
S_ISLNK	./sysdeps.h	88;"	d
SchedPolicy	./libs/libcutils/cutils/sched_policy.h	/^} SchedPolicy;$/;"	t	typeref:enum:__anon16
SelectableFd	./libs/libcutils/cutils/selector.h	/^struct SelectableFd {$/;"	s
SelectableFd	./libs/libcutils/cutils/selector.h	/^typedef struct SelectableFd SelectableFd;$/;"	t	typeref:struct:SelectableFd
SelectableFd::beforeSelect	./libs/libcutils/cutils/selector.h	/^    void (*beforeSelect)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
SelectableFd::data	./libs/libcutils/cutils/selector.h	/^    void* data;$/;"	m	struct:SelectableFd	access:public
SelectableFd::fd	./libs/libcutils/cutils/selector.h	/^    int fd;$/;"	m	struct:SelectableFd	access:public
SelectableFd::onExcept	./libs/libcutils/cutils/selector.h	/^    void (*onExcept)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
SelectableFd::onReadable	./libs/libcutils/cutils/selector.h	/^    void (*onReadable)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
SelectableFd::onRemove	./libs/libcutils/cutils/selector.h	/^    void (*onRemove)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
SelectableFd::onWritable	./libs/libcutils/cutils/selector.h	/^    void (*onWritable)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
SelectableFd::remove	./libs/libcutils/cutils/selector.h	/^    bool remove;$/;"	m	struct:SelectableFd	access:public
SelectableFd::selector	./libs/libcutils/cutils/selector.h	/^    Selector* selector;$/;"	m	struct:SelectableFd	access:public
Selector	./libs/libcutils/cutils/selector.h	/^typedef struct Selector Selector;$/;"	t	typeref:struct:Selector
Selector	./libs/libcutils/selector.c	/^struct Selector {$/;"	s	file:
Selector::exceptFds	./libs/libcutils/selector.c	/^    fd_set exceptFds;$/;"	m	struct:Selector	file:	access:public
Selector::inSelect	./libs/libcutils/selector.c	/^    bool inSelect;$/;"	m	struct:Selector	file:	access:public
Selector::inSelectLock	./libs/libcutils/selector.c	/^    pthread_mutex_t inSelectLock; $/;"	m	struct:Selector	file:	access:public
Selector::looping	./libs/libcutils/selector.c	/^    bool looping;$/;"	m	struct:Selector	file:	access:public
Selector::maxFd	./libs/libcutils/selector.c	/^    int maxFd;$/;"	m	struct:Selector	file:	access:public
Selector::readFds	./libs/libcutils/selector.c	/^    fd_set readFds;$/;"	m	struct:Selector	file:	access:public
Selector::selectableFds	./libs/libcutils/selector.c	/^    Array* selectableFds;$/;"	m	struct:Selector	file:	access:public
Selector::wakeupFd	./libs/libcutils/selector.c	/^    SelectableFd* wakeupFd;$/;"	m	struct:Selector	file:	access:public
Selector::wakeupPipe	./libs/libcutils/selector.c	/^    int wakeupPipe[2];$/;"	m	struct:Selector	file:	access:public
Selector::writeFds	./libs/libcutils/selector.c	/^    fd_set writeFds;$/;"	m	struct:Selector	file:	access:public
SharedBytesFreer	./libs/libcutils/mq.c	/^} SharedBytesFreer;$/;"	t	typeref:struct:__anon12	file:
SocketAddress	./libs/libcutils/mq.c	/^typedef struct sockaddr SocketAddress;$/;"	t	typeref:struct:sockaddr	file:
SocketPair	./sysdeps_win32.c	/^typedef struct SocketPairRec_*  SocketPair;$/;"	t	typeref:struct:SocketPairRec_	file:
SocketPairRec	./sysdeps_win32.c	/^} SocketPairRec;$/;"	t	typeref:struct:SocketPairRec_	file:
SocketPairRec_	./sysdeps_win32.c	/^typedef struct SocketPairRec_$/;"	s	file:
SocketPairRec_::a2b_bip	./sysdeps_win32.c	/^    BipBufferRec  a2b_bip;$/;"	m	struct:SocketPairRec_	file:	access:public
SocketPairRec_::a_fd	./sysdeps_win32.c	/^    FH            a_fd;$/;"	m	struct:SocketPairRec_	file:	access:public
SocketPairRec_::b2a_bip	./sysdeps_win32.c	/^    BipBufferRec  b2a_bip;$/;"	m	struct:SocketPairRec_	file:	access:public
SocketPairRec_::used	./sysdeps_win32.c	/^    int           used;$/;"	m	struct:SocketPairRec_	file:	access:public
TAG_PACIFIER_PARAM	./libs/libcutils/qtaguid.c	/^static const char *TAG_PACIFIER_PARAM = "\/sys\/module\/xt_qtaguid\/parameters\/tag_tracking_passive";$/;"	v	file:
TEMP_FAILURE_RETRY	./framebuffer_service.c	40;"	d	file:
TEMP_FAILURE_RETRY	./libs/libcutils/cutils/fs.h	29;"	d
TEMP_FAILURE_RETRY	./qemu/qemu_pipe.h	39;"	d
THREAD_STORE_INITIALIZER	./libs/libcutils/cutils/threads.h	43;"	d
THREAD_STORE_INITIALIZER	./libs/libcutils/cutils/threads.h	57;"	d
TIME_T_MAX	./libs/libcutils/tztime.c	/^static const time_t TIME_T_MAX =$/;"	v	file:
TIME_T_MIN	./libs/libcutils/tztime.c	/^static const time_t TIME_T_MIN =$/;"	v	file:
TM_APRIL	./libs/libcutils/tzfile.h	149;"	d
TM_AUGUST	./libs/libcutils/tzfile.h	153;"	d
TM_DECEMBER	./libs/libcutils/tzfile.h	157;"	d
TM_FEBRUARY	./libs/libcutils/tzfile.h	147;"	d
TM_FRIDAY	./libs/libcutils/tzfile.h	143;"	d
TM_JANUARY	./libs/libcutils/tzfile.h	146;"	d
TM_JULY	./libs/libcutils/tzfile.h	152;"	d
TM_JUNE	./libs/libcutils/tzfile.h	151;"	d
TM_MARCH	./libs/libcutils/tzfile.h	148;"	d
TM_MAY	./libs/libcutils/tzfile.h	150;"	d
TM_MONDAY	./libs/libcutils/tzfile.h	139;"	d
TM_NOVEMBER	./libs/libcutils/tzfile.h	156;"	d
TM_OCTOBER	./libs/libcutils/tzfile.h	155;"	d
TM_SATURDAY	./libs/libcutils/tzfile.h	144;"	d
TM_SEPTEMBER	./libs/libcutils/tzfile.h	154;"	d
TM_SUNDAY	./libs/libcutils/tzfile.h	138;"	d
TM_THURSDAY	./libs/libcutils/tzfile.h	142;"	d
TM_TUESDAY	./libs/libcutils/tzfile.h	140;"	d
TM_WEDNESDAY	./libs/libcutils/tzfile.h	141;"	d
TM_YEAR_BASE	./libs/libcutils/tzfile.h	159;"	d
TOKEN_SIZE	./adb.h	169;"	d
TRACE_ADB	./adb.h	/^    TRACE_ADB = 0,   \/* 0x001 *\/$/;"	e	enum:__anon31
TRACE_AUTH	./adb.h	/^    TRACE_AUTH,$/;"	e	enum:__anon31
TRACE_JDWP	./adb.h	/^    TRACE_JDWP,      \/* 0x100 *\/$/;"	e	enum:__anon31
TRACE_PACKETS	./adb.h	/^    TRACE_PACKETS,$/;"	e	enum:__anon31
TRACE_RWX	./adb.h	/^    TRACE_RWX,       \/* 0x010 *\/$/;"	e	enum:__anon31
TRACE_SERVICES	./adb.h	/^    TRACE_SERVICES,$/;"	e	enum:__anon31
TRACE_SOCKETS	./adb.h	/^    TRACE_SOCKETS,$/;"	e	enum:__anon31
TRACE_SYNC	./adb.h	/^    TRACE_SYNC,$/;"	e	enum:__anon31
TRACE_SYSDEPS	./adb.h	/^    TRACE_SYSDEPS,$/;"	e	enum:__anon31
TRACE_TAG	./adb.c	17;"	d	file:
TRACE_TAG	./adb_auth_client.c	29;"	d	file:
TRACE_TAG	./adb_auth_host.c	48;"	d	file:
TRACE_TAG	./adb_client.c	13;"	d	file:
TRACE_TAG	./backup_service.c	22;"	d	file:
TRACE_TAG	./commandline.c	35;"	d	file:
TRACE_TAG	./file_sync_service.c	30;"	d	file:
TRACE_TAG	./jdwp_service.c	3;"	d	file:
TRACE_TAG	./remount_service.c	27;"	d	file:
TRACE_TAG	./services.c	25;"	d	file:
TRACE_TAG	./sockets.c	26;"	d	file:
TRACE_TAG	./sysdeps_win32.c	6;"	d	file:
TRACE_TAG	./transport.c	1091;"	d	file:
TRACE_TAG	./transport.c	1092;"	d	file:
TRACE_TAG	./transport.c	25;"	d	file:
TRACE_TAG	./transport_local.c	25;"	d	file:
TRACE_TAG	./transport_usb.c	23;"	d	file:
TRACE_TAG	./usb_libusb.c	37;"	d	file:
TRACE_TAG	./usb_linux.c	41;"	d	file:
TRACE_TAG	./usb_linux_client.c	31;"	d	file:
TRACE_TAG	./usb_osx.c	29;"	d	file:
TRACE_TAG	./usb_vendors.c	36;"	d	file:
TRACE_TAG	./usb_windows.c	26;"	d	file:
TRACE_TRANSPORT	./adb.h	/^    TRACE_TRANSPORT,$/;"	e	enum:__anon31
TRACE_USB	./adb.h	/^    TRACE_USB,$/;"	e	enum:__anon31
TRUE	./libs/libcutils/private.h	259;"	d
TYPE_BIT	./libs/libcutils/private.h	267;"	d
TYPE_BIT	./libs/libcutils/tzstrftime.c	60;"	d	file:
TYPE_INTEGRAL	./libs/libcutils/private.h	280;"	d
TYPE_SIGNED	./libs/libcutils/private.h	271;"	d
TYPE_SIGNED	./libs/libcutils/tzstrftime.c	64;"	d	file:
TZDEFAULT	./libs/libcutils/tzfile.h	37;"	d
TZDEFRULES	./libs/libcutils/tzfile.h	41;"	d
TZDEFRULESTRING	./libs/libcutils/tztime.c	116;"	d	file:
TZDIR	./libs/libcutils/tzfile.h	33;"	d
TZFILE_H	./libs/libcutils/tzfile.h	3;"	d
TZ_ABBR_CHAR_SET	./libs/libcutils/tztime.c	31;"	d	file:
TZ_ABBR_ERR_CHAR	./libs/libcutils/tztime.c	36;"	d	file:
TZ_ABBR_MAX_LEN	./libs/libcutils/tztime.c	27;"	d	file:
TZ_DOMAIN	./libs/libcutils/private.h	334;"	d
TZ_MAGIC	./libs/libcutils/tzfile.h	48;"	d
TZ_MAX_CHARS	./libs/libcutils/tzfile.h	120;"	d
TZ_MAX_LEAPS	./libs/libcutils/tzfile.h	125;"	d
TZ_MAX_TIMES	./libs/libcutils/tzfile.h	103;"	d
TZ_MAX_TYPES	./libs/libcutils/tzfile.h	108;"	d
TZ_MAX_TYPES	./libs/libcutils/tzfile.h	115;"	d
TZ_STRLEN_MAX	./libs/libcutils/tztime.c	238;"	d	file:
T_CBRACE	./libs/libcutils/config_utils.c	112;"	d	file:
T_DOT	./libs/libcutils/config_utils.c	110;"	d	file:
T_EOF	./libs/libcutils/config_utils.c	108;"	d	file:
T_OBRACE	./libs/libcutils/config_utils.c	111;"	d	file:
T_TEXT	./libs/libcutils/config_utils.c	109;"	d	file:
UNICODE_UPPER_LIMIT	./libs/libcutils/strdup8to16.c	36;"	d	file:
USB_ADB_PATH	./adb.h	480;"	d
USB_FFS_ADB_EP	./adb.h	483;"	d
USB_FFS_ADB_EP0	./adb.h	485;"	d
USB_FFS_ADB_IN	./adb.h	487;"	d
USB_FFS_ADB_OUT	./adb.h	486;"	d
USB_FFS_ADB_PATH	./adb.h	482;"	d
UTF16_REPLACEMENT_CHAR	./libs/libcutils/strdup8to16.c	27;"	d	file:
UTF8_SEQ_LENGTH	./libs/libcutils/strdup8to16.c	30;"	d	file:
UTF8_SHIFT_AND_MASK	./libs/libcutils/strdup8to16.c	33;"	d	file:
UnixAddress	./libs/libcutils/mq.c	/^typedef struct sockaddr_un UnixAddress;$/;"	t	typeref:struct:sockaddr_un	file:
VENDOR_COUNT_MAX	./usb_vendors.c	191;"	d	file:
VENDOR_ID_ACER	./usb_vendors.c	53;"	d	file:
VENDOR_ID_ARCHOS	./usb_vendors.c	113;"	d	file:
VENDOR_ID_ASUS	./usb_vendors.c	87;"	d	file:
VENDOR_ID_COMPAL	./usb_vendors.c	99;"	d	file:
VENDOR_ID_DELL	./usb_vendors.c	59;"	d	file:
VENDOR_ID_FOXCONN	./usb_vendors.c	57;"	d	file:
VENDOR_ID_FUJITSU	./usb_vendors.c	117;"	d	file:
VENDOR_ID_FUNAI	./usb_vendors.c	93;"	d	file:
VENDOR_ID_GARMIN_ASUS	./usb_vendors.c	63;"	d	file:
VENDOR_ID_GIGABYTE	./usb_vendors.c	95;"	d	file:
VENDOR_ID_GOOGLE	./usb_vendors.c	39;"	d	file:
VENDOR_ID_HTC	./usb_vendors.c	43;"	d	file:
VENDOR_ID_HUAWEI	./usb_vendors.c	51;"	d	file:
VENDOR_ID_INQ_MOBILE	./usb_vendors.c	123;"	d	file:
VENDOR_ID_INTEL	./usb_vendors.c	41;"	d	file:
VENDOR_ID_IRIVER	./usb_vendors.c	97;"	d	file:
VENDOR_ID_KOBO	./usb_vendors.c	131;"	d	file:
VENDOR_ID_KT_TECH	./usb_vendors.c	85;"	d	file:
VENDOR_ID_KYOCERA	./usb_vendors.c	69;"	d	file:
VENDOR_ID_K_TOUCH	./usb_vendors.c	109;"	d	file:
VENDOR_ID_LAB126	./usb_vendors.c	127;"	d	file:
VENDOR_ID_LENOVO	./usb_vendors.c	105;"	d	file:
VENDOR_ID_LENOVOMOBILE	./usb_vendors.c	103;"	d	file:
VENDOR_ID_LGE	./usb_vendors.c	49;"	d	file:
VENDOR_ID_LUMIGON	./usb_vendors.c	119;"	d	file:
VENDOR_ID_MOTOROLA	./usb_vendors.c	47;"	d	file:
VENDOR_ID_NEC	./usb_vendors.c	77;"	d	file:
VENDOR_ID_NVIDIA	./usb_vendors.c	61;"	d	file:
VENDOR_ID_OTGV	./usb_vendors.c	75;"	d	file:
VENDOR_ID_PANTECH	./usb_vendors.c	71;"	d	file:
VENDOR_ID_PEGATRON	./usb_vendors.c	111;"	d	file:
VENDOR_ID_PHILIPS	./usb_vendors.c	89;"	d	file:
VENDOR_ID_PMC	./usb_vendors.c	79;"	d	file:
VENDOR_ID_POSITIVO	./usb_vendors.c	115;"	d	file:
VENDOR_ID_QUALCOMM	./usb_vendors.c	73;"	d	file:
VENDOR_ID_QUANTA	./usb_vendors.c	121;"	d	file:
VENDOR_ID_SAMSUNG	./usb_vendors.c	45;"	d	file:
VENDOR_ID_SHARP	./usb_vendors.c	65;"	d	file:
VENDOR_ID_SK_TELESYS	./usb_vendors.c	83;"	d	file:
VENDOR_ID_SONY	./usb_vendors.c	125;"	d	file:
VENDOR_ID_SONY_ERICSSON	./usb_vendors.c	55;"	d	file:
VENDOR_ID_TELEEPOCH	./usb_vendors.c	133;"	d	file:
VENDOR_ID_TI	./usb_vendors.c	91;"	d	file:
VENDOR_ID_TOSHIBA	./usb_vendors.c	81;"	d	file:
VENDOR_ID_T_AND_A	./usb_vendors.c	101;"	d	file:
VENDOR_ID_VIZIO	./usb_vendors.c	107;"	d	file:
VENDOR_ID_YULONG_COOLPAD	./usb_vendors.c	129;"	d	file:
VENDOR_ID_ZTE	./usb_vendors.c	67;"	d	file:
WAIT_ALL_CHUNK_SIZE	./sysdeps_win32.c	1448;"	d	file:
WEXITSTATUS	./libs/libcutils/private.h	108;"	d
WHO_PGRP	./libs/libcutils/iosched_policy.c	/^    WHO_PGRP,$/;"	e	enum:__anon13	file:
WHO_PROCESS	./libs/libcutils/iosched_policy.c	/^    WHO_PROCESS = 1,$/;"	e	enum:__anon13	file:
WHO_USER	./libs/libcutils/iosched_policy.c	/^    WHO_USER,$/;"	e	enum:__anon13	file:
WIFEXITED	./libs/libcutils/private.h	105;"	d
WILDABBR	./libs/libcutils/tztime.c	101;"	d	file:
WIN32_FH_BASE	./sysdeps_win32.c	115;"	d	file:
WIN32_LEAN_AND_MEAN	./adb_auth_host.c	20;"	d	file:
WIN32_LEAN_AND_MEAN	./usb_vendors.c	22;"	d	file:
WIN32_MAX_FHS	./sysdeps_win32.c	117;"	d	file:
WRONG	./libs/libcutils/tztime.c	1572;"	d	file:
WaitForAllParam	./sysdeps_win32.c	/^typedef struct WaitForAllParam {$/;"	s	file:
WaitForAllParam	./sysdeps_win32.c	/^} WaitForAllParam;$/;"	t	typeref:struct:WaitForAllParam	file:
WaitForAllParam::first_handle_index	./sysdeps_win32.c	/^    int             first_handle_index;$/;"	m	struct:WaitForAllParam	file:	access:public
WaitForAllParam::handles	./sysdeps_win32.c	/^    HANDLE*         handles;$/;"	m	struct:WaitForAllParam	file:	access:public
WaitForAllParam::handles_count	./sysdeps_win32.c	/^    int             handles_count;$/;"	m	struct:WaitForAllParam	file:	access:public
WaitForAllParam::main_event	./sysdeps_win32.c	/^    HANDLE          main_event;$/;"	m	struct:WaitForAllParam	file:	access:public
WaitForAllParam::signaled_index	./sysdeps_win32.c	/^    LONG volatile   *signaled_index;$/;"	m	struct:WaitForAllParam	file:	access:public
WaitForAllParam::thread	./sysdeps_win32.c	/^    HANDLE          thread;$/;"	m	struct:WaitForAllParam	file:	access:public
X_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *X_fmt;$/;"	m	struct:strftime_locale	access:public
YEARSPERREPEAT	./libs/libcutils/private.h	345;"	d
YEAR_2000_NAME	./libs/libcutils/tzstrftime.c	85;"	d	file:
ZYGOTE_RETRY_COUNT	./libs/libcutils/zygote.c	36;"	d	file:
ZYGOTE_RETRY_MILLIS	./libs/libcutils/zygote.c	37;"	d	file:
ZYGOTE_SOCKET	./libs/libcutils/zygote.c	34;"	d	file:
_	./libs/libcutils/private.h	327;"	d
_	./libs/libcutils/private.h	329;"	d
_ADB_CLIENT_H_	./adb_client.h	2;"	d
_ADB_SYSDEPS_H	./sysdeps.h	21;"	d
_ADB_UTILS_H	./utils.h	17;"	d
_ANDROID_CUTILS_LOGD_H	./libs/libcutils/cutils/logd.h	18;"	d
_ANDROID_FILESYSTEM_CONFIG_H_	./private/android_filesystem_config.h	23;"	d
_CUTILS_ASHMEM_H	./libs/libcutils/cutils/ashmem.h	11;"	d
_CUTILS_KLOG_H_	./libs/libcutils/cutils/klog.h	18;"	d
_CUTILS_LIST_H_	./libs/libcutils/cutils/list.h	18;"	d
_CUTILS_LOGHACK_H	./libs/libcutils/loghack.h	22;"	d
_CUTILS_RECORD_STREAM_H	./libs/libcutils/cutils/record_stream.h	22;"	d
_CUTILS_TZTIME_H	./libs/libcutils/cutils/tztime.h	18;"	d
_EMBEDDED_RSA_H_	./libs/libmincrypt/mincrypt/rsa.h	29;"	d
_EMBEDDED_SHA_H_	./libs/libmincrypt/mincrypt/sha.h	29;"	d
_FILE_SYNC_SERVICE_H_	./file_sync_service.h	18;"	d
_GNU_SOURCE	./libs/libcutils/str_parms.c	20;"	d	file:
_LIBS_CUTILS_EVENTTAGMAP_H	./libs/libcutils/cutils/event_tag_map.h	18;"	d
_LIBS_CUTILS_LOG_H	./libs/libcutils/cutils/log.h	29;"	d
_LIBS_CUTILS_LOG_H	./libs/libcutils/cutils/log_bak_for_android.h	29;"	d
_LIBS_CUTILS_QSORT_R_COMPAT_H	./libs/libcutils/cutils/qsort_r_compat.h	24;"	d
_LIBS_CUTILS_THREADS_H	./libs/libcutils/cutils/threads.h	18;"	d
_LIBS_CUTILS_UIO_H	./libs/libcutils/cutils/uio.h	21;"	d
_LINUX_ASHMEM_H	./libs/libcutils/include/ashmem.h	13;"	d
_LOGPRINT_H	./libs/libcutils/cutils/logprint.h	18;"	d
_REALLY_INCLUDE_SYS__SYSTEM_PROPERTIES_H_	./libs/libcutils/properties.c	31;"	d	file:
_UTILS_LOGGER_H	./libs/libcutils/cutils/logger.h	11;"	d
_WIN32	./sysdeps.h	24;"	d
__ADB_AUTH_H	./adb_auth.h	18;"	d
__ADB_H	./adb.h	18;"	d
__ARRAY_H	./libs/libcutils/cutils/array.h	22;"	d
__ASHMEMIOC	./libs/libcutils/include/ashmem.h	35;"	d
__BUFFER_H	./libs/libcutils/buffer.h	22;"	d
__CUTILS_ABORT_SOCKET_H__	./libs/libcutils/cutils/abort_socket.h	53;"	d
__CUTILS_ANDROID_REBOOT_H__	./libs/libcutils/cutils/android_reboot.h	18;"	d
__CUTILS_BITOPS_H	./libs/libcutils/cutils/bitops.h	18;"	d
__CUTILS_CONFIG_UTILS_H	./libs/libcutils/cutils/config_utils.h	18;"	d
__CUTILS_CPU_INFO_H	./libs/libcutils/cutils/cpu_info.h	18;"	d
__CUTILS_DEBUGGER_H	./libs/libcutils/cutils/debugger.h	18;"	d
__CUTILS_FS_H	./libs/libcutils/cutils/fs.h	18;"	d
__CUTILS_IOSCHED_POLICY_H	./libs/libcutils/cutils/iosched_policy.h	18;"	d
__CUTILS_MISC_H	./libs/libcutils/cutils/misc.h	18;"	d
__CUTILS_MULTIUSER_H	./libs/libcutils/cutils/multiuser.h	18;"	d
__CUTILS_OPEN_MEMSTREAM_H__	./libs/libcutils/cutils/open_memstream.h	18;"	d
__CUTILS_PARTITION_WIPED_H__	./libs/libcutils/cutils/partition_utils.h	18;"	d
__CUTILS_PROPERTIES_H	./libs/libcutils/cutils/properties.h	18;"	d
__CUTILS_QTAGUID_H	./libs/libcutils/cutils/qtaguid.h	18;"	d
__CUTILS_SCHED_POLICY_H	./libs/libcutils/cutils/sched_policy.h	18;"	d
__CUTILS_SOCKETS_H	./libs/libcutils/cutils/sockets.h	18;"	d
__CUTILS_STRING16_H	./libs/libcutils/cutils/jstring.h	18;"	d
__CUTILS_STR_PARMS_H	./libs/libcutils/cutils/str_parms.h	18;"	d
__CUTILS_UEVENT_H	./libs/libcutils/cutils/uevent.h	18;"	d
__CUTILS_ZYGOTE_H	./libs/libcutils/cutils/zygote.h	18;"	d
__FDEVENT_H	./fdevent.h	18;"	d
__HASHMAP_H	./libs/libcutils/cutils/hashmap.h	22;"	d
__LOGGERIO	./libs/libcutils/cutils/logger.h	70;"	d
__MQ_H	./libs/libcutils/cutils/mq.h	22;"	d
__PROCESS_NAME_H	./libs/libcutils/cutils/process_name.h	22;"	d
__SELECTOR_H	./libs/libcutils/cutils/selector.h	24;"	d
__SOCKET_LOCAL_H	./libs/libcutils/socket_local.h	18;"	d
__TRANSPORT_H	./transport.h	18;"	d
__USB_VENDORS_H	./usb_vendors.h	18;"	d
__adb_error	./adb_client.c	/^static char __adb_error[256] = { 0 };$/;"	v	file:
__adb_serial	./adb_client.c	/^static const char* __adb_serial = NULL;$/;"	v	file:
__adb_server_port	./adb_client.c	/^static int __adb_server_port = DEFAULT_ADB_PORT;$/;"	v	file:
__adb_transport	./adb_client.c	/^static transport_type __adb_transport = kTransportAny;$/;"	v	file:
__android_log_btwrite	./libs/libcutils/cutils/logd.h	/^int __android_log_btwrite(int32_t tag, char type, const void *payload,$/;"	p	signature:(int32_t tag, char type, const void *payload, size_t len)
__android_log_buf_print	./libs/libcutils/cutils/log_bak_for_android.h	/^int __android_log_buf_print(int bufID, int prio, const char *tag, const char *fmt, ...);$/;"	p	signature:(int bufID, int prio, const char *tag, const char *fmt, ...)
__android_log_buf_write	./libs/libcutils/cutils/log_bak_for_android.h	/^int __android_log_buf_write(int bufID, int prio, const char *tag, const char *text);$/;"	p	signature:(int bufID, int prio, const char *tag, const char *text)
__android_log_bwrite	./libs/libcutils/cutils/logd.h	/^int __android_log_bwrite(int32_t tag, const void *payload, size_t len);$/;"	p	signature:(int32_t tag, const void *payload, size_t len)
__android_rest	./libs/libcutils/cutils/log_bak_for_android.h	440;"	d
__android_second	./libs/libcutils/cutils/log_bak_for_android.h	435;"	d
__anon11::deadPeerCursor	./libs/libcutils/mq.c	/^    size_t deadPeerCursor;$/;"	m	struct:__anon11	file:	access:public
__anon11::deadPeers	./libs/libcutils/mq.c	/^    pid_t deadPeers[PEER_HISTORY];$/;"	m	struct:__anon11	file:	access:public
__anon11::master	./libs/libcutils/mq.c	/^    bool master;$/;"	m	struct:__anon11	file:	access:public
__anon11::masterProxy	./libs/libcutils/mq.c	/^    PeerProxy* masterProxy;$/;"	m	struct:__anon11	file:	access:public
__anon11::mutex	./libs/libcutils/mq.c	/^    pthread_mutex_t mutex; $/;"	m	struct:__anon11	file:	access:public
__anon11::onBytes	./libs/libcutils/mq.c	/^    BytesListener* onBytes;$/;"	m	struct:__anon11	file:	access:public
__anon11::onDeath	./libs/libcutils/mq.c	/^    DeathListener* onDeath;$/;"	m	struct:__anon11	file:	access:public
__anon11::peerProxies	./libs/libcutils/mq.c	/^    Hashmap* peerProxies;$/;"	m	struct:__anon11	file:	access:public
__anon11::pid	./libs/libcutils/mq.c	/^    pid_t pid;$/;"	m	struct:__anon11	file:	access:public
__anon11::selector	./libs/libcutils/mq.c	/^    Selector* selector;$/;"	m	struct:__anon11	file:	access:public
__anon12::context	./libs/libcutils/mq.c	/^    void* context;$/;"	m	struct:__anon12	file:	access:public
__anon12::free	./libs/libcutils/mq.c	/^    void (*free)(void* context);$/;"	m	struct:__anon12	file:	access:public
__anon18::has_tls	./libs/libcutils/cutils/threads.h	/^    int               has_tls;$/;"	m	struct:__anon18	access:public
__anon18::lock	./libs/libcutils/cutils/threads.h	/^    pthread_mutex_t   lock;$/;"	m	struct:__anon18	access:public
__anon18::tls	./libs/libcutils/cutils/threads.h	/^    pthread_key_t     tls;$/;"	m	struct:__anon18	access:public
__anon19::has_tls	./libs/libcutils/cutils/threads.h	/^    int               has_tls;$/;"	m	struct:__anon19	access:public
__anon19::lock	./libs/libcutils/cutils/threads.h	/^    CRITICAL_SECTION  lock;$/;"	m	struct:__anon19	access:public
__anon19::lock_init	./libs/libcutils/cutils/threads.h	/^    int               lock_init;$/;"	m	struct:__anon19	access:public
__anon19::tls	./libs/libcutils/cutils/threads.h	/^    DWORD             tls;$/;"	m	struct:__anon19	access:public
__anon1::__anon2::expected	./libs/libcutils/buffer.h	/^        size_t expected;$/;"	m	union:__anon1::__anon2	access:public
__anon1::__anon2::remaining	./libs/libcutils/buffer.h	/^        size_t remaining;$/;"	m	union:__anon1::__anon2	access:public
__anon1::capacity	./libs/libcutils/buffer.h	/^    size_t capacity;$/;"	m	struct:__anon1	access:public
__anon1::data	./libs/libcutils/buffer.h	/^    char* data;$/;"	m	struct:__anon1	access:public
__anon1::size	./libs/libcutils/buffer.h	/^    size_t size;$/;"	m	struct:__anon1	access:public
__anon20::init	./libs/libcutils/cutils/threads.h	/^    int                init;$/;"	m	struct:__anon20	access:public
__anon20::lock	./libs/libcutils/cutils/threads.h	/^    CRITICAL_SECTION   lock[1];$/;"	m	struct:__anon20	access:public
__anon25::action	./libs/libcutils/cutils/debugger.h	/^    debugger_action_t action;$/;"	m	struct:__anon25	access:public
__anon25::tid	./libs/libcutils/cutils/debugger.h	/^    pid_t tid;$/;"	m	struct:__anon25	access:public
__anon28::device	./qemu/qemu.h	/^    char   device[32];$/;"	m	struct:__anon28	access:public
__anon28::fd	./qemu/qemu.h	/^    int    fd;$/;"	m	struct:__anon28	access:public
__anon28::is_available	./qemu/qemu.h	/^    char   is_available;$/;"	m	struct:__anon28	access:public
__anon28::is_inited	./qemu/qemu.h	/^    char   is_inited;$/;"	m	struct:__anon28	access:public
__anon28::is_qemud	./qemu/qemu.h	/^    char   is_qemud;$/;"	m	struct:__anon28	access:public
__anon28::is_qemud_old	./qemu/qemu.h	/^    char   is_qemud_old;$/;"	m	struct:__anon28	access:public
__anon28::is_tty	./qemu/qemu.h	/^    char   is_tty;$/;"	m	struct:__anon28	access:public
__anon29::tid	./sysdeps.h	/^typedef struct { unsigned  tid; }  adb_thread_t;$/;"	m	struct:__anon29	access:public
__anon32::dirlist	./file_sync_client.c	/^    copyinfo **dirlist;$/;"	m	struct:__anon32	file:	access:public
__anon32::filelist	./file_sync_client.c	/^    copyinfo **filelist;$/;"	m	struct:__anon32	file:	access:public
__anon32::lpath	./file_sync_client.c	/^    const char *lpath;$/;"	m	struct:__anon32	file:	access:public
__anon32::rpath	./file_sync_client.c	/^    const char *rpath;$/;"	m	struct:__anon32	file:	access:public
__anon33::__anon34::id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon34	access:public
__anon33::__anon34::namelen	./file_sync_service.h	/^        unsigned namelen;$/;"	m	struct:__anon33::__anon34	access:public
__anon33::__anon35::id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon35	access:public
__anon33::__anon35::mode	./file_sync_service.h	/^        unsigned mode;$/;"	m	struct:__anon33::__anon35	access:public
__anon33::__anon35::size	./file_sync_service.h	/^        unsigned size;$/;"	m	struct:__anon33::__anon35	access:public
__anon33::__anon35::time	./file_sync_service.h	/^        unsigned time;$/;"	m	struct:__anon33::__anon35	access:public
__anon33::__anon36::id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon36	access:public
__anon33::__anon36::mode	./file_sync_service.h	/^        unsigned mode;$/;"	m	struct:__anon33::__anon36	access:public
__anon33::__anon36::namelen	./file_sync_service.h	/^        unsigned namelen;$/;"	m	struct:__anon33::__anon36	access:public
__anon33::__anon36::size	./file_sync_service.h	/^        unsigned size;$/;"	m	struct:__anon33::__anon36	access:public
__anon33::__anon36::time	./file_sync_service.h	/^        unsigned time;$/;"	m	struct:__anon33::__anon36	access:public
__anon33::__anon37::id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon37	access:public
__anon33::__anon37::size	./file_sync_service.h	/^        unsigned size;$/;"	m	struct:__anon33::__anon37	access:public
__anon33::__anon38::id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon38	access:public
__anon33::__anon38::msglen	./file_sync_service.h	/^        unsigned msglen;$/;"	m	struct:__anon33::__anon38	access:public
__anon33::data	./file_sync_service.h	/^    } data;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon37	access:public
__anon33::dent	./file_sync_service.h	/^    } dent;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon36	access:public
__anon33::id	./file_sync_service.h	/^    unsigned id;$/;"	m	union:__anon33	access:public
__anon33::req	./file_sync_service.h	/^    } req;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon34	access:public
__anon33::stat	./file_sync_service.h	/^    } stat;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon35	access:public
__anon33::status	./file_sync_service.h	/^    } status;    $/;"	m	union:__anon33	typeref:struct:__anon33::__anon38	access:public
__anon39::fd	./backup_service.c	/^    int fd;$/;"	m	struct:__anon39	file:	access:public
__anon39::pid	./backup_service.c	/^    pid_t pid;$/;"	m	struct:__anon39	file:	access:public
__anon3::data	./libs/libcutils/config_utils.c	/^    char *data;$/;"	m	struct:__anon3	file:	access:public
__anon3::len	./libs/libcutils/config_utils.c	/^    int len;$/;"	m	struct:__anon3	file:	access:public
__anon3::next	./libs/libcutils/config_utils.c	/^    char next;$/;"	m	struct:__anon3	file:	access:public
__anon3::text	./libs/libcutils/config_utils.c	/^    char *text;$/;"	m	struct:__anon3	file:	access:public
__anon40::__anon41::intf	./usb_linux_client.c	/^        struct usb_interface_descriptor intf;$/;"	m	struct:__anon40::__anon41	typeref:struct:__anon40::__anon41::usb_interface_descriptor	file:	access:public
__anon40::__anon41::sink	./usb_linux_client.c	/^        struct usb_endpoint_descriptor_no_audio sink;$/;"	m	struct:__anon40::__anon41	typeref:struct:__anon40::__anon41::usb_endpoint_descriptor_no_audio	file:	access:public
__anon40::__anon41::source	./usb_linux_client.c	/^        struct usb_endpoint_descriptor_no_audio source;$/;"	m	struct:__anon40::__anon41	typeref:struct:__anon40::__anon41::usb_endpoint_descriptor_no_audio	file:	access:public
__anon40::fs_descs	./usb_linux_client.c	/^    } __attribute__((packed)) fs_descs, hs_descs;$/;"	m	struct:__anon40	typeref:struct:__anon40::__anon41	file:	access:public
__anon40::header	./usb_linux_client.c	/^    struct usb_functionfs_descs_head header;$/;"	m	struct:__anon40	typeref:struct:__anon40::usb_functionfs_descs_head	file:	access:public
__anon40::hs_descs	./usb_linux_client.c	/^    } __attribute__((packed)) fs_descs, hs_descs;$/;"	m	struct:__anon40	typeref:struct:__anon40::__anon41	file:	access:public
__anon42::__anon43::code	./usb_linux_client.c	/^        __le16 code;$/;"	m	struct:__anon42::__anon43	file:	access:public
__anon42::__anon43::str1	./usb_linux_client.c	/^        const char str1[sizeof(STR_INTERFACE_)];$/;"	m	struct:__anon42::__anon43	file:	access:public
__anon42::header	./usb_linux_client.c	/^    struct usb_functionfs_strings_head header;$/;"	m	struct:__anon42	typeref:struct:__anon42::usb_functionfs_strings_head	file:	access:public
__anon42::lang0	./usb_linux_client.c	/^    } __attribute__((packed)) lang0;$/;"	m	struct:__anon42	typeref:struct:__anon42::__anon43	file:	access:public
__anon44::fde	./jdwp_service.c	/^    fdevent*  fde;$/;"	m	struct:__anon44	file:	access:public
__anon44::listen_socket	./jdwp_service.c	/^    int       listen_socket;$/;"	m	struct:__anon44	file:	access:public
__anon45::pass	./jdwp_service.c	/^    int      pass;$/;"	m	struct:__anon45	file:	access:public
__anon45::socket	./jdwp_service.c	/^    asocket  socket;$/;"	m	struct:__anon45	file:	access:public
__anon4::allocSize	./libs/libcutils/open_memstream.c	/^    size_t      allocSize;  \/* size of buffer *\/$/;"	m	struct:__anon4	file:	access:public
__anon4::bufp	./libs/libcutils/open_memstream.c	/^    char**      bufp;       \/* pointer to buffer pointer *\/$/;"	m	struct:__anon4	file:	access:public
__anon4::eof	./libs/libcutils/open_memstream.c	/^    size_t      eof;        \/* furthest point we've written to *\/$/;"	m	struct:__anon4	file:	access:public
__anon4::offset	./libs/libcutils/open_memstream.c	/^    size_t      offset;     \/* current write offset *\/$/;"	m	struct:__anon4	file:	access:public
__anon4::saved	./libs/libcutils/open_memstream.c	/^    char        saved;      \/* required by NUL handling *\/$/;"	m	struct:__anon4	file:	access:public
__anon4::sizep	./libs/libcutils/open_memstream.c	/^    size_t*     sizep;      \/* pointer to eof *\/$/;"	m	struct:__anon4	file:	access:public
__anon5::gid	./libs/libcutils/mq.c	/^    gid_t gid;$/;"	m	struct:__anon5	file:	access:public
__anon5::pid	./libs/libcutils/mq.c	/^    pid_t pid;$/;"	m	struct:__anon5	file:	access:public
__anon5::uid	./libs/libcutils/mq.c	/^    uid_t uid;$/;"	m	struct:__anon5	file:	access:public
__anon8::__anon9::credentials	./libs/libcutils/mq.c	/^        Credentials credentials; $/;"	m	union:__anon8::__anon9	file:	access:public
__anon8::__anon9::size	./libs/libcutils/mq.c	/^        size_t size;$/;"	m	union:__anon8::__anon9	file:	access:public
__anon8::type	./libs/libcutils/mq.c	/^    PacketType type;$/;"	m	struct:__anon8	file:	access:public
__initialize	./libs/libcutils/sched_policy.c	/^static void __initialize(void) {$/;"	f	file:	signature:(void)
__pad	./libs/libcutils/cutils/logger.h	/^    uint16_t    __pad;  \/* no matter what, we get 2 bytes of padding *\/$/;"	m	struct:logger_entry	access:public
__swap_uint32	./file_sync_service.h	/^static inline unsigned __swap_uint32(unsigned x) $/;"	f	signature:(unsigned x)
__sys_supports_schedgroups	./libs/libcutils/sched_policy.c	/^static int __sys_supports_schedgroups = -1;$/;"	v	file:
_adb_connect	./adb_client.c	/^int _adb_connect(const char *service)$/;"	f	signature:(const char *service)
_adb_connect	./adb_client.h	/^int _adb_connect(const char *service);$/;"	p	signature:(const char *service)
_add	./libs/libcutils/tzstrftime.c	/^_add(str, pt, ptlim, modifier)$/;"	f	file:
_add	./libs/libcutils/tzstrftime.c	/^static char *	_add P((const char *, char *, const char *, int));$/;"	p	file:	signature:(const char *, char *, const char *, int)
_cleanup_winsock	./sysdeps_win32.c	/^_cleanup_winsock( void )$/;"	f	file:	signature:( void )
_config_create	./libs/libcutils/config_utils.c	/^static cnode* _config_create(cnode *root, const char *name)$/;"	f	file:	signature:(cnode *root, const char *name)
_conv	./libs/libcutils/tzstrftime.c	/^_conv(n, format, pt, ptlim)$/;"	f	file:
_conv	./libs/libcutils/tzstrftime.c	/^static char *	_conv P((int, const char *, char *, const char *));$/;"	p	file:	signature:(int, const char *, char *, const char *)
_event_file_peek	./sysdeps_win32.c	/^static int  _event_file_peek( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_file_prepare	./sysdeps_win32.c	/^static void  _event_file_prepare( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socket_check	./sysdeps_win32.c	/^static int  _event_socket_check( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socket_peek	./sysdeps_win32.c	/^static int  _event_socket_peek( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socket_prepare	./sysdeps_win32.c	/^static void  _event_socket_prepare( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socket_start	./sysdeps_win32.c	/^static int _event_socket_start( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socket_stop	./sysdeps_win32.c	/^static void _event_socket_stop( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socket_verify	./sysdeps_win32.c	/^static void  _event_socket_verify( EventHook  hook, WSANETWORKEVENTS*  evts )$/;"	f	file:	signature:( EventHook hook, WSANETWORKEVENTS* evts )
_event_socketpair_peek	./sysdeps_win32.c	/^static int  _event_socketpair_peek( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socketpair_prepare	./sysdeps_win32.c	/^static void  _event_socketpair_prepare( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_event_socketpair_start	./sysdeps_win32.c	/^ static int  _event_socketpair_start( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
_fh_alloc	./sysdeps_win32.c	/^_fh_alloc( FHClass  clazz )$/;"	f	file:	signature:( FHClass clazz )
_fh_close	./sysdeps_win32.c	/^    int  (*_fh_close)( FH  f );$/;"	m	struct:FHClassRec_	file:	access:public
_fh_close	./sysdeps_win32.c	/^_fh_close( FH   f )$/;"	f	file:	signature:( FH f )
_fh_file_class	./sysdeps_win32.c	/^static const FHClassRec   _fh_file_class;$/;"	v	file:
_fh_file_class	./sysdeps_win32.c	/^static const FHClassRec  _fh_file_class =$/;"	v	file:
_fh_file_close	./sysdeps_win32.c	/^_fh_file_close( FH  f )$/;"	f	file:	signature:( FH f )
_fh_file_hook	./sysdeps_win32.c	/^static void  _fh_file_hook( FH  f, int  event, EventHook  eventhook );  \/* forward *\/$/;"	p	file:	signature:( FH f, int event, EventHook eventhook )
_fh_file_hook	./sysdeps_win32.c	/^static void  _fh_file_hook( FH  f, int  events, EventHook  hook )$/;"	f	file:	signature:( FH f, int events, EventHook hook )
_fh_file_init	./sysdeps_win32.c	/^_fh_file_init( FH  f )$/;"	f	file:	signature:( FH f )
_fh_file_lseek	./sysdeps_win32.c	/^_fh_file_lseek( FH  f, int  pos, int  origin )$/;"	f	file:	signature:( FH f, int pos, int origin )
_fh_file_read	./sysdeps_win32.c	/^_fh_file_read( FH  f,  void*  buf, int   len )$/;"	f	file:	signature:( FH f, void* buf, int len )
_fh_file_write	./sysdeps_win32.c	/^_fh_file_write( FH  f,  const void*  buf, int   len )$/;"	f	file:	signature:( FH f, const void* buf, int len )
_fh_from_int	./sysdeps_win32.c	/^_fh_from_int( int   fd )$/;"	f	file:	signature:( int fd )
_fh_hook	./sysdeps_win32.c	/^    void (*_fh_hook) ( FH  f, int  events, EventHook  hook );$/;"	m	struct:FHClassRec_	file:	access:public
_fh_init	./sysdeps_win32.c	/^    void (*_fh_init) ( FH  f );$/;"	m	struct:FHClassRec_	file:	access:public
_fh_lseek	./sysdeps_win32.c	/^    int  (*_fh_lseek)( FH  f, int  pos, int  origin );$/;"	m	struct:FHClassRec_	file:	access:public
_fh_read	./sysdeps_win32.c	/^    int  (*_fh_read) ( FH  f, void*  buf, int  len );$/;"	m	struct:FHClassRec_	file:	access:public
_fh_socket_class	./sysdeps_win32.c	/^static const FHClassRec   _fh_socket_class;$/;"	v	file:
_fh_socket_class	./sysdeps_win32.c	/^static const FHClassRec  _fh_socket_class =$/;"	v	file:
_fh_socket_close	./sysdeps_win32.c	/^_fh_socket_close( FH  f )$/;"	f	file:	signature:( FH f )
_fh_socket_hook	./sysdeps_win32.c	/^static void  _fh_socket_hook( FH  f, int  event, EventHook  hook );  \/* forward *\/$/;"	p	file:	signature:( FH f, int event, EventHook hook )
_fh_socket_hook	./sysdeps_win32.c	/^static void  _fh_socket_hook( FH  f, int  events, EventHook  hook )$/;"	f	file:	signature:( FH f, int events, EventHook hook )
_fh_socket_init	./sysdeps_win32.c	/^_fh_socket_init( FH  f )$/;"	f	file:	signature:( FH f )
_fh_socket_lseek	./sysdeps_win32.c	/^_fh_socket_lseek( FH  f, int pos, int origin )$/;"	f	file:	signature:( FH f, int pos, int origin )
_fh_socket_read	./sysdeps_win32.c	/^_fh_socket_read( FH  f, void*  buf, int  len )$/;"	f	file:	signature:( FH f, void* buf, int len )
_fh_socket_write	./sysdeps_win32.c	/^_fh_socket_write( FH  f, const void*  buf, int  len )$/;"	f	file:	signature:( FH f, const void* buf, int len )
_fh_socketpair_class	./sysdeps_win32.c	/^static const FHClassRec  _fh_socketpair_class =$/;"	v	file:
_fh_socketpair_close	./sysdeps_win32.c	/^_fh_socketpair_close( FH  f )$/;"	f	file:	signature:( FH f )
_fh_socketpair_hook	./sysdeps_win32.c	/^static void  _fh_socketpair_hook( FH  f, int  event, EventHook  hook );  \/* forward *\/$/;"	p	file:	signature:( FH f, int event, EventHook hook )
_fh_socketpair_hook	./sysdeps_win32.c	/^static void  _fh_socketpair_hook( FH  fh, int  events, EventHook  hook )$/;"	f	file:	signature:( FH fh, int events, EventHook hook )
_fh_socketpair_init	./sysdeps_win32.c	/^void _fh_socketpair_init( FH  f )$/;"	f	signature:( FH f )
_fh_socketpair_lseek	./sysdeps_win32.c	/^_fh_socketpair_lseek( FH  f, int pos, int  origin )$/;"	f	file:	signature:( FH f, int pos, int origin )
_fh_socketpair_read	./sysdeps_win32.c	/^_fh_socketpair_read( FH  f, void* buf, int  len )$/;"	f	file:	signature:( FH f, void* buf, int len )
_fh_socketpair_write	./sysdeps_win32.c	/^_fh_socketpair_write( FH  f, const void*  buf, int  len )$/;"	f	file:	signature:( FH f, const void* buf, int len )
_fh_to_int	./sysdeps_win32.c	/^_fh_to_int( FH  f )$/;"	f	file:	signature:( FH f )
_fh_write	./sysdeps_win32.c	/^    int  (*_fh_write)( FH  f, const void*  buf, int  len );$/;"	m	struct:FHClassRec_	file:	access:public
_fmt	./libs/libcutils/tzstrftime.c	/^_fmt(format, t, pt, ptlim, warnp, Locale)$/;"	f	file:
_fmt	./libs/libcutils/tzstrftime.c	/^static char *	_fmt P((const char *, const struct tm *, char *, const char *,$/;"	p	file:	signature:(const char *, const struct tm *, char *, const char *, int *, const struct strftime_locale *Locale)
_free_hooks	./sysdeps_win32.c	/^static EventHook  _free_hooks;$/;"	v	file:
_in_waiter_thread	./sysdeps_win32.c	/^_in_waiter_thread(void*  arg)$/;"	f	file:	signature:(void* arg)
_init_winsock	./sysdeps_win32.c	/^_init_winsock( void )$/;"	f	file:	signature:( void )
_jdwp_control	./jdwp_service.c	/^static JdwpControl   _jdwp_control;$/;"	v	file:
_jdwp_list	./jdwp_service.c	/^static JdwpProcess  _jdwp_list;$/;"	v	file:
_jdwp_trackers_list	./jdwp_service.c	/^static JdwpTracker   _jdwp_trackers_list;$/;"	v	file:
_lex	./libs/libcutils/config_utils.c	/^static int _lex(cstate *cs, int value)$/;"	f	file:	signature:(cstate *cs, int value)
_libs_hardware_qemu_h	./qemu/qemu.h	17;"	d
_loc	./libs/libcutils/tzstrftime.c	/^_loc P((void))$/;"	f	file:	signature:(void)
_policy	./libs/libcutils/sched_policy.c	/^static inline SchedPolicy _policy(SchedPolicy p)$/;"	f	file:	signature:(SchedPolicy p)
_socket_set_errno	./sysdeps_win32.c	/^_socket_set_errno( void )$/;"	f	file:	signature:( void )
_socket_wanted_to_flags	./sysdeps_win32.c	/^static int  _socket_wanted_to_flags( int  wanted )$/;"	f	file:	signature:( int wanted )
_wait_for_all	./sysdeps_win32.c	/^_wait_for_all(HANDLE* handles, int handles_count)$/;"	f	file:	signature:(HANDLE* handles, int handles_count)
_win32_fh_count	./sysdeps_win32.c	/^static  int          _win32_fh_count;$/;"	v	file:
_win32_fhs	./sysdeps_win32.c	/^static  FHRec        _win32_fhs[ WIN32_MAX_FHS ];$/;"	v	file:
_win32_lock	./sysdeps_win32.c	/^static adb_mutex_t   _win32_lock;$/;"	v	file:
_winsock_init	./sysdeps_win32.c	/^static int  _winsock_init;$/;"	v	file:
_yconv	./libs/libcutils/tzstrftime.c	/^_yconv(a, b, convert_top, convert_yy, pt, ptlim, modifier)$/;"	f	file:
_yconv	./libs/libcutils/tzstrftime.c	/^static char *	_yconv P((int, int, int, int, char *, const char *, int));$/;"	p	file:	signature:(int, int, int, int, char *, const char *, int)
a2b_bip	./sysdeps_win32.c	/^    BipBufferRec  a2b_bip;$/;"	m	struct:SocketPairRec_	file:	access:public
a_end	./sysdeps_win32.c	/^    int                a_end;$/;"	m	struct:BipBufferRec_	file:	access:public
a_fd	./sysdeps_win32.c	/^    FH            a_fd;$/;"	m	struct:SocketPairRec_	file:	access:public
a_start	./sysdeps_win32.c	/^    int                a_start;$/;"	m	struct:BipBufferRec_	file:	access:public
abort_fd	./libs/libcutils/cutils/abort_socket.h	/^    int abort_fd[2];  \/* pipe used to abort *\/$/;"	m	struct:asocket	access:public
accept	./sysdeps.h	216;"	d
accept	./sysdeps.h	217;"	d
accept	./sysdeps.h	411;"	d
accept	./sysdeps.h	412;"	d
accept	./sysdeps_win32.c	751;"	d	file:
acquire_one_transport	./adb.h	/^atransport *acquire_one_transport(int state, transport_type ttype, const char* serial, char **error_out);$/;"	p	signature:(int state, transport_type ttype, const char* serial, char **error_out)
acquire_one_transport	./transport.c	/^atransport *acquire_one_transport(int state, transport_type ttype, const char* serial, char** error_out)$/;"	f	signature:(int state, transport_type ttype, const char* serial, char** error_out)
action	./libs/libcutils/cutils/debugger.h	/^    debugger_action_t action;$/;"	m	struct:__anon25	access:public
action	./transport.c	/^    int         action;$/;"	m	struct:tmsg	file:	access:public
adb_auth_confirm_key	./adb_auth.h	/^static inline void adb_auth_confirm_key(unsigned char *data, size_t len, atransport *t) { }$/;"	f	signature:(unsigned char *data, size_t len, atransport *t)
adb_auth_confirm_key	./adb_auth.h	/^void adb_auth_confirm_key(unsigned char *data, size_t len, atransport *t);$/;"	p	signature:(unsigned char *data, size_t len, atransport *t)
adb_auth_confirm_key	./adb_auth_client.c	/^void adb_auth_confirm_key(unsigned char *key, size_t len, atransport *t)$/;"	f	signature:(unsigned char *key, size_t len, atransport *t)
adb_auth_event	./adb_auth_client.c	/^static void adb_auth_event(int fd, unsigned events, void *data)$/;"	f	file:	signature:(int fd, unsigned events, void *data)
adb_auth_generate_token	./adb_auth.h	/^int adb_auth_generate_token(void *token, size_t token_size);$/;"	p	signature:(void *token, size_t token_size)
adb_auth_generate_token	./adb_auth.h	/^static inline int adb_auth_generate_token(void *token, size_t token_size) { return 0; }$/;"	f	signature:(void *token, size_t token_size)
adb_auth_generate_token	./adb_auth_client.c	/^int adb_auth_generate_token(void *token, size_t token_size)$/;"	f	signature:(void *token, size_t token_size)
adb_auth_get_userkey	./adb_auth.h	/^int adb_auth_get_userkey(unsigned char *data, size_t len);$/;"	p	signature:(unsigned char *data, size_t len)
adb_auth_get_userkey	./adb_auth.h	/^static inline int adb_auth_get_userkey(unsigned char *data, size_t len) { return 0; }$/;"	f	signature:(unsigned char *data, size_t len)
adb_auth_get_userkey	./adb_auth_host.c	/^int adb_auth_get_userkey(unsigned char *data, size_t len)$/;"	f	signature:(unsigned char *data, size_t len)
adb_auth_init	./adb_auth.h	/^void adb_auth_init(void);$/;"	p	signature:(void)
adb_auth_init	./adb_auth_client.c	/^void adb_auth_init(void)$/;"	f	signature:(void)
adb_auth_init	./adb_auth_host.c	/^void adb_auth_init(void)$/;"	f	signature:(void)
adb_auth_listener	./adb_auth_client.c	/^static void adb_auth_listener(int fd, unsigned events, void *data)$/;"	f	file:	signature:(int fd, unsigned events, void *data)
adb_auth_nextkey	./adb_auth.h	/^static inline void *adb_auth_nextkey(void *current) { return NULL; }$/;"	f	signature:(void *current)
adb_auth_nextkey	./adb_auth.h	/^void *adb_auth_nextkey(void *current);$/;"	p	signature:(void *current)
adb_auth_nextkey	./adb_auth_host.c	/^void *adb_auth_nextkey(void *current)$/;"	f	signature:(void *current)
adb_auth_reload_keys	./adb_auth.h	/^static inline void adb_auth_reload_keys(void) { }$/;"	f	signature:(void)
adb_auth_reload_keys	./adb_auth.h	/^void adb_auth_reload_keys(void);$/;"	p	signature:(void)
adb_auth_reload_keys	./adb_auth_client.c	/^void adb_auth_reload_keys(void)$/;"	f	signature:(void)
adb_auth_sign	./adb_auth.h	/^int adb_auth_sign(void *key, void *token, size_t token_size, void *sig);$/;"	p	signature:(void *key, void *token, size_t token_size, void *sig)
adb_auth_sign	./adb_auth.h	/^static inline int adb_auth_sign(void* key, void *token, size_t token_size, void *sig) { return 0; }$/;"	f	signature:(void* key, void *token, size_t token_size, void *sig)
adb_auth_sign	./adb_auth_host.c	/^int adb_auth_sign(void *node, void *token, size_t token_size, void *sig)$/;"	f	signature:(void *node, void *token, size_t token_size, void *sig)
adb_auth_verified	./adb.c	/^void adb_auth_verified(atransport *t)$/;"	f	signature:(atransport *t)
adb_auth_verified	./adb_auth.h	/^void adb_auth_verified(atransport *t);$/;"	p	signature:(atransport *t)
adb_auth_verify	./adb_auth.h	/^int adb_auth_verify(void *token, void *sig, int siglen);$/;"	p	signature:(void *token, void *sig, int siglen)
adb_auth_verify	./adb_auth.h	/^static inline int adb_auth_verify(void *token, void *sig, int siglen) { return 0; }$/;"	f	signature:(void *token, void *sig, int siglen)
adb_auth_verify	./adb_auth_client.c	/^int adb_auth_verify(void *token, void *sig, int siglen)$/;"	f	signature:(void *token, void *sig, int siglen)
adb_cleanup	./adb.c	/^static void adb_cleanup(void)$/;"	f	file:	signature:(void)
adb_close	./sysdeps.h	/^extern int  adb_close(int  fd);$/;"	p	signature:(int fd)
adb_close	./sysdeps.h	/^static __inline__ int  adb_close(int fd)$/;"	f	signature:(int fd)
adb_close	./sysdeps_win32.c	/^int  adb_close(int  fd)$/;"	f	signature:(int fd)
adb_command	./adb_client.c	/^int adb_command(const char *service)$/;"	f	signature:(const char *service)
adb_command	./adb_client.h	/^int adb_command(const char *service);$/;"	p	signature:(const char *service)
adb_commandline	./adb.h	/^int adb_commandline(int argc, char **argv);$/;"	p	signature:(int argc, char **argv)
adb_commandline	./commandline.c	/^int adb_commandline(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
adb_cond_broadcast	./sysdeps.h	296;"	d
adb_cond_destroy	./sysdeps.h	298;"	d
adb_cond_init	./sysdeps.h	294;"	d
adb_cond_signal	./sysdeps.h	297;"	d
adb_cond_t	./sysdeps.h	293;"	d
adb_cond_wait	./sysdeps.h	295;"	d
adb_connect	./adb_client.c	/^int adb_connect(const char *service)$/;"	f	signature:(const char *service)
adb_connect	./adb_client.h	/^int adb_connect(const char *service);$/;"	p	signature:(const char *service)
adb_creat	./sysdeps.h	/^extern int  adb_creat(const char*  path, int  mode);$/;"	p	signature:(const char* path, int mode)
adb_creat	./sysdeps.h	/^static __inline__  int  adb_creat(const char*  path, int  mode)$/;"	f	signature:(const char* path, int mode)
adb_creat	./sysdeps_win32.c	/^int  adb_creat(const char*  path, int  mode)$/;"	f	signature:(const char* path, int mode)
adb_debug_qemu	./adb.c	/^int   adb_debug_qemu = -1;$/;"	v
adb_device_banner	./adb.c	/^static const char *adb_device_banner = "device";$/;"	v	file:
adb_dirstart	./sysdeps.h	/^static __inline__  char*  adb_dirstart( const char*  path )$/;"	f	signature:( const char* path )
adb_dirstart	./sysdeps.h	/^static __inline__ char*  adb_dirstart(const char*  path)$/;"	f	signature:(const char* path)
adb_dirstop	./sysdeps.h	/^static __inline__  char*  adb_dirstop( const char*  path )$/;"	f	signature:( const char* path )
adb_dirstop	./sysdeps.h	/^static __inline__ char*  adb_dirstop(const char*  path)$/;"	f	signature:(const char* path)
adb_download	./commandline.c	/^int adb_download(const char *service, const char *fn, unsigned progress)$/;"	f	signature:(const char *service, const char *fn, unsigned progress)
adb_download_buffer	./commandline.c	/^int adb_download_buffer(const char *service, const void* data, int sz,$/;"	f	signature:(const char *service, const void* data, int sz, unsigned progress)
adb_error	./adb_client.c	/^const char *adb_error(void)$/;"	f	signature:(void)
adb_error	./adb_client.h	/^const char *adb_error(void);$/;"	p	signature:(void)
adb_get_emulator_console_port	./adb_client.c	/^int  adb_get_emulator_console_port(void)$/;"	f	signature:(void)
adb_get_emulator_console_port	./adb_client.h	/^int  adb_get_emulator_console_port(void);$/;"	p	signature:(void)
adb_interface	./usb_windows.c	/^  ADBAPIHANDLE  adb_interface;$/;"	m	struct:usb_handle	file:	access:public
adb_is_absolute_host_path	./sysdeps.h	/^static __inline__  int  adb_is_absolute_host_path( const char*  path )$/;"	f	signature:( const char* path )
adb_lseek	./sysdeps.h	/^extern int  adb_lseek(int  fd, int  pos, int  where);$/;"	p	signature:(int fd, int pos, int where)
adb_lseek	./sysdeps.h	/^static __inline__ int   adb_lseek(int  fd, int  pos, int  where)$/;"	f	signature:(int fd, int pos, int where)
adb_lseek	./sysdeps_win32.c	/^int  adb_lseek(int  fd, int  pos, int  where)$/;"	f	signature:(int fd, int pos, int where)
adb_main	./adb.c	/^int adb_main(int is_daemon, int server_port)$/;"	f	signature:(int is_daemon, int server_port)
adb_main	./adb.h	/^int adb_main(int is_daemon, int server_port);$/;"	p	signature:(int is_daemon, int server_port)
adb_mkdir	./sysdeps.h	/^static __inline__ int  adb_mkdir(const char*  path, int mode)$/;"	f	signature:(const char* path, int mode)
adb_mutex_destroy	./sysdeps.h	289;"	d
adb_mutex_init	./sysdeps.h	286;"	d
adb_mutex_lock	./sysdeps.h	/^static __inline__ void adb_mutex_lock( adb_mutex_t*  lock )$/;"	f	signature:( adb_mutex_t* lock )
adb_mutex_lock	./sysdeps.h	287;"	d
adb_mutex_t	./sysdeps.h	/^typedef  pthread_mutex_t          adb_mutex_t;$/;"	t
adb_mutex_t	./sysdeps.h	/^typedef CRITICAL_SECTION          adb_mutex_t;$/;"	t
adb_mutex_unlock	./sysdeps.h	/^static __inline__ void  adb_mutex_unlock( adb_mutex_t*  lock )$/;"	f	signature:( adb_mutex_t* lock )
adb_mutex_unlock	./sysdeps.h	288;"	d
adb_open	./sysdeps.h	/^extern int  adb_open(const char*  path, int  options);$/;"	p	signature:(const char* path, int options)
adb_open	./sysdeps.h	/^static __inline__ int  adb_open( const char*  pathname, int  options )$/;"	f	signature:( const char* pathname, int options )
adb_open	./sysdeps_win32.c	/^int  adb_open(const char*  path, int  options)$/;"	f	signature:(const char* path, int options)
adb_open_mode	./sysdeps.h	/^static __inline__ int  adb_open_mode( const char*  pathname, int  options, int  mode )$/;"	f	signature:( const char* pathname, int options, int mode )
adb_open_mode	./sysdeps.h	/^static __inline__ int  adb_open_mode(const char* path, int options, int mode)$/;"	f	signature:(const char* path, int options, int mode)
adb_port	./adb.h	/^    int adb_port; \/\/ Use for emulators (local transport)$/;"	m	struct:atransport	access:public
adb_private_key	./adb_auth_host.c	/^struct adb_private_key {$/;"	s	file:
adb_private_key::node	./adb_auth_host.c	/^    struct listnode node;$/;"	m	struct:adb_private_key	typeref:struct:adb_private_key::listnode	file:	access:public
adb_private_key::rsa	./adb_auth_host.c	/^    RSA *rsa;$/;"	m	struct:adb_private_key	file:	access:public
adb_public_key	./adb_auth_client.c	/^struct adb_public_key {$/;"	s	file:
adb_public_key::key	./adb_auth_client.c	/^    RSAPublicKey key;$/;"	m	struct:adb_public_key	file:	access:public
adb_public_key::node	./adb_auth_client.c	/^    struct listnode node;$/;"	m	struct:adb_public_key	typeref:struct:adb_public_key::listnode	file:	access:public
adb_qemu_trace	./adb.c	/^void adb_qemu_trace(const char* fmt, ...)$/;"	f	signature:(const char* fmt, ...)
adb_qemu_trace	./adb.h	/^void adb_qemu_trace(const char* fmt, ...);$/;"	p	signature:(const char* fmt, ...)
adb_qemu_trace_init	./adb.c	/^static int adb_qemu_trace_init(void)$/;"	f	file:	signature:(void)
adb_query	./adb_client.c	/^char *adb_query(const char *service)$/;"	f	signature:(const char *service)
adb_query	./adb_client.h	/^char *adb_query(const char *service);$/;"	p	signature:(const char *service)
adb_read	./sysdeps.h	/^extern int  adb_read(int  fd, void* buf, int len);$/;"	p	signature:(int fd, void* buf, int len)
adb_read	./sysdeps.h	/^static __inline__  int  adb_read(int  fd, void*  buf, size_t  len)$/;"	f	signature:(int fd, void* buf, size_t len)
adb_read	./sysdeps_win32.c	/^int  adb_read(int  fd, void* buf, int len)$/;"	f	signature:(int fd, void* buf, int len)
adb_read_pipe	./usb_windows.c	/^  ADBAPIHANDLE  adb_read_pipe;$/;"	m	struct:usb_handle	file:	access:public
adb_send_emulator_command	./adb_client.h	/^int  adb_send_emulator_command(int  argc, char**  argv);$/;"	p	signature:(int argc, char** argv)
adb_send_emulator_command	./console.c	/^int  adb_send_emulator_command(int  argc, char**  argv)$/;"	f	signature:(int argc, char** argv)
adb_set_tcp_specifics	./adb_client.c	/^void adb_set_tcp_specifics(int server_port)$/;"	f	signature:(int server_port)
adb_set_tcp_specifics	./adb_client.h	/^void adb_set_tcp_specifics(int server_port);$/;"	p	signature:(int server_port)
adb_set_transport	./adb_client.c	/^void adb_set_transport(transport_type type, const char* serial)$/;"	f	signature:(transport_type type, const char* serial)
adb_set_transport	./adb_client.h	/^void adb_set_transport(transport_type type, const char* serial);$/;"	p	signature:(transport_type type, const char* serial)
adb_shutdown	./sysdeps.h	/^extern int  adb_shutdown(int  fd);$/;"	p	signature:(int fd)
adb_shutdown	./sysdeps.h	/^static __inline__ int  adb_shutdown(int fd)$/;"	f	signature:(int fd)
adb_shutdown	./sysdeps_win32.c	/^int  adb_shutdown(int  fd)$/;"	f	signature:(int fd)
adb_sleep_ms	./sysdeps.h	/^static __inline__ void  adb_sleep_ms( int  mseconds )$/;"	f	signature:( int mseconds )
adb_socket_accept	./sysdeps.h	/^extern int  adb_socket_accept(int  serverfd, struct sockaddr*  addr, socklen_t  *addrlen);$/;"	p	signature:(int serverfd, struct sockaddr* addr, socklen_t *addrlen)
adb_socket_accept	./sysdeps.h	/^static __inline__ int  adb_socket_accept(int  serverfd, struct sockaddr*  addr, socklen_t  *addrlen)$/;"	f	signature:(int serverfd, struct sockaddr* addr, socklen_t *addrlen)
adb_socket_accept	./sysdeps_win32.c	/^int  adb_socket_accept(int  serverfd, struct sockaddr*  addr, socklen_t  *addrlen)$/;"	f	signature:(int serverfd, struct sockaddr* addr, socklen_t *addrlen)
adb_socket_setbufsize	./sysdeps.h	/^static __inline__  int  adb_socket_setbufsize( int   fd, int  bufsize )$/;"	f	signature:( int fd, int bufsize )
adb_socketpair	./sysdeps.h	/^extern int  adb_socketpair( int  sv[2] );$/;"	p	signature:( int sv[2] )
adb_socketpair	./sysdeps.h	/^static __inline__ int  adb_socketpair( int  sv[2] )$/;"	f	signature:( int sv[2] )
adb_socketpair	./sysdeps_win32.c	/^int  adb_socketpair( int  sv[2] )$/;"	f	signature:( int sv[2] )
adb_status	./adb_client.c	/^int adb_status(int fd)$/;"	f	signature:(int fd)
adb_status	./adb_client.h	/^int adb_status(int fd);$/;"	p	signature:(int fd)
adb_strtok_r	./sysdeps.h	/^extern char*  adb_strtok_r(char *str, const char *delim, char **saveptr);$/;"	p	signature:(char *str, const char *delim, char **saveptr)
adb_strtok_r	./sysdeps.h	/^static __inline__ char*  adb_strtok_r(char *str, const char *delim, char **saveptr)$/;"	f	signature:(char *str, const char *delim, char **saveptr)
adb_strtok_r	./sysdeps_win32.c	/^adb_strtok_r(char *s, const char *delim, char **last)$/;"	f	signature:(char *s, const char *delim, char **last)
adb_sysdeps_init	./sysdeps.h	/^extern void  adb_sysdeps_init(void);$/;"	p	signature:(void)
adb_sysdeps_init	./sysdeps.h	/^static __inline__ void  adb_sysdeps_init(void)$/;"	f	signature:(void)
adb_sysdeps_init	./sysdeps_win32.c	/^adb_sysdeps_init( void )$/;"	f	signature:( void )
adb_thread_create	./sysdeps.h	/^static __inline__ int  adb_thread_create( adb_thread_t  *pthread, adb_thread_func_t  start, void*  arg )$/;"	f	signature:( adb_thread_t *pthread, adb_thread_func_t start, void* arg )
adb_thread_create	./sysdeps.h	/^static __inline__ int  adb_thread_create( adb_thread_t  *thread, adb_thread_func_t  func, void*  arg)$/;"	f	signature:( adb_thread_t *thread, adb_thread_func_t func, void* arg)
adb_thread_func_t	./sysdeps.h	/^typedef  void*  (*adb_thread_func_t)(void*  arg);$/;"	t
adb_thread_func_t	./sysdeps.h	/^typedef void*  (*adb_thread_func_t)( void*  arg );$/;"	t
adb_thread_t	./sysdeps.h	/^typedef  pthread_t                 adb_thread_t;$/;"	t
adb_thread_t	./sysdeps.h	/^typedef struct { unsigned  tid; }  adb_thread_t;$/;"	t	typeref:struct:__anon29
adb_trace_init	./adb.c	/^void  adb_trace_init(void)$/;"	f	signature:(void)
adb_trace_init	./adb.h	/^  void    adb_trace_init(void);$/;"	p	signature:(void)
adb_trace_mask	./adb.c	/^int   adb_trace_mask;$/;"	v
adb_unlink	./sysdeps.h	/^static __inline__  int    adb_unlink(const char*  path)$/;"	f	signature:(const char* path)
adb_write	./sysdeps.h	/^extern int  adb_write(int  fd, const void*  buf, int  len);$/;"	p	signature:(int fd, const void* buf, int len)
adb_write	./sysdeps.h	/^static __inline__  int  adb_write(int  fd, const void*  buf, size_t  len)$/;"	f	signature:(int fd, const void* buf, size_t len)
adb_write	./sysdeps_win32.c	/^int  adb_write(int  fd, const void*  buf, int  len)$/;"	f	signature:(int fd, const void* buf, int len)
adb_write_pipe	./usb_windows.c	/^  ADBAPIHANDLE  adb_write_pipe;$/;"	m	struct:usb_handle	file:	access:public
add_qual	./transport.c	/^static void add_qual(char **buf, size_t *buf_size,$/;"	f	file:	signature:(char **buf, size_t *buf_size, const char *prefix, const char *qual, int sanitize_qual)
add_tid_to_cgroup	./libs/libcutils/sched_policy.c	/^static int add_tid_to_cgroup(int tid, SchedPolicy policy)$/;"	f	file:	signature:(int tid, SchedPolicy policy)
add_transport_disconnect	./adb.h	/^void   add_transport_disconnect( atransport*  t, adisconnect*  dis );$/;"	p	signature:( atransport* t, adisconnect* dis )
add_transport_disconnect	./transport.c	/^void add_transport_disconnect(atransport*  t, adisconnect*  dis)$/;"	f	signature:(atransport* t, adisconnect* dis)
adisconnect	./adb.h	/^struct  adisconnect$/;"	s
adisconnect	./adb.h	/^typedef struct adisconnect  adisconnect;$/;"	t	typeref:struct:adisconnect
adisconnect::func	./adb.h	/^    void        (*func)(void*  opaque, atransport*  t);$/;"	m	struct:adisconnect	access:public
adisconnect::next	./adb.h	/^    adisconnect*  next;$/;"	m	struct:adisconnect	access:public
adisconnect::opaque	./adb.h	/^    void*         opaque;$/;"	m	struct:adisconnect	access:public
adisconnect::prev	./adb.h	/^    adisconnect*  prev;$/;"	m	struct:adisconnect	access:public
aid	./private/android_filesystem_config.h	/^    unsigned aid;$/;"	m	struct:android_id_info	access:public
alistener	./adb.h	/^struct alistener$/;"	s
alistener	./adb.h	/^typedef struct alistener alistener;$/;"	t	typeref:struct:alistener
alistener::connect_to	./adb.h	/^    const char *connect_to;$/;"	m	struct:alistener	access:public
alistener::disconnect	./adb.h	/^    adisconnect  disconnect;$/;"	m	struct:alistener	access:public
alistener::fd	./adb.h	/^    int fd;$/;"	m	struct:alistener	access:public
alistener::fde	./adb.h	/^    fdevent fde;$/;"	m	struct:alistener	access:public
alistener::local_name	./adb.h	/^    const char *local_name;$/;"	m	struct:alistener	access:public
alistener::next	./adb.h	/^    alistener *next;$/;"	m	struct:alistener	access:public
alistener::prev	./adb.h	/^    alistener *prev;$/;"	m	struct:alistener	access:public
alistener::transport	./adb.h	/^    atransport *transport;$/;"	m	struct:alistener	access:public
allocSize	./libs/libcutils/open_memstream.c	/^    size_t      allocSize;  \/* size of buffer *\/$/;"	m	struct:__anon4	file:	access:public
alpha_length	./framebuffer_service.c	/^    unsigned int alpha_length;$/;"	m	struct:fbinfo	file:	access:public
alpha_offset	./framebuffer_service.c	/^    unsigned int alpha_offset;$/;"	m	struct:fbinfo	file:	access:public
already_registered	./usb_libusb.c	/^already_registered(usb_handle *uh)$/;"	f	signature:(usb_handle *uh)
altzone	./libs/libcutils/tztime.c	/^time_t			altzone = 0;$/;"	v
am	./libs/libcutils/cutils/tztime.h	/^    const char *am;$/;"	m	struct:strftime_locale	access:public
amessage	./adb.h	/^struct amessage {$/;"	s
amessage	./adb.h	/^typedef struct amessage amessage;$/;"	t	typeref:struct:amessage
amessage::arg0	./adb.h	/^    unsigned arg0;          \/* first argument                   *\/$/;"	m	struct:amessage	access:public
amessage::arg1	./adb.h	/^    unsigned arg1;          \/* second argument                  *\/$/;"	m	struct:amessage	access:public
amessage::command	./adb.h	/^    unsigned command;       \/* command identifier constant      *\/$/;"	m	struct:amessage	access:public
amessage::data_check	./adb.h	/^    unsigned data_check;    \/* checksum of data payload         *\/$/;"	m	struct:amessage	access:public
amessage::data_length	./adb.h	/^    unsigned data_length;   \/* length of payload (0 is allowed) *\/$/;"	m	struct:amessage	access:public
amessage::magic	./adb.h	/^    unsigned magic;         \/* command ^ 0xffffffff             *\/$/;"	m	struct:amessage	access:public
android_atomic_acquire_cas	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int android_atomic_acquire_cas(int32_t old_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_acquire_cas	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int android_atomic_acquire_cas(int32_t old_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_acquire_cas	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int android_atomic_acquire_cas(int32_t old_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_acquire_cas	./libs/libcutils/cutils/atomic.h	/^int android_atomic_acquire_cas(int32_t oldvalue, int32_t newvalue,$/;"	p	signature:(int32_t oldvalue, int32_t newvalue, volatile int32_t* addr)
android_atomic_acquire_load	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_acquire_load(volatile const int32_t *ptr)$/;"	f	signature:(volatile const int32_t *ptr)
android_atomic_acquire_load	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_acquire_load(volatile const int32_t *ptr)$/;"	f	signature:(volatile const int32_t *ptr)
android_atomic_acquire_load	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_acquire_load(volatile const int32_t *ptr)$/;"	f	signature:(volatile const int32_t *ptr)
android_atomic_acquire_load	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_acquire_load(volatile const int32_t* addr);$/;"	p	signature:(volatile const int32_t* addr)
android_atomic_acquire_store	./libs/libcutils/cutils/atomic-arm.h	/^extern inline void android_atomic_acquire_store(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_acquire_store	./libs/libcutils/cutils/atomic-mips.h	/^extern inline void android_atomic_acquire_store(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_acquire_store	./libs/libcutils/cutils/atomic-x86.h	/^extern inline void android_atomic_acquire_store(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_acquire_store	./libs/libcutils/cutils/atomic.h	/^void android_atomic_acquire_store(int32_t value, volatile int32_t* addr);$/;"	p	signature:(int32_t value, volatile int32_t* addr)
android_atomic_add	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_add(int32_t increment,$/;"	f	signature:(int32_t increment, volatile int32_t *ptr)
android_atomic_add	./libs/libcutils/cutils/atomic-arm.h	/^extern int32_t android_atomic_add(int32_t increment,$/;"	p	signature:(int32_t increment, volatile int32_t *ptr)
android_atomic_add	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_add(int32_t increment,$/;"	f	signature:(int32_t increment, volatile int32_t *ptr)
android_atomic_add	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_add(int32_t increment,$/;"	f	signature:(int32_t increment, volatile int32_t *ptr)
android_atomic_add	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_add(int32_t value, volatile int32_t* addr);$/;"	p	signature:(int32_t value, volatile int32_t* addr)
android_atomic_and	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_and(int32_t value, volatile int32_t *ptr)$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_and	./libs/libcutils/cutils/atomic-arm.h	/^extern int32_t android_atomic_and(int32_t value, volatile int32_t *ptr);$/;"	p	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_and	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_and(int32_t value, volatile int32_t *ptr)$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_and	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_and(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_and	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_and(int32_t value, volatile int32_t* addr);$/;"	p	signature:(int32_t value, volatile int32_t* addr)
android_atomic_cas	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int android_atomic_cas(int32_t old_value, int32_t new_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_cas	./libs/libcutils/cutils/atomic-arm.h	/^extern int android_atomic_cas(int32_t old_value, int32_t new_value,$/;"	p	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_cas	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int android_atomic_cas(int32_t old_value, int32_t new_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_cas	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int android_atomic_cas(int32_t old_value, int32_t new_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_cmpxchg	./libs/libcutils/cutils/atomic.h	115;"	d
android_atomic_dec	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_dec(volatile int32_t *addr)$/;"	f	signature:(volatile int32_t *addr)
android_atomic_dec	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_dec(volatile int32_t *addr)$/;"	f	signature:(volatile int32_t *addr)
android_atomic_dec	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_dec(volatile int32_t *addr)$/;"	f	signature:(volatile int32_t *addr)
android_atomic_dec	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_dec(volatile int32_t* addr);$/;"	p	signature:(volatile int32_t* addr)
android_atomic_inc	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_inc(volatile int32_t *addr)$/;"	f	signature:(volatile int32_t *addr)
android_atomic_inc	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_inc(volatile int32_t *addr)$/;"	f	signature:(volatile int32_t *addr)
android_atomic_inc	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_inc(volatile int32_t *addr)$/;"	f	signature:(volatile int32_t *addr)
android_atomic_inc	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_inc(volatile int32_t* addr);$/;"	p	signature:(volatile int32_t* addr)
android_atomic_or	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_or(int32_t value, volatile int32_t *ptr)$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_or	./libs/libcutils/cutils/atomic-arm.h	/^extern int32_t android_atomic_or(int32_t value, volatile int32_t *ptr);$/;"	p	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_or	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_or(int32_t value, volatile int32_t *ptr)$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_or	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_or(int32_t value, volatile int32_t *ptr)$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_or	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_or(int32_t value, volatile int32_t* addr);$/;"	p	signature:(int32_t value, volatile int32_t* addr)
android_atomic_release_cas	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int android_atomic_release_cas(int32_t old_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_release_cas	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int android_atomic_release_cas(int32_t old_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_release_cas	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int android_atomic_release_cas(int32_t old_value,$/;"	f	signature:(int32_t old_value, int32_t new_value, volatile int32_t *ptr)
android_atomic_release_cas	./libs/libcutils/cutils/atomic.h	/^int android_atomic_release_cas(int32_t oldvalue, int32_t newvalue,$/;"	p	signature:(int32_t oldvalue, int32_t newvalue, volatile int32_t* addr)
android_atomic_release_load	./libs/libcutils/cutils/atomic-arm.h	/^extern inline int32_t android_atomic_release_load(volatile const int32_t *ptr)$/;"	f	signature:(volatile const int32_t *ptr)
android_atomic_release_load	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_release_load(volatile const int32_t *ptr)$/;"	f	signature:(volatile const int32_t *ptr)
android_atomic_release_load	./libs/libcutils/cutils/atomic-x86.h	/^extern inline int32_t android_atomic_release_load(volatile const int32_t *ptr)$/;"	f	signature:(volatile const int32_t *ptr)
android_atomic_release_load	./libs/libcutils/cutils/atomic.h	/^int32_t android_atomic_release_load(volatile const int32_t* addr);$/;"	p	signature:(volatile const int32_t* addr)
android_atomic_release_store	./libs/libcutils/cutils/atomic-arm.h	/^extern inline void android_atomic_release_store(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_release_store	./libs/libcutils/cutils/atomic-mips.h	/^extern inline void android_atomic_release_store(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_release_store	./libs/libcutils/cutils/atomic-x86.h	/^extern inline void android_atomic_release_store(int32_t value,$/;"	f	signature:(int32_t value, volatile int32_t *ptr)
android_atomic_release_store	./libs/libcutils/cutils/atomic.h	/^void android_atomic_release_store(int32_t value, volatile int32_t* addr);$/;"	p	signature:(int32_t value, volatile int32_t* addr)
android_atomic_swap	./libs/libcutils/cutils/atomic-mips.h	/^extern inline int32_t android_atomic_swap(int32_t new_value,$/;"	f	signature:(int32_t new_value, volatile int32_t *ptr)
android_atomic_write	./libs/libcutils/cutils/atomic.h	114;"	d
android_bWriteLog	./libs/libcutils/cutils/log_bak_for_android.h	449;"	d
android_btWriteLog	./libs/libcutils/cutils/log_bak_for_android.h	451;"	d
android_closeEventTagMap	./libs/libcutils/cutils/event_tag_map.h	/^void android_closeEventTagMap(EventTagMap* map);$/;"	p	signature:(EventTagMap* map)
android_compiler_barrier	./libs/libcutils/cutils/atomic-arm.h	/^extern inline void android_compiler_barrier(void)$/;"	f	signature:(void)
android_compiler_barrier	./libs/libcutils/cutils/atomic-mips.h	/^extern inline void android_compiler_barrier(void)$/;"	f	signature:(void)
android_compiler_barrier	./libs/libcutils/cutils/atomic-x86.h	/^extern inline void android_compiler_barrier(void)$/;"	f	signature:(void)
android_dirs	./private/android_filesystem_config.h	/^static struct fs_path_config android_dirs[] = {$/;"	v	typeref:struct:fs_path_config
android_files	./private/android_filesystem_config.h	/^static struct fs_path_config android_files[] = {$/;"	v	typeref:struct:fs_path_config
android_get_control_socket	./libs/libcutils/cutils/sockets.h	/^static inline int android_get_control_socket(const char *name)$/;"	f	signature:(const char *name)
android_get_ioprio	./libs/libcutils/cutils/iosched_policy.h	/^extern int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio);$/;"	p	signature:(int pid, IoSchedClass *clazz, int *ioprio)
android_get_ioprio	./libs/libcutils/iosched_policy.c	/^int android_get_ioprio(int pid, IoSchedClass *clazz, int *ioprio) {$/;"	f	signature:(int pid, IoSchedClass *clazz, int *ioprio)
android_id_count	./private/android_filesystem_config.h	144;"	d
android_id_info	./private/android_filesystem_config.h	/^struct android_id_info {$/;"	s
android_id_info::aid	./private/android_filesystem_config.h	/^    unsigned aid;$/;"	m	struct:android_id_info	access:public
android_id_info::name	./private/android_filesystem_config.h	/^    const char *name;$/;"	m	struct:android_id_info	access:public
android_ids	./private/android_filesystem_config.h	/^static const struct android_id_info android_ids[] = {$/;"	v	typeref:struct:android_id_info
android_logToFd	./libs/libcutils/cutils/log_bak_for_android.h	461;"	d
android_logToFile	./libs/libcutils/cutils/log_bak_for_android.h	460;"	d
android_log_addFilterRule	./libs/libcutils/cutils/logprint.h	/^int android_log_addFilterRule(AndroidLogFormat *p_format, $/;"	p	signature:(AndroidLogFormat *p_format, const char *filterExpression)
android_log_addFilterString	./libs/libcutils/cutils/logprint.h	/^int android_log_addFilterString(AndroidLogFormat *p_format,$/;"	p	signature:(AndroidLogFormat *p_format, const char *filterString)
android_log_formatFromString	./libs/libcutils/cutils/logprint.h	/^AndroidLogPrintFormat android_log_formatFromString(const char *s);$/;"	p	signature:(const char *s)
android_log_formatLogLine	./libs/libcutils/cutils/logprint.h	/^char *android_log_formatLogLine (    $/;"	p	signature:( AndroidLogFormat *p_format, char *defaultBuffer, size_t defaultBufferSize, const AndroidLogEntry *p_line, size_t *p_outLength)
android_log_format_free	./libs/libcutils/cutils/logprint.h	/^void android_log_format_free(AndroidLogFormat *p_format);$/;"	p	signature:(AndroidLogFormat *p_format)
android_log_format_new	./libs/libcutils/cutils/logprint.h	/^AndroidLogFormat *android_log_format_new();$/;"	p	signature:()
android_log_printLogLine	./libs/libcutils/cutils/logprint.h	/^int android_log_printLogLine($/;"	p	signature:( AndroidLogFormat *p_format, int fd, const AndroidLogEntry *entry)
android_log_processBinaryLogBuffer	./libs/libcutils/cutils/logprint.h	/^int android_log_processBinaryLogBuffer(struct logger_entry *buf,$/;"	p	signature:(struct logger_entry *buf, AndroidLogEntry *entry, const EventTagMap* map, char* messageBuf, int messageBufLen)
android_log_processLogBuffer	./libs/libcutils/cutils/logprint.h	/^int android_log_processLogBuffer(struct logger_entry *buf,$/;"	p	signature:(struct logger_entry *buf, AndroidLogEntry *entry)
android_log_setPrintFormat	./libs/libcutils/cutils/logprint.h	/^void android_log_setPrintFormat(AndroidLogFormat *p_format, $/;"	p	signature:(AndroidLogFormat *p_format, AndroidLogPrintFormat format)
android_log_shouldPrintLine	./libs/libcutils/cutils/logprint.h	/^int android_log_shouldPrintLine ($/;"	p	signature:( AndroidLogFormat *p_format, const char *tag, android_LogPriority pri)
android_lookupEventTag	./libs/libcutils/cutils/event_tag_map.h	/^const char* android_lookupEventTag(const EventTagMap* map, int tag);$/;"	p	signature:(const EventTagMap* map, int tag)
android_memory_barrier	./libs/libcutils/cutils/atomic-arm.h	/^extern inline void android_memory_barrier(void)$/;"	f	signature:(void)
android_memory_barrier	./libs/libcutils/cutils/atomic-mips.h	/^extern inline void android_memory_barrier(void)$/;"	f	signature:(void)
android_memory_barrier	./libs/libcutils/cutils/atomic-x86.h	/^extern inline void android_memory_barrier(void)$/;"	f	signature:(void)
android_memory_store_barrier	./libs/libcutils/cutils/atomic-arm.h	/^extern inline void android_memory_store_barrier(void)$/;"	f	signature:(void)
android_memory_store_barrier	./libs/libcutils/cutils/atomic-mips.h	/^extern inline void android_memory_store_barrier(void)$/;"	f	signature:(void)
android_memory_store_barrier	./libs/libcutils/cutils/atomic-x86.h	/^extern inline void android_memory_store_barrier(void)$/;"	f	signature:(void)
android_memset16	./libs/libcutils/arch-arm/memset32.S	/^android_memset16:$/;"	l
android_memset16	./libs/libcutils/cutils/memory.h	/^void android_memset16(uint16_t* dst, uint16_t value, size_t size);$/;"	p	signature:(uint16_t* dst, uint16_t value, size_t size)
android_memset16	./libs/libcutils/memory.c	/^void android_memset16(uint16_t* dst, uint16_t value, size_t size)$/;"	f	signature:(uint16_t* dst, uint16_t value, size_t size)
android_memset32	./libs/libcutils/arch-arm/memset32.S	/^android_memset32:$/;"	l
android_memset32	./libs/libcutils/cutils/memory.h	/^void android_memset32(uint32_t* dst, uint32_t value, size_t size);$/;"	p	signature:(uint32_t* dst, uint32_t value, size_t size)
android_memset32	./libs/libcutils/memory.c	/^void android_memset32(uint32_t* dst, uint32_t value, size_t size)$/;"	f	signature:(uint32_t* dst, uint32_t value, size_t size)
android_openEventTagMap	./libs/libcutils/cutils/event_tag_map.h	/^EventTagMap* android_openEventTagMap(const char* fileName);$/;"	p	signature:(const char* fileName)
android_printAssert	./libs/libcutils/cutils/log_bak_for_android.h	442;"	d
android_printLog	./libs/libcutils/cutils/log_bak_for_android.h	421;"	d
android_reboot	./libs/libcutils/android_reboot.c	/^int android_reboot(int cmd, int flags, char *arg)$/;"	f	signature:(int cmd, int flags, char *arg)
android_reboot	./libs/libcutils/cutils/android_reboot.h	/^int android_reboot(int cmd, int flags, char *arg);$/;"	p	signature:(int cmd, int flags, char *arg)
android_setMinPriority	./libs/libcutils/cutils/log_bak_for_android.h	458;"	d
android_set_ioprio	./libs/libcutils/cutils/iosched_policy.h	/^extern int android_set_ioprio(int pid, IoSchedClass clazz, int ioprio);$/;"	p	signature:(int pid, IoSchedClass clazz, int ioprio)
android_set_ioprio	./libs/libcutils/iosched_policy.c	/^int android_set_ioprio(int pid, IoSchedClass clazz, int ioprio) {$/;"	f	signature:(int pid, IoSchedClass clazz, int ioprio)
android_testLog	./libs/libcutils/cutils/log_bak_for_android.h	455;"	d
android_vprintLog	./libs/libcutils/cutils/log_bak_for_android.h	424;"	d
android_write1Log	./libs/libcutils/cutils/log_bak_for_android.h	457;"	d
android_writeLog	./libs/libcutils/cutils/log_bak_for_android.h	446;"	d
android_writevLog	./libs/libcutils/cutils/log_bak_for_android.h	456;"	d
apacket	./adb.h	/^struct apacket$/;"	s
apacket	./adb.h	/^typedef struct apacket apacket;$/;"	t	typeref:struct:apacket
apacket::data	./adb.h	/^    unsigned char data[MAX_PAYLOAD];$/;"	m	struct:apacket	access:public
apacket::len	./adb.h	/^    unsigned len;$/;"	m	struct:apacket	access:public
apacket::msg	./adb.h	/^    amessage msg;$/;"	m	struct:apacket	access:public
apacket::next	./adb.h	/^    apacket *next;$/;"	m	struct:apacket	access:public
apacket::ptr	./adb.h	/^    unsigned char *ptr;$/;"	m	struct:apacket	access:public
appid_t	./libs/libcutils/cutils/multiuser.h	/^typedef uid_t appid_t;$/;"	t
aremotesocket	./sockets.c	/^typedef struct aremotesocket {$/;"	s	file:
aremotesocket	./sockets.c	/^} aremotesocket;$/;"	t	typeref:struct:aremotesocket	file:
aremotesocket::disconnect	./sockets.c	/^    adisconnect  disconnect;$/;"	m	struct:aremotesocket	file:	access:public
aremotesocket::socket	./sockets.c	/^    asocket      socket;$/;"	m	struct:aremotesocket	file:	access:public
arg	./fdevent.h	/^    void *arg;$/;"	m	struct:fdevent	access:public
arg	./sysdeps.h	/^    void *arg;$/;"	m	struct:fdevent	access:public
arg0	./adb.h	/^    unsigned arg0;          \/* first argument                   *\/$/;"	m	struct:amessage	access:public
arg1	./adb.h	/^    unsigned arg1;          \/* second argument                  *\/$/;"	m	struct:amessage	access:public
arrayAdd	./libs/libcutils/array.c	/^int arrayAdd(Array* array, void* pointer) {$/;"	f	signature:(Array* array, void* pointer)
arrayAdd	./libs/libcutils/cutils/array.h	/^int arrayAdd(Array* array, void* pointer);$/;"	p	signature:(Array* array, void* pointer)
arrayCreate	./libs/libcutils/array.c	/^Array* arrayCreate() {$/;"	f
arrayCreate	./libs/libcutils/cutils/array.h	/^Array* arrayCreate();$/;"	p	signature:()
arrayFree	./libs/libcutils/array.c	/^void arrayFree(Array* array) {$/;"	f	signature:(Array* array)
arrayFree	./libs/libcutils/cutils/array.h	/^void arrayFree(Array* array);$/;"	p	signature:(Array* array)
arrayGet	./libs/libcutils/array.c	/^void* arrayGet(Array* array, int index) {$/;"	f	signature:(Array* array, int index)
arrayGet	./libs/libcutils/cutils/array.h	/^void* arrayGet(Array* array, int index);$/;"	p	signature:(Array* array, int index)
arrayRemove	./libs/libcutils/array.c	/^void* arrayRemove(Array* array, int index) {$/;"	f	signature:(Array* array, int index)
arrayRemove	./libs/libcutils/cutils/array.h	/^void* arrayRemove(Array* array, int index);$/;"	p	signature:(Array* array, int index)
arraySet	./libs/libcutils/array.c	/^void* arraySet(Array* array, int index, void* pointer) {$/;"	f	signature:(Array* array, int index, void* pointer)
arraySet	./libs/libcutils/cutils/array.h	/^void* arraySet(Array* array, int index, void* pointer);$/;"	p	signature:(Array* array, int index, void* pointer)
arraySetSize	./libs/libcutils/array.c	/^int arraySetSize(Array* array, int newSize) {$/;"	f	signature:(Array* array, int newSize)
arraySetSize	./libs/libcutils/cutils/array.h	/^int arraySetSize(Array* array, int size);$/;"	p	signature:(Array* array, int size)
arraySize	./libs/libcutils/array.c	/^int arraySize(Array* array) {$/;"	f	signature:(Array* array)
arraySize	./libs/libcutils/cutils/array.h	/^int arraySize(Array* array);$/;"	p	signature:(Array* array)
arrayUnwrap	./libs/libcutils/array.c	/^const void** arrayUnwrap(Array* array) {$/;"	f	signature:(Array* array)
arrayUnwrap	./libs/libcutils/cutils/array.h	/^const void** arrayUnwrap(Array* array);$/;"	p	signature:(Array* array)
asctime_r	./libs/libcutils/private.h	/^char *asctime_r P((struct tm const *, char *));$/;"	p	signature:(struct tm const *, char *)
asctime_r	./libs/libcutils/private.h	/^extern char *	asctime_r();$/;"	p	signature:()
asctime_r	./libs/libcutils/private.h	338;"	d
asctime_r	./libs/libcutils/private.h	80;"	d
aservice	./adb.h	/^typedef struct aservice aservice;$/;"	t	typeref:struct:aservice
ashmem_create_region	./libs/libcutils/ashmem-dev.c	/^int ashmem_create_region(const char *name, size_t size)$/;"	f	signature:(const char *name, size_t size)
ashmem_create_region	./libs/libcutils/ashmem-host.c	/^int ashmem_create_region(const char *ignored, size_t size)$/;"	f	signature:(const char *ignored, size_t size)
ashmem_create_region	./libs/libcutils/cutils/ashmem.h	/^int ashmem_create_region(const char *name, size_t size);$/;"	p	signature:(const char *name, size_t size)
ashmem_get_size_region	./libs/libcutils/ashmem-dev.c	/^int ashmem_get_size_region(int fd)$/;"	f	signature:(int fd)
ashmem_get_size_region	./libs/libcutils/ashmem-host.c	/^int ashmem_get_size_region(int fd)$/;"	f	signature:(int fd)
ashmem_get_size_region	./libs/libcutils/cutils/ashmem.h	/^int ashmem_get_size_region(int fd);$/;"	p	signature:(int fd)
ashmem_pin	./libs/libcutils/include/ashmem.h	/^struct ashmem_pin {$/;"	s
ashmem_pin::len	./libs/libcutils/include/ashmem.h	/^	__u32 len;	\/* length forward from offset, in bytes, page-aligned *\/$/;"	m	struct:ashmem_pin	access:public
ashmem_pin::offset	./libs/libcutils/include/ashmem.h	/^	__u32 offset;	\/* offset into region, in bytes, page-aligned *\/$/;"	m	struct:ashmem_pin	access:public
ashmem_pin_region	./libs/libcutils/ashmem-dev.c	/^int ashmem_pin_region(int fd, size_t offset, size_t len)$/;"	f	signature:(int fd, size_t offset, size_t len)
ashmem_pin_region	./libs/libcutils/ashmem-host.c	/^int ashmem_pin_region(int fd, size_t offset, size_t len)$/;"	f	signature:(int fd, size_t offset, size_t len)
ashmem_pin_region	./libs/libcutils/cutils/ashmem.h	/^int ashmem_pin_region(int fd, size_t offset, size_t len);$/;"	p	signature:(int fd, size_t offset, size_t len)
ashmem_set_prot_region	./libs/libcutils/ashmem-dev.c	/^int ashmem_set_prot_region(int fd, int prot)$/;"	f	signature:(int fd, int prot)
ashmem_set_prot_region	./libs/libcutils/ashmem-host.c	/^int ashmem_set_prot_region(int fd, int prot)$/;"	f	signature:(int fd, int prot)
ashmem_set_prot_region	./libs/libcutils/cutils/ashmem.h	/^int ashmem_set_prot_region(int fd, int prot);$/;"	p	signature:(int fd, int prot)
ashmem_unpin_region	./libs/libcutils/ashmem-dev.c	/^int ashmem_unpin_region(int fd, size_t offset, size_t len)$/;"	f	signature:(int fd, size_t offset, size_t len)
ashmem_unpin_region	./libs/libcutils/ashmem-host.c	/^int ashmem_unpin_region(int fd, size_t offset, size_t len)$/;"	f	signature:(int fd, size_t offset, size_t len)
ashmem_unpin_region	./libs/libcutils/cutils/ashmem.h	/^int ashmem_unpin_region(int fd, size_t offset, size_t len);$/;"	p	signature:(int fd, size_t offset, size_t len)
asocket	./adb.h	/^struct asocket {$/;"	s
asocket	./adb.h	/^typedef struct asocket asocket;$/;"	t	typeref:struct:asocket
asocket	./libs/libcutils/cutils/abort_socket.h	/^struct asocket {$/;"	s
asocket::abort_fd	./libs/libcutils/cutils/abort_socket.h	/^    int abort_fd[2];  \/* pipe used to abort *\/$/;"	m	struct:asocket	access:public
asocket::close	./adb.h	/^    void (*close)(asocket *s);$/;"	m	struct:asocket	access:public
asocket::closing	./adb.h	/^    int    closing;$/;"	m	struct:asocket	access:public
asocket::enqueue	./adb.h	/^    int (*enqueue)(asocket *s, apacket *pkt);$/;"	m	struct:asocket	access:public
asocket::exit_on_close	./adb.h	/^    int    exit_on_close;$/;"	m	struct:asocket	access:public
asocket::extra	./adb.h	/^    void *extra;$/;"	m	struct:asocket	access:public
asocket::fd	./adb.h	/^    int fd;$/;"	m	struct:asocket	access:public
asocket::fd	./libs/libcutils/cutils/abort_socket.h	/^    int fd;           \/* primary socket fd *\/$/;"	m	struct:asocket	access:public
asocket::fde	./adb.h	/^    fdevent fde;$/;"	m	struct:asocket	access:public
asocket::id	./adb.h	/^    unsigned id;$/;"	m	struct:asocket	access:public
asocket::next	./adb.h	/^    asocket *next;$/;"	m	struct:asocket	access:public
asocket::peer	./adb.h	/^    asocket *peer;$/;"	m	struct:asocket	access:public
asocket::pkt_first	./adb.h	/^    apacket *pkt_first;$/;"	m	struct:asocket	access:public
asocket::pkt_last	./adb.h	/^    apacket *pkt_last;$/;"	m	struct:asocket	access:public
asocket::prev	./adb.h	/^    asocket *prev;$/;"	m	struct:asocket	access:public
asocket::ready	./adb.h	/^    void (*ready)(asocket *s);$/;"	m	struct:asocket	access:public
asocket::transport	./adb.h	/^    atransport *transport;$/;"	m	struct:asocket	access:public
asocket_abort	./libs/libcutils/abort_socket.c	/^void asocket_abort(struct asocket *s) {$/;"	f	signature:(struct asocket *s)
asocket_abort	./libs/libcutils/cutils/abort_socket.h	/^void asocket_abort(struct asocket *s);$/;"	p	signature:(struct asocket *s)
asocket_accept	./libs/libcutils/abort_socket.c	/^int asocket_accept(struct asocket *s, struct sockaddr *addr,$/;"	f	signature:(struct asocket *s, struct sockaddr *addr, socklen_t *addrlen, int timeout)
asocket_accept	./libs/libcutils/cutils/abort_socket.h	/^int asocket_accept(struct asocket *s, struct sockaddr *addr,$/;"	p	signature:(struct asocket *s, struct sockaddr *addr, socklen_t *addrlen, int timeout)
asocket_connect	./libs/libcutils/abort_socket.c	/^int asocket_connect(struct asocket *s, const struct sockaddr *addr,$/;"	f	signature:(struct asocket *s, const struct sockaddr *addr, socklen_t addrlen, int timeout)
asocket_connect	./libs/libcutils/cutils/abort_socket.h	/^int asocket_connect(struct asocket *s, const struct sockaddr *addr,$/;"	p	signature:(struct asocket *s, const struct sockaddr *addr, socklen_t addrlen, int timeout)
asocket_destroy	./libs/libcutils/abort_socket.c	/^void asocket_destroy(struct asocket *s) {$/;"	f	signature:(struct asocket *s)
asocket_destroy	./libs/libcutils/cutils/abort_socket.h	/^void asocket_destroy(struct asocket *s);$/;"	p	signature:(struct asocket *s)
asocket_init	./libs/libcutils/abort_socket.c	/^struct asocket *asocket_init(int fd) {$/;"	f	signature:(int fd)
asocket_init	./libs/libcutils/cutils/abort_socket.h	/^struct asocket *asocket_init(int fd);$/;"	p	signature:(int fd)
asocket_read	./libs/libcutils/abort_socket.c	/^int asocket_read(struct asocket *s, void *buf, size_t count, int timeout) {$/;"	f	signature:(struct asocket *s, void *buf, size_t count, int timeout)
asocket_read	./libs/libcutils/cutils/abort_socket.h	/^int asocket_read(struct asocket *s, void *buf, size_t count, int timeout);$/;"	p	signature:(struct asocket *s, void *buf, size_t count, int timeout)
asocket_write	./libs/libcutils/abort_socket.c	/^int asocket_write(struct asocket *s, const void *buf, size_t count,$/;"	f	signature:(struct asocket *s, const void *buf, size_t count, int timeout)
asocket_write	./libs/libcutils/cutils/abort_socket.h	/^int asocket_write(struct asocket *s, const void *buf, size_t count,$/;"	p	signature:(struct asocket *s, const void *buf, size_t count, int timeout)
assert	./sysdeps_win32.c	11;"	d	file:
atransport	./adb.h	/^struct atransport$/;"	s
atransport	./adb.h	/^typedef struct atransport atransport;$/;"	t	typeref:struct:atransport
atransport::adb_port	./adb.h	/^    int adb_port; \/\/ Use for emulators (local transport)$/;"	m	struct:atransport	access:public
atransport::auth_fde	./adb.h	/^    fdevent auth_fde;$/;"	m	struct:atransport	access:public
atransport::close	./adb.h	/^    void (*close)(atransport *t);$/;"	m	struct:atransport	access:public
atransport::connection_state	./adb.h	/^    int connection_state;$/;"	m	struct:atransport	access:public
atransport::device	./adb.h	/^    char *device;$/;"	m	struct:atransport	access:public
atransport::devpath	./adb.h	/^    char *devpath;$/;"	m	struct:atransport	access:public
atransport::disconnects	./adb.h	/^    adisconnect  disconnects;$/;"	m	struct:atransport	access:public
atransport::failed_auth_attempts	./adb.h	/^    unsigned failed_auth_attempts;$/;"	m	struct:atransport	access:public
atransport::fd	./adb.h	/^    int fd;$/;"	m	struct:atransport	access:public
atransport::key	./adb.h	/^    void *key;$/;"	m	struct:atransport	access:public
atransport::kick	./adb.h	/^    void (*kick)(atransport *t);$/;"	m	struct:atransport	access:public
atransport::kicked	./adb.h	/^    int          kicked;$/;"	m	struct:atransport	access:public
atransport::model	./adb.h	/^    char *model;$/;"	m	struct:atransport	access:public
atransport::next	./adb.h	/^    atransport *next;$/;"	m	struct:atransport	access:public
atransport::online	./adb.h	/^    int online;$/;"	m	struct:atransport	access:public
atransport::prev	./adb.h	/^    atransport *prev;$/;"	m	struct:atransport	access:public
atransport::product	./adb.h	/^    char *product;$/;"	m	struct:atransport	access:public
atransport::read_from_remote	./adb.h	/^    int (*read_from_remote)(apacket *p, atransport *t);$/;"	m	struct:atransport	access:public
atransport::ref_count	./adb.h	/^    int ref_count;$/;"	m	struct:atransport	access:public
atransport::serial	./adb.h	/^    char *serial;$/;"	m	struct:atransport	access:public
atransport::sfd	./adb.h	/^    int sfd;$/;"	m	struct:atransport	access:public
atransport::sync_token	./adb.h	/^    unsigned sync_token;$/;"	m	struct:atransport	access:public
atransport::token	./adb.h	/^    unsigned char token[TOKEN_SIZE];$/;"	m	struct:atransport	access:public
atransport::transport_fde	./adb.h	/^    fdevent transport_fde;$/;"	m	struct:atransport	access:public
atransport::transport_socket	./adb.h	/^    int transport_socket;$/;"	m	struct:atransport	access:public
atransport::type	./adb.h	/^    transport_type type;$/;"	m	struct:atransport	access:public
atransport::usb	./adb.h	/^    usb_handle *usb;$/;"	m	struct:atransport	access:public
atransport::write_to_remote	./adb.h	/^    int (*write_to_remote)(apacket *p, atransport *t);$/;"	m	struct:atransport	access:public
ats	./libs/libcutils/tztime.c	/^	time_t		ats[TZ_MAX_TIMES];$/;"	m	struct:state	file:	access:public
auth_enabled	./adb.c	/^static int auth_enabled = 0;$/;"	v	file:
auth_fde	./adb.h	/^    fdevent auth_fde;$/;"	m	struct:atransport	access:public
aux	./sysdeps_win32.c	/^    void*        aux;$/;"	m	struct:EventHookRec_	file:	access:public
b	./libs/libmincrypt/mincrypt/sha.h	/^        uint8_t b[64];$/;"	m	union:SHA_CTX::__anon26	access:public
b2a_bip	./sysdeps_win32.c	/^    BipBufferRec  b2a_bip;$/;"	m	struct:SocketPairRec_	file:	access:public
b_end	./sysdeps_win32.c	/^    int                b_end;$/;"	m	struct:BipBufferRec_	file:	access:public
backup	./commandline.c	/^static int backup(int argc, char** argv) {$/;"	f	file:	signature:(int argc, char** argv)
backup_child_waiter	./backup_service.c	/^static void* backup_child_waiter(void* args) {$/;"	f	file:	signature:(void* args)
backup_harvest_params	./backup_service.c	/^} backup_harvest_params;$/;"	t	typeref:struct:__anon39	file:
backup_service	./adb.h	/^int backup_service(BackupOperation operation, char* args);$/;"	p	signature:(BackupOperation operation, char* args)
backup_service	./backup_service.c	/^int backup_service(BackupOperation op, char* args) {$/;"	f	signature:(BackupOperation op, char* args)
backup_socketpair	./backup_service.c	/^static int backup_socketpair(int sv[2]) {$/;"	f	file:	signature:(int sv[2])
badname	./usb_linux.c	/^static inline int badname(const char *name)$/;"	f	file:	signature:(const char *name)
beforeSelect	./libs/libcutils/cutils/selector.h	/^    void (*beforeSelect)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
bg_cgroup_fd	./libs/libcutils/sched_policy.c	/^static int bg_cgroup_fd = -1;$/;"	v	file:
bip_buffer_close	./sysdeps_win32.c	/^bip_buffer_close( BipBuffer  bip )$/;"	f	file:	signature:( BipBuffer bip )
bip_buffer_done	./sysdeps_win32.c	/^bip_buffer_done( BipBuffer  bip )$/;"	f	file:	signature:( BipBuffer bip )
bip_buffer_init	./sysdeps_win32.c	/^bip_buffer_init( BipBuffer  buffer )$/;"	f	file:	signature:( BipBuffer buffer )
bip_buffer_read	./sysdeps_win32.c	/^bip_buffer_read( BipBuffer  bip, void*  dst, int  len )$/;"	f	file:	signature:( BipBuffer bip, void* dst, int len )
bip_buffer_write	./sysdeps_win32.c	/^bip_buffer_write( BipBuffer  bip, const void* src, int  len )$/;"	f	file:	signature:( BipBuffer bip, const void* src, int len )
blue_length	./framebuffer_service.c	/^    unsigned int blue_length;$/;"	m	struct:fbinfo	file:	access:public
blue_offset	./framebuffer_service.c	/^    unsigned int blue_offset;$/;"	m	struct:fbinfo	file:	access:public
bootloader_message	./libs/libcutils/misc_rw.c	/^struct bootloader_message {$/;"	s	file:
bootloader_message::command	./libs/libcutils/misc_rw.c	/^    char command[32];$/;"	m	struct:bootloader_message	file:	access:public
bootloader_message::recovery	./libs/libcutils/misc_rw.c	/^    char recovery[1024];$/;"	m	struct:bootloader_message	file:	access:public
bootloader_message::status	./libs/libcutils/misc_rw.c	/^    char status[32];$/;"	m	struct:bootloader_message	file:	access:public
bpp	./framebuffer_service.c	/^    unsigned int bpp;$/;"	m	struct:fbinfo	file:	access:public
bucketCount	./libs/libcutils/hashmap.c	/^    size_t bucketCount;$/;"	m	struct:Hashmap	file:	access:public
buckets	./libs/libcutils/hashmap.c	/^    Entry** buckets;$/;"	m	struct:Hashmap	file:	access:public
buf	./libs/libmincrypt/mincrypt/sha.h	/^    uint8_t buf[64];$/;"	m	struct:SHA_CTX	access:public
buf	./libs/libmincrypt/mincrypt/sha.h	/^    } buf;$/;"	m	struct:SHA_CTX	typeref:union:SHA_CTX::__anon26	access:public
buff	./sysdeps_win32.c	/^    unsigned char      buff[ BIP_BUFFER_SIZE ];$/;"	m	struct:BipBufferRec_	file:	access:public
buff_add	./utils.c	/^buff_add  (char*  buff, char*  buffEnd, const char*  format, ... )$/;"	f	signature:(char* buff, char* buffEnd, const char* format, ... )
buff_add	./utils.h	/^char*   buff_add  (char*  buff, char*  buffEnd, const char*  format, ... );$/;"	p	signature:(char* buff, char* buffEnd, const char* format, ... )
buff_addb	./utils.c	/^buff_addb (char*  buff, char*  buffEnd, const void*  data, int  len)$/;"	f	signature:(char* buff, char* buffEnd, const void* data, int len)
buff_addb	./utils.h	/^char*   buff_addb (char*  buff, char*  buffEnd, const void*  data, int  len);$/;"	p	signature:(char* buff, char* buffEnd, const void* data, int len)
buff_addc	./utils.c	/^buff_addc (char*  buff, char*  buffEnd, int  c)$/;"	f	signature:(char* buff, char* buffEnd, int c)
buff_addc	./utils.h	/^char*   buff_addc (char*  buff, char*  buffEnd, int  c);$/;"	p	signature:(char* buff, char* buffEnd, int c)
buff_adds	./utils.c	/^buff_adds (char*  buff, char*  buffEnd, const char*  s)$/;"	f	signature:(char* buff, char* buffEnd, const char* s)
buff_adds	./utils.h	/^char*   buff_adds (char*  buff, char*  buffEnd, const char*  s);$/;"	p	signature:(char* buff, char* buffEnd, const char* s)
buffer	./libs/libcutils/record_stream.c	/^    unsigned char *buffer;$/;"	m	struct:RecordStream	file:	access:public
bufferCreate	./libs/libcutils/buffer.c	/^Buffer* bufferCreate(size_t capacity) {$/;"	f	signature:(size_t capacity)
bufferCreate	./libs/libcutils/buffer.h	/^Buffer* bufferCreate(size_t initialCapacity);$/;"	p	signature:(size_t initialCapacity)
bufferFree	./libs/libcutils/buffer.c	/^void bufferFree(Buffer* buffer) {$/;"	f	signature:(Buffer* buffer)
bufferFree	./libs/libcutils/buffer.h	/^void bufferFree(Buffer* buffer);$/;"	p	signature:(Buffer* buffer)
bufferPrepareForRead	./libs/libcutils/buffer.c	/^int bufferPrepareForRead(Buffer* buffer, size_t expected) {$/;"	f	signature:(Buffer* buffer, size_t expected)
bufferPrepareForRead	./libs/libcutils/buffer.h	/^int bufferPrepareForRead(Buffer* buffer, size_t expected);$/;"	p	signature:(Buffer* buffer, size_t expected)
bufferPrepareForWrite	./libs/libcutils/buffer.c	/^void bufferPrepareForWrite(Buffer* buffer) {$/;"	f	signature:(Buffer* buffer)
bufferPrepareForWrite	./libs/libcutils/buffer.h	/^void bufferPrepareForWrite(Buffer* buffer);$/;"	p	signature:(Buffer* buffer)
bufferRead	./libs/libcutils/buffer.c	/^ssize_t bufferRead(Buffer* buffer, int fd) {$/;"	f	signature:(Buffer* buffer, int fd)
bufferRead	./libs/libcutils/buffer.h	/^ssize_t bufferRead(Buffer* buffer, int fd);$/;"	p	signature:(Buffer* buffer, int fd)
bufferReadComplete	./libs/libcutils/buffer.h	56;"	d
bufferWrap	./libs/libcutils/buffer.c	/^Buffer* bufferWrap(char* data, size_t capacity, size_t size) {$/;"	f	signature:(char* data, size_t capacity, size_t size)
bufferWrap	./libs/libcutils/buffer.h	/^Buffer* bufferWrap(char* data, size_t capacity, size_t size);$/;"	p	signature:(char* data, size_t capacity, size_t size)
bufferWrite	./libs/libcutils/buffer.c	/^ssize_t bufferWrite(Buffer* buffer, int fd) {$/;"	f	signature:(Buffer* buffer, int fd)
bufferWrite	./libs/libcutils/buffer.h	/^ssize_t bufferWrite(Buffer* buffer, int fd);$/;"	p	signature:(Buffer* buffer, int fd)
bufferWriteComplete	./libs/libcutils/buffer.h	61;"	d
buffer_end	./libs/libcutils/record_stream.c	/^    unsigned char *buffer_end;$/;"	m	struct:RecordStream	file:	access:public
bufp	./libs/libcutils/open_memstream.c	/^    char**      bufp;       \/* pointer to buffer pointer *\/$/;"	m	struct:__anon4	file:	access:public
build_local_name	./adb.c	/^void build_local_name(char* target_str, size_t target_size, int server_port)$/;"	f	signature:(char* target_str, size_t target_size, int server_port)
build_path	./usb_vendors.c	/^int build_path(char* buff, size_t len, const char* format, const char* home)$/;"	f	signature:(char* buff, size_t len, const char* format, const char* home)
builtInVendorIds	./usb_vendors.c	/^int builtInVendorIds[] = {$/;"	v
bulkIn	./usb_osx.c	/^    UInt8                     bulkIn;$/;"	m	struct:usb_handle	file:	access:public
bulkOut	./usb_osx.c	/^    UInt8                     bulkOut;$/;"	m	struct:usb_handle	file:	access:public
bulk_in	./usb_linux_client.c	/^    int bulk_in;  \/* "in" from the host's perspective => sink for adbd *\/$/;"	m	struct:usb_handle	file:	access:public
bulk_out	./usb_linux_client.c	/^    int bulk_out; \/* "out" from the host's perspective => source for adbd *\/$/;"	m	struct:usb_handle	file:	access:public
bulk_read	./usb_linux_client.c	/^static int bulk_read(int bulk_out, char *buf, size_t length)$/;"	f	file:	signature:(int bulk_out, char *buf, size_t length)
bulk_write	./usb_linux_client.c	/^static int bulk_write(int bulk_in, const char *buf, size_t length)$/;"	f	file:	signature:(int bulk_in, const char *buf, size_t length)
bytes	./libs/libcutils/mq.c	/^        Buffer* bytes;$/;"	m	union:OutgoingPacket::__anon10	file:	access:public
c_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *c_fmt;$/;"	m	struct:strftime_locale	access:public
calculateIndex	./libs/libcutils/hashmap.c	/^static inline size_t calculateIndex(size_t bucketCount, int hash) {$/;"	f	file:	signature:(size_t bucketCount, int hash)
can_read	./sysdeps_win32.c	/^    int                can_read;   \/* boolean *\/$/;"	m	struct:BipBufferRec_	file:	access:public
can_write	./sysdeps_win32.c	/^    int                can_write;  \/* boolean *\/$/;"	m	struct:BipBufferRec_	file:	access:public
capacity	./libs/libcutils/array.c	/^    int capacity;$/;"	m	struct:Array	file:	access:public
capacity	./libs/libcutils/buffer.h	/^    size_t capacity;$/;"	m	struct:__anon1	access:public
char16_t	./libs/libcutils/cutils/jstring.h	/^typedef uint16_t char16_t;$/;"	t
charcnt	./libs/libcutils/tztime.c	/^	int		charcnt;$/;"	m	struct:state	file:	access:public
chars	./libs/libcutils/tztime.c	/^	char		chars[BIGGEST(BIGGEST(TZ_MAX_CHARS + 1, sizeof gmt),$/;"	m	struct:state	file:	access:public
check	./libs/libmincrypt/tools/DumpPublicKey.java	/^    static int check(RSAPublicKey key) throws Exception {$/;"	m	class:DumpPublicKey	access:default	signature:(RSAPublicKey key)
check	./sysdeps_win32.c	/^    int         (*check)  ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
checkBounds	./libs/libcutils/array.c	/^static inline void checkBounds(Array* array, int index) {$/;"	f	file:	signature:(Array* array, int index)
check_data	./adb.h	/^int check_data(apacket *p);$/;"	p	signature:(apacket *p)
check_data	./transport.c	/^int check_data(apacket *p)$/;"	f	signature:(apacket *p)
check_device	./usb_libusb.c	/^check_device(libusb_device *dev) $/;"	f	signature:(libusb_device *dev)
check_device_connected	./usb_libusb.c	/^check_device_connected(struct usb_handle *uh)$/;"	f	signature:(struct usb_handle *uh)
check_file	./commandline.c	/^static int check_file(const char* filename)$/;"	f	file:	signature:(const char* filename)
check_header	./adb.h	/^int check_header(apacket *p);$/;"	p	signature:(apacket *p)
check_header	./transport.c	/^int check_header(apacket *p)$/;"	f	signature:(apacket *p)
check_usb_interface	./usb_libusb.c	/^check_usb_interface(libusb_interface *interface,$/;"	f	signature:(libusb_interface *interface, libusb_device_descriptor *desc, struct usb_handle *uh)
check_usb_interfaces	./usb_libusb.c	/^check_usb_interfaces(libusb_config_descriptor *config,$/;"	f	signature:(libusb_config_descriptor *config, libusb_device_descriptor *desc, struct usb_handle *uh)
clazz	./sysdeps_win32.c	/^    FHClass    clazz;$/;"	m	struct:FHRec_	file:	access:public
client_socket_thread	./transport_local.c	/^static void *client_socket_thread(void *x)$/;"	f	file:	signature:(void *x)
close	./adb.h	/^    void (*close)(asocket *s);$/;"	m	struct:asocket	access:public
close	./adb.h	/^    void (*close)(atransport *t);$/;"	m	struct:atransport	access:public
close	./sysdeps.h	125;"	d
close	./sysdeps.h	126;"	d
close	./sysdeps.h	354;"	d
close	./sysdeps.h	355;"	d
closeWithWarning	./libs/libcutils/mq.c	/^static void closeWithWarning(int fd) {$/;"	f	file:	signature:(int fd)
close_all_sockets	./adb.h	/^void close_all_sockets(atransport *t);$/;"	p	signature:(atransport *t)
close_all_sockets	./sockets.c	/^void close_all_sockets(atransport *t)$/;"	f	signature:(atransport *t)
close_memstream	./libs/libcutils/open_memstream.c	/^static int close_memstream(void* cookie)$/;"	f	file:	signature:(void* cookie)
close_on_exec	./sysdeps.h	/^static __inline__ void  close_on_exec(int  fd)$/;"	f	signature:(int fd)
close_usb_devices	./adb.h	/^void close_usb_devices();$/;"	p	signature:()
close_usb_devices	./transport.c	/^void close_usb_devices()$/;"	f
closed	./sysdeps_win32.c	/^    int                closed;$/;"	m	struct:BipBufferRec_	file:	access:public
closing	./adb.h	/^    int    closing;$/;"	m	struct:asocket	access:public
cmp	./libs/libcutils/dir_hash.c	/^static int cmp(const void *a, const void *b) {$/;"	f	file:	signature:(const void *a, const void *b)
cnode	./libs/libcutils/cutils/config_utils.h	/^struct cnode$/;"	s
cnode	./libs/libcutils/cutils/config_utils.h	/^typedef struct cnode cnode;$/;"	t	typeref:struct:cnode
cnode::first_child	./libs/libcutils/cutils/config_utils.h	/^    cnode *first_child;$/;"	m	struct:cnode	access:public
cnode::last_child	./libs/libcutils/cutils/config_utils.h	/^    cnode *last_child;$/;"	m	struct:cnode	access:public
cnode::name	./libs/libcutils/cutils/config_utils.h	/^    const char *name;$/;"	m	struct:cnode	access:public
cnode::next	./libs/libcutils/cutils/config_utils.h	/^    cnode *next;$/;"	m	struct:cnode	access:public
cnode::value	./libs/libcutils/cutils/config_utils.h	/^    const char *value;$/;"	m	struct:cnode	access:public
code	./usb_linux_client.c	/^        __le16 code;$/;"	m	struct:__anon42::__anon43	file:	access:public
com.android.dumpkey	./libs/libmincrypt/tools/DumpPublicKey.java	/^package com.android.dumpkey;$/;"	p
combine_strings	./libs/libcutils/str_parms.c	/^static bool combine_strings(void *key, void *value, void *context)$/;"	f	file:	signature:(void *key, void *value, void *context)
command	./adb.h	/^    unsigned command;       \/* command identifier constant      *\/$/;"	m	struct:amessage	access:public
command	./libs/libcutils/misc_rw.c	/^    char command[32];$/;"	m	struct:bootloader_message	file:	access:public
compar	./libs/libcutils/qsort_r_compat.c	/^    int (*compar)(void*, const void* , const void*);$/;"	m	struct:compar_data	file:	access:public
compar_data	./libs/libcutils/qsort_r_compat.c	/^struct compar_data {$/;"	s	file:
compar_data::compar	./libs/libcutils/qsort_r_compat.c	/^    int (*compar)(void*, const void* , const void*);$/;"	m	struct:compar_data	file:	access:public
compar_data::thunk	./libs/libcutils/qsort_r_compat.c	/^    void* thunk;$/;"	m	struct:compar_data	file:	access:public
compar_data_key	./libs/libcutils/qsort_r_compat.c	/^static thread_store_t compar_data_key = THREAD_STORE_INITIALIZER;$/;"	v	file:
compar_wrapper	./libs/libcutils/qsort_r_compat.c	/^static int compar_wrapper(const void* a, const void* b) {$/;"	f	file:	signature:(const void* a, const void* b)
compar_wrapper	./libs/libcutils/qsort_r_compat.c	/^static int compar_wrapper(const void* a, const void* b, void* data) {$/;"	f	file:	signature:(const void* a, const void* b, void* data)
config_bool	./libs/libcutils/config_utils.c	/^int config_bool(cnode *root, const char *name, int _default)$/;"	f	signature:(cnode *root, const char *name, int _default)
config_bool	./libs/libcutils/cutils/config_utils.h	/^int config_bool(cnode *root, const char *name, int _default);$/;"	p	signature:(cnode *root, const char *name, int _default)
config_find	./libs/libcutils/config_utils.c	/^cnode* config_find(cnode *root, const char *name)$/;"	f	signature:(cnode *root, const char *name)
config_find	./libs/libcutils/cutils/config_utils.h	/^cnode* config_find(cnode *root, const char *name);$/;"	p	signature:(cnode *root, const char *name)
config_free	./libs/libcutils/config_utils.c	/^void config_free(cnode *root)$/;"	f	signature:(cnode *root)
config_free	./libs/libcutils/cutils/config_utils.h	/^void config_free(cnode *root);$/;"	p	signature:(cnode *root)
config_load	./libs/libcutils/config_utils.c	/^void config_load(cnode *root, char *data)$/;"	f	signature:(cnode *root, char *data)
config_load	./libs/libcutils/cutils/config_utils.h	/^void config_load(cnode *root, char *data);$/;"	p	signature:(cnode *root, char *data)
config_load_file	./libs/libcutils/config_utils.c	/^void config_load_file(cnode *root, const char *fn)$/;"	f	signature:(cnode *root, const char *fn)
config_load_file	./libs/libcutils/cutils/config_utils.h	/^void config_load_file(cnode *root, const char *fn);$/;"	p	signature:(cnode *root, const char *fn)
config_node	./libs/libcutils/config_utils.c	/^cnode* config_node(const char *name, const char *value)$/;"	f	signature:(const char *name, const char *value)
config_node	./libs/libcutils/cutils/config_utils.h	/^cnode* config_node(const char *name, const char *value);$/;"	p	signature:(const char *name, const char *value)
config_set	./libs/libcutils/config_utils.c	/^void config_set(cnode *root, const char *name, const char *value)$/;"	f	signature:(cnode *root, const char *name, const char *value)
config_set	./libs/libcutils/cutils/config_utils.h	/^void config_set(cnode *root, const char *name, const char *value);$/;"	p	signature:(cnode *root, const char *name, const char *value)
config_str	./libs/libcutils/config_utils.c	/^const char* config_str(cnode *root, const char *name, const char *_default)$/;"	f	signature:(cnode *root, const char *name, const char *_default)
config_str	./libs/libcutils/cutils/config_utils.h	/^const char* config_str(cnode *root, const char *name, const char *_default);$/;"	p	signature:(cnode *root, const char *name, const char *_default)
connectToServer	./libs/libcutils/properties.c	/^static int connectToServer(const char* fileName)$/;"	f	file:	signature:(const char* fileName)
connect_device	./adb.c	/^void connect_device(char* host, char* buffer, int buffer_size)$/;"	f	signature:(char* host, char* buffer, int buffer_size)
connect_emulator	./adb.c	/^void connect_emulator(char* port_spec, char* buffer, int buffer_size)$/;"	f	signature:(char* port_spec, char* buffer, int buffer_size)
connect_to	./adb.h	/^    const char *connect_to;$/;"	m	struct:alistener	access:public
connect_to_console	./console.c	/^static int  connect_to_console(void)$/;"	f	file:	signature:(void)
connect_to_remote	./adb.h	/^void connect_to_remote(asocket *s, const char *destination);$/;"	p	signature:(asocket *s, const char *destination)
connect_to_remote	./sockets.c	/^void connect_to_remote(asocket *s, const char *destination)$/;"	f	signature:(asocket *s, const char *destination)
connect_to_smartsocket	./adb.h	/^void connect_to_smartsocket(asocket *s);$/;"	p	signature:(asocket *s)
connect_to_smartsocket	./sockets.c	/^void connect_to_smartsocket(asocket *s)$/;"	f	signature:(asocket *s)
connecting	./libs/libcutils/mq.c	/^    PeerProxy* connecting;$/;"	m	struct:PeerProxy	file:	access:public
connection_state	./adb.h	/^    int connection_state;$/;"	m	struct:atransport	access:public
connection_state	./adb.h	/^int connection_state(atransport *t);$/;"	p	signature:(atransport *t)
connection_state_name	./adb.c	/^static char *connection_state_name(atransport *t)$/;"	f	file:	signature:(atransport *t)
connections	./libs/libcutils/mq.c	/^    Hashmap* connections;$/;"	m	struct:PeerProxy	file:	access:public
contents	./libs/libcutils/array.c	/^    void** contents;$/;"	m	struct:Array	file:	access:public
context	./libs/libcutils/mq.c	/^    void* context;$/;"	m	struct:OutgoingPacket	file:	access:public
context	./libs/libcutils/mq.c	/^    void* context;$/;"	m	struct:__anon12	file:	access:public
control	./usb_linux_client.c	/^    int control;$/;"	m	struct:usb_handle	file:	access:public
cookie	./services.c	/^    void *cookie;$/;"	m	struct:stinfo	file:	access:public
copy_local_dir_remote	./file_sync_client.c	/^static int copy_local_dir_remote(int fd, const char *lpath, const char *rpath, int checktimestamps, int listonly)$/;"	f	file:	signature:(int fd, const char *lpath, const char *rpath, int checktimestamps, int listonly)
copy_remote_dir_local	./file_sync_client.c	/^static int copy_remote_dir_local(int fd, const char *rpath, const char *lpath,$/;"	f	file:	signature:(int fd, const char *rpath, const char *lpath, int checktimestamps)
copy_to_file	./commandline.c	/^static void copy_to_file(int inFd, int outFd) {$/;"	f	file:	signature:(int inFd, int outFd)
copyinfo	./file_sync_client.c	/^struct copyinfo$/;"	s	file:
copyinfo	./file_sync_client.c	/^typedef struct copyinfo copyinfo;$/;"	t	typeref:struct:copyinfo	file:
copyinfo::dst	./file_sync_client.c	/^    const char *dst;$/;"	m	struct:copyinfo	file:	access:public
copyinfo::flag	./file_sync_client.c	/^    int flag;$/;"	m	struct:copyinfo	file:	access:public
copyinfo::mode	./file_sync_client.c	/^    unsigned int mode;$/;"	m	struct:copyinfo	file:	access:public
copyinfo::next	./file_sync_client.c	/^    copyinfo *next;$/;"	m	struct:copyinfo	file:	access:public
copyinfo::size	./file_sync_client.c	/^    unsigned int size;$/;"	m	struct:copyinfo	file:	access:public
copyinfo::src	./file_sync_client.c	/^    const char *src;$/;"	m	struct:copyinfo	file:	access:public
copyinfo::time	./file_sync_client.c	/^    unsigned int time;$/;"	m	struct:copyinfo	file:	access:public
count	./libs/libmincrypt/mincrypt/sha.h	/^    uint64_t count;$/;"	m	struct:SHA_CTX	access:public
cpu_to_le16	./usb_linux_client.c	37;"	d	file:
cpu_to_le32	./usb_linux_client.c	38;"	d	file:
creat	./sysdeps.h	397;"	d
creat	./sysdeps.h	398;"	d
createEntry	./libs/libcutils/hashmap.c	/^static Entry* createEntry(void* key, int hash, void* value) {$/;"	f	file:	signature:(void* key, int hash, void* value)
create_device_tracker	./adb.h	/^asocket*  create_device_tracker(void);$/;"	p	signature:(void)
create_device_tracker	./transport.c	/^create_device_tracker(void)$/;"	f	signature:(void)
create_host_service_socket	./sockets.c	/^static asocket *create_host_service_socket(const char *name, const char* serial)$/;"	f	file:	signature:(const char *name, const char* serial)
create_jdwp_connection_fd	./adb.h	/^int       create_jdwp_connection_fd(int  jdwp_pid);$/;"	p	signature:(int jdwp_pid)
create_jdwp_connection_fd	./jdwp_service.c	/^create_jdwp_connection_fd(int  pid)$/;"	f	signature:(int pid)
create_jdwp_service_socket	./adb.h	/^asocket*  create_jdwp_service_socket();$/;"	p	signature:()
create_jdwp_service_socket	./jdwp_service.c	/^create_jdwp_service_socket( void )$/;"	f	signature:( void )
create_jdwp_tracker_service_socket	./adb.h	/^asocket*  create_jdwp_tracker_service_socket();$/;"	p	signature:()
create_jdwp_tracker_service_socket	./jdwp_service.c	/^create_jdwp_tracker_service_socket( void )$/;"	f	signature:( void )
create_local_service_socket	./adb.h	/^asocket *create_local_service_socket(const char *destination);$/;"	p	signature:(const char *destination)
create_local_service_socket	./sockets.c	/^asocket *create_local_service_socket(const char *name)$/;"	f	signature:(const char *name)
create_local_socket	./adb.h	/^asocket *create_local_socket(int fd);$/;"	p	signature:(int fd)
create_local_socket	./sockets.c	/^asocket *create_local_socket(int fd)$/;"	f	signature:(int fd)
create_remote_socket	./adb.h	/^asocket *create_remote_socket(unsigned id, atransport *t);$/;"	p	signature:(unsigned id, atransport *t)
create_remote_socket	./sockets.c	/^asocket *create_remote_socket(unsigned id, atransport *t)$/;"	f	signature:(unsigned id, atransport *t)
create_service_thread	./services.c	/^static int create_service_thread(void (*func)(int, void *), void *cookie)$/;"	f	file:	signature:(void (*func)(int, void *), void *cookie)
create_smart_socket	./sockets.c	/^asocket *create_smart_socket(void (*action_cb)(asocket *s, const char *act))$/;"	f	signature:(void (*action_cb)(asocket *s, const char *act))
create_subproc_thread	./services.c	/^static int create_subproc_thread(const char *name)$/;"	f	file:	signature:(const char *name)
create_subprocess	./services.c	/^static int create_subprocess(const char *cmd, const char *arg0, const char *arg1, pid_t *pid)$/;"	f	file:	signature:(const char *cmd, const char *arg0, const char *arg1, pid_t *pid)
credentials	./libs/libcutils/mq.c	/^        Credentials credentials; $/;"	m	union:__anon8::__anon9	file:	access:public
credentials	./libs/libcutils/mq.c	/^    Credentials credentials;$/;"	m	struct:PeerProxy	file:	access:public
cstate	./libs/libcutils/config_utils.c	/^} cstate;$/;"	t	typeref:struct:__anon3	file:
ctime_r	./libs/libcutils/private.h	/^char *ctime_r P((time_t const *, char *));$/;"	p	signature:(time_t const *, char *)
ctime_r	./libs/libcutils/private.h	339;"	d
ctime_r	./libs/libcutils/private.h	81;"	d
ctrlc_handler	./adb.c	/^static BOOL WINAPI ctrlc_handler(DWORD type)$/;"	f	file:	signature:(DWORD type)
ctx	./usb_libusb.c	/^static libusb_context *ctx = NULL;$/;"	v	file:
currentPacket	./libs/libcutils/mq.c	/^    OutgoingPacket* currentPacket;$/;"	m	struct:PeerProxy	file:	access:public
currentRunLoop	./usb_osx.c	/^static CFRunLoopRef currentRunLoop = 0;$/;"	v	file:
data	./adb.h	/^    unsigned char data[MAX_PAYLOAD];$/;"	m	struct:apacket	access:public
data	./file_sync_client.c	/^    char data[SYNC_DATA_MAX];$/;"	m	struct:syncsendbuf	file:	access:public
data	./file_sync_service.h	/^    } data;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon37	access:public
data	./libs/libcutils/buffer.h	/^    char* data;$/;"	m	struct:__anon1	access:public
data	./libs/libcutils/config_utils.c	/^    char *data;$/;"	m	struct:__anon3	file:	access:public
data	./libs/libcutils/cutils/native_handle.h	/^    int data[0];        \/* numFds + numInts ints *\/$/;"	m	struct:native_handle	access:public
data	./libs/libcutils/cutils/selector.h	/^    void* data;$/;"	m	struct:SelectableFd	access:public
data_check	./adb.h	/^    unsigned data_check;    \/* checksum of data payload         *\/$/;"	m	struct:amessage	access:public
data_length	./adb.h	/^    unsigned data_length;   \/* length of payload (0 is allowed) *\/$/;"	m	struct:amessage	access:public
date_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *date_fmt;$/;"	m	struct:strftime_locale	access:public
daylight	./libs/libcutils/tztime.c	/^int			daylight = 0;$/;"	v
dead	./usb_linux.c	/^    int dead;$/;"	m	struct:usb_handle	file:	access:public
deadPeerCursor	./libs/libcutils/mq.c	/^    size_t deadPeerCursor;$/;"	m	struct:__anon11	file:	access:public
deadPeers	./libs/libcutils/mq.c	/^    pid_t deadPeers[PEER_HISTORY];$/;"	m	struct:__anon11	file:	access:public
debugger_action_t	./libs/libcutils/cutils/debugger.h	/^} debugger_action_t;$/;"	t	typeref:enum:__anon24
debugger_msg_t	./libs/libcutils/cutils/debugger.h	/^} debugger_msg_t;$/;"	t	typeref:struct:__anon25
debuggerd_connect	./libs/libcutils/cutils/misc.h	/^extern void debuggerd_connect(void);$/;"	p	signature:(void)
delete_file	./commandline.c	/^static int delete_file(transport_type transport, char* serial, char* filename)$/;"	f	file:	signature:(transport_type transport, char* serial, char* filename)
dent	./file_sync_service.h	/^    } dent;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon36	access:public
desc	./usb_linux.c	/^    int desc;$/;"	m	struct:usb_handle	file:	access:public
descriptors	./usb_linux_client.c	/^} __attribute__((packed)) descriptors = {$/;"	v	typeref:struct:__anon40	file:
detzcode	./libs/libcutils/tztime.c	/^detzcode(codep)$/;"	f	file:
detzcode	./libs/libcutils/tztime.c	/^static long		detzcode P((const char * codep));$/;"	p	file:	signature:(const char * codep)
detzcode64	./libs/libcutils/tztime.c	/^detzcode64(codep)$/;"	f	file:
detzcode64	./libs/libcutils/tztime.c	/^static time_t		detzcode64 P((const char * codep));$/;"	p	file:	signature:(const char * codep)
dev	./usb_libusb.c	/^    libusb_device         *dev;$/;"	m	struct:usb_handle	file:	access:public
dev_addr	./usb_libusb.c	/^    uint8_t               dev_addr;$/;"	m	struct:usb_handle	file:	access:public
dev_bus	./usb_libusb.c	/^    uint8_t               dev_bus;$/;"	m	struct:usb_handle	file:	access:public
devh	./usb_libusb.c	/^    libusb_device_handle  *devh;$/;"	m	struct:usb_handle	file:	access:public
device	./adb.h	/^    char *device;$/;"	m	struct:atransport	access:public
device	./qemu/qemu.h	/^    char   device[32];$/;"	m	struct:__anon28	access:public
device_poll_thread	./usb_libusb.c	/^device_poll_thread(void* unused)$/;"	f	signature:(void* unused)
device_poll_thread	./usb_linux.c	/^void* device_poll_thread(void* unused)$/;"	f	signature:(void* unused)
device_poll_thread	./usb_windows.c	/^void* device_poll_thread(void* unused) {$/;"	f	signature:(void* unused)
device_poll_thread	./usb_windows.c	/^void* device_poll_thread(void* unused);$/;"	p	file:	signature:(void* unused)
device_tracker	./transport.c	/^struct device_tracker {$/;"	s	file:
device_tracker	./transport.c	/^typedef struct device_tracker  device_tracker;$/;"	t	typeref:struct:device_tracker	file:
device_tracker::next	./transport.c	/^    device_tracker*  next;$/;"	m	struct:device_tracker	file:	access:public
device_tracker::socket	./transport.c	/^    asocket          socket;$/;"	m	struct:device_tracker	file:	access:public
device_tracker::update_needed	./transport.c	/^    int              update_needed;$/;"	m	struct:device_tracker	file:	access:public
device_tracker_close	./transport.c	/^device_tracker_close( asocket*  socket )$/;"	f	file:	signature:( asocket* socket )
device_tracker_enqueue	./transport.c	/^device_tracker_enqueue( asocket*  socket, apacket*  p )$/;"	f	file:	signature:( asocket* socket, apacket* p )
device_tracker_list	./transport.c	/^static device_tracker*   device_tracker_list;$/;"	v	file:
device_tracker_ready	./transport.c	/^device_tracker_ready( asocket*  socket )$/;"	f	file:	signature:( asocket* socket )
device_tracker_remove	./transport.c	/^device_tracker_remove( device_tracker*  tracker )$/;"	f	file:	signature:( device_tracker* tracker )
device_tracker_send	./transport.c	/^device_tracker_send( device_tracker*  tracker,$/;"	f	file:	signature:( device_tracker* tracker, const char* buffer, int len )
devpath	./adb.h	/^    char *devpath;$/;"	m	struct:atransport	access:public
differ_by_repeat	./libs/libcutils/tztime.c	/^differ_by_repeat(t1, t0)$/;"	f	file:
differ_by_repeat	./libs/libcutils/tztime.c	/^static int		differ_by_repeat P((time_t t1, time_t t0));$/;"	p	file:	signature:(time_t t1, time_t t0)
dirlist	./file_sync_client.c	/^    copyinfo **dirlist;$/;"	m	struct:__anon32	file:	access:public
disable_tcp_nagle	./sysdeps.h	/^extern void  disable_tcp_nagle(int  fd);$/;"	p	signature:(int fd)
disable_tcp_nagle	./sysdeps.h	/^static __inline__ void  disable_tcp_nagle(int fd)$/;"	f	signature:(int fd)
disable_tcp_nagle	./sysdeps_win32.c	/^void  disable_tcp_nagle(int fd)$/;"	f	signature:(int fd)
disconnect	./adb.h	/^    adisconnect  disconnect;$/;"	m	struct:alistener	access:public
disconnect	./sockets.c	/^    adisconnect  disconnect;$/;"	m	struct:aremotesocket	file:	access:public
disconnects	./adb.h	/^    adisconnect  disconnects;$/;"	m	struct:atransport	access:public
dlmalloc_inspect_all	./libs/libcutils/dlmalloc_stubs.c	/^void dlmalloc_inspect_all(void(*handler)(void*, void *, size_t, void*),$/;"	f	signature:(void(*handler)(void*, void *, size_t, void*), void* arg)
dlmalloc_trim	./libs/libcutils/dlmalloc_stubs.c	/^int dlmalloc_trim(size_t unused)$/;"	f	signature:(size_t unused)
dns_lock	./services.c	/^ADB_MUTEX_DEFINE( dns_lock );$/;"	v
dns_service	./services.c	/^static void dns_service(int fd, void *cookie)$/;"	f	file:	signature:(int fd, void *cookie)
do_cmd	./commandline.c	/^static int do_cmd(transport_type ttype, char* serial, char *cmd, ...)$/;"	f	file:	signature:(transport_type ttype, char* serial, char *cmd, ...)
do_cmd	./commandline.c	/^static int do_cmd(transport_type ttype, char* serial, char *cmd, ...);$/;"	p	file:	signature:(transport_type ttype, char* serial, char *cmd, ...)
do_list	./file_sync_service.c	/^static int do_list(int s, const char *path)$/;"	f	file:	signature:(int s, const char *path)
do_recv	./file_sync_service.c	/^static int do_recv(int s, const char *path, char *buffer)$/;"	f	file:	signature:(int s, const char *path, char *buffer)
do_send	./file_sync_service.c	/^static int do_send(int s, char *path, char *buffer)$/;"	f	file:	signature:(int s, char *path, char *buffer)
do_stat	./file_sync_service.c	/^static int do_stat(int s, const char *path)$/;"	f	file:	signature:(int s, const char *path)
do_sync_ls	./file_sync_client.c	/^int do_sync_ls(const char *path)$/;"	f	signature:(const char *path)
do_sync_ls	./file_sync_service.h	/^int do_sync_ls(const char *path);$/;"	p	signature:(const char *path)
do_sync_ls_cb	./file_sync_client.c	/^static void do_sync_ls_cb(unsigned mode, unsigned size, unsigned time,$/;"	f	file:	signature:(unsigned mode, unsigned size, unsigned time, const char *name, void *cookie)
do_sync_pull	./file_sync_client.c	/^int do_sync_pull(const char *rpath, const char *lpath)$/;"	f	signature:(const char *rpath, const char *lpath)
do_sync_pull	./file_sync_service.h	/^int do_sync_pull(const char *rpath, const char *lpath);$/;"	p	signature:(const char *rpath, const char *lpath)
do_sync_push	./file_sync_client.c	/^int do_sync_push(const char *lpath, const char *rpath, int verifyApk)$/;"	f	signature:(const char *lpath, const char *rpath, int verifyApk)
do_sync_push	./file_sync_service.h	/^int do_sync_push(const char *lpath, const char *rpath, int verifyApk);$/;"	p	signature:(const char *lpath, const char *rpath, int verifyApk)
do_sync_sync	./file_sync_client.c	/^int do_sync_sync(const char *lpath, const char *rpath, int listonly)$/;"	f	signature:(const char *lpath, const char *rpath, int listonly)
do_sync_sync	./file_sync_service.h	/^int do_sync_sync(const char *lpath, const char *rpath, int listonly);$/;"	p	signature:(const char *lpath, const char *rpath, int listonly)
do_usb_open	./usb_windows.c	/^usb_handle* do_usb_open(const wchar_t* interface_name) {$/;"	f	signature:(const wchar_t* interface_name)
do_usb_open	./usb_windows.c	/^usb_handle* do_usb_open(const wchar_t* interface_name);$/;"	p	file:	signature:(const wchar_t* interface_name)
dst	./file_sync_client.c	/^    const char *dst;$/;"	m	struct:copyinfo	file:	access:public
dump_all_fds	./fdevent.c	/^static inline void dump_all_fds(const char *extra_msg) {}$/;"	f	file:	signature:(const char *extra_msg)
dump_all_fds	./fdevent.c	/^static void dump_all_fds(const char *extra_msg)$/;"	f	file:	signature:(const char *extra_msg)
dump_backtrace_to_file	./libs/libcutils/cutils/debugger.h	/^int dump_backtrace_to_file(pid_t tid, int fd);$/;"	p	signature:(pid_t tid, int fd)
dump_backtrace_to_file	./libs/libcutils/debugger.c	/^int dump_backtrace_to_file(pid_t tid, int fd) {$/;"	f	signature:(pid_t tid, int fd)
dump_entry	./libs/libcutils/str_parms.c	/^static bool dump_entry(void *key, void *value, void *context)$/;"	f	file:	signature:(void *key, void *value, void *context)
dump_fde	./fdevent.c	/^static void dump_fde(fdevent *fde, const char *info)$/;"	f	file:	signature:(fdevent *fde, const char *info)
dump_fde	./fdevent.c	82;"	d	file:
dump_fde	./sysdeps_win32.c	/^static void dump_fde(fdevent *fde, const char *info)$/;"	f	file:	signature:(fdevent *fde, const char *info)
dump_fde	./sysdeps_win32.c	1256;"	d	file:
dump_hex	./transport.c	/^static void  dump_hex( const unsigned char*  ptr, size_t  len )$/;"	f	file:	signature:( const unsigned char* ptr, size_t len )
dump_packet	./transport.c	/^dump_packet(const char* name, const char* func, apacket* p)$/;"	f	file:	signature:(const char* name, const char* func, apacket* p)
dump_tombstone	./libs/libcutils/cutils/debugger.h	/^int dump_tombstone(pid_t tid, char* pathbuf, size_t pathlen);$/;"	p	signature:(pid_t tid, char* pathbuf, size_t pathlen)
dump_tombstone	./libs/libcutils/debugger.c	/^int dump_tombstone(pid_t tid, char* pathbuf, size_t pathlen) {$/;"	f	signature:(pid_t tid, char* pathbuf, size_t pathlen)
dupAndQuote	./commandline.c	/^dupAndQuote(const char *s)$/;"	f	file:	signature:(const char *s)
eatWakeupData	./libs/libcutils/selector.c	/^static void eatWakeupData(SelectableFd* wakeupFd) {$/;"	f	file:	signature:(SelectableFd* wakeupFd)
elsieid	./libs/libcutils/tzstrftime.c	/^static char	elsieid[] = "@(#)strftime.c	8.1";$/;"	v	file:
elsieid	./libs/libcutils/tztime.c	/^static char	elsieid[] = "@(#)localtime.c	8.3";$/;"	v	file:
end_point_address	./usb_libusb.c	/^    unsigned char         end_point_address[2];$/;"	m	struct:usb_handle	file:	access:public
enqueue	./adb.h	/^    int (*enqueue)(asocket *s, apacket *pkt);$/;"	m	struct:asocket	access:public
ensureCapacity	./libs/libcutils/array.c	/^static int ensureCapacity(Array* array, int capacity) {$/;"	f	file:	signature:(Array* array, int capacity)
ensureCapacity	./libs/libcutils/open_memstream.c	/^static int ensureCapacity(MemStream* stream, int writeSize)$/;"	f	file:	signature:(MemStream* stream, int writeSize)
env_lock	./libs/libcutils/properties.c	/^static mutex_t  env_lock = MUTEX_INITIALIZER;$/;"	v	file:
eof	./libs/libcutils/open_memstream.c	/^    size_t      eof;        \/* furthest point we've written to *\/$/;"	m	struct:__anon4	file:	access:public
eof	./sysdeps_win32.c	/^    int        eof;$/;"	m	struct:FHRec_	file:	access:public
ep_in	./usb_linux.c	/^    unsigned char ep_in;$/;"	m	struct:usb_handle	file:	access:public
ep_out	./usb_linux.c	/^    unsigned char ep_out;$/;"	m	struct:usb_handle	file:	access:public
epoll_fd	./fdevent.c	/^static int epoll_fd = -1;$/;"	v	file:
equalKeys	./libs/libcutils/hashmap.c	/^static inline bool equalKeys(void* keyA, int hashA, void* keyB, int hashB,$/;"	f	file:	signature:(void* keyA, int hashA, void* keyB, int hashB, bool (*equals)(void*, void*))
equals	./libs/libcutils/hashmap.c	/^    bool (*equals)(void* keyA, void* keyB);$/;"	m	struct:Hashmap	file:	access:public
erase_footer	./libs/libcutils/cutils/partition_utils.h	/^void erase_footer(const char *dev_path, long long size);$/;"	p	signature:(const char *dev_path, long long size)
error_fds	./fdevent.c	/^static fd_set error_fds;$/;"	v	file:
euid	./libs/libcutils/cutils/logger.h	/^    uint32_t    euid;      \/* effective UID of logger *\/$/;"	m	struct:logger_entry_v2	access:public
event	./sysdeps_win32.c	/^    HANDLE    event;$/;"	m	struct:FHRec_	file:	access:public
event_hook_alloc	./sysdeps_win32.c	/^event_hook_alloc( FH  fh )$/;"	f	file:	signature:( FH fh )
event_hook_free	./sysdeps_win32.c	/^event_hook_free( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
event_hook_signal	./sysdeps_win32.c	/^event_hook_signal( EventHook  hook )$/;"	f	file:	signature:( EventHook hook )
event_looper_find_p	./sysdeps_win32.c	/^event_looper_find_p( EventLooper  looper, FH  fh )$/;"	f	file:	signature:( EventLooper looper, FH fh )
event_looper_hook	./sysdeps_win32.c	/^event_looper_hook( EventLooper  looper, int  fd, int  events )$/;"	f	file:	signature:( EventLooper looper, int fd, int events )
event_looper_unhook	./sysdeps_win32.c	/^event_looper_unhook( EventLooper  looper, int  fd, int  events )$/;"	f	file:	signature:( EventLooper looper, int fd, int events )
events	./fdevent.h	/^    unsigned short events;$/;"	m	struct:fdevent	access:public
events	./sysdeps.h	/^    unsigned short events;$/;"	m	struct:fdevent	access:public
evt_read	./sysdeps_win32.c	/^    HANDLE             evt_read;   \/* event signaled when one can read from a buffer *\/$/;"	m	struct:BipBufferRec_	file:	access:public
evt_write	./sysdeps_win32.c	/^    HANDLE             evt_write;  \/* event signaled when one can write to a buffer  *\/$/;"	m	struct:BipBufferRec_	file:	access:public
exceptFds	./libs/libcutils/selector.c	/^    fd_set exceptFds;$/;"	m	struct:Selector	file:	access:public
exit_on_close	./adb.h	/^    int    exit_on_close;$/;"	m	struct:asocket	access:public
expandIfNecessary	./libs/libcutils/hashmap.c	/^static void expandIfNecessary(Hashmap* map) {$/;"	f	file:	signature:(Hashmap* map)
expected	./libs/libcutils/buffer.h	/^        size_t expected;$/;"	m	union:__anon1::__anon2	access:public
exponent	./libs/libmincrypt/mincrypt/rsa.h	/^    int exponent;             \/* 3 or 65537 *\/$/;"	m	struct:RSAPublicKey	access:public
extra	./adb.h	/^    void *extra;$/;"	m	struct:asocket	access:public
fail_errno	./file_sync_service.c	/^static int fail_errno(int s)$/;"	f	file:	signature:(int s)
fail_message	./file_sync_service.c	/^static int fail_message(int s, const char *reason)$/;"	f	file:	signature:(int s, const char *reason)
failed_auth_attempts	./adb.h	/^    unsigned failed_auth_attempts;$/;"	m	struct:atransport	access:public
fatal	./adb.c	/^void fatal(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
fatal	./adb.h	/^void fatal(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
fatal	./fdevent.c	/^static void fatal(const char *fn, const char *fmt, ...)$/;"	f	file:	signature:(const char *fn, const char *fmt, ...)
fatal	./sysdeps_win32.c	/^extern void fatal(const char *fmt, ...);$/;"	p	file:	signature:(const char *fmt, ...)
fatal_errno	./adb.c	/^void fatal_errno(const char *fmt, ...)$/;"	f	signature:(const char *fmt, ...)
fatal_errno	./adb.h	/^void fatal_errno(const char *fmt, ...);$/;"	p	signature:(const char *fmt, ...)
fbinfo	./framebuffer_service.c	/^struct fbinfo {$/;"	s	file:
fbinfo::alpha_length	./framebuffer_service.c	/^    unsigned int alpha_length;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::alpha_offset	./framebuffer_service.c	/^    unsigned int alpha_offset;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::blue_length	./framebuffer_service.c	/^    unsigned int blue_length;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::blue_offset	./framebuffer_service.c	/^    unsigned int blue_offset;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::bpp	./framebuffer_service.c	/^    unsigned int bpp;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::green_length	./framebuffer_service.c	/^    unsigned int green_length;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::green_offset	./framebuffer_service.c	/^    unsigned int green_offset;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::height	./framebuffer_service.c	/^    unsigned int height;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::red_length	./framebuffer_service.c	/^    unsigned int red_length;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::red_offset	./framebuffer_service.c	/^    unsigned int red_offset;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::size	./framebuffer_service.c	/^    unsigned int size;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::version	./framebuffer_service.c	/^    unsigned int version;$/;"	m	struct:fbinfo	file:	access:public
fbinfo::width	./framebuffer_service.c	/^    unsigned int width;$/;"	m	struct:fbinfo	file:	access:public
fd	./adb.h	/^    int fd;$/;"	m	struct:alistener	access:public
fd	./adb.h	/^    int fd;$/;"	m	struct:asocket	access:public
fd	./adb.h	/^    int fd;$/;"	m	struct:atransport	access:public
fd	./backup_service.c	/^    int fd;$/;"	m	struct:__anon39	file:	access:public
fd	./fdevent.h	/^    int fd;$/;"	m	struct:fdevent	access:public
fd	./libs/libcutils/cutils/abort_socket.h	/^    int fd;           \/* primary socket fd *\/$/;"	m	struct:asocket	access:public
fd	./libs/libcutils/cutils/selector.h	/^    int fd;$/;"	m	struct:SelectableFd	access:public
fd	./libs/libcutils/mq.c	/^    SelectableFd* fd;$/;"	m	struct:PeerProxy	file:	access:public
fd	./libs/libcutils/record_stream.c	/^    int fd;$/;"	m	struct:RecordStream	file:	access:public
fd	./qemu/qemu.h	/^    int    fd;$/;"	m	struct:__anon28	access:public
fd	./services.c	/^    int fd;$/;"	m	struct:stinfo	file:	access:public
fd	./sysdeps.h	/^    int fd;$/;"	m	struct:fdevent	access:public
fd	./usb_linux_client.c	/^    int fd;$/;"	m	struct:usb_handle	file:	access:public
fd_func	./fdevent.h	/^typedef void (*fd_func)(int fd, unsigned events, void *userdata);$/;"	t
fd_func	./sysdeps.h	/^typedef void (*fd_func)(int fd, unsigned events, void *userdata);$/;"	t
fd_table	./fdevent.c	/^static fdevent **fd_table = 0;$/;"	v	file:
fd_table	./sysdeps_win32.c	/^static fdevent **fd_table = 0;$/;"	v	file:
fd_table_max	./fdevent.c	/^static int fd_table_max = 0;$/;"	v	file:
fd_table_max	./sysdeps_win32.c	/^static int       fd_table_max = 0;$/;"	v	file:
fde	./adb.h	/^    fdevent fde;$/;"	m	struct:alistener	access:public
fde	./adb.h	/^    fdevent fde;$/;"	m	struct:asocket	access:public
fde	./jdwp_service.c	/^    fdevent*      fde;$/;"	m	struct:JdwpProcess	file:	access:public
fde	./jdwp_service.c	/^    fdevent*  fde;$/;"	m	struct:__anon44	file:	access:public
fdevent	./fdevent.h	/^struct fdevent $/;"	s
fdevent	./fdevent.h	/^typedef struct fdevent fdevent;$/;"	t	typeref:struct:fdevent
fdevent	./sysdeps.h	/^struct fdevent {$/;"	s
fdevent	./sysdeps.h	/^typedef struct fdevent fdevent;$/;"	t	typeref:struct:fdevent
fdevent::arg	./fdevent.h	/^    void *arg;$/;"	m	struct:fdevent	access:public
fdevent::arg	./sysdeps.h	/^    void *arg;$/;"	m	struct:fdevent	access:public
fdevent::events	./fdevent.h	/^    unsigned short events;$/;"	m	struct:fdevent	access:public
fdevent::events	./sysdeps.h	/^    unsigned short events;$/;"	m	struct:fdevent	access:public
fdevent::fd	./fdevent.h	/^    int fd;$/;"	m	struct:fdevent	access:public
fdevent::fd	./sysdeps.h	/^    int fd;$/;"	m	struct:fdevent	access:public
fdevent::force_eof	./fdevent.h	/^    int force_eof;$/;"	m	struct:fdevent	access:public
fdevent::force_eof	./sysdeps.h	/^    int force_eof;$/;"	m	struct:fdevent	access:public
fdevent::func	./fdevent.h	/^    fd_func func;$/;"	m	struct:fdevent	access:public
fdevent::func	./sysdeps.h	/^    fd_func func;$/;"	m	struct:fdevent	access:public
fdevent::next	./fdevent.h	/^    fdevent *next;$/;"	m	struct:fdevent	access:public
fdevent::next	./sysdeps.h	/^    fdevent *next;$/;"	m	struct:fdevent	access:public
fdevent::prev	./fdevent.h	/^    fdevent *prev;$/;"	m	struct:fdevent	access:public
fdevent::prev	./sysdeps.h	/^    fdevent *prev;$/;"	m	struct:fdevent	access:public
fdevent::state	./fdevent.h	/^    unsigned short state;$/;"	m	struct:fdevent	access:public
fdevent::state	./sysdeps.h	/^    unsigned short state;$/;"	m	struct:fdevent	access:public
fdevent_add	./fdevent.c	/^void fdevent_add(fdevent *fde, unsigned events)$/;"	f	signature:(fdevent *fde, unsigned events)
fdevent_add	./fdevent.h	/^void fdevent_add(fdevent *fde, unsigned events);$/;"	p	signature:(fdevent *fde, unsigned events)
fdevent_add	./sysdeps.h	/^void     fdevent_add(fdevent *fde, unsigned events);$/;"	p	signature:(fdevent *fde, unsigned events)
fdevent_add	./sysdeps_win32.c	/^void fdevent_add(fdevent *fde, unsigned events)$/;"	f	signature:(fdevent *fde, unsigned events)
fdevent_call_fdfunc	./fdevent.c	/^static void fdevent_call_fdfunc(fdevent* fde)$/;"	f	file:	signature:(fdevent* fde)
fdevent_connect	./fdevent.c	/^static void fdevent_connect(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_connect	./sysdeps_win32.c	/^static void fdevent_connect(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_create	./fdevent.c	/^fdevent *fdevent_create(int fd, fd_func func, void *arg)$/;"	f	signature:(int fd, fd_func func, void *arg)
fdevent_create	./fdevent.h	/^fdevent *fdevent_create(int fd, fd_func func, void *arg);$/;"	p	signature:(int fd, fd_func func, void *arg)
fdevent_create	./sysdeps.h	/^fdevent *fdevent_create(int fd, fd_func func, void *arg);$/;"	p	signature:(int fd, fd_func func, void *arg)
fdevent_create	./sysdeps_win32.c	/^fdevent *fdevent_create(int fd, fd_func func, void *arg)$/;"	f	signature:(int fd, fd_func func, void *arg)
fdevent_del	./fdevent.c	/^void fdevent_del(fdevent *fde, unsigned events)$/;"	f	signature:(fdevent *fde, unsigned events)
fdevent_del	./fdevent.h	/^void fdevent_del(fdevent *fde, unsigned events);$/;"	p	signature:(fdevent *fde, unsigned events)
fdevent_del	./sysdeps.h	/^void     fdevent_del(fdevent *fde, unsigned events);$/;"	p	signature:(fdevent *fde, unsigned events)
fdevent_del	./sysdeps_win32.c	/^void fdevent_del(fdevent *fde, unsigned events)$/;"	f	signature:(fdevent *fde, unsigned events)
fdevent_destroy	./fdevent.c	/^void fdevent_destroy(fdevent *fde)$/;"	f	signature:(fdevent *fde)
fdevent_destroy	./fdevent.h	/^void fdevent_destroy(fdevent *fde);$/;"	p	signature:(fdevent *fde)
fdevent_destroy	./sysdeps.h	/^void     fdevent_destroy(fdevent *fde);$/;"	p	signature:(fdevent *fde)
fdevent_destroy	./sysdeps_win32.c	/^void fdevent_destroy(fdevent *fde)$/;"	f	signature:(fdevent *fde)
fdevent_disconnect	./fdevent.c	/^static void fdevent_disconnect(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_disconnect	./sysdeps_win32.c	/^static void fdevent_disconnect(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_fd_check	./fdevent.c	/^static int fdevent_fd_check(fd_set *fds)$/;"	f	file:	signature:(fd_set *fds)
fdevent_init	./fdevent.c	/^static void fdevent_init()$/;"	f	file:
fdevent_init	./fdevent.c	/^static void fdevent_init(void)$/;"	f	file:	signature:(void)
fdevent_init	./sysdeps_win32.c	/^static void fdevent_init(void)$/;"	f	file:	signature:(void)
fdevent_install	./fdevent.c	/^void fdevent_install(fdevent *fde, int fd, fd_func func, void *arg)$/;"	f	signature:(fdevent *fde, int fd, fd_func func, void *arg)
fdevent_install	./fdevent.h	/^void fdevent_install(fdevent *fde, int fd, fd_func func, void *arg);$/;"	p	signature:(fdevent *fde, int fd, fd_func func, void *arg)
fdevent_install	./sysdeps.h	/^void     fdevent_install(fdevent *fde, int fd, fd_func func, void *arg);$/;"	p	signature:(fdevent *fde, int fd, fd_func func, void *arg)
fdevent_install	./sysdeps_win32.c	/^void fdevent_install(fdevent *fde, int fd, fd_func func, void *arg)$/;"	f	signature:(fdevent *fde, int fd, fd_func func, void *arg)
fdevent_loop	./fdevent.c	/^void fdevent_loop()$/;"	f
fdevent_loop	./fdevent.h	/^void fdevent_loop();$/;"	p	signature:()
fdevent_loop	./sysdeps.h	/^void     fdevent_loop();$/;"	p	signature:()
fdevent_loop	./sysdeps_win32.c	/^void fdevent_loop()$/;"	f
fdevent_plist_dequeue	./fdevent.c	/^static fdevent *fdevent_plist_dequeue(void)$/;"	f	file:	signature:(void)
fdevent_plist_dequeue	./fdevent.c	/^static fdevent *fdevent_plist_dequeue(void);$/;"	p	file:	signature:(void)
fdevent_plist_dequeue	./sysdeps_win32.c	/^static fdevent *fdevent_plist_dequeue(void)$/;"	f	file:	signature:(void)
fdevent_plist_dequeue	./sysdeps_win32.c	/^static fdevent *fdevent_plist_dequeue(void);$/;"	p	file:	signature:(void)
fdevent_plist_enqueue	./fdevent.c	/^static void fdevent_plist_enqueue(fdevent *node)$/;"	f	file:	signature:(fdevent *node)
fdevent_plist_enqueue	./fdevent.c	/^static void fdevent_plist_enqueue(fdevent *node);$/;"	p	file:	signature:(fdevent *node)
fdevent_plist_enqueue	./sysdeps_win32.c	/^static void fdevent_plist_enqueue(fdevent *node)$/;"	f	file:	signature:(fdevent *node)
fdevent_plist_enqueue	./sysdeps_win32.c	/^static void fdevent_plist_enqueue(fdevent *node);$/;"	p	file:	signature:(fdevent *node)
fdevent_plist_remove	./fdevent.c	/^static void fdevent_plist_remove(fdevent *node)$/;"	f	file:	signature:(fdevent *node)
fdevent_plist_remove	./fdevent.c	/^static void fdevent_plist_remove(fdevent *node);$/;"	p	file:	signature:(fdevent *node)
fdevent_plist_remove	./sysdeps_win32.c	/^static void fdevent_plist_remove(fdevent *node)$/;"	f	file:	signature:(fdevent *node)
fdevent_plist_remove	./sysdeps_win32.c	/^static void fdevent_plist_remove(fdevent *node);$/;"	p	file:	signature:(fdevent *node)
fdevent_process	./fdevent.c	/^static void fdevent_process()$/;"	f	file:
fdevent_process	./sysdeps_win32.c	/^static void fdevent_process()$/;"	f	file:
fdevent_register	./fdevent.c	/^static void fdevent_register(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_register	./sysdeps_win32.c	/^static void fdevent_register(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_remove	./fdevent.c	/^void fdevent_remove(fdevent *fde)$/;"	f	signature:(fdevent *fde)
fdevent_remove	./fdevent.h	/^void fdevent_remove(fdevent *item);$/;"	p	signature:(fdevent *item)
fdevent_remove	./sysdeps.h	/^void     fdevent_remove(fdevent *item);$/;"	p	signature:(fdevent *item)
fdevent_remove	./sysdeps_win32.c	/^void fdevent_remove(fdevent *fde)$/;"	f	signature:(fdevent *fde)
fdevent_set	./fdevent.c	/^void fdevent_set(fdevent *fde, unsigned events)$/;"	f	signature:(fdevent *fde, unsigned events)
fdevent_set	./fdevent.h	/^void fdevent_set(fdevent *fde, unsigned events);$/;"	p	signature:(fdevent *fde, unsigned events)
fdevent_set	./sysdeps.h	/^void     fdevent_set(fdevent *fde, unsigned events);$/;"	p	signature:(fdevent *fde, unsigned events)
fdevent_set	./sysdeps_win32.c	/^void fdevent_set(fdevent *fde, unsigned events)$/;"	f	signature:(fdevent *fde, unsigned events)
fdevent_set_timeout	./fdevent.h	/^void fdevent_set_timeout(fdevent *fde, int64_t  timeout_ms);$/;"	p	signature:(fdevent *fde, int64_t timeout_ms)
fdevent_subproc_event_func	./fdevent.c	/^static void fdevent_subproc_event_func(int fd, unsigned ev, void *userdata)$/;"	f	file:	signature:(int fd, unsigned ev, void *userdata)
fdevent_subproc_event_func	./fdevent.c	/^static void fdevent_subproc_event_func(int fd, unsigned events, void *userdata);$/;"	p	file:	signature:(int fd, unsigned events, void *userdata)
fdevent_subproc_setup	./fdevent.c	/^void fdevent_subproc_setup()$/;"	f
fdevent_unregister	./fdevent.c	/^static void fdevent_unregister(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_unregister	./sysdeps_win32.c	/^static void fdevent_unregister(fdevent *fde)$/;"	f	file:	signature:(fdevent *fde)
fdevent_update	./fdevent.c	/^static void fdevent_update(fdevent *fde, unsigned events)$/;"	f	file:	signature:(fdevent *fde, unsigned events)
fdevent_update	./sysdeps_win32.c	/^static void fdevent_update(fdevent *fde, unsigned events)$/;"	f	file:	signature:(fdevent *fde, unsigned events)
fdin	./sysdeps_win32.c	/^    int                fdin;$/;"	m	struct:BipBufferRec_	file:	access:public
fdout	./sysdeps_win32.c	/^    int                fdout;$/;"	m	struct:BipBufferRec_	file:	access:public
fg_cgroup_fd	./libs/libcutils/sched_policy.c	/^static int fg_cgroup_fd = -1;$/;"	v	file:
fh	./sysdeps_win32.c	/^    FH           fh;$/;"	m	struct:EventHookRec_	file:	access:public
fh_handle	./sysdeps_win32.c	111;"	d	file:
fh_pair	./sysdeps_win32.c	113;"	d	file:
fh_socket	./sysdeps_win32.c	112;"	d	file:
file_sync_service	./file_sync_service.c	/^void file_sync_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
file_sync_service	./file_sync_service.h	/^void file_sync_service(int fd, void *cookie);$/;"	p	signature:(int fd, void *cookie)
filelist	./file_sync_client.c	/^    copyinfo **filelist;$/;"	m	struct:__anon32	file:	access:public
fill_connect_data	./adb.c	/^static size_t fill_connect_data(char *buf, size_t bufsize)$/;"	f	file:	signature:(char *buf, size_t bufsize)
find_devices	./usb_windows.c	/^void find_devices() {$/;"	f
find_devices	./usb_windows.c	/^void find_devices();$/;"	p	file:
find_emulator_transport_by_adb_port	./adb.h	/^atransport* find_emulator_transport_by_adb_port(int adb_port);$/;"	p	signature:(int adb_port)
find_emulator_transport_by_adb_port	./transport_local.c	/^atransport* find_emulator_transport_by_adb_port(int adb_port)$/;"	f	signature:(int adb_port)
find_emulator_transport_by_adb_port_locked	./transport_local.c	/^atransport* find_emulator_transport_by_adb_port_locked(int adb_port)$/;"	f	signature:(int adb_port)
find_local_socket	./adb.h	/^asocket *find_local_socket(unsigned id);$/;"	p	signature:(unsigned id)
find_local_socket	./sockets.c	/^asocket *find_local_socket(unsigned id)$/;"	f	signature:(unsigned id)
find_mount	./remount_service.c	/^static char *find_mount(const char *dir)$/;"	f	file:	signature:(const char *dir)
find_product_out_path	./commandline.c	/^static const char *find_product_out_path(const char *hint)$/;"	f	file:	signature:(const char *hint)
find_sync_dirs	./commandline.c	/^int find_sync_dirs(const char *srcarg,$/;"	f	signature:(const char *srcarg, char **android_srcdir_out, char **data_srcdir_out)
find_sync_dirs	./commandline.c	/^int find_sync_dirs(const char *srcarg,$/;"	p	file:	signature:(const char *srcarg, char **android_srcdir_out, char **data_srcdir_out)
find_top	./commandline.c	/^static char *find_top(char path_buf[PATH_MAX])$/;"	f	file:	signature:(char path_buf[PATH_MAX])
find_top_from	./commandline.c	/^static char *find_top_from(const char *indir, char path_buf[PATH_MAX])$/;"	f	file:	signature:(const char *indir, char path_buf[PATH_MAX])
find_transport	./adb.h	/^atransport *find_transport(const char *serial);$/;"	p	signature:(const char *serial)
find_transport	./transport.c	/^atransport *find_transport(const char *serial)$/;"	f	signature:(const char *serial)
find_usb_device	./usb_linux.c	/^static void find_usb_device(const char *base,$/;"	f	file:	signature:(const char *base, void (*register_device_callback) (const char *, const char *, unsigned char, unsigned char, int, int, unsigned))
fireEvents	./libs/libcutils/selector.c	/^static void fireEvents(Selector* selector) {$/;"	f	file:	signature:(Selector* selector)
first_child	./libs/libcutils/cutils/config_utils.h	/^    cnode *first_child;$/;"	m	struct:cnode	access:public
first_handle_index	./sysdeps_win32.c	/^    int             first_handle_index;$/;"	m	struct:WaitForAllParam	file:	access:public
fix_endians	./transport_local.c	/^static inline void fix_endians(apacket *p)$/;"	f	file:	signature:(apacket *p)
fix_endians	./transport_local.c	40;"	d	file:
fix_endians	./transport_usb.c	/^static inline void fix_endians(apacket *p)$/;"	f	file:	signature:(apacket *p)
fix_endians	./transport_usb.c	46;"	d	file:
flag	./file_sync_client.c	/^    int flag;$/;"	m	struct:copyinfo	file:	access:public
fname	./usb_linux.c	/^    char fname[64];$/;"	m	struct:usb_handle	file:	access:public
force_eof	./fdevent.h	/^    int force_eof;$/;"	m	struct:fdevent	access:public
force_eof	./sysdeps.h	/^    int force_eof;$/;"	m	struct:fdevent	access:public
format_host_command	./commandline.c	/^static void format_host_command(char* buffer, size_t  buflen, const char* command, transport_type ttype, const char* serial)$/;"	f	file:	signature:(char* buffer, size_t buflen, const char* command, transport_type ttype, const char* serial)
format_transport	./transport.c	/^static size_t format_transport(atransport *t, char *buf, size_t bufsize,$/;"	f	file:	signature:(atransport *t, char *buf, size_t bufsize, int long_listing)
framebuffer_service	./adb.h	/^void framebuffer_service(int fd, void *cookie);$/;"	p	signature:(int fd, void *cookie)
framebuffer_service	./framebuffer_service.c	/^void framebuffer_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
framework_fd	./adb_auth_client.c	/^static int framework_fd = -1;$/;"	v	file:
free	./libs/libcutils/mq.c	/^    void (*free)(OutgoingPacket* packet);$/;"	m	struct:OutgoingPacket	file:	access:public
free	./libs/libcutils/mq.c	/^    void (*free)(void* context);$/;"	m	struct:__anon12	file:	access:public
free_keys	./adb_auth_client.c	/^static void free_keys(struct listnode *list)$/;"	f	file:	signature:(struct listnode *list)
free_listener	./adb.c	/^static void  free_listener(alistener*  l)$/;"	f	file:	signature:(alistener* l)
fs_config	./private/android_filesystem_config.h	/^static inline void fs_config(const char *path, int dir,$/;"	f	signature:(const char *path, int dir, unsigned *uid, unsigned *gid, unsigned *mode)
fs_descs	./usb_linux_client.c	/^    } __attribute__((packed)) fs_descs, hs_descs;$/;"	m	struct:__anon40	typeref:struct:__anon40::__anon41	file:	access:public
fs_path_config	./private/android_filesystem_config.h	/^struct fs_path_config {$/;"	s
fs_path_config::gid	./private/android_filesystem_config.h	/^    unsigned gid;$/;"	m	struct:fs_path_config	access:public
fs_path_config::mode	./private/android_filesystem_config.h	/^    unsigned mode;$/;"	m	struct:fs_path_config	access:public
fs_path_config::prefix	./private/android_filesystem_config.h	/^    const char *prefix;$/;"	m	struct:fs_path_config	access:public
fs_path_config::uid	./private/android_filesystem_config.h	/^    unsigned uid;$/;"	m	struct:fs_path_config	access:public
fs_prepare_dir	./libs/libcutils/cutils/fs.h	/^extern int fs_prepare_dir(const char* path, mode_t mode, uid_t uid, gid_t gid);$/;"	p	signature:(const char* path, mode_t mode, uid_t uid, gid_t gid)
fs_prepare_dir	./libs/libcutils/fs.c	/^int fs_prepare_dir(const char* path, mode_t mode, uid_t uid, gid_t gid) {$/;"	f	signature:(const char* path, mode_t mode, uid_t uid, gid_t gid)
fs_read_atomic_int	./libs/libcutils/cutils/fs.h	/^extern int fs_read_atomic_int(const char* path, int* value);$/;"	p	signature:(const char* path, int* value)
fs_read_atomic_int	./libs/libcutils/fs.c	/^int fs_read_atomic_int(const char* path, int* out_value) {$/;"	f	signature:(const char* path, int* out_value)
fs_write_atomic_int	./libs/libcutils/cutils/fs.h	/^extern int fs_write_atomic_int(const char* path, int value);$/;"	p	signature:(const char* path, int value)
fs_write_atomic_int	./libs/libcutils/fs.c	/^int fs_write_atomic_int(const char* path, int value) {$/;"	f	signature:(const char* path, int value)
func	./adb.h	/^    void        (*func)(void*  opaque, atransport*  t);$/;"	m	struct:adisconnect	access:public
func	./fdevent.h	/^    fd_func func;$/;"	m	struct:fdevent	access:public
func	./services.c	/^    void (*func)(int fd, void *cookie);$/;"	m	struct:stinfo	file:	access:public
func	./sysdeps.h	/^    fd_func func;$/;"	m	struct:fdevent	access:public
gInitOnce	./libs/libcutils/properties.c	/^static pthread_once_t gInitOnce = PTHREAD_ONCE_INIT;$/;"	v	file:
gProductOutPath	./commandline.c	/^static const char *gProductOutPath = NULL;$/;"	v	file:
gPropFd	./libs/libcutils/properties.c	/^static int gPropFd = -1;$/;"	v	file:
gPropertyFdLock	./libs/libcutils/properties.c	/^static pthread_mutex_t gPropertyFdLock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
g_cacheNames	./libs/libcutils/tztime.c	/^static char * g_cacheNames[CACHE_COUNT] = {0,0};$/;"	v	file:
g_cacheStates	./libs/libcutils/tztime.c	/^static struct state	g_cacheStates[CACHE_COUNT];$/;"	v	typeref:struct:state	file:
g_lastCache	./libs/libcutils/tztime.c	/^static int g_lastCache = 0;$/;"	v	file:
g_utc	./libs/libcutils/tztime.c	/^static struct state g_utc;$/;"	v	typeref:struct:state	file:
g_utcSet	./libs/libcutils/tztime.c	/^unsigned char g_utcSet = 0;$/;"	v
geM	./libs/libmincrypt/rsa_e_3.c	/^static int geM(const RSAPublicKey *key, const uint32_t *a) {$/;"	f	file:	signature:(const RSAPublicKey *key, const uint32_t *a)
geM	./libs/libmincrypt/rsa_e_f4.c	/^static int geM(const RSAPublicKey* key,$/;"	f	file:	signature:(const RSAPublicKey* key, const uint32_t* a)
generate_key	./adb_auth_host.c	/^static int generate_key(const char *file)$/;"	f	file:	signature:(const char *file)
getEndOfRecord	./libs/libcutils/record_stream.c	/^static unsigned char * getEndOfRecord (unsigned char *p_begin,$/;"	f	file:	signature:(unsigned char *p_begin, unsigned char *p_end)
getMasterAddress	./libs/libcutils/mq.c	/^static UnixAddress* getMasterAddress() {$/;"	f	file:
getNextRecord	./libs/libcutils/record_stream.c	/^static void *getNextRecord (RecordStream *p_rs, size_t *p_outRecordLen)$/;"	f	file:	signature:(RecordStream *p_rs, size_t *p_outRecordLen)
getSchedulerGroup	./libs/libcutils/sched_policy.c	/^static int getSchedulerGroup(int tid, char* buf, size_t bufLen)$/;"	f	file:	signature:(int tid, char* buf, size_t bufLen)
getUtf32FromUtf8	./libs/libcutils/strdup8to16.c	/^static inline uint32_t getUtf32FromUtf8(const char** pUtf8Ptr)$/;"	f	file:	signature:(const char** pUtf8Ptr)
get_adb_usb_ini	./usb_vendors.c	/^int get_adb_usb_ini(char* buff, size_t len)$/;"	f	signature:(char* buff, size_t len)
get_adb_usb_ini	./usb_vendors.c	/^int get_adb_usb_ini(char* buff, size_t len);$/;"	p	file:	signature:(char* buff, size_t len)
get_apacket	./adb.c	/^apacket *get_apacket(void)$/;"	f	signature:(void)
get_apacket	./adb.h	/^apacket *get_apacket(void);$/;"	p	signature:(void)
get_available_local_transport_index	./adb.h	/^int get_available_local_transport_index();$/;"	p	signature:()
get_available_local_transport_index	./transport_local.c	/^int get_available_local_transport_index()$/;"	f
get_available_local_transport_index_locked	./transport_local.c	/^int get_available_local_transport_index_locked()$/;"	f
get_basename	./commandline.c	/^static const char* get_basename(const char* filename)$/;"	f	file:	signature:(const char* filename)
get_bootloader_message_block	./libs/libcutils/misc_rw.c	/^int get_bootloader_message_block(struct bootloader_message *out,$/;"	f	signature:(struct bootloader_message *out, const char* misc)
get_cpu_serial_number	./libs/libcutils/cpu_info.c	/^extern const char* get_cpu_serial_number(void)$/;"	f	signature:(void)
get_cpu_serial_number	./libs/libcutils/cutils/cpu_info.h	/^extern const char* get_cpu_serial_number(void);$/;"	p	signature:(void)
get_file_hash	./libs/libcutils/cutils/dir_hash.h	/^int get_file_hash(HashAlgorithm algorithm, const char *path,$/;"	p	signature:(HashAlgorithm algorithm, const char *path, char *output_string, size_t max_output_string)
get_file_hash	./libs/libcutils/dir_hash.c	/^int get_file_hash(HashAlgorithm algorithm, const char *path,$/;"	f	signature:(HashAlgorithm algorithm, const char *path, char *output_string, size_t max_output_string)
get_log_file_path	./adb.h	/^char * get_log_file_path(const char * log_name);$/;"	p	signature:(const char * log_name)
get_log_file_path	./log_service.c	/^char * get_log_file_path(const char * log_name) {$/;"	f	signature:(const char * log_name)
get_mtd_partition_index_byname	./libs/libcutils/misc_rw.c	/^static int get_mtd_partition_index_byname(const char* name)$/;"	f	file:	signature:(const char* name)
get_my_path	./adb.h	/^void get_my_path(char *s, size_t maxLen);$/;"	p	signature:(char *s, size_t maxLen)
get_my_path	./commandline.c	/^void get_my_path(char *s, size_t maxLen);$/;"	p	file:	signature:(char *s, size_t maxLen)
get_my_path	./get_my_path_darwin.c	/^void get_my_path(char *s, size_t maxLen)$/;"	f	signature:(char *s, size_t maxLen)
get_my_path	./get_my_path_freebsd.c	/^get_my_path(char *exe, size_t maxLen)$/;"	f	signature:(char *exe, size_t maxLen)
get_my_path	./get_my_path_linux.c	/^void get_my_path(char *exe, size_t maxLen)$/;"	f	signature:(char *exe, size_t maxLen)
get_my_path	./get_my_path_windows.c	/^void get_my_path(char *exe, size_t maxLen)$/;"	f	signature:(char *exe, size_t maxLen)
get_process_name	./libs/libcutils/cutils/process_name.h	/^const char* get_process_name(void);$/;"	p	signature:(void)
get_process_name	./libs/libcutils/process_name.c	/^const char* get_process_name(void) {$/;"	f	signature:(void)
get_recursive_hash_manifest	./libs/libcutils/cutils/dir_hash.h	/^int get_recursive_hash_manifest(HashAlgorithm algorithm,$/;"	p	signature:(HashAlgorithm algorithm, const char *directory_path, char **output_string)
get_recursive_hash_manifest	./libs/libcutils/dir_hash.c	/^int get_recursive_hash_manifest(HashAlgorithm algorithm,$/;"	f	signature:(HashAlgorithm algorithm, const char *directory_path, char **output_string)
get_sched_policy	./libs/libcutils/cutils/sched_policy.h	/^extern int get_sched_policy(int tid, SchedPolicy *policy);$/;"	p	signature:(int tid, SchedPolicy *policy)
get_sched_policy	./libs/libcutils/sched_policy.c	/^int get_sched_policy(int tid, SchedPolicy *policy)$/;"	f	signature:(int tid, SchedPolicy *policy)
get_sched_policy_name	./libs/libcutils/cutils/sched_policy.h	/^extern const char *get_sched_policy_name(SchedPolicy policy);$/;"	p	signature:(SchedPolicy policy)
get_sched_policy_name	./libs/libcutils/sched_policy.c	/^const char *get_sched_policy_name(SchedPolicy policy)$/;"	f	signature:(SchedPolicy policy)
get_user_info	./adb_auth_host.c	/^static void get_user_info(char *buf, size_t len)$/;"	f	file:	signature:(char *buf, size_t len)
get_user_key	./adb_auth_host.c	/^static int get_user_key(struct listnode *list)$/;"	f	file:	signature:(struct listnode *list)
get_user_keyfilepath	./adb_auth_host.c	/^static int get_user_keyfilepath(char *filename, size_t len)$/;"	f	file:	signature:(char *filename, size_t len)
get_vendor_keys	./adb_auth_host.c	/^static void get_vendor_keys(struct listnode *list)$/;"	f	file:	signature:(struct listnode *list)
getformat	./libs/libcutils/tzstrftime.c	/^static char *	getformat P((int, char *, char *, char *, char *));$/;"	p	file:	signature:(int, char *, char *, char *, char *)
getformat	./libs/libcutils/tzstrftime.c	/^static char *getformat(int modifier, char *normal, char *underscore,$/;"	f	file:	signature:(int modifier, char *normal, char *underscore, char *dash, char *zero)
getnum	./libs/libcutils/tztime.c	/^getnum(strp, nump, min, max)$/;"	f	file:
getnum	./libs/libcutils/tztime.c	/^static const char *	getnum P((const char * strp, int * nump, int min,$/;"	p	file:	signature:(const char * strp, int * nump, int min, int max)
getoffset	./libs/libcutils/tztime.c	/^getoffset(strp, offsetp)$/;"	f	file:
getoffset	./libs/libcutils/tztime.c	/^static const char *	getoffset P((const char * strp, long * offsetp));$/;"	p	file:	signature:(const char * strp, long * offsetp)
getqzname	./libs/libcutils/tztime.c	/^getqzname(register const char *strp, const int delim)$/;"	f	file:	signature:(register const char *strp, const int delim)
getqzname	./libs/libcutils/tztime.c	/^static const char *	getqzname P((const char * strp, const int delim));$/;"	p	file:	signature:(const char * strp, const int delim)
getrule	./libs/libcutils/tztime.c	/^getrule(strp, rulep)$/;"	f	file:
getrule	./libs/libcutils/tztime.c	/^static const char *	getrule P((const char * strp, struct rule * rulep));$/;"	p	file:	signature:(const char * strp, struct rule * rulep)
getsecs	./libs/libcutils/tztime.c	/^getsecs(strp, secsp)$/;"	f	file:
getsecs	./libs/libcutils/tztime.c	/^static const char *	getsecs P((const char * strp, long * secsp));$/;"	p	file:	signature:(const char * strp, long * secsp)
getzname	./libs/libcutils/tztime.c	/^getzname(strp)$/;"	f	file:
getzname	./libs/libcutils/tztime.c	/^static const char *	getzname P((const char * strp));$/;"	p	file:	signature:(const char * strp)
gid	./libs/libcutils/mq.c	/^    gid_t gid;$/;"	m	struct:__anon5	file:	access:public
gid	./private/android_filesystem_config.h	/^    unsigned gid;$/;"	m	struct:fs_path_config	access:public
gmt	./libs/libcutils/tztime.c	/^static const char	gmt[] = "GMT";$/;"	v	file:
gmt_is_set	./libs/libcutils/tztime.c	/^static int		gmt_is_set;$/;"	v	file:
gmtload	./libs/libcutils/tztime.c	/^gmtload(sp)$/;"	f	file:
gmtload	./libs/libcutils/tztime.c	/^static void		gmtload P((struct state * sp));$/;"	p	file:	signature:(struct state * sp)
gmtmem	./libs/libcutils/tztime.c	/^static struct state	gmtmem;$/;"	v	typeref:struct:state	file:
gmtptr	./libs/libcutils/tztime.c	/^static struct state *	gmtptr;$/;"	v	typeref:struct:state	file:
gmtptr	./libs/libcutils/tztime.c	226;"	d	file:
gmtsub	./libs/libcutils/tztime.c	/^gmtsub(timep, offset, tmp)$/;"	f	file:
gmtsub	./libs/libcutils/tztime.c	/^static struct tm *	gmtsub P((const time_t * timep, long offset,$/;"	p	file:	signature:(const time_t * timep, long offset, struct tm * tmp)
go_update_package	./libs/libcutils/misc_rw.c	/^int go_update_package(const char *path){$/;"	f	signature:(const char *path)
goahead	./libs/libcutils/tztime.c	/^	int		goahead;$/;"	m	struct:state	file:	access:public
goback	./libs/libcutils/tztime.c	/^	int		goback;$/;"	m	struct:state	file:	access:public
green_length	./framebuffer_service.c	/^    unsigned int green_length;$/;"	m	struct:fbinfo	file:	access:public
green_offset	./framebuffer_service.c	/^    unsigned int green_offset;$/;"	m	struct:fbinfo	file:	access:public
h	./sysdeps_win32.c	/^    HANDLE       h;$/;"	m	struct:EventHookRec_	file:	access:public
handle	./sysdeps_win32.c	/^        HANDLE      handle;$/;"	m	union:FHRec_::__anon27	file:	access:public
handle_host_request	./adb.c	/^int handle_host_request(char *service, transport_type ttype, char* serial, int reply_fd, asocket *s)$/;"	f	signature:(char *service, transport_type ttype, char* serial, int reply_fd, asocket *s)
handle_host_request	./adb.h	/^int handle_host_request(char *service, transport_type ttype, char* serial, int reply_fd, asocket *s);$/;"	p	signature:(char *service, transport_type ttype, char* serial, int reply_fd, asocket *s)
handle_list	./usb_libusb.c	/^static struct usb_handle handle_list = {$/;"	v	typeref:struct:usb_handle	file:
handle_list	./usb_linux.c	/^static usb_handle handle_list = {$/;"	v	file:
handle_list	./usb_windows.c	/^static usb_handle handle_list = {$/;"	v	file:
handle_offline	./adb.c	/^void handle_offline(atransport *t)$/;"	f	signature:(atransport *t)
handle_online	./adb.c	/^void handle_online(atransport *t)$/;"	f	signature:(atransport *t)
handle_packet	./adb.c	/^void handle_packet(apacket *p, atransport *t)$/;"	f	signature:(apacket *p, atransport *t)
handle_packet	./adb.h	/^void handle_packet(apacket *p, atransport *t);$/;"	p	signature:(apacket *p, atransport *t)
handle_send_file	./file_sync_service.c	/^static int handle_send_file(int s, char *path, mode_t mode, char *buffer)$/;"	f	file:	signature:(int s, char *path, mode_t mode, char *buffer)
handle_send_link	./file_sync_service.c	/^static int handle_send_link(int s, char *path, char *buffer)$/;"	f	file:	signature:(int s, char *path, char *buffer)
handles	./sysdeps_win32.c	/^    HANDLE*         handles;$/;"	m	struct:WaitForAllParam	file:	access:public
handles_count	./sysdeps_win32.c	/^    int             handles_count;$/;"	m	struct:WaitForAllParam	file:	access:public
has_tls	./libs/libcutils/cutils/threads.h	/^    int               has_tls;$/;"	m	struct:__anon18	access:public
has_tls	./libs/libcutils/cutils/threads.h	/^    int               has_tls;$/;"	m	struct:__anon19	access:public
hash	./libs/libcutils/hashmap.c	/^    int (*hash)(void* key);$/;"	m	struct:Hashmap	file:	access:public
hash	./libs/libcutils/hashmap.c	/^    int hash;$/;"	m	struct:Entry	file:	access:public
hashKey	./libs/libcutils/hashmap.c	/^static inline int hashKey(Hashmap* map, void* key) {$/;"	f	file:	signature:(Hashmap* map, void* key)
hashmapContainsKey	./libs/libcutils/cutils/hashmap.h	/^bool hashmapContainsKey(Hashmap* map, void* key);$/;"	p	signature:(Hashmap* map, void* key)
hashmapContainsKey	./libs/libcutils/hashmap.c	/^bool hashmapContainsKey(Hashmap* map, void* key) {$/;"	f	signature:(Hashmap* map, void* key)
hashmapCountCollisions	./libs/libcutils/cutils/hashmap.h	/^size_t hashmapCountCollisions(Hashmap* map);$/;"	p	signature:(Hashmap* map)
hashmapCountCollisions	./libs/libcutils/hashmap.c	/^size_t hashmapCountCollisions(Hashmap* map) {$/;"	f	signature:(Hashmap* map)
hashmapCreate	./libs/libcutils/cutils/hashmap.h	/^Hashmap* hashmapCreate(size_t initialCapacity,$/;"	p	signature:(size_t initialCapacity, int (*hash)(void* key), bool (*equals)(void* keyA, void* keyB))
hashmapCreate	./libs/libcutils/hashmap.c	/^Hashmap* hashmapCreate(size_t initialCapacity,$/;"	f	signature:(size_t initialCapacity, int (*hash)(void* key), bool (*equals)(void* keyA, void* keyB))
hashmapCurrentCapacity	./libs/libcutils/cutils/hashmap.h	/^size_t hashmapCurrentCapacity(Hashmap* map);$/;"	p	signature:(Hashmap* map)
hashmapCurrentCapacity	./libs/libcutils/hashmap.c	/^size_t hashmapCurrentCapacity(Hashmap* map) {$/;"	f	signature:(Hashmap* map)
hashmapForEach	./libs/libcutils/cutils/hashmap.h	/^void hashmapForEach(Hashmap* map, $/;"	p	signature:(Hashmap* map, bool (*callback)(void* key, void* value, void* context), void* context)
hashmapForEach	./libs/libcutils/hashmap.c	/^void hashmapForEach(Hashmap* map, $/;"	f	signature:(Hashmap* map, bool (*callback)(void* key, void* value, void* context), void* context)
hashmapFree	./libs/libcutils/cutils/hashmap.h	/^void hashmapFree(Hashmap* map);$/;"	p	signature:(Hashmap* map)
hashmapFree	./libs/libcutils/hashmap.c	/^void hashmapFree(Hashmap* map) {$/;"	f	signature:(Hashmap* map)
hashmapGet	./libs/libcutils/cutils/hashmap.h	/^void* hashmapGet(Hashmap* map, void* key);$/;"	p	signature:(Hashmap* map, void* key)
hashmapGet	./libs/libcutils/hashmap.c	/^void* hashmapGet(Hashmap* map, void* key) {$/;"	f	signature:(Hashmap* map, void* key)
hashmapHash	./libs/libcutils/cutils/hashmap.h	/^int hashmapHash(void* key, size_t keySize);$/;"	p	signature:(void* key, size_t keySize)
hashmapHash	./libs/libcutils/hashmap.c	/^int hashmapHash(void* key, size_t keySize) {$/;"	f	signature:(void* key, size_t keySize)
hashmapIntEquals	./libs/libcutils/cutils/hashmap.h	/^bool hashmapIntEquals(void* keyA, void* keyB);$/;"	p	signature:(void* keyA, void* keyB)
hashmapIntEquals	./libs/libcutils/hashmap.c	/^bool hashmapIntEquals(void* keyA, void* keyB) {$/;"	f	signature:(void* keyA, void* keyB)
hashmapIntHash	./libs/libcutils/cutils/hashmap.h	/^int hashmapIntHash(void* key);$/;"	p	signature:(void* key)
hashmapIntHash	./libs/libcutils/hashmap.c	/^int hashmapIntHash(void* key) {$/;"	f	signature:(void* key)
hashmapLock	./libs/libcutils/cutils/hashmap.h	/^void hashmapLock(Hashmap* map);$/;"	p	signature:(Hashmap* map)
hashmapLock	./libs/libcutils/hashmap.c	/^void hashmapLock(Hashmap* map) {$/;"	f	signature:(Hashmap* map)
hashmapMemoize	./libs/libcutils/cutils/hashmap.h	/^void* hashmapMemoize(Hashmap* map, void* key, $/;"	p	signature:(Hashmap* map, void* key, void* (*initialValue)(void* key, void* context), void* context)
hashmapMemoize	./libs/libcutils/hashmap.c	/^void* hashmapMemoize(Hashmap* map, void* key, $/;"	f	signature:(Hashmap* map, void* key, void* (*initialValue)(void* key, void* context), void* context)
hashmapPut	./libs/libcutils/cutils/hashmap.h	/^void* hashmapPut(Hashmap* map, void* key, void* value);$/;"	p	signature:(Hashmap* map, void* key, void* value)
hashmapPut	./libs/libcutils/hashmap.c	/^void* hashmapPut(Hashmap* map, void* key, void* value) {$/;"	f	signature:(Hashmap* map, void* key, void* value)
hashmapRemove	./libs/libcutils/cutils/hashmap.h	/^void* hashmapRemove(Hashmap* map, void* key);$/;"	p	signature:(Hashmap* map, void* key)
hashmapRemove	./libs/libcutils/hashmap.c	/^void* hashmapRemove(Hashmap* map, void* key) {$/;"	f	signature:(Hashmap* map, void* key)
hashmapSize	./libs/libcutils/cutils/hashmap.h	/^size_t hashmapSize(Hashmap* map);$/;"	p	signature:(Hashmap* map)
hashmapSize	./libs/libcutils/hashmap.c	/^size_t hashmapSize(Hashmap* map) {$/;"	f	signature:(Hashmap* map)
hashmapUnlock	./libs/libcutils/cutils/hashmap.h	/^void hashmapUnlock(Hashmap* map);$/;"	p	signature:(Hashmap* map)
hashmapUnlock	./libs/libcutils/hashmap.c	/^void hashmapUnlock(Hashmap* map) {$/;"	f	signature:(Hashmap* map)
hdr_size	./libs/libcutils/cutils/logger.h	/^    uint16_t    hdr_size;  \/* sizeof(struct logger_entry_v2) *\/$/;"	m	struct:logger_entry_v2	access:public
header	./libs/libcutils/mq.c	/^    Header header; $/;"	m	struct:OutgoingPacket	file:	access:public
header	./usb_linux_client.c	/^    struct usb_functionfs_descs_head header;$/;"	m	struct:__anon40	typeref:struct:__anon40::usb_functionfs_descs_head	file:	access:public
header	./usb_linux_client.c	/^    struct usb_functionfs_strings_head header;$/;"	m	struct:__anon42	typeref:struct:__anon42::usb_functionfs_strings_head	file:	access:public
height	./framebuffer_service.c	/^    unsigned int height;$/;"	m	struct:fbinfo	file:	access:public
help	./commandline.c	/^void help()$/;"	f
hooks	./sysdeps_win32.c	/^    EventHook    hooks;$/;"	m	struct:EventLooperRec_	file:	access:public
host_service_to_socket	./adb.h	/^asocket *host_service_to_socket(const char*  name, const char *serial);$/;"	p	signature:(const char* name, const char *serial)
host_service_to_socket	./services.c	/^asocket*  host_service_to_socket(const char*  name, const char *serial)$/;"	f	signature:(const char* name, const char *serial)
host_to_le32	./adb.h	/^unsigned host_to_le32(unsigned n);$/;"	p	signature:(unsigned n)
host_to_le32	./transport_usb.c	/^unsigned host_to_le32(unsigned n)$/;"	f	signature:(unsigned n)
hs_descs	./usb_linux_client.c	/^    } __attribute__((packed)) fs_descs, hs_descs;$/;"	m	struct:__anon40	typeref:struct:__anon40::__anon41	file:	access:public
htab	./sysdeps_win32.c	/^    HANDLE       htab[ MAX_LOOPER_HANDLES ];$/;"	m	struct:EventLooperRec_	file:	access:public
htab_count	./sysdeps_win32.c	/^    int          htab_count;$/;"	m	struct:EventLooperRec_	file:	access:public
htoll	./file_sync_service.h	28;"	d
htoll	./file_sync_service.h	32;"	d
icalloc	./libs/libcutils/private.h	/^char *		icalloc P((int nelem, int elsize));$/;"	p	signature:(int nelem, int elsize)
icatalloc	./libs/libcutils/private.h	/^char *		icatalloc P((char * old, const char * new));$/;"	p	signature:(char * old, const char * new)
icfree	./libs/libcutils/private.h	/^void		icfree P((char * pointer));$/;"	p	signature:(char * pointer)
icpyalloc	./libs/libcutils/private.h	/^char *		icpyalloc P((const char * string));$/;"	p	signature:(const char * string)
id	./adb.h	/^    unsigned id;$/;"	m	struct:asocket	access:public
id	./file_sync_client.c	/^    unsigned id;$/;"	m	struct:syncsendbuf	file:	access:public
id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon34	access:public
id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon35	access:public
id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon36	access:public
id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon37	access:public
id	./file_sync_service.h	/^        unsigned id;$/;"	m	struct:__anon33::__anon38	access:public
id	./file_sync_service.h	/^    unsigned id;$/;"	m	union:__anon33	access:public
ifree	./libs/libcutils/private.h	/^void		ifree P((char * pointer));$/;"	p	signature:(char * pointer)
imalloc	./libs/libcutils/private.h	/^char *		imalloc P((int n));$/;"	p	signature:(int n)
inSelect	./libs/libcutils/selector.c	/^    bool inSelect;$/;"	m	struct:Selector	file:	access:public
inSelectLock	./libs/libcutils/selector.c	/^    pthread_mutex_t inSelectLock; $/;"	m	struct:Selector	file:	access:public
in_buff	./jdwp_service.c	/^    char          in_buff[4];  \/* input character to read PID *\/$/;"	m	struct:JdwpProcess	file:	access:public
in_len	./jdwp_service.c	/^    int           in_len;      \/* number from JDWP process    *\/$/;"	m	struct:JdwpProcess	file:	access:public
increment_overflow	./libs/libcutils/tztime.c	/^increment_overflow(number, delta)$/;"	f	file:
increment_overflow	./libs/libcutils/tztime.c	/^static int		increment_overflow P((int * number, int delta));$/;"	p	file:	signature:(int * number, int delta)
init	./libs/libcutils/cutils/threads.h	/^    int                init;$/;"	m	struct:__anon20	access:public
init	./libs/libcutils/properties.c	/^static void init(void)$/;"	f	file:	signature:(void)
init_functionfs	./usb_linux_client.c	/^static void init_functionfs(struct usb_handle *h)$/;"	f	file:	signature:(struct usb_handle *h)
init_jdwp	./adb.h	/^int       init_jdwp(void);$/;"	p	signature:(void)
init_jdwp	./jdwp_service.c	/^init_jdwp(void)$/;"	f	signature:(void)
init_socket_transport	./adb.h	/^int  init_socket_transport(atransport *t, int s, int port, int local);$/;"	p	signature:(atransport *t, int s, int port, int local)
init_socket_transport	./transport_local.c	/^int init_socket_transport(atransport *t, int s, int adb_port, int local)$/;"	f	signature:(atransport *t, int s, int adb_port, int local)
init_transport_registration	./adb.h	/^void init_transport_registration(void);$/;"	p	signature:(void)
init_transport_registration	./transport.c	/^void init_transport_registration(void)$/;"	f	signature:(void)
init_usb_transport	./adb.h	/^void init_usb_transport(atransport *t, usb_handle *usb, int state);$/;"	p	signature:(atransport *t, usb_handle *usb, int state)
init_usb_transport	./transport_usb.c	/^void init_usb_transport(atransport *t, usb_handle *h, int state)$/;"	f	signature:(atransport *t, usb_handle *h, int state)
initialized	./usb_osx.c	/^static int initialized = 0;$/;"	v	file:
inline	./libs/libcutils/atomic.c	17;"	d	file:
inputBuffer	./libs/libcutils/mq.c	/^    Buffer* inputBuffer;$/;"	m	struct:PeerProxy	file:	access:public
inputState	./libs/libcutils/mq.c	/^    InputState inputState;$/;"	m	struct:PeerProxy	file:	access:public
input_thread	./transport.c	/^static void *input_thread(void *_t)$/;"	f	file:	signature:(void *_t)
insert_local_socket	./sockets.c	/^insert_local_socket(asocket*  s, asocket*  list)$/;"	f	file:	signature:(asocket* s, asocket* list)
install_app	./commandline.c	/^int install_app(transport_type transport, char* serial, int argc, char** argv)$/;"	f	signature:(transport_type transport, char* serial, int argc, char** argv)
install_app	./commandline.c	/^int install_app(transport_type transport, char* serial, int argc, char** argv);$/;"	p	file:	signature:(transport_type transport, char* serial, int argc, char** argv)
install_listener	./adb.c	/^static int install_listener(const char *local_name, const char *connect_to, atransport* transport)$/;"	f	file:	signature:(const char *local_name, const char *connect_to, atransport* transport)
install_local_socket	./adb.h	/^void install_local_socket(asocket *s);$/;"	p	signature:(asocket *s)
install_local_socket	./sockets.c	/^void install_local_socket(asocket *s)$/;"	f	signature:(asocket *s)
int_fast64_t	./libs/libcutils/private.h	/^typedef long		int_fast64_t;$/;"	t
int_fast64_t	./libs/libcutils/private.h	/^typedef long long	int_fast64_t;$/;"	t
interactive_shell	./commandline.c	/^int interactive_shell(void)$/;"	f	signature:(void)
interface	./usb_libusb.c	/^    int                   interface;$/;"	m	struct:usb_handle	file:	access:public
interface	./usb_osx.c	/^    IOUSBInterfaceInterface   **interface;$/;"	m	struct:usb_handle	file:	access:public
interface_name	./usb_windows.c	/^  char*         interface_name;$/;"	m	struct:usb_handle	file:	access:public
intf	./usb_linux_client.c	/^        struct usb_interface_descriptor intf;$/;"	m	struct:__anon40::__anon41	typeref:struct:__anon40::__anon41::usb_interface_descriptor	file:	access:public
ioprio_set	./libs/libcutils/iosched_policy.c	/^extern int ioprio_set(int which, int who, int ioprio);$/;"	p	file:	signature:(int which, int who, int ioprio)
iov_base	./libs/libcutils/cutils/uio.h	/^    const void*  iov_base;$/;"	m	struct:iovec	access:public
iov_len	./libs/libcutils/cutils/uio.h	/^    size_t       iov_len;$/;"	m	struct:iovec	access:public
iovec	./libs/libcutils/cutils/uio.h	/^struct iovec {$/;"	s
iovec::iov_base	./libs/libcutils/cutils/uio.h	/^    const void*  iov_base;$/;"	m	struct:iovec	access:public
iovec::iov_len	./libs/libcutils/cutils/uio.h	/^    size_t       iov_len;$/;"	m	struct:iovec	access:public
irealloc	./libs/libcutils/private.h	/^void *		irealloc P((void * pointer, int size));$/;"	p	signature:(void * pointer, int size)
isInSelect	./libs/libcutils/selector.c	/^static bool isInSelect(Selector* selector) {$/;"	f	file:	signature:(Selector* selector)
is_adb_interface	./adb.h	/^int is_adb_interface(int vid, int pid, int usb_class, int usb_subclass, int usb_protocol);$/;"	p	signature:(int vid, int pid, int usb_class, int usb_subclass, int usb_protocol)
is_adb_interface	./transport_usb.c	/^int is_adb_interface(int vid, int pid, int usb_class, int usb_subclass, int usb_protocol)$/;"	f	signature:(int vid, int pid, int usb_class, int usb_subclass, int usb_protocol)
is_available	./qemu/qemu.h	/^    char   is_available;$/;"	m	struct:__anon28	access:public
is_digit	./libs/libcutils/private.h	125;"	d
is_inited	./qemu/qemu.h	/^    char   is_inited;$/;"	m	struct:__anon28	access:public
is_mmc_or_mtd	./libs/libcutils/misc_rw.c	/^static int is_mmc_or_mtd()$/;"	f	file:
is_qemud	./qemu/qemu.h	/^    char   is_qemud;$/;"	m	struct:__anon28	access:public
is_qemud_old	./qemu/qemu.h	/^    char   is_qemud_old;$/;"	m	struct:__anon28	access:public
is_tty	./qemu/qemu.h	/^    char   is_tty;$/;"	m	struct:__anon28	access:public
isleap	./libs/libcutils/tzfile.h	164;"	d
isleap_sum	./libs/libcutils/tzfile.h	178;"	d
jdwp_control_event	./jdwp_service.c	/^jdwp_control_event( int  s, unsigned  events, void*  _control )$/;"	f	file:	signature:( int s, unsigned events, void* _control )
jdwp_control_event	./jdwp_service.c	/^jdwp_control_event(int  s, unsigned events, void*  user);$/;"	p	file:	signature:(int s, unsigned events, void* user)
jdwp_control_init	./jdwp_service.c	/^jdwp_control_init( JdwpControl*  control,$/;"	f	file:	signature:( JdwpControl* control, const char* sockname, int socknamelen )
jdwp_process_alloc	./jdwp_service.c	/^jdwp_process_alloc( int  socket )$/;"	f	file:	signature:( int socket )
jdwp_process_event	./jdwp_service.c	/^jdwp_process_event( int  socket, unsigned  events, void*  _proc )$/;"	f	file:	signature:( int socket, unsigned events, void* _proc )
jdwp_process_event	./jdwp_service.c	/^static void  jdwp_process_event(int, unsigned, void*);  \/* forward *\/$/;"	p	file:	signature:(int, unsigned, void*)
jdwp_process_free	./jdwp_service.c	/^jdwp_process_free( JdwpProcess*  proc )$/;"	f	file:	signature:( JdwpProcess* proc )
jdwp_process_list	./jdwp_service.c	/^jdwp_process_list( char*  buffer, int  bufferlen )$/;"	f	file:	signature:( char* buffer, int bufferlen )
jdwp_process_list_msg	./jdwp_service.c	/^jdwp_process_list_msg( char*  buffer, int  bufferlen )$/;"	f	file:	signature:( char* buffer, int bufferlen )
jdwp_process_list_updated	./jdwp_service.c	/^jdwp_process_list_updated(void)$/;"	f	file:	signature:(void)
jdwp_process_list_updated	./jdwp_service.c	/^static void  jdwp_process_list_updated(void);$/;"	p	file:	signature:(void)
jdwp_socket_close	./jdwp_service.c	/^jdwp_socket_close( asocket*  s )$/;"	f	file:	signature:( asocket* s )
jdwp_socket_enqueue	./jdwp_service.c	/^jdwp_socket_enqueue( asocket*  s, apacket*  p )$/;"	f	file:	signature:( asocket* s, apacket* p )
jdwp_socket_ready	./jdwp_service.c	/^jdwp_socket_ready( asocket*  s )$/;"	f	file:	signature:( asocket* s )
jdwp_tracker_close	./jdwp_service.c	/^jdwp_tracker_close( asocket*  s )$/;"	f	file:	signature:( asocket* s )
jdwp_tracker_enqueue	./jdwp_service.c	/^jdwp_tracker_enqueue( asocket*  s, apacket*  p )$/;"	f	file:	signature:( asocket* s, apacket* p )
jdwp_tracker_ready	./jdwp_service.c	/^jdwp_tracker_ready( asocket*  s )$/;"	f	file:	signature:( asocket* s )
kExpectedPadShaRsa2048	./libs/libmincrypt/rsa_e_f4.c	/^static const uint8_t kExpectedPadShaRsa2048[SHA_DIGEST_SIZE] = {$/;"	v	file:
kInitialSize	./libs/libcutils/open_memstream.c	77;"	d	file:
kSystemPropertyGet	./libs/libcutils/cutils/properties.h	/^    kSystemPropertyGet,$/;"	e	enum:__anon21
kSystemPropertyList	./libs/libcutils/cutils/properties.h	/^    kSystemPropertyList$/;"	e	enum:__anon21
kSystemPropertySet	./libs/libcutils/cutils/properties.h	/^    kSystemPropertySet,$/;"	e	enum:__anon21
kSystemPropertyUnknown	./libs/libcutils/cutils/properties.h	/^    kSystemPropertyUnknown = 0,$/;"	e	enum:__anon21
kTransportAny	./adb.h	/^        kTransportAny,$/;"	e	enum:transport_type
kTransportHost	./adb.h	/^        kTransportHost,$/;"	e	enum:transport_type
kTransportLocal	./adb.h	/^        kTransportLocal,$/;"	e	enum:transport_type
kTransportUsb	./adb.h	/^        kTransportUsb,$/;"	e	enum:transport_type
key	./adb.h	/^    void *key;$/;"	m	struct:atransport	access:public
key	./adb_auth_client.c	/^    RSAPublicKey key;$/;"	m	struct:adb_public_key	file:	access:public
key	./libs/libcutils/hashmap.c	/^    void* key;$/;"	m	struct:Entry	file:	access:public
key	./libs/libcutils/str_parms.c	/^    const char *key;$/;"	m	struct:remove_ctxt	file:	access:public
key_list	./adb_auth_client.c	/^static struct listnode key_list;$/;"	v	typeref:struct:listnode	file:
key_list	./adb_auth_host.c	/^static struct listnode key_list;$/;"	v	typeref:struct:listnode	file:
key_paths	./adb_auth_client.c	/^static char *key_paths[] = {$/;"	v	file:
kick	./adb.h	/^    void (*kick)(atransport *t);$/;"	m	struct:atransport	access:public
kick	./usb_linux_client.c	/^    void (*kick)(usb_handle *h);$/;"	m	struct:usb_handle	file:	access:public
kick_disconnected	./usb_libusb.c	/^kick_disconnected()$/;"	f
kick_disconnected_devices	./usb_linux.c	/^static void kick_disconnected_devices()$/;"	f	file:
kick_transport	./adb.h	/^void   kick_transport( atransport*  t );$/;"	p	signature:( atransport* t )
kick_transport	./transport.c	/^kick_transport(atransport*  t)$/;"	f	signature:(atransport* t)
kicked	./adb.h	/^    int          kicked;$/;"	m	struct:atransport	access:public
klog_close	./libs/libcutils/cutils/klog.h	/^void klog_close(void);$/;"	p	signature:(void)
klog_fd	./libs/libcutils/klog.c	/^static int klog_fd = -1;$/;"	v	file:
klog_init	./libs/libcutils/cutils/klog.h	/^void klog_init(void);$/;"	p	signature:(void)
klog_init	./libs/libcutils/klog.c	/^void klog_init(void)$/;"	f	signature:(void)
klog_level	./libs/libcutils/klog.c	/^static int klog_level = KLOG_DEFAULT_LEVEL;$/;"	v	file:
klog_set_level	./libs/libcutils/cutils/klog.h	/^void klog_set_level(int level);$/;"	p	signature:(int level)
klog_set_level	./libs/libcutils/klog.c	/^void klog_set_level(int level) {$/;"	f	signature:(int level)
klog_write	./libs/libcutils/cutils/klog.h	/^void klog_write(int level, const char *fmt, ...)$/;"	p	signature:(int level, const char *fmt, ...)
klog_write	./libs/libcutils/klog.c	/^void klog_write(int level, const char *fmt, ...)$/;"	f	signature:(int level, const char *fmt, ...)
known_device	./usb_linux.c	/^static int known_device(const char *dev_name)$/;"	f	file:	signature:(const char *dev_name)
known_device	./usb_windows.c	/^int known_device(const char* dev_name) {$/;"	f	signature:(const char* dev_name)
known_device	./usb_windows.c	/^int known_device(const char* dev_name);$/;"	p	file:	signature:(const char* dev_name)
known_device_locked	./usb_windows.c	/^int known_device_locked(const char* dev_name) {$/;"	f	signature:(const char* dev_name)
known_device_locked	./usb_windows.c	/^int known_device_locked(const char* dev_name);$/;"	p	file:	signature:(const char* dev_name)
lang0	./usb_linux_client.c	/^    } __attribute__((packed)) lang0;$/;"	m	struct:__anon42	typeref:struct:__anon42::__anon43	file:	access:public
lastPacket	./libs/libcutils/mq.c	/^    OutgoingPacket* lastPacket;$/;"	m	struct:PeerProxy	file:	access:public
last_child	./libs/libcutils/cutils/config_utils.h	/^    cnode *last_child;$/;"	m	struct:cnode	access:public
launch_server	./adb.c	/^int launch_server(int server_port)$/;"	f	signature:(int server_port)
launch_server	./adb.h	/^int launch_server(int server_port);$/;"	p	signature:(int server_port)
lcl_TZname	./libs/libcutils/tztime.c	/^static char		lcl_TZname[TZ_STRLEN_MAX + 1];$/;"	v	file:
lcl_is_set	./libs/libcutils/tztime.c	/^static int		lcl_is_set;$/;"	v	file:
leapcnt	./libs/libcutils/tztime.c	/^	int		leapcnt;$/;"	m	struct:state	file:	access:public
leaps_thru_end_of	./libs/libcutils/tztime.c	/^leaps_thru_end_of(y)$/;"	f	file:
leaps_thru_end_of	./libs/libcutils/tztime.c	/^static int		leaps_thru_end_of P((int y));$/;"	p	file:	signature:(int y)
len	./adb.h	/^    unsigned len;$/;"	m	struct:apacket	access:public
len	./libs/libcutils/config_utils.c	/^    int len;$/;"	m	struct:__anon3	file:	access:public
len	./libs/libcutils/cutils/logger.h	/^    uint16_t    len;       \/* length of the payload *\/$/;"	m	struct:logger_entry_v2	access:public
len	./libs/libcutils/cutils/logger.h	/^    uint16_t    len;    \/* length of the payload *\/$/;"	m	struct:logger_entry	access:public
len	./libs/libcutils/include/ashmem.h	/^	__u32 len;	\/* length forward from offset, in bytes, page-aligned *\/$/;"	m	struct:ashmem_pin	access:public
len	./libs/libmincrypt/mincrypt/rsa.h	/^    int len;                  \/* Length of n[] in number of uint32_t *\/$/;"	m	struct:RSAPublicKey	access:public
len	./sockets.c	/^    const size_t len;$/;"	m	struct:prefix_struct	file:	access:public
lex	./libs/libcutils/config_utils.c	240;"	d	file:
list	./libs/libcutils/dir_hash.c	/^struct list {$/;"	s	file:
list::name	./libs/libcutils/dir_hash.c	/^    char *name;$/;"	m	struct:list	file:	access:public
list::next	./libs/libcutils/dir_hash.c	/^    struct list *next;$/;"	m	struct:list	typeref:struct:list::list	file:	access:public
list_add_tail	./libs/libcutils/cutils/list.h	/^void list_add_tail(struct listnode *list, struct listnode *item);$/;"	p	signature:(struct listnode *list, struct listnode *item)
list_add_tail	./libs/libcutils/list.c	/^void list_add_tail(struct listnode *head, struct listnode *item)$/;"	f	signature:(struct listnode *head, struct listnode *item)
list_declare	./libs/libcutils/cutils/list.h	35;"	d
list_empty	./libs/libcutils/cutils/list.h	51;"	d
list_for_each	./libs/libcutils/cutils/list.h	41;"	d
list_for_each_reverse	./libs/libcutils/cutils/list.h	44;"	d
list_head	./libs/libcutils/cutils/list.h	52;"	d
list_init	./libs/libcutils/cutils/list.h	/^void list_init(struct listnode *list);$/;"	p	signature:(struct listnode *list)
list_init	./libs/libcutils/list.c	/^void list_init(struct listnode *node)$/;"	f	signature:(struct listnode *node)
list_pending	./fdevent.c	/^static fdevent list_pending = {$/;"	v	file:
list_pending	./sysdeps_win32.c	/^static fdevent list_pending = {$/;"	v	file:
list_remove	./libs/libcutils/cutils/list.h	/^void list_remove(struct listnode *item);$/;"	p	signature:(struct listnode *item)
list_remove	./libs/libcutils/list.c	/^void list_remove(struct listnode *item)$/;"	f	signature:(struct listnode *item)
list_tail	./libs/libcutils/cutils/list.h	53;"	d
list_transports	./adb.h	/^int  list_transports(char *buf, size_t  bufsize, int long_listing);$/;"	p	signature:(char *buf, size_t bufsize, int long_listing)
list_transports	./transport.c	/^int list_transports(char *buf, size_t  bufsize, int long_listing)$/;"	f	signature:(char *buf, size_t bufsize, int long_listing)
list_transports_msg	./transport.c	/^static int list_transports_msg(char*  buffer, size_t  bufferlen)$/;"	f	file:	signature:(char* buffer, size_t bufferlen)
listen_socket	./jdwp_service.c	/^    int       listen_socket;$/;"	m	struct:__anon44	file:	access:public
listener_disconnect	./adb.c	/^static void listener_disconnect(void*  _l, atransport*  t)$/;"	f	file:	signature:(void* _l, atransport* t)
listener_event_func	./adb.c	/^static void listener_event_func(int _fd, unsigned ev, void *_l)$/;"	f	file:	signature:(int _fd, unsigned ev, void *_l)
listener_fde	./adb_auth_client.c	/^static fdevent listener_fde;$/;"	v	file:
listener_list	./adb.c	/^alistener listener_list = {$/;"	v
listnode	./libs/libcutils/cutils/list.h	/^struct listnode$/;"	s
listnode::next	./libs/libcutils/cutils/list.h	/^    struct listnode *next;$/;"	m	struct:listnode	typeref:struct:listnode::listnode	access:public
listnode::prev	./libs/libcutils/cutils/list.h	/^    struct listnode *prev;$/;"	m	struct:listnode	typeref:struct:listnode::listnode	access:public
load_file	./libs/libcutils/cutils/misc.h	/^extern void *load_file(const char *fn, unsigned *sz);$/;"	p	signature:(const char *fn, unsigned *sz)
load_file	./libs/libcutils/load_file.c	/^void *load_file(const char *fn, unsigned *_sz)$/;"	f	signature:(const char *fn, unsigned *_sz)
load_file	./sysdeps.h	/^extern void*  load_file(const char*  pathname, unsigned*  psize);$/;"	p	signature:(const char* pathname, unsigned* psize)
load_file	./sysdeps_win32.c	/^void *load_file(const char *fn, unsigned *_sz)$/;"	f	signature:(const char *fn, unsigned *_sz)
localPeer	./libs/libcutils/mq.c	/^static Peer* localPeer;$/;"	v	file:
local_build_list	./file_sync_client.c	/^static int local_build_list(copyinfo **filelist,$/;"	f	file:	signature:(copyinfo **filelist, const char *lpath, const char *rpath)
local_connect	./adb.h	/^int  local_connect(int  port);$/;"	p	signature:(int port)
local_connect	./transport_local.c	/^int local_connect(int port) {$/;"	f	signature:(int port)
local_connect_arbitrary_ports	./adb.h	/^int  local_connect_arbitrary_ports(int console_port, int adb_port);$/;"	p	signature:(int console_port, int adb_port)
local_connect_arbitrary_ports	./transport_local.c	/^int local_connect_arbitrary_ports(int console_port, int adb_port)$/;"	f	signature:(int console_port, int adb_port)
local_init	./adb.h	/^void local_init(int port);$/;"	p	signature:(int port)
local_init	./transport_local.c	/^void local_init(int port)$/;"	f	signature:(int port)
local_name	./adb.h	/^    const char *local_name;$/;"	m	struct:alistener	access:public
local_name_to_fd	./adb.c	/^int local_name_to_fd(const char *name)$/;"	f	signature:(const char *name)
local_socket_close	./sockets.c	/^static void local_socket_close(asocket *s)$/;"	f	file:	signature:(asocket *s)
local_socket_close_locked	./sockets.c	/^static void local_socket_close_locked(asocket *s)$/;"	f	file:	signature:(asocket *s)
local_socket_close_locked	./sockets.c	/^static void local_socket_close_locked(asocket *s);$/;"	p	file:	signature:(asocket *s)
local_socket_close_notify	./sockets.c	/^static void local_socket_close_notify(asocket *s)$/;"	f	file:	signature:(asocket *s)
local_socket_closing_list	./sockets.c	/^static asocket local_socket_closing_list = {$/;"	v	file:
local_socket_destroy	./sockets.c	/^static void local_socket_destroy(asocket  *s)$/;"	f	file:	signature:(asocket *s)
local_socket_enqueue	./sockets.c	/^static int local_socket_enqueue(asocket *s, apacket *p)$/;"	f	file:	signature:(asocket *s, apacket *p)
local_socket_event_func	./sockets.c	/^static void local_socket_event_func(int fd, unsigned ev, void *_s)$/;"	f	file:	signature:(int fd, unsigned ev, void *_s)
local_socket_list	./sockets.c	/^static asocket local_socket_list = {$/;"	v	file:
local_socket_next_id	./sockets.c	/^static unsigned local_socket_next_id = 1;$/;"	v	file:
local_socket_ready	./sockets.c	/^static void local_socket_ready(asocket *s)$/;"	f	file:	signature:(asocket *s)
local_socket_ready_notify	./sockets.c	/^static void local_socket_ready_notify(asocket *s)$/;"	f	file:	signature:(asocket *s)
local_transports	./transport_local.c	/^static atransport*  local_transports[ ADB_LOCAL_TRANSPORT_MAX ];$/;"	v	file:
local_transports_lock	./transport_local.c	/^ADB_MUTEX_DEFINE( local_transports_lock );$/;"	v
localsub	./libs/libcutils/tztime.c	/^localsub(timep, offset, tmp, sp)$/;"	f	file:
localsub	./libs/libcutils/tztime.c	/^static struct tm *	localsub P((const time_t * timep, long offset,$/;"	p	file:	signature:(const time_t * timep, long offset, struct tm * tmp, const struct state *sp)
localtime_tz	./libs/libcutils/cutils/tztime.h	/^void localtime_tz(const time_t * const timep, struct tm * tmp, const char* tz);$/;"	p	signature:(const time_t * const timep, struct tm * tmp, const char* tz)
localtime_tz	./libs/libcutils/tztime.c	/^localtime_tz(const time_t * const timep, struct tm * tmp, const char* tz)$/;"	f	signature:(const time_t * const timep, struct tm * tmp, const char* tz)
lock	./libs/libcutils/cutils/threads.h	/^    CRITICAL_SECTION   lock[1];$/;"	m	struct:__anon20	access:public
lock	./libs/libcutils/cutils/threads.h	/^    CRITICAL_SECTION  lock;$/;"	m	struct:__anon19	access:public
lock	./libs/libcutils/cutils/threads.h	/^    pthread_mutex_t   lock;$/;"	m	struct:__anon18	access:public
lock	./libs/libcutils/hashmap.c	/^    mutex_t lock; $/;"	m	struct:Hashmap	file:	access:public
lock	./sysdeps_win32.c	/^    CRITICAL_SECTION  lock;$/;"	m	struct:BipBufferRec_	file:	access:public
lock	./usb_libusb.c	/^    adb_mutex_t           lock;$/;"	m	struct:usb_handle	file:	access:public
lock	./usb_linux.c	/^    adb_mutex_t lock;$/;"	m	struct:usb_handle	file:	access:public
lock	./usb_linux_client.c	/^    adb_mutex_t lock;$/;"	m	struct:usb_handle	file:	access:public
lock_init	./libs/libcutils/cutils/threads.h	/^    int               lock_init;$/;"	m	struct:__anon19	access:public
log_id_t	./libs/libcutils/cutils/log_bak_for_android.h	/^} log_id_t;$/;"	t	typeref:enum:__anon15
log_service	./adb.h	/^void log_service(int fd, void *cookie);$/;"	p	signature:(int fd, void *cookie)
log_service	./log_service.c	/^void log_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
logcat	./commandline.c	/^static int logcat(transport_type transport, char* serial, int argc, char **argv)$/;"	f	file:	signature:(transport_type transport, char* serial, int argc, char **argv)
logger_entry	./libs/libcutils/cutils/logger.h	/^struct logger_entry {$/;"	s
logger_entry::__pad	./libs/libcutils/cutils/logger.h	/^    uint16_t    __pad;  \/* no matter what, we get 2 bytes of padding *\/$/;"	m	struct:logger_entry	access:public
logger_entry::len	./libs/libcutils/cutils/logger.h	/^    uint16_t    len;    \/* length of the payload *\/$/;"	m	struct:logger_entry	access:public
logger_entry::msg	./libs/libcutils/cutils/logger.h	/^    char        msg[0]; \/* the entry's payload *\/$/;"	m	struct:logger_entry	access:public
logger_entry::nsec	./libs/libcutils/cutils/logger.h	/^    int32_t     nsec;   \/* nanoseconds *\/$/;"	m	struct:logger_entry	access:public
logger_entry::pid	./libs/libcutils/cutils/logger.h	/^    int32_t     pid;    \/* generating process's pid *\/$/;"	m	struct:logger_entry	access:public
logger_entry::sec	./libs/libcutils/cutils/logger.h	/^    int32_t     sec;    \/* seconds since Epoch *\/$/;"	m	struct:logger_entry	access:public
logger_entry::tid	./libs/libcutils/cutils/logger.h	/^    int32_t     tid;    \/* generating process's tid *\/$/;"	m	struct:logger_entry	access:public
logger_entry_v2	./libs/libcutils/cutils/logger.h	/^struct logger_entry_v2 {$/;"	s
logger_entry_v2::euid	./libs/libcutils/cutils/logger.h	/^    uint32_t    euid;      \/* effective UID of logger *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::hdr_size	./libs/libcutils/cutils/logger.h	/^    uint16_t    hdr_size;  \/* sizeof(struct logger_entry_v2) *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::len	./libs/libcutils/cutils/logger.h	/^    uint16_t    len;       \/* length of the payload *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::msg	./libs/libcutils/cutils/logger.h	/^    char        msg[0];    \/* the entry's payload *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::nsec	./libs/libcutils/cutils/logger.h	/^    int32_t     nsec;      \/* nanoseconds *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::pid	./libs/libcutils/cutils/logger.h	/^    int32_t     pid;       \/* generating process's pid *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::sec	./libs/libcutils/cutils/logger.h	/^    int32_t     sec;       \/* seconds since Epoch *\/$/;"	m	struct:logger_entry_v2	access:public
logger_entry_v2::tid	./libs/libcutils/cutils/logger.h	/^    int32_t     tid;       \/* generating process's tid *\/$/;"	m	struct:logger_entry_v2	access:public
long_increment_overflow	./libs/libcutils/tztime.c	/^long_increment_overflow(number, delta)$/;"	f	file:
long_increment_overflow	./libs/libcutils/tztime.c	/^static int		long_increment_overflow P((long * number, int delta));$/;"	p	file:	signature:(long * number, int delta)
long_normalize_overflow	./libs/libcutils/tztime.c	/^long_normalize_overflow(tensptr, unitsptr, base)$/;"	f	file:
long_normalize_overflow	./libs/libcutils/tztime.c	/^static int		long_normalize_overflow P((long * tensptr,$/;"	p	file:	signature:(long * tensptr, int * unitsptr, int base)
looping	./libs/libcutils/selector.c	/^    bool looping;$/;"	m	struct:Selector	file:	access:public
lpath	./file_sync_client.c	/^    const char *lpath;$/;"	m	struct:__anon32	file:	access:public
ls_corr	./libs/libcutils/tztime.c	/^	long		ls_corr;	\/* correction to apply *\/$/;"	m	struct:lsinfo	file:	access:public
ls_trans	./libs/libcutils/tztime.c	/^	time_t		ls_trans;	\/* transition time *\/$/;"	m	struct:lsinfo	file:	access:public
lseek	./sysdeps.h	377;"	d
lseek	./sysdeps.h	378;"	d
lsinfo	./libs/libcutils/tztime.c	/^struct lsinfo {				\/* leap second information *\/$/;"	s	file:
lsinfo::ls_corr	./libs/libcutils/tztime.c	/^	long		ls_corr;	\/* correction to apply *\/$/;"	m	struct:lsinfo	file:	access:public
lsinfo::ls_trans	./libs/libcutils/tztime.c	/^	time_t		ls_trans;	\/* transition time *\/$/;"	m	struct:lsinfo	file:	access:public
lsis	./libs/libcutils/tztime.c	/^	struct lsinfo	lsis[TZ_MAX_LEAPS];$/;"	m	struct:state	typeref:struct:state::lsinfo	file:	access:public
lstat	./sysdeps.h	86;"	d
ltohl	./file_sync_service.h	29;"	d
ltohl	./file_sync_service.h	33;"	d
magic	./adb.h	/^    unsigned magic;         \/* command ^ 0xffffffff             *\/$/;"	m	struct:amessage	access:public
main	./adb.c	/^int main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
main	./libs/libcutils/str_parms.c	/^int main(void)$/;"	f	signature:(void)
main	./libs/libmincrypt/tools/DumpPublicKey.java	/^    public static void main(String[] args) {$/;"	m	class:DumpPublicKey	access:public	signature:(String[] args)
main	./test_track_devices.c	/^int  main( void )$/;"	f	signature:( void )
main	./test_track_jdwp.c	/^int  main( void )$/;"	f	signature:( void )
main_event	./sysdeps_win32.c	/^    HANDLE          main_event;$/;"	m	struct:WaitForAllParam	file:	access:public
map	./libs/libcutils/str_parms.c	/^    Hashmap *map;$/;"	m	struct:str_parms	file:	access:public
mark	./usb_linux.c	/^    int mark;$/;"	m	struct:usb_handle	file:	access:public
mask	./sysdeps_win32.c	/^    int       mask;$/;"	m	struct:FHRec_	file:	access:public
master	./libs/libcutils/mq.c	/^    bool master;$/;"	m	struct:PeerProxy	file:	access:public
master	./libs/libcutils/mq.c	/^    bool master;$/;"	m	struct:__anon11	file:	access:public
masterAcceptConnection	./libs/libcutils/mq.c	/^static void masterAcceptConnection(SelectableFd* listenerFd) {$/;"	f	file:	signature:(SelectableFd* listenerFd)
masterConnectPeers	./libs/libcutils/mq.c	/^static void masterConnectPeers(PeerProxy* peerA, PeerProxy* peerB) {$/;"	f	file:	signature:(PeerProxy* peerA, PeerProxy* peerB)
masterHandleConnectionRequest	./libs/libcutils/mq.c	/^static void masterHandleConnectionRequest(PeerProxy* peerProxy, $/;"	f	file:	signature:(PeerProxy* peerProxy, Header* header)
masterPeerInitialize	./libs/libcutils/mq.c	/^void masterPeerInitialize(BytesListener* bytesListener, $/;"	f	signature:(BytesListener* bytesListener, DeathListener* deathListener)
masterProxy	./libs/libcutils/mq.c	/^    PeerProxy* masterProxy;$/;"	m	struct:__anon11	file:	access:public
masterProxyAcceptConnection	./libs/libcutils/mq.c	/^static void masterProxyAcceptConnection(PeerProxy* masterProxy) {$/;"	f	file:	signature:(PeerProxy* masterProxy)
masterProxyExpectConnection	./libs/libcutils/mq.c	/^static void masterProxyExpectConnection(PeerProxy* masterProxy,$/;"	f	file:	signature:(PeerProxy* masterProxy, Header* header)
masterProxyHandleConnectionError	./libs/libcutils/mq.c	/^static void masterProxyHandleConnectionError(PeerProxy* masterProxy,$/;"	f	file:	signature:(PeerProxy* masterProxy, Header* header)
masterReportConnectionError	./libs/libcutils/mq.c	/^static void masterReportConnectionError(PeerProxy* peerProxy,$/;"	f	file:	signature:(PeerProxy* peerProxy, Credentials credentials)
maxFd	./libs/libcutils/selector.c	/^    int maxFd;$/;"	m	struct:Selector	file:	access:public
maxRecordLen	./libs/libcutils/record_stream.c	/^    size_t maxRecordLen;$/;"	m	struct:RecordStream	file:	access:public
maybeAdd	./libs/libcutils/selector.c	/^static inline bool maybeAdd(SelectableFd* selectableFd,$/;"	f	file:	signature:(SelectableFd* selectableFd, void (*callback)(SelectableFd*), fd_set* fdSet)
maybeInvoke	./libs/libcutils/selector.c	/^static inline void maybeInvoke(SelectableFd* selectableFd,$/;"	f	file:	signature:(SelectableFd* selectableFd, void (*callback)(SelectableFd*), fd_set* fdSet)
message	./libs/libcutils/cutils/logprint.h	/^    const char * message;$/;"	m	struct:AndroidLogEntry_t	access:public
messageLen	./libs/libcutils/cutils/logprint.h	/^    size_t messageLen;$/;"	m	struct:AndroidLogEntry_t	access:public
mkcopyinfo	./file_sync_client.c	/^copyinfo *mkcopyinfo(const char *spath, const char *dpath,$/;"	f	signature:(const char *spath, const char *dpath, const char *name, int isdir)
mkdir	./sysdeps.h	110;"	d
mkdir	./sysdeps.h	111;"	d
mkdir	./sysdeps.h	475;"	d
mkdir	./sysdeps.h	476;"	d
mkdirs	./commandline.c	/^static int mkdirs(char *path)$/;"	f	file:	signature:(char *path)
mkdirs	./file_sync_client.c	/^static int mkdirs(char *name)$/;"	f	file:	signature:(char *name)
mkdirs	./file_sync_service.c	/^static int mkdirs(char *name)$/;"	f	file:	signature:(char *name)
mktime_tz	./libs/libcutils/cutils/tztime.h	/^time_t mktime_tz(struct tm * const tmp, char const * tz);$/;"	p	signature:(struct tm * const tmp, char const * tz)
mktime_tz	./libs/libcutils/tztime.c	/^mktime_tz(struct tm * const	tmp, char const * tz)$/;"	f	signature:(struct tm * const tmp, char const * tz)
mode	./file_sync_client.c	/^    unsigned int mode;$/;"	m	struct:copyinfo	file:	access:public
mode	./file_sync_service.h	/^        unsigned mode;$/;"	m	struct:__anon33::__anon35	access:public
mode	./file_sync_service.h	/^        unsigned mode;$/;"	m	struct:__anon33::__anon36	access:public
mode	./private/android_filesystem_config.h	/^    unsigned mode;$/;"	m	struct:fs_path_config	access:public
model	./adb.h	/^    char *model;$/;"	m	struct:atransport	access:public
modpow3	./libs/libmincrypt/rsa_e_3.c	/^static void modpow3(const RSAPublicKey *key,$/;"	f	file:	signature:(const RSAPublicKey *key, uint8_t* inout)
modpowF4	./libs/libmincrypt/rsa_e_f4.c	/^static void modpowF4(const RSAPublicKey* key,$/;"	f	file:	signature:(const RSAPublicKey* key, uint8_t* inout)
mon	./libs/libcutils/cutils/tztime.h	/^    const char *mon[12];    \/* short names *\/$/;"	m	struct:strftime_locale	access:public
mon_lengths	./libs/libcutils/tztime.c	/^static const int	mon_lengths[2][MONSPERYEAR] = {$/;"	v	file:
montMul	./libs/libmincrypt/rsa_e_3.c	/^static void montMul(const RSAPublicKey *key,$/;"	f	file:	signature:(const RSAPublicKey *key, uint32_t* c, const uint32_t* a, const uint32_t* b)
montMul	./libs/libmincrypt/rsa_e_f4.c	/^static void montMul(const RSAPublicKey* key,$/;"	f	file:	signature:(const RSAPublicKey* key, uint32_t* c, const uint32_t* a, const uint32_t* b)
montMulAdd	./libs/libmincrypt/rsa_e_3.c	/^static void montMulAdd(const RSAPublicKey *key,$/;"	f	file:	signature:(const RSAPublicKey *key, uint32_t* c, const uint32_t a, const uint32_t* b)
montMulAdd	./libs/libmincrypt/rsa_e_f4.c	/^static void montMulAdd(const RSAPublicKey* key,$/;"	f	file:	signature:(const RSAPublicKey* key, uint32_t* c, const uint32_t a, const uint32_t* b)
month	./libs/libcutils/cutils/tztime.h	/^    const char *month[12];  \/* long names *\/$/;"	m	struct:strftime_locale	access:public
mqCreateDestination	./libs/libcutils/cutils/mq.h	/^MqDestination* mqCreateDestination(MqMessageListener* messageListener, $/;"	p	signature:(MqMessageListener* messageListener, MqCloseListener* closeListener, void* userData)
mqCreateMessage	./libs/libcutils/cutils/mq.h	/^MqMessage* mqCreateMessage(MqBytes header, MqBytes body, $/;"	p	signature:(MqBytes header, MqBytes body, MqDestination* replyTo)
mqFreeDestination	./libs/libcutils/cutils/mq.h	/^void mqFreeDestination(MqDestination* desintation);$/;"	p	signature:(MqDestination* desintation)
mqGetDestination	./libs/libcutils/cutils/mq.h	/^MqDestination* mqGetDestination(char* name);$/;"	p	signature:(char* name)
mqGetUserData	./libs/libcutils/cutils/mq.h	/^void* mqGetUserData(MqDestination* destination);$/;"	p	signature:(MqDestination* destination)
mqIsDestinationLocal	./libs/libcutils/cutils/mq.h	/^int mqIsDestinationLocal(MqDestination* destination);$/;"	p	signature:(MqDestination* destination)
mqKeepDestination	./libs/libcutils/cutils/mq.h	/^void mqKeepDestination(MqDesintation* destination);$/;"	p	signature:(MqDesintation* destination)
mqPutDestination	./libs/libcutils/cutils/mq.h	/^void mqPutDestination(char* name, MqDestination* desintation);$/;"	p	signature:(char* name, MqDestination* desintation)
mqSendMessage	./libs/libcutils/cutils/mq.h	/^void mqSendMessage(MqMessage* message, MqDestination* destination);$/;"	p	signature:(MqMessage* message, MqDestination* destination)
msg	./adb.h	/^    amessage msg;$/;"	m	struct:apacket	access:public
msg	./libs/libcutils/cutils/logger.h	/^    char        msg[0];    \/* the entry's payload *\/$/;"	m	struct:logger_entry_v2	access:public
msg	./libs/libcutils/cutils/logger.h	/^    char        msg[0]; \/* the entry's payload *\/$/;"	m	struct:logger_entry	access:public
msglen	./file_sync_service.h	/^        unsigned msglen;$/;"	m	struct:__anon33::__anon38	access:public
multiuser_get_app_id	./libs/libcutils/cutils/multiuser.h	/^extern appid_t multiuser_get_app_id(uid_t uid);$/;"	p	signature:(uid_t uid)
multiuser_get_app_id	./libs/libcutils/multiuser.c	/^appid_t multiuser_get_app_id(uid_t uid) {$/;"	f	signature:(uid_t uid)
multiuser_get_uid	./libs/libcutils/cutils/multiuser.h	/^extern uid_t multiuser_get_uid(userid_t userId, appid_t appId);$/;"	p	signature:(userid_t userId, appid_t appId)
multiuser_get_uid	./libs/libcutils/multiuser.c	/^uid_t multiuser_get_uid(userid_t userId, appid_t appId) {$/;"	f	signature:(userid_t userId, appid_t appId)
multiuser_get_user_id	./libs/libcutils/cutils/multiuser.h	/^extern userid_t multiuser_get_user_id(uid_t uid);$/;"	p	signature:(uid_t uid)
multiuser_get_user_id	./libs/libcutils/multiuser.c	/^userid_t multiuser_get_user_id(uid_t uid) {$/;"	f	signature:(uid_t uid)
mutex	./libs/libcutils/mq.c	/^    pthread_mutex_t mutex; $/;"	m	struct:__anon11	file:	access:public
mutex_destroy	./libs/libcutils/cutils/threads.h	/^static __inline__ void  mutex_destroy(mutex_t*  lock)$/;"	f	signature:(mutex_t* lock)
mutex_destroy	./libs/libcutils/cutils/threads.h	/^static __inline__ void mutex_destroy(mutex_t*  lock)$/;"	f	signature:(mutex_t* lock)
mutex_init	./libs/libcutils/cutils/threads.h	/^static __inline__ int  mutex_init(mutex_t*  lock)$/;"	f	signature:(mutex_t* lock)
mutex_lock	./libs/libcutils/cutils/threads.h	/^static __inline__ void  mutex_lock(mutex_t*  lock)$/;"	f	signature:(mutex_t* lock)
mutex_t	./libs/libcutils/cutils/threads.h	/^typedef pthread_mutex_t   mutex_t;$/;"	t
mutex_t	./libs/libcutils/cutils/threads.h	/^} mutex_t;$/;"	t	typeref:struct:__anon20
mutex_unlock	./libs/libcutils/cutils/threads.h	/^static __inline__ void  mutex_unlock(mutex_t*  lock)$/;"	f	signature:(mutex_t* lock)
n	./libs/libmincrypt/mincrypt/rsa.h	/^    uint32_t n[RSANUMWORDS];  \/* modulus as little endian array *\/$/;"	m	struct:RSAPublicKey	access:public
n0inv	./libs/libmincrypt/mincrypt/rsa.h	/^    uint32_t n0inv;           \/* -1 \/ n[0] mod 2^32 *\/$/;"	m	struct:RSAPublicKey	access:public
name	./libs/libcutils/arch-x86/sse2-memset16-atom.S	/^name:					\\$/;"	l
name	./libs/libcutils/arch-x86/sse2-memset32-atom.S	/^name:					\\$/;"	l
name	./libs/libcutils/cutils/config_utils.h	/^    const char *name;$/;"	m	struct:cnode	access:public
name	./libs/libcutils/dir_hash.c	/^    char *name;$/;"	m	struct:list	file:	access:public
name	./private/android_filesystem_config.h	/^    const char *name;$/;"	m	struct:android_id_info	access:public
name	./sysdeps_win32.c	/^    char  name[32];$/;"	m	struct:FHRec_	file:	access:public
namelen	./file_sync_service.h	/^        unsigned namelen;$/;"	m	struct:__anon33::__anon34	access:public
namelen	./file_sync_service.h	/^        unsigned namelen;$/;"	m	struct:__anon33::__anon36	access:public
native_handle	./libs/libcutils/cutils/native_handle.h	/^typedef struct native_handle$/;"	s
native_handle::data	./libs/libcutils/cutils/native_handle.h	/^    int data[0];        \/* numFds + numInts ints *\/$/;"	m	struct:native_handle	access:public
native_handle::numFds	./libs/libcutils/cutils/native_handle.h	/^    int numFds;         \/* number of file-descriptors at &data[0] *\/$/;"	m	struct:native_handle	access:public
native_handle::numInts	./libs/libcutils/cutils/native_handle.h	/^    int numInts;        \/* number of ints at &data[numFds] *\/$/;"	m	struct:native_handle	access:public
native_handle::version	./libs/libcutils/cutils/native_handle.h	/^    int version;        \/* sizeof(native_handle_t) *\/$/;"	m	struct:native_handle	access:public
native_handle_close	./libs/libcutils/cutils/native_handle.h	/^int native_handle_close(const native_handle_t* h);$/;"	p	signature:(const native_handle_t* h)
native_handle_close	./libs/libcutils/native_handle.c	/^int native_handle_close(const native_handle_t* h)$/;"	f	signature:(const native_handle_t* h)
native_handle_create	./libs/libcutils/cutils/native_handle.h	/^native_handle_t* native_handle_create(int numFds, int numInts);$/;"	p	signature:(int numFds, int numInts)
native_handle_create	./libs/libcutils/native_handle.c	/^native_handle_t* native_handle_create(int numFds, int numInts)$/;"	f	signature:(int numFds, int numInts)
native_handle_delete	./libs/libcutils/cutils/native_handle.h	/^int native_handle_delete(native_handle_t* h);$/;"	p	signature:(native_handle_t* h)
native_handle_delete	./libs/libcutils/native_handle.c	/^int native_handle_delete(native_handle_t* h)$/;"	f	signature:(native_handle_t* h)
native_handle_t	./libs/libcutils/cutils/native_handle.h	/^} native_handle_t;$/;"	t	typeref:struct:native_handle
need_update	./jdwp_service.c	/^    int           need_update;$/;"	m	struct:JdwpTracker	file:	access:public
next	./adb.h	/^    adisconnect*  next;$/;"	m	struct:adisconnect	access:public
next	./adb.h	/^    alistener *next;$/;"	m	struct:alistener	access:public
next	./adb.h	/^    apacket *next;$/;"	m	struct:apacket	access:public
next	./adb.h	/^    asocket *next;$/;"	m	struct:asocket	access:public
next	./adb.h	/^    atransport *next;$/;"	m	struct:atransport	access:public
next	./fdevent.h	/^    fdevent *next;$/;"	m	struct:fdevent	access:public
next	./file_sync_client.c	/^    copyinfo *next;$/;"	m	struct:copyinfo	file:	access:public
next	./jdwp_service.c	/^    JdwpProcess*  next;$/;"	m	struct:JdwpProcess	file:	access:public
next	./jdwp_service.c	/^    JdwpTracker*  next;$/;"	m	struct:JdwpTracker	file:	access:public
next	./libs/libcutils/config_utils.c	/^    char next;$/;"	m	struct:__anon3	file:	access:public
next	./libs/libcutils/cutils/config_utils.h	/^    cnode *next;$/;"	m	struct:cnode	access:public
next	./libs/libcutils/cutils/list.h	/^    struct listnode *next;$/;"	m	struct:listnode	typeref:struct:listnode::listnode	access:public
next	./libs/libcutils/dir_hash.c	/^    struct list *next;$/;"	m	struct:list	typeref:struct:list::list	file:	access:public
next	./libs/libcutils/hashmap.c	/^    Entry* next;$/;"	m	struct:Entry	file:	access:public
next	./sysdeps.h	/^    fdevent *next;$/;"	m	struct:fdevent	access:public
next	./sysdeps_win32.c	/^    EventHook    next;$/;"	m	struct:EventHookRec_	file:	access:public
next	./transport.c	/^    device_tracker*  next;$/;"	m	struct:device_tracker	file:	access:public
next	./usb_libusb.c	/^    usb_handle            *next;$/;"	m	struct:usb_handle	file:	access:public
next	./usb_linux.c	/^    usb_handle *next;$/;"	m	struct:usb_handle	file:	access:public
next	./usb_windows.c	/^  usb_handle *next;$/;"	m	struct:usb_handle	file:	access:public
nextPacket	./libs/libcutils/mq.c	/^    OutgoingPacket* nextPacket;$/;"	m	struct:OutgoingPacket	file:	access:public
node	./adb_auth_client.c	/^    struct listnode node;$/;"	m	struct:adb_public_key	typeref:struct:adb_public_key::listnode	file:	access:public
node	./adb_auth_host.c	/^    struct listnode node;$/;"	m	struct:adb_private_key	typeref:struct:adb_private_key::listnode	file:	access:public
node_to_item	./libs/libcutils/cutils/list.h	32;"	d
normalize_overflow	./libs/libcutils/tztime.c	/^normalize_overflow(tensptr, unitsptr, base)$/;"	f	file:
normalize_overflow	./libs/libcutils/tztime.c	/^static int		normalize_overflow P((int * tensptr, int * unitsptr,$/;"	p	file:	signature:(int * tensptr, int * unitsptr, int base)
notificationIterators	./usb_osx.c	/^static io_iterator_t*           notificationIterators;$/;"	v	file:
notificationPort	./usb_osx.c	/^static IONotificationPortRef    notificationPort = 0;$/;"	v	file:
notify	./usb_libusb.c	/^    adb_cond_t            notify;$/;"	m	struct:usb_handle	file:	access:public
notify	./usb_linux.c	/^    adb_cond_t notify;$/;"	m	struct:usb_handle	file:	access:public
notify	./usb_linux_client.c	/^    adb_cond_t notify;$/;"	m	struct:usb_handle	file:	access:public
nsec	./libs/libcutils/cutils/logger.h	/^    int32_t     nsec;      \/* nanoseconds *\/$/;"	m	struct:logger_entry_v2	access:public
nsec	./libs/libcutils/cutils/logger.h	/^    int32_t     nsec;   \/* nanoseconds *\/$/;"	m	struct:logger_entry	access:public
numFds	./libs/libcutils/cutils/native_handle.h	/^    int numFds;         \/* number of file-descriptors at &data[0] *\/$/;"	m	struct:native_handle	access:public
numInts	./libs/libcutils/cutils/native_handle.h	/^    int numInts;        \/* number of ints at &data[numFds] *\/$/;"	m	struct:native_handle	access:public
num_prefixes	./sockets.c	/^static const int num_prefixes = (sizeof(prefixes) \/ sizeof(prefixes[0]));$/;"	v	file:
offset	./libs/libcutils/include/ashmem.h	/^	__u32 offset;	\/* offset into region, in bytes, page-aligned *\/$/;"	m	struct:ashmem_pin	access:public
offset	./libs/libcutils/open_memstream.c	/^    size_t      offset;     \/* current write offset *\/$/;"	m	struct:__anon4	file:	access:public
onBytes	./libs/libcutils/mq.c	/^    BytesListener* onBytes;$/;"	m	struct:__anon11	file:	access:public
onDeath	./libs/libcutils/mq.c	/^    DeathListener* onDeath;$/;"	m	struct:__anon11	file:	access:public
onExcept	./libs/libcutils/cutils/selector.h	/^    void (*onExcept)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
onReadable	./libs/libcutils/cutils/selector.h	/^    void (*onReadable)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
onRemove	./libs/libcutils/cutils/selector.h	/^    void (*onRemove)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
onWritable	./libs/libcutils/cutils/selector.h	/^    void (*onWritable)(SelectableFd* self);$/;"	m	struct:SelectableFd	access:public
online	./adb.h	/^    int online;$/;"	m	struct:atransport	access:public
only_one_char	./libs/libcutils/partition_utils.c	/^static int only_one_char(char *buf, int len, char c)$/;"	f	file:	signature:(char *buf, int len, char c)
opaque	./adb.h	/^    void*         opaque;$/;"	m	struct:adisconnect	access:public
open	./adb.c	159;"	d	file:
open	./adb.c	161;"	d	file:
open	./adb.c	164;"	d	file:
open	./adb.c	166;"	d	file:
open	./sysdeps.h	163;"	d
open	./sysdeps.h	340;"	d
open	./sysdeps.h	341;"	d
open	./transport_local.c	194;"	d	file:
open	./transport_local.c	196;"	d	file:
open	./transport_local.c	199;"	d	file:
open	./transport_local.c	201;"	d	file:
open_memstream	./libs/libcutils/cutils/open_memstream.h	/^FILE* open_memstream(char** bufp, size_t* sizep);$/;"	p	signature:(char** bufp, size_t* sizep)
open_memstream	./libs/libcutils/open_memstream.c	/^FILE* open_memstream(char** bufp, size_t* sizep)$/;"	f	signature:(char** bufp, size_t* sizep)
out_count	./jdwp_service.c	/^    int           out_count;            \/* to send to the JDWP process      *\/$/;"	m	struct:JdwpProcess	file:	access:public
out_fds	./jdwp_service.c	/^    int           out_fds[MAX_OUT_FDS]; \/* output array of file descriptors *\/$/;"	m	struct:JdwpProcess	file:	access:public
outgoingHeader	./libs/libcutils/mq.c	/^    Buffer outgoingHeader;$/;"	m	struct:PeerProxy	file:	access:public
outgoingPacketFree	./libs/libcutils/mq.c	/^static void outgoingPacketFree(OutgoingPacket* packet) {$/;"	f	file:	signature:(OutgoingPacket* packet)
outgoingPacketFreeBytes	./libs/libcutils/mq.c	/^static void outgoingPacketFreeBytes(OutgoingPacket* packet) {$/;"	f	file:	signature:(OutgoingPacket* packet)
outgoingPacketFreeSharedBytes	./libs/libcutils/mq.c	/^static void outgoingPacketFreeSharedBytes(OutgoingPacket* packet) {$/;"	f	file:	signature:(OutgoingPacket* packet)
outgoingPacketFreeSocket	./libs/libcutils/mq.c	/^static void outgoingPacketFreeSocket(OutgoingPacket* packet) {$/;"	f	file:	signature:(OutgoingPacket* packet)
output_thread	./transport.c	/^static void *output_thread(void *_t)$/;"	f	file:	signature:(void *_t)
padding	./libs/libmincrypt/rsa_e_3.c	/^static const uint8_t padding[RSANUMBYTES - SHA_DIGEST_SIZE] = {$/;"	v	file:
pair	./sysdeps_win32.c	/^        SocketPair  pair;$/;"	m	union:FHRec_::__anon27	file:	access:public
panic	./test_track_devices.c	/^panic( const char*  msg )$/;"	f	file:	signature:( const char* msg )
panic	./test_track_jdwp.c	/^panic( const char*  msg )$/;"	f	file:	signature:( const char* msg )
parse_banner	./adb.c	/^void parse_banner(char *banner, atransport *t)$/;"	f	signature:(char *banner, atransport *t)
parse_block	./libs/libcutils/config_utils.c	/^static int parse_block(cstate *cs, cnode *node)$/;"	f	file:	signature:(cstate *cs, cnode *node)
parse_expr	./libs/libcutils/config_utils.c	/^static int parse_expr(cstate *cs, cnode *node);$/;"	p	file:	signature:(cstate *cs, cnode *node)
parse_expr	./libs/libcutils/config_utils.c	/^static int parse_expr(cstate *cs, cnode *root)$/;"	f	file:	signature:(cstate *cs, cnode *root)
partition_wiped	./libs/libcutils/cutils/partition_utils.h	/^int partition_wiped(char *source);$/;"	p	signature:(char *source)
partition_wiped	./libs/libcutils/partition_utils.c	/^int partition_wiped(char *source)$/;"	f	signature:(char *source)
pass	./jdwp_service.c	/^    int      pass;$/;"	m	struct:__anon45	file:	access:public
peek	./sysdeps_win32.c	/^    int         (*peek)   ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
peer	./adb.h	/^    asocket *peer;$/;"	m	struct:asocket	access:public
peer	./libs/libcutils/mq.c	/^    Peer* peer;$/;"	m	struct:PeerProxy	file:	access:public
peerCreate	./libs/libcutils/mq.c	/^static Peer* peerCreate() {$/;"	f	file:
peerInitialize	./libs/libcutils/mq.c	/^void peerInitialize(BytesListener* bytesListener, $/;"	f	signature:(BytesListener* bytesListener, DeathListener* deathListener)
peerIsDead	./libs/libcutils/mq.c	/^static bool peerIsDead(Peer* peer, pid_t pid) {$/;"	f	file:	signature:(Peer* peer, pid_t pid)
peerLock	./libs/libcutils/mq.c	/^static void peerLock(Peer* peer) {$/;"	f	file:	signature:(Peer* peer)
peerLoop	./libs/libcutils/mq.c	/^void peerLoop() {$/;"	f
peerProxies	./libs/libcutils/mq.c	/^    Hashmap* peerProxies;$/;"	m	struct:__anon11	file:	access:public
peerProxyBeforeSelect	./libs/libcutils/mq.c	/^static void peerProxyBeforeSelect(SelectableFd* fd) {$/;"	f	file:	signature:(SelectableFd* fd)
peerProxyBufferInput	./libs/libcutils/mq.c	/^static bool peerProxyBufferInput(PeerProxy* peerProxy) {$/;"	f	file:	signature:(PeerProxy* peerProxy)
peerProxyCreate	./libs/libcutils/mq.c	/^static PeerProxy* peerProxyCreate(Peer* peer, Credentials credentials) {$/;"	f	file:	signature:(Peer* peer, Credentials credentials)
peerProxyCreate	./libs/libcutils/mq.c	/^static PeerProxy* peerProxyCreate(Peer* peer, Credentials credentials);$/;"	p	file:	signature:(Peer* peer, Credentials credentials)
peerProxyEnqueueOutgoingPacket	./libs/libcutils/mq.c	/^static void peerProxyEnqueueOutgoingPacket(PeerProxy* peerProxy,$/;"	f	file:	signature:(PeerProxy* peerProxy, OutgoingPacket* newPacket)
peerProxyExpectBytes	./libs/libcutils/mq.c	/^static void peerProxyExpectBytes(PeerProxy* peerProxy, Header* header) {$/;"	f	file:	signature:(PeerProxy* peerProxy, Header* header)
peerProxyExpectHeader	./libs/libcutils/mq.c	/^static void peerProxyExpectHeader(PeerProxy* peerProxy) {$/;"	f	file:	signature:(PeerProxy* peerProxy)
peerProxyGetOrCreate	./libs/libcutils/mq.c	/^static PeerProxy* peerProxyGetOrCreate(Peer* peer, pid_t pid, $/;"	f	file:	signature:(Peer* peer, pid_t pid, bool requestConnection)
peerProxyHandleError	./libs/libcutils/mq.c	/^static void peerProxyHandleError(PeerProxy* peerProxy, char* functionName) {$/;"	f	file:	signature:(PeerProxy* peerProxy, char* functionName)
peerProxyHandleHeader	./libs/libcutils/mq.c	/^static void peerProxyHandleHeader(PeerProxy* peerProxy, Header* header) {$/;"	f	file:	signature:(PeerProxy* peerProxy, Header* header)
peerProxyKill	./libs/libcutils/mq.c	/^static void peerProxyKill(PeerProxy* peerProxy, bool errnoIsSet) {$/;"	f	file:	signature:(PeerProxy* peerProxy, bool errnoIsSet)
peerProxyLockAndEnqueueOutgoingPacket	./libs/libcutils/mq.c	/^static void peerProxyLockAndEnqueueOutgoingPacket(PeerProxy* peerProxy,$/;"	f	file:	signature:(PeerProxy* peerProxy, OutgoingPacket* newPacket)
peerProxyNextPacket	./libs/libcutils/mq.c	/^static bool peerProxyNextPacket(PeerProxy* peerProxy) {$/;"	f	file:	signature:(PeerProxy* peerProxy)
peerProxyPrepareOutgoingHeader	./libs/libcutils/mq.c	/^static void peerProxyPrepareOutgoingHeader(PeerProxy* peerProxy) {$/;"	f	file:	signature:(PeerProxy* peerProxy)
peerProxyRead	./libs/libcutils/mq.c	/^static void peerProxyRead(SelectableFd* fd) {$/;"	f	file:	signature:(SelectableFd* fd)
peerProxyRead	./libs/libcutils/mq.c	/^static void peerProxyRead(SelectableFd* fd);$/;"	p	file:	signature:(SelectableFd* fd)
peerProxyRemoveConnection	./libs/libcutils/mq.c	/^static bool peerProxyRemoveConnection(void* key, void* value, void* context) {$/;"	f	file:	signature:(void* key, void* value, void* context)
peerProxySetFd	./libs/libcutils/mq.c	/^static void peerProxySetFd(PeerProxy* peerProxy, SelectableFd* fd) {$/;"	f	file:	signature:(PeerProxy* peerProxy, SelectableFd* fd)
peerProxyWrite	./libs/libcutils/mq.c	/^static void peerProxyWrite(SelectableFd* fd) {$/;"	f	file:	signature:(SelectableFd* fd)
peerProxyWriteBytes	./libs/libcutils/mq.c	/^static void peerProxyWriteBytes(PeerProxy* peerProxy) {	$/;"	f	file:	signature:(PeerProxy* peerProxy)
peerProxyWriteConnection	./libs/libcutils/mq.c	/^static void peerProxyWriteConnection(PeerProxy* peerProxy) {$/;"	f	file:	signature:(PeerProxy* peerProxy)
peerProxyWriteFromBuffer	./libs/libcutils/mq.c	/^static bool peerProxyWriteFromBuffer(PeerProxy* peerProxy, Buffer* outgoing) {$/;"	f	file:	signature:(PeerProxy* peerProxy, Buffer* outgoing)
peerSendBytes	./libs/libcutils/mq.c	/^int peerSendBytes(pid_t pid, const char* bytes, size_t size) {$/;"	f	signature:(pid_t pid, const char* bytes, size_t size)
peerSendSharedBytes	./libs/libcutils/mq.c	/^int peerSendSharedBytes(pid_t pid, char* bytes, size_t size,$/;"	f	signature:(pid_t pid, char* bytes, size_t size, void (*free)(void* context), void* context)
peerUnlock	./libs/libcutils/mq.c	/^static void peerUnlock(Peer* peer) {$/;"	f	file:	signature:(Peer* peer)
pid	./backup_service.c	/^    pid_t pid;$/;"	m	struct:__anon39	file:	access:public
pid	./jdwp_service.c	/^    int           pid;$/;"	m	struct:JdwpProcess	file:	access:public
pid	./libs/libcutils/cutils/logger.h	/^    int32_t     pid;       \/* generating process's pid *\/$/;"	m	struct:logger_entry_v2	access:public
pid	./libs/libcutils/cutils/logger.h	/^    int32_t     pid;    \/* generating process's pid *\/$/;"	m	struct:logger_entry	access:public
pid	./libs/libcutils/cutils/logprint.h	/^    int32_t pid;$/;"	m	struct:AndroidLogEntry_t	access:public
pid	./libs/libcutils/mq.c	/^    pid_t pid;$/;"	m	struct:__anon11	file:	access:public
pid	./libs/libcutils/mq.c	/^    pid_t pid;$/;"	m	struct:__anon5	file:	access:public
pidEquals	./libs/libcutils/mq.c	/^static bool pidEquals(void* keyA, void* keyB) {$/;"	f	file:	signature:(void* keyA, void* keyB)
pidHash	./libs/libcutils/mq.c	/^static int pidHash(void* key) {$/;"	f	file:	signature:(void* key)
pkt_first	./adb.h	/^    apacket *pkt_first;$/;"	m	struct:asocket	access:public
pkt_last	./adb.h	/^    apacket *pkt_last;$/;"	m	struct:asocket	access:public
pm	./libs/libcutils/cutils/tztime.h	/^    const char *pm;$/;"	m	struct:strftime_locale	access:public
pm_command	./commandline.c	/^static int pm_command(transport_type transport, char* serial,$/;"	f	file:	signature:(transport_type transport, char* serial, int argc, char** argv)
popcount	./libs/libcutils/cutils/bitops.h	/^static inline int popcount(unsigned int x)$/;"	f	signature:(unsigned int x)
popcountl	./libs/libcutils/cutils/bitops.h	/^static inline int popcountl(unsigned long x)$/;"	f	signature:(unsigned long x)
popcountll	./libs/libcutils/cutils/bitops.h	/^static inline int popcountll(unsigned long long x)$/;"	f	signature:(unsigned long long x)
ppp	./commandline.c	/^int ppp(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
prefix	./private/android_filesystem_config.h	/^    const char *prefix;$/;"	m	struct:fs_path_config	access:public
prefix_struct	./sockets.c	/^static const struct prefix_struct {$/;"	s	file:
prefix_struct::len	./sockets.c	/^    const size_t len;$/;"	m	struct:prefix_struct	file:	access:public
prefix_struct::str	./sockets.c	/^    const char *str;$/;"	m	struct:prefix_struct	file:	access:public
prefixes	./sockets.c	/^} prefixes[] = {$/;"	v	typeref:struct:prefix_struct	file:
prepare	./sysdeps_win32.c	/^    void        (*prepare)( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
prepareForSelect	./libs/libcutils/selector.c	/^static void prepareForSelect(Selector* selector) {$/;"	f	file:	signature:(Selector* selector)
prev	./adb.h	/^    adisconnect*  prev;$/;"	m	struct:adisconnect	access:public
prev	./adb.h	/^    alistener *prev;$/;"	m	struct:alistener	access:public
prev	./adb.h	/^    asocket *prev;$/;"	m	struct:asocket	access:public
prev	./adb.h	/^    atransport *prev;$/;"	m	struct:atransport	access:public
prev	./fdevent.h	/^    fdevent *prev;$/;"	m	struct:fdevent	access:public
prev	./jdwp_service.c	/^    JdwpProcess*  prev;$/;"	m	struct:JdwpProcess	file:	access:public
prev	./jdwp_service.c	/^    JdwpTracker*  prev;$/;"	m	struct:JdwpTracker	file:	access:public
prev	./libs/libcutils/cutils/list.h	/^    struct listnode *prev;$/;"	m	struct:listnode	typeref:struct:listnode::listnode	access:public
prev	./sysdeps.h	/^    fdevent *prev;$/;"	m	struct:fdevent	access:public
prev	./usb_libusb.c	/^    usb_handle            *prev;$/;"	m	struct:usb_handle	file:	access:public
prev	./usb_linux.c	/^    usb_handle *prev;$/;"	m	struct:usb_handle	file:	access:public
prev	./usb_windows.c	/^  usb_handle *prev;$/;"	m	struct:usb_handle	file:	access:public
print	./libs/libmincrypt/tools/DumpPublicKey.java	/^    static String print(RSAPublicKey key) throws Exception {$/;"	m	class:DumpPublicKey	access:default	signature:(RSAPublicKey key)
print_packet	./adb.c	/^void print_packet(const char *label, apacket *p)$/;"	f	signature:(const char *label, apacket *p)
print_packet	./adb.h	/^void print_packet(const char *label, apacket *p);$/;"	p	signature:(const char *label, apacket *p)
print_packet	./adb.h	424;"	d
priority	./libs/libcutils/cutils/logprint.h	/^    android_LogPriority priority;$/;"	m	struct:AndroidLogEntry_t	access:public
privatehid	./libs/libcutils/private.h	/^static char	privatehid[] = "@(#)private.h	8.2";$/;"	v
process_name	./libs/libcutils/process_name.c	/^static const char* process_name = "unknown";$/;"	v	file:
product	./adb.h	/^    char *product;$/;"	m	struct:atransport	access:public
product_file	./commandline.c	/^static char *product_file(const char *extra)$/;"	f	file:	signature:(const char *extra)
property_get	./libs/libcutils/cutils/properties.h	/^int property_get(const char *key, char *value, const char *default_value);$/;"	p	signature:(const char *key, char *value, const char *default_value)
property_get	./libs/libcutils/properties.c	/^int property_get(const char *key, char *value, const char *default_value)$/;"	f	signature:(const char *key, char *value, const char *default_value)
property_list	./libs/libcutils/cutils/properties.h	/^int property_list(void (*propfn)(const char *key, const char *value, void *cookie), void *cookie);    $/;"	p	signature:(void (*propfn)(const char *key, const char *value, void *cookie), void *cookie)
property_list	./libs/libcutils/properties.c	/^int property_list(void (*propfn)(const char *key, const char *value, void *cookie), $/;"	f	signature:(void (*propfn)(const char *key, const char *value, void *cookie), void *cookie)
property_set	./libs/libcutils/cutils/properties.h	/^int property_set(const char *key, const char *value);$/;"	p	signature:(const char *key, const char *value)
property_set	./libs/libcutils/properties.c	/^int property_set(const char *key, const char *value)$/;"	f	signature:(const char *key, const char *value)
ptr	./adb.h	/^    unsigned char *ptr;$/;"	m	struct:apacket	access:public
put_apacket	./adb.c	/^void put_apacket(apacket *p)$/;"	f	signature:(apacket *p)
put_apacket	./adb.h	/^void put_apacket(apacket *p);$/;"	p	signature:(apacket *p)
qemu_channel_open	./qemu/qemu.c	/^qemu_channel_open( QemuChannel*  channel,$/;"	f	signature:( QemuChannel* channel, const char* name, int mode )
qemu_channel_open	./qemu/qemu.h	/^extern int  qemu_channel_open( QemuChannel*  channel,$/;"	p	signature:( QemuChannel* channel, const char* name, int mode )
qemu_channel_open_qemud	./qemu/qemu.c	/^qemu_channel_open_qemud( QemuChannel*  channel,$/;"	f	file:	signature:( QemuChannel* channel, const char* name )
qemu_channel_open_qemud_old	./qemu/qemu.c	/^qemu_channel_open_qemud_old( QemuChannel*  channel,$/;"	f	file:	signature:( QemuChannel* channel, const char* name )
qemu_channel_open_qemud_pipe	./qemu/qemu.c	/^qemu_channel_open_qemud_pipe( QemuChannel*  channel,$/;"	f	file:	signature:( QemuChannel* channel, const char* name )
qemu_channel_open_tty	./qemu/qemu.c	/^qemu_channel_open_tty( QemuChannel*  channel,$/;"	f	file:	signature:( QemuChannel* channel, const char* name, int mode )
qemu_check	./qemu/qemu.c	/^qemu_check(void)$/;"	f	signature:(void)
qemu_check	./qemu/qemu.h	/^extern int  qemu_check(void);$/;"	p	signature:(void)
qemu_command_format	./qemu/qemu.c	/^qemu_command_format( char*        buffer,$/;"	f	signature:( char* buffer, int buffer_size, const char* format, ... )
qemu_command_format	./qemu/qemu.h	/^extern int  qemu_command_format( char*        buffer, $/;"	p	signature:( char* buffer, int buffer_size, const char* format, ... )
qemu_command_vformat	./qemu/qemu.c	/^qemu_command_vformat( char*        buffer,$/;"	f	file:	signature:( char* buffer, int buffer_size, const char* format, va_list args )
qemu_control_command	./qemu/qemu.c	/^qemu_control_command( const char*  fmt, ... )$/;"	f	signature:( const char* fmt, ... )
qemu_control_command	./qemu/qemu.h	/^extern int  qemu_control_command( const char*  fmt, ... );$/;"	p	signature:( const char* fmt, ... )
qemu_control_fd	./qemu/qemu.c	/^qemu_control_fd(void)$/;"	f	file:	signature:(void)
qemu_control_query	./qemu/qemu.c	/^extern int  qemu_control_query( const char*  question, int  questionlen,$/;"	f	signature:( const char* question, int questionlen, char* answer, int answersize )
qemu_control_query	./qemu/qemu.h	/^extern int  qemu_control_query( const char*  question, int  questionlen,$/;"	p	signature:( const char* question, int questionlen, char* answer, int answersize )
qemu_control_send	./qemu/qemu.c	/^qemu_control_send(const char*  cmd, int  len)$/;"	f	file:	signature:(const char* cmd, int len)
qemu_fd_read	./qemu/qemu.c	/^qemu_fd_read( int  fd, char*  buff, int  len )$/;"	f	file:	signature:( int fd, char* buff, int len )
qemu_fd_write	./qemu/qemu.c	/^qemu_fd_write( int  fd, const char*  cmd, int  len )$/;"	f	file:	signature:( int fd, const char* cmd, int len )
qemu_pipe_open	./qemu/qemu_pipe.h	/^qemu_pipe_open(const char*  pipeName)$/;"	f	signature:(const char* pipeName)
qemu_socket_thread	./transport_local.c	/^static void *qemu_socket_thread(void * arg)$/;"	f	file:	signature:(void * arg)
qsort_r_compat	./libs/libcutils/cutils/qsort_r_compat.h	/^void qsort_r_compat(void* base, size_t nel, size_t width, void* thunk,$/;"	p	signature:(void* base, size_t nel, size_t width, void* thunk, int (*compar)(void*, const void* , const void* ))
qsort_r_compat	./libs/libcutils/qsort_r_compat.c	/^void qsort_r_compat(void* base, size_t nel, size_t width, void* thunk,$/;"	f	signature:(void* base, size_t nel, size_t width, void* thunk, int (*compar)(void*, const void* , const void*))
qtaguid_deleteTagData	./libs/libcutils/cutils/qtaguid.h	/^extern int qtaguid_deleteTagData(int tag, uid_t uid);$/;"	p	signature:(int tag, uid_t uid)
qtaguid_deleteTagData	./libs/libcutils/qtaguid.c	/^int qtaguid_deleteTagData(int tag, uid_t uid) {$/;"	f	signature:(int tag, uid_t uid)
qtaguid_resTrack	./libs/libcutils/qtaguid.c	/^void qtaguid_resTrack(void) {$/;"	f	signature:(void)
qtaguid_setCounterSet	./libs/libcutils/cutils/qtaguid.h	/^extern int qtaguid_setCounterSet(int counterSetNum, uid_t uid);$/;"	p	signature:(int counterSetNum, uid_t uid)
qtaguid_setCounterSet	./libs/libcutils/qtaguid.c	/^int qtaguid_setCounterSet(int counterSetNum, uid_t uid) {$/;"	f	signature:(int counterSetNum, uid_t uid)
qtaguid_setPacifier	./libs/libcutils/cutils/qtaguid.h	/^extern int qtaguid_setPacifier(int on);$/;"	p	signature:(int on)
qtaguid_setPacifier	./libs/libcutils/qtaguid.c	/^int qtaguid_setPacifier(int on) {$/;"	f	signature:(int on)
qtaguid_tagSocket	./libs/libcutils/cutils/qtaguid.h	/^extern int qtaguid_tagSocket(int sockfd, int tag, uid_t uid);$/;"	p	signature:(int sockfd, int tag, uid_t uid)
qtaguid_tagSocket	./libs/libcutils/qtaguid.c	/^int qtaguid_tagSocket(int sockfd, int tag, uid_t uid) {$/;"	f	signature:(int sockfd, int tag, uid_t uid)
qtaguid_untagSocket	./libs/libcutils/cutils/qtaguid.h	/^extern int qtaguid_untagSocket(int sockfd);$/;"	p	signature:(int sockfd)
qtaguid_untagSocket	./libs/libcutils/qtaguid.c	/^int qtaguid_untagSocket(int sockfd) {$/;"	f	signature:(int sockfd)
qual_char_is_invalid	./transport.c	/^static int qual_char_is_invalid(char ch)$/;"	f	file:	signature:(char ch)
qual_match	./transport.c	/^static int qual_match(const char *to_test,$/;"	f	file:	signature:(const char *to_test, const char *prefix, const char *qual, int sanitize_qual)
qual_overwrite	./adb.c	/^static void qual_overwrite(char **dst, const char *src)$/;"	f	file:	signature:(char **dst, const char *src)
r_day	./libs/libcutils/tztime.c	/^	int		r_day;		\/* day number of rule *\/$/;"	m	struct:rule	file:	access:public
r_mon	./libs/libcutils/tztime.c	/^	int		r_mon;		\/* month number of rule *\/$/;"	m	struct:rule	file:	access:public
r_time	./libs/libcutils/tztime.c	/^	long		r_time;		\/* transition time of rule *\/$/;"	m	struct:rule	file:	access:public
r_type	./libs/libcutils/tztime.c	/^	int		r_type;		\/* type of rule--see below *\/$/;"	m	struct:rule	file:	access:public
r_week	./libs/libcutils/tztime.c	/^	int		r_week;		\/* week number of rule *\/$/;"	m	struct:rule	file:	access:public
read	./sysdeps.h	132;"	d
read	./sysdeps.h	133;"	d
read	./sysdeps.h	363;"	d
read	./sysdeps.h	364;"	d
read	./usb_linux_client.c	/^    int (*read)(usb_handle *h, void *data, int len);$/;"	m	struct:usb_handle	file:	access:public
readFds	./libs/libcutils/selector.c	/^    fd_set readFds;$/;"	m	struct:Selector	file:	access:public
read_and_dump	./commandline.c	/^static void read_and_dump(int fd)$/;"	f	file:	signature:(int fd)
read_end	./libs/libcutils/record_stream.c	/^    unsigned char *read_end;$/;"	m	struct:RecordStream	file:	access:public
read_fds	./fdevent.c	/^static fd_set read_fds;$/;"	v	file:
read_from_remote	./adb.h	/^    int (*read_from_remote)(apacket *p, atransport *t);$/;"	m	struct:atransport	access:public
read_key	./adb_auth_host.c	/^static int read_key(const char *file, struct listnode *list)$/;"	f	file:	signature:(const char *file, struct listnode *list)
read_keys	./adb_auth_client.c	/^static void read_keys(const char *file, struct listnode *list)$/;"	f	file:	signature:(const char *file, struct listnode *list)
read_packet	./transport.c	/^read_packet(int  fd, const char* name, apacket** ppacket)$/;"	f	file:	signature:(int fd, const char* name, apacket** ppacket)
readv	./libs/libcutils/cutils/uio.h	/^extern int  readv( int  fd, struct iovec*  vecs, int  count );$/;"	p	signature:( int fd, struct iovec* vecs, int count )
readv	./libs/libcutils/uio.c	/^int  readv( int  fd, struct iovec*  vecs, int  count )$/;"	f	signature:( int fd, struct iovec* vecs, int count )
readx	./transport.c	/^int readx(int fd, void *ptr, size_t len)$/;"	f	signature:(int fd, void *ptr, size_t len)
readx	./transport.h	/^int readx(int fd, void *ptr, size_t len);$/;"	p	signature:(int fd, void *ptr, size_t len)
ready	./adb.h	/^    void (*ready)(asocket *s);$/;"	m	struct:asocket	access:public
ready	./sysdeps_win32.c	/^    int          ready;    \/* ready event flags  *\/$/;"	m	struct:EventHookRec_	file:	access:public
reaper_thread	./usb_linux.c	/^    pthread_t reaper_thread;$/;"	m	struct:usb_handle	file:	access:public
reboot_service	./services.c	/^void reboot_service(int fd, void *arg)$/;"	f	signature:(int fd, void *arg)
recognized_device	./usb_windows.c	/^int recognized_device(usb_handle* handle) {$/;"	f	signature:(usb_handle* handle)
recognized_device	./usb_windows.c	/^int recognized_device(usb_handle* handle);$/;"	p	file:	signature:(usb_handle* handle)
record_stream_free	./libs/libcutils/cutils/record_stream.h	/^extern void record_stream_free(RecordStream *p_rs);$/;"	p	signature:(RecordStream *p_rs)
record_stream_free	./libs/libcutils/record_stream.c	/^extern void record_stream_free(RecordStream *rs)$/;"	f	signature:(RecordStream *rs)
record_stream_get_next	./libs/libcutils/cutils/record_stream.h	/^extern int record_stream_get_next (RecordStream *p_rs, void ** p_outRecord, $/;"	p	signature:(RecordStream *p_rs, void ** p_outRecord, size_t *p_outRecordLen)
record_stream_get_next	./libs/libcutils/record_stream.c	/^int record_stream_get_next (RecordStream *p_rs, void ** p_outRecord, $/;"	f	signature:(RecordStream *p_rs, void ** p_outRecord, size_t *p_outRecordLen)
record_stream_new	./libs/libcutils/cutils/record_stream.h	/^extern RecordStream *record_stream_new(int fd, size_t maxRecordLen);$/;"	p	signature:(int fd, size_t maxRecordLen)
record_stream_new	./libs/libcutils/record_stream.c	/^extern RecordStream *record_stream_new(int fd, size_t maxRecordLen)$/;"	f	signature:(int fd, size_t maxRecordLen)
recover_service	./services.c	/^static void recover_service(int s, void *cookie)$/;"	f	file:	signature:(int s, void *cookie)
recovery	./libs/libcutils/misc_rw.c	/^    char recovery[1024];$/;"	m	struct:bootloader_message	file:	access:public
recovery_mode	./adb.c	/^int recovery_mode = 0;$/;"	v
recurse	./libs/libcutils/dir_hash.c	/^static int recurse(HashAlgorithm algorithm, const char *directory_path,$/;"	f	file:	signature:(HashAlgorithm algorithm, const char *directory_path, struct list **out)
red_length	./framebuffer_service.c	/^    unsigned int red_length;$/;"	m	struct:fbinfo	file:	access:public
red_offset	./framebuffer_service.c	/^    unsigned int red_offset;$/;"	m	struct:fbinfo	file:	access:public
ref_count	./adb.h	/^    int ref_count;$/;"	m	struct:atransport	access:public
register_device	./usb_libusb.c	/^register_device(struct usb_handle *uh, const char *serial)$/;"	f	signature:(struct usb_handle *uh, const char *serial)
register_device	./usb_linux.c	/^static void register_device(const char *dev_name, const char *devpath,$/;"	f	file:	signature:(const char *dev_name, const char *devpath, unsigned char ep_in, unsigned char ep_out, int interface, int serial_index, unsigned zero_mask)
register_device	./usb_linux.c	/^static void register_device(const char *dev_name, const char *devpath,$/;"	p	file:	signature:(const char *dev_name, const char *devpath, unsigned char ep_in, unsigned char ep_out, int ifc, int serial_index, unsigned zero_mask)
register_new_device	./usb_windows.c	/^int register_new_device(usb_handle* handle) {$/;"	f	signature:(usb_handle* handle)
register_new_device	./usb_windows.c	/^int register_new_device(usb_handle* handle);$/;"	p	file:	signature:(usb_handle* handle)
register_socket_transport	./adb.h	/^void register_socket_transport(int s, const char *serial, int port, int local);$/;"	p	signature:(int s, const char *serial, int port, int local)
register_socket_transport	./transport.c	/^void register_socket_transport(int s, const char *serial, int port, int local)$/;"	f	signature:(int s, const char *serial, int port, int local)
register_transport	./transport.c	/^static void register_transport(atransport *transport)$/;"	f	file:	signature:(atransport *transport)
register_usb_transport	./adb.h	/^void register_usb_transport(usb_handle *h, const char *serial, const char *devpath, unsigned writeable);$/;"	p	signature:(usb_handle *h, const char *serial, const char *devpath, unsigned writeable)
register_usb_transport	./transport.c	/^void register_usb_transport(usb_handle *usb, const char *serial, const char *devpath, unsigned writeable)$/;"	f	signature:(usb_handle *usb, const char *serial, const char *devpath, unsigned writeable)
remaining	./libs/libcutils/buffer.h	/^        size_t remaining;$/;"	m	union:__anon1::__anon2	access:public
remote_build_list	./file_sync_client.c	/^static int remote_build_list(int syncfd, copyinfo **filelist,$/;"	f	file:	signature:(int syncfd, copyinfo **filelist, const char *rpath, const char *lpath)
remote_close	./transport_local.c	/^static void remote_close(atransport *t)$/;"	f	file:	signature:(atransport *t)
remote_close	./transport_usb.c	/^static void remote_close(atransport *t)$/;"	f	file:	signature:(atransport *t)
remote_kick	./transport_local.c	/^static void remote_kick(atransport *t)$/;"	f	file:	signature:(atransport *t)
remote_kick	./transport_usb.c	/^static void remote_kick(atransport *t)$/;"	f	file:	signature:(atransport *t)
remote_read	./transport_local.c	/^static int remote_read(apacket *p, atransport *t)$/;"	f	file:	signature:(apacket *p, atransport *t)
remote_read	./transport_usb.c	/^static int remote_read(apacket *p, atransport *t)$/;"	f	file:	signature:(apacket *p, atransport *t)
remote_socket_close	./sockets.c	/^static void remote_socket_close(asocket *s)$/;"	f	file:	signature:(asocket *s)
remote_socket_disconnect	./sockets.c	/^static void remote_socket_disconnect(void*  _s, atransport*  t)$/;"	f	file:	signature:(void* _s, atransport* t)
remote_socket_enqueue	./sockets.c	/^static int remote_socket_enqueue(asocket *s, apacket *p)$/;"	f	file:	signature:(asocket *s, apacket *p)
remote_socket_ready	./sockets.c	/^static void remote_socket_ready(asocket *s)$/;"	f	file:	signature:(asocket *s)
remote_write	./transport_local.c	/^static int remote_write(apacket *p, atransport *t)$/;"	f	file:	signature:(apacket *p, atransport *t)
remote_write	./transport_usb.c	/^static int remote_write(apacket *p, atransport *t)$/;"	f	file:	signature:(apacket *p, atransport *t)
remount_ro	./libs/libcutils/android_reboot.c	/^static void remount_ro(void)$/;"	f	file:	signature:(void)
remount_ro_done	./libs/libcutils/android_reboot.c	/^static int remount_ro_done(void)$/;"	f	file:	signature:(void)
remount_service	./adb.h	/^void remount_service(int fd, void *cookie);$/;"	p	signature:(int fd, void *cookie)
remount_service	./remount_service.c	/^void remount_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
remount_system	./remount_service.c	/^static int remount_system()$/;"	f	file:
remove	./libs/libcutils/cutils/selector.h	/^    bool remove;$/;"	m	struct:SelectableFd	access:public
remove	./libs/libcutils/private.h	218;"	d
remove_ctxt	./libs/libcutils/str_parms.c	/^struct remove_ctxt {$/;"	s	file:
remove_ctxt::key	./libs/libcutils/str_parms.c	/^    const char *key;$/;"	m	struct:remove_ctxt	file:	access:public
remove_ctxt::str_parms	./libs/libcutils/str_parms.c	/^    struct str_parms *str_parms;$/;"	m	struct:remove_ctxt	typeref:struct:remove_ctxt::str_parms	file:	access:public
remove_listener	./adb.c	/^static int remove_listener(const char *local_name, const char *connect_to, atransport* transport)$/;"	f	file:	signature:(const char *local_name, const char *connect_to, atransport* transport)
remove_pair	./libs/libcutils/str_parms.c	/^static bool remove_pair(void *key, void *value, void *context)$/;"	f	file:	signature:(void *key, void *value, void *context)
remove_socket	./adb.h	/^void remove_socket(asocket *s);$/;"	p	signature:(asocket *s)
remove_socket	./sockets.c	/^void remove_socket(asocket *s)$/;"	f	signature:(asocket *s)
remove_transport	./transport.c	/^static void remove_transport(atransport *transport)$/;"	f	file:	signature:(atransport *transport)
remove_transport_disconnect	./adb.h	/^void   remove_transport_disconnect( atransport*  t, adisconnect*  dis );$/;"	p	signature:( atransport* t, adisconnect* dis )
remove_transport_disconnect	./transport.c	/^void remove_transport_disconnect(atransport*  t, adisconnect*  dis)$/;"	f	signature:(atransport* t, adisconnect* dis)
replace_nl	./libs/libcutils/zygote.c	/^static void replace_nl(char *str)$/;"	f	file:	signature:(char *str)
replace_nl	./libs/libcutils/zygote.c	/^static void replace_nl(char *str);$/;"	p	file:	signature:(char *str)
report_bulk_libusb_error	./usb_libusb.c	/^report_bulk_libusb_error(int r)$/;"	f	signature:(int r)
req	./file_sync_service.h	/^    } req;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon34	access:public
resTrackFd	./libs/libcutils/qtaguid.c	/^static int resTrackFd = -1;$/;"	v	file:
resTrackInitDone	./libs/libcutils/qtaguid.c	/^pthread_once_t resTrackInitDone = PTHREAD_ONCE_INIT;$/;"	v
restart_root_service	./services.c	/^void restart_root_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
restart_tcp_service	./services.c	/^void restart_tcp_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
restart_usb_service	./services.c	/^void restart_usb_service(int fd, void *cookie)$/;"	f	signature:(int fd, void *cookie)
restore	./commandline.c	/^static int restore(int argc, char** argv) {$/;"	f	file:	signature:(int argc, char** argv)
rol	./libs/libmincrypt/sha.c	193;"	d	file:
ror2	./libs/libmincrypt/sha.c	/^static inline uint32_t ror2(uint32_t val) {$/;"	f	file:	signature:(uint32_t val)
ror27	./libs/libmincrypt/sha.c	/^static inline uint32_t ror27(uint32_t val) {$/;"	f	file:	signature:(uint32_t val)
ror31	./libs/libmincrypt/sha.c	/^static inline uint32_t ror31(uint32_t val) {$/;"	f	file:	signature:(uint32_t val)
rpath	./file_sync_client.c	/^    const char *rpath;$/;"	m	struct:__anon32	file:	access:public
rr	./libs/libmincrypt/mincrypt/rsa.h	/^    uint32_t rr[RSANUMWORDS]; \/* R^2 as little endian array *\/$/;"	m	struct:RSAPublicKey	access:public
rsa	./adb_auth_host.c	/^    RSA *rsa;$/;"	m	struct:adb_private_key	file:	access:public
rule	./libs/libcutils/tztime.c	/^struct rule {$/;"	s	file:
rule::r_day	./libs/libcutils/tztime.c	/^	int		r_day;		\/* day number of rule *\/$/;"	m	struct:rule	file:	access:public
rule::r_mon	./libs/libcutils/tztime.c	/^	int		r_mon;		\/* month number of rule *\/$/;"	m	struct:rule	file:	access:public
rule::r_time	./libs/libcutils/tztime.c	/^	long		r_time;		\/* transition time of rule *\/$/;"	m	struct:rule	file:	access:public
rule::r_type	./libs/libcutils/tztime.c	/^	int		r_type;		\/* type of rule--see below *\/$/;"	m	struct:rule	file:	access:public
rule::r_week	./libs/libcutils/tztime.c	/^	int		r_week;		\/* week number of rule *\/$/;"	m	struct:rule	file:	access:public
run_transport_disconnects	./adb.h	/^void   run_transport_disconnects( atransport*  t );$/;"	p	signature:( atransport* t )
run_transport_disconnects	./transport.c	/^run_transport_disconnects(atransport*  t)$/;"	f	signature:(atransport* t)
running_in_emulator	./libs/libcutils/process_name.c	/^static int running_in_emulator = -1;$/;"	v	file:
saved	./libs/libcutils/open_memstream.c	/^    char        saved;      \/* required by NUL handling *\/$/;"	m	struct:__anon4	file:	access:public
scan_usb_devices	./usb_libusb.c	/^scan_usb_devices()$/;"	f
sccsid	./libs/libcutils/tzstrftime.c	/^static const char	sccsid[] = "@(#)strftime.c	5.4 (Berkeley) 3\/14\/89";$/;"	v	file:
scheck	./libs/libcutils/private.h	/^const char *	scheck P((const char * string, const char * format));$/;"	p	signature:(const char * string, const char * format)
sec	./libs/libcutils/cutils/logger.h	/^    int32_t     sec;       \/* seconds since Epoch *\/$/;"	m	struct:logger_entry_v2	access:public
sec	./libs/libcutils/cutils/logger.h	/^    int32_t     sec;    \/* seconds since Epoch *\/$/;"	m	struct:logger_entry	access:public
seek_memstream	./libs/libcutils/open_memstream.c	/^static fpos_t seek_memstream(void* cookie, fpos_t offset, int whence)$/;"	f	file:	signature:(void* cookie, fpos_t offset, int whence)
select_n	./fdevent.c	/^static int select_n = 0;$/;"	v	file:
selectableFds	./libs/libcutils/selector.c	/^    Array* selectableFds;$/;"	m	struct:Selector	file:	access:public
selector	./libs/libcutils/cutils/selector.h	/^    Selector* selector;$/;"	m	struct:SelectableFd	access:public
selector	./libs/libcutils/mq.c	/^    Selector* selector;$/;"	m	struct:__anon11	file:	access:public
selectorAdd	./libs/libcutils/cutils/selector.h	/^SelectableFd* selectorAdd(Selector* selector, int fd);$/;"	p	signature:(Selector* selector, int fd)
selectorAdd	./libs/libcutils/selector.c	/^SelectableFd* selectorAdd(Selector* selector, int fd) {$/;"	f	signature:(Selector* selector, int fd)
selectorCreate	./libs/libcutils/cutils/selector.h	/^Selector* selectorCreate(void);$/;"	p	signature:(void)
selectorCreate	./libs/libcutils/selector.c	/^Selector* selectorCreate(void) {$/;"	f	signature:(void)
selectorLoop	./libs/libcutils/cutils/selector.h	/^void selectorLoop(Selector* selector);$/;"	p	signature:(Selector* selector)
selectorLoop	./libs/libcutils/selector.c	/^void selectorLoop(Selector* selector) {$/;"	f	signature:(Selector* selector)
selectorWakeUp	./libs/libcutils/cutils/selector.h	/^void selectorWakeUp(Selector* selector);$/;"	p	signature:(Selector* selector)
selectorWakeUp	./libs/libcutils/selector.c	/^void selectorWakeUp(Selector* selector) {$/;"	f	signature:(Selector* selector)
send_auth_publickey	./adb.c	/^static void send_auth_publickey(atransport *t)$/;"	f	file:	signature:(atransport *t)
send_auth_request	./adb.c	/^static void send_auth_request(atransport *t)$/;"	f	file:	signature:(atransport *t)
send_auth_response	./adb.c	/^static void send_auth_response(uint8_t *token, size_t token_size, atransport *t)$/;"	f	file:	signature:(uint8_t *token, size_t token_size, atransport *t)
send_buffer	./file_sync_client.c	/^static syncsendbuf send_buffer;$/;"	v	file:
send_close	./adb.c	/^static void send_close(unsigned local, unsigned remote, atransport *t)$/;"	f	file:	signature:(unsigned local, unsigned remote, atransport *t)
send_connect	./adb.c	/^static void send_connect(atransport *t)$/;"	f	file:	signature:(atransport *t)
send_packet	./adb.h	/^void send_packet(apacket *p, atransport *t);$/;"	p	signature:(apacket *p, atransport *t)
send_packet	./transport.c	/^void send_packet(apacket *p, atransport *t)$/;"	f	signature:(apacket *p, atransport *t)
send_ready	./adb.c	/^static void send_ready(unsigned local, unsigned remote, atransport *t)$/;"	f	file:	signature:(unsigned local, unsigned remote, atransport *t)
send_request	./libs/libcutils/zygote.c	/^static int send_request(int fd, int sendStdio, int argc, const char **argv)$/;"	f	file:	signature:(int fd, int sendStdio, int argc, const char **argv)
send_shellcommand	./commandline.c	/^static int send_shellcommand(transport_type transport, char* serial, char* buf)$/;"	f	file:	signature:(transport_type transport, char* serial, char* buf)
sendfailmsg	./adb.h	/^int sendfailmsg(int fd, const char *reason);$/;"	p	signature:(int fd, const char *reason)
sendfailmsg	./sockets.c	/^int sendfailmsg(int fd, const char *reason)$/;"	f	signature:(int fd, const char *reason)
serial	./adb.h	/^    char *serial;$/;"	m	struct:atransport	access:public
serial	./services.c	/^    char* serial;$/;"	m	struct:state_info	file:	access:public
serial	./usb_libusb.c	/^    char                  serial[128];$/;"	m	struct:usb_handle	file:	access:public
serial_number	./libs/libcutils/cpu_info.c	/^static char serial_number[100] = { 0 };$/;"	v	file:
server_socket_thread	./transport_local.c	/^static void *server_socket_thread(void * arg)$/;"	f	file:	signature:(void * arg)
service_bootstrap_func	./services.c	/^void *service_bootstrap_func(void *x)$/;"	f	signature:(void *x)
service_to_fd	./adb.h	/^int service_to_fd(const char *name);$/;"	p	signature:(const char *name)
service_to_fd	./services.c	/^int service_to_fd(const char *name)$/;"	f	signature:(const char *name)
setInSelect	./libs/libcutils/selector.c	/^static void setInSelect(Selector* selector, bool inSelect) {$/;"	f	file:	signature:(Selector* selector, bool inSelect)
setNonBlocking	./libs/libcutils/mq.c	/^static void setNonBlocking(int fd) {$/;"	f	file:	signature:(int fd)
set_bootloader_message_block	./libs/libcutils/misc_rw.c	/^int set_bootloader_message_block(const struct bootloader_message *in,$/;"	f	signature:(const struct bootloader_message *in, const char* misc)
set_process_name	./libs/libcutils/cutils/process_name.h	/^void set_process_name(const char* process_name);$/;"	p	signature:(const char* process_name)
set_process_name	./libs/libcutils/process_name.c	/^void set_process_name(const char* new_name) {$/;"	f	signature:(const char* new_name)
set_sched_policy	./libs/libcutils/cutils/sched_policy.h	/^extern int set_sched_policy(int tid, SchedPolicy policy);$/;"	p	signature:(int tid, SchedPolicy policy)
set_sched_policy	./libs/libcutils/sched_policy.c	/^int set_sched_policy(int tid, SchedPolicy policy)$/;"	f	signature:(int tid, SchedPolicy policy)
settzname	./libs/libcutils/tztime.c	/^static void		settzname P((void));$/;"	p	file:	signature:(void)
sfd	./adb.h	/^    int sfd;$/;"	m	struct:atransport	access:public
should_drop_privileges	./adb.c	/^static int should_drop_privileges() {$/;"	f	file:
shutdown	./sysdeps.h	347;"	d
shutdown	./sysdeps.h	348;"	d
sigalrm_handler	./usb_libusb.c	/^sigalrm_handler(int signo)$/;"	f	file:	signature:(int signo)
sigalrm_handler	./usb_linux.c	/^static void sigalrm_handler(int signo)$/;"	f	file:	signature:(int signo)
signaled_index	./sysdeps_win32.c	/^    LONG volatile   *signaled_index;$/;"	m	struct:WaitForAllParam	file:	access:public
sink	./usb_linux_client.c	/^        struct usb_endpoint_descriptor_no_audio sink;$/;"	m	struct:__anon40::__anon41	typeref:struct:__anon40::__anon41::usb_endpoint_descriptor_no_audio	file:	access:public
size	./file_sync_client.c	/^    unsigned int size;$/;"	m	struct:copyinfo	file:	access:public
size	./file_sync_client.c	/^    unsigned size;$/;"	m	struct:syncsendbuf	file:	access:public
size	./file_sync_service.h	/^        unsigned size;$/;"	m	struct:__anon33::__anon35	access:public
size	./file_sync_service.h	/^        unsigned size;$/;"	m	struct:__anon33::__anon36	access:public
size	./file_sync_service.h	/^        unsigned size;$/;"	m	struct:__anon33::__anon37	access:public
size	./framebuffer_service.c	/^    unsigned int size;$/;"	m	struct:fbinfo	file:	access:public
size	./libs/libcutils/array.c	/^    int size;$/;"	m	struct:Array	file:	access:public
size	./libs/libcutils/buffer.h	/^    size_t size;$/;"	m	struct:__anon1	access:public
size	./libs/libcutils/hashmap.c	/^    size_t size;$/;"	m	struct:Hashmap	file:	access:public
size	./libs/libcutils/mq.c	/^        size_t size;$/;"	m	union:__anon8::__anon9	file:	access:public
sizep	./libs/libcutils/open_memstream.c	/^    size_t*     sizep;      \/* pointer to eof *\/$/;"	m	struct:__anon4	file:	access:public
skip_host_serial	./sockets.c	/^char *skip_host_serial(char *service) {$/;"	f	signature:(char *service)
smart_socket_action	./sockets.c	/^void smart_socket_action(asocket *s, const char *act)$/;"	f	signature:(asocket *s, const char *act)
smart_socket_close	./sockets.c	/^static void smart_socket_close(asocket *s)$/;"	f	file:	signature:(asocket *s)
smart_socket_enqueue	./sockets.c	/^static int smart_socket_enqueue(asocket *s, apacket *p)$/;"	f	file:	signature:(asocket *s, apacket *p)
smart_socket_ready	./sockets.c	/^static void smart_socket_ready(asocket *s)$/;"	f	file:	signature:(asocket *s)
socket	./jdwp_service.c	/^    asocket       socket;$/;"	m	struct:JdwpTracker	file:	access:public
socket	./jdwp_service.c	/^    asocket  socket;$/;"	m	struct:__anon45	file:	access:public
socket	./jdwp_service.c	/^    int           socket;$/;"	m	struct:JdwpProcess	file:	access:public
socket	./libs/libcutils/mq.c	/^        int socket;$/;"	m	union:OutgoingPacket::__anon10	file:	access:public
socket	./sockets.c	/^    asocket      socket;$/;"	m	struct:aremotesocket	file:	access:public
socket	./sysdeps_win32.c	/^        SOCKET      socket;$/;"	m	union:FHRec_::__anon27	file:	access:public
socket	./transport.c	/^    asocket          socket;$/;"	m	struct:device_tracker	file:	access:public
socket_inaddr_any_server	./libs/libcutils/cutils/sockets.h	/^extern int socket_inaddr_any_server(int port, int type);$/;"	p	signature:(int port, int type)
socket_inaddr_any_server	./libs/libcutils/socket_inaddr_any_server.c	/^int socket_inaddr_any_server(int port, int type)$/;"	f	signature:(int port, int type)
socket_inaddr_any_server	./sysdeps.h	/^extern int socket_inaddr_any_server(int port, int type);$/;"	p	signature:(int port, int type)
socket_inaddr_any_server	./sysdeps_win32.c	/^int socket_inaddr_any_server(int port, int type)$/;"	f	signature:(int port, int type)
socket_list_lock	./sockets.c	/^ADB_MUTEX_DEFINE( socket_list_lock );$/;"	v
socket_local_client	./libs/libcutils/cutils/sockets.h	/^extern int socket_local_client(const char *name, int namespaceId, int type);$/;"	p	signature:(const char *name, int namespaceId, int type)
socket_local_client	./libs/libcutils/socket_local_client.c	/^int socket_local_client(const char *name, int namespaceId, int type)$/;"	f	signature:(const char *name, int namespaceId, int type)
socket_local_client_connect	./libs/libcutils/cutils/sockets.h	/^extern int socket_local_client_connect(int fd, $/;"	p	signature:(int fd, const char *name, int namespaceId, int type)
socket_local_client_connect	./libs/libcutils/socket_local_client.c	/^int socket_local_client_connect(int fd, const char *name, int namespaceId, $/;"	f	signature:(int fd, const char *name, int namespaceId, int type)
socket_local_server	./libs/libcutils/cutils/sockets.h	/^extern int socket_local_server(const char *name, int namespaceId, int type);$/;"	p	signature:(const char *name, int namespaceId, int type)
socket_local_server	./libs/libcutils/socket_local_server.c	/^int socket_local_server(const char *name, int namespace, int type)$/;"	f	signature:(const char *name, int namespace, int type)
socket_local_server	./libs/libcutils/socket_local_server.c	/^int socket_local_server(const char *name, int namespaceId, int type)$/;"	f	signature:(const char *name, int namespaceId, int type)
socket_local_server_bind	./libs/libcutils/cutils/sockets.h	/^extern int socket_local_server_bind(int s, const char *name, int namespaceId);$/;"	p	signature:(int s, const char *name, int namespaceId)
socket_local_server_bind	./libs/libcutils/socket_local_server.c	/^int socket_local_server_bind(int s, const char *name, int namespaceId)$/;"	f	signature:(int s, const char *name, int namespaceId)
socket_loopback_client	./libs/libcutils/cutils/sockets.h	/^extern int socket_loopback_client(int port, int type);$/;"	p	signature:(int port, int type)
socket_loopback_client	./libs/libcutils/socket_loopback_client.c	/^int socket_loopback_client(int port, int type)$/;"	f	signature:(int port, int type)
socket_loopback_client	./sysdeps.h	/^extern int socket_loopback_client(int port, int type);$/;"	p	signature:(int port, int type)
socket_loopback_client	./sysdeps_win32.c	/^int socket_loopback_client(int port, int type)$/;"	f	signature:(int port, int type)
socket_loopback_server	./libs/libcutils/cutils/sockets.h	/^extern int socket_loopback_server(int port, int type);$/;"	p	signature:(int port, int type)
socket_loopback_server	./libs/libcutils/socket_loopback_server.c	/^int socket_loopback_server(int port, int type)$/;"	f	signature:(int port, int type)
socket_loopback_server	./sysdeps.h	/^extern int socket_loopback_server(int port, int type);$/;"	p	signature:(int port, int type)
socket_loopback_server	./sysdeps_win32.c	/^int socket_loopback_server(int port, int type)$/;"	f	signature:(int port, int type)
socket_make_sockaddr_un	./libs/libcutils/socket_local.h	/^int socket_make_sockaddr_un(const char *name, int namespaceId, $/;"	p	signature:(const char *name, int namespaceId, struct sockaddr_un *p_addr, socklen_t *alen)
socket_make_sockaddr_un	./libs/libcutils/socket_local_client.c	/^int socket_make_sockaddr_un(const char *name, int namespaceId, $/;"	f	signature:(const char *name, int namespaceId, struct sockaddr_un *p_addr, socklen_t *alen)
socket_network_client	./libs/libcutils/cutils/sockets.h	/^extern int socket_network_client(const char *host, int port, int type);$/;"	p	signature:(const char *host, int port, int type)
socket_network_client	./libs/libcutils/socket_network_client.c	/^int socket_network_client(const char *host, int port, int type)$/;"	f	signature:(const char *host, int port, int type)
socket_network_client	./sysdeps.h	/^extern int socket_network_client(const char *host, int port, int type);$/;"	p	signature:(const char *host, int port, int type)
socket_network_client	./sysdeps_win32.c	/^int socket_network_client(const char *host, int port, int type)$/;"	f	signature:(const char *host, int port, int type)
socket_peer_is_trusted	./libs/libcutils/cutils/sockets.h	/^extern bool socket_peer_is_trusted(int fd);$/;"	p	signature:(int fd)
socket_peer_is_trusted	./libs/libcutils/sockets.c	/^bool socket_peer_is_trusted(int fd)$/;"	f	signature:(int fd)
socketpair	./sysdeps.h	463;"	d
socketpair	./sysdeps.h	464;"	d
socklen_t	./libs/libcutils/cutils/sockets.h	/^typedef int  socklen_t;$/;"	t
source	./usb_linux_client.c	/^        struct usb_endpoint_descriptor_no_audio source;$/;"	m	struct:__anon40::__anon41	typeref:struct:__anon40::__anon41::usb_endpoint_descriptor_no_audio	file:	access:public
src	./file_sync_client.c	/^    const char *src;$/;"	m	struct:copyinfo	file:	access:public
ss_listener_event_func	./adb.c	/^static void ss_listener_event_func(int _fd, unsigned ev, void *_l)$/;"	f	file:	signature:(int _fd, unsigned ev, void *_l)
standalone_month	./libs/libcutils/cutils/tztime.h	/^    const char *standalone_month[12];  \/* long standalone names *\/$/;"	m	struct:strftime_locale	access:public
start	./sysdeps_win32.c	/^    int         (*start)  ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
start_cond	./usb_osx.c	/^static pthread_cond_t start_cond;$/;"	v	file:
start_device_log	./adb.c	/^void start_device_log(void)$/;"	f	signature:(void)
start_lock	./usb_osx.c	/^static pthread_mutex_t start_lock;$/;"	v	file:
start_logging	./adb.c	/^void start_logging(void)$/;"	f	signature:(void)
start_time	./file_sync_client.c	/^static long long start_time;$/;"	v	file:
stat	./file_sync_service.h	/^    } stat;$/;"	m	union:__anon33	typeref:struct:__anon33::__anon35	access:public
state	./fdevent.h	/^    unsigned short state;$/;"	m	struct:fdevent	access:public
state	./libs/libcutils/tztime.c	/^struct state {$/;"	s	file:
state	./libs/libmincrypt/mincrypt/sha.h	/^    uint32_t state[5];$/;"	m	struct:SHA_CTX	access:public
state	./services.c	/^    int state;$/;"	m	struct:state_info	file:	access:public
state	./sysdeps.h	/^    unsigned short state;$/;"	m	struct:fdevent	access:public
state::ats	./libs/libcutils/tztime.c	/^	time_t		ats[TZ_MAX_TIMES];$/;"	m	struct:state	file:	access:public
state::charcnt	./libs/libcutils/tztime.c	/^	int		charcnt;$/;"	m	struct:state	file:	access:public
state::chars	./libs/libcutils/tztime.c	/^	char		chars[BIGGEST(BIGGEST(TZ_MAX_CHARS + 1, sizeof gmt),$/;"	m	struct:state	file:	access:public
state::goahead	./libs/libcutils/tztime.c	/^	int		goahead;$/;"	m	struct:state	file:	access:public
state::goback	./libs/libcutils/tztime.c	/^	int		goback;$/;"	m	struct:state	file:	access:public
state::leapcnt	./libs/libcutils/tztime.c	/^	int		leapcnt;$/;"	m	struct:state	file:	access:public
state::lsis	./libs/libcutils/tztime.c	/^	struct lsinfo	lsis[TZ_MAX_LEAPS];$/;"	m	struct:state	typeref:struct:state::lsinfo	file:	access:public
state::timecnt	./libs/libcutils/tztime.c	/^	int		timecnt;$/;"	m	struct:state	file:	access:public
state::ttis	./libs/libcutils/tztime.c	/^	struct ttinfo	ttis[TZ_MAX_TYPES];$/;"	m	struct:state	typeref:struct:state::ttinfo	file:	access:public
state::typecnt	./libs/libcutils/tztime.c	/^	int		typecnt;$/;"	m	struct:state	file:	access:public
state::types	./libs/libcutils/tztime.c	/^	unsigned char	types[TZ_MAX_TIMES];$/;"	m	struct:state	file:	access:public
state_info	./services.c	/^struct state_info {$/;"	s	file:
state_info::serial	./services.c	/^    char* serial;$/;"	m	struct:state_info	file:	access:public
state_info::state	./services.c	/^    int state;$/;"	m	struct:state_info	file:	access:public
state_info::transport	./services.c	/^    transport_type transport;$/;"	m	struct:state_info	file:	access:public
statename	./transport.c	/^static const char *statename(atransport *t)$/;"	f	file:	signature:(atransport *t)
status	./file_sync_service.h	/^    } status;    $/;"	m	union:__anon33	typeref:struct:__anon33::__anon38	access:public
status	./libs/libcutils/misc_rw.c	/^    char status[32];$/;"	m	struct:bootloader_message	file:	access:public
status_window	./commandline.c	/^static void status_window(transport_type ttype, const char* serial)$/;"	f	file:	signature:(transport_type ttype, const char* serial)
stdin_raw_init	./commandline.c	/^static void stdin_raw_init(int fd)$/;"	f	file:	signature:(int fd)
stdin_raw_restore	./commandline.c	/^static void stdin_raw_restore(int fd)$/;"	f	file:	signature:(int fd)
stdin_read_thread	./commandline.c	/^static void *stdin_read_thread(void *x)$/;"	f	file:	signature:(void *x)
stinfo	./services.c	/^struct stinfo {$/;"	s	file:
stinfo	./services.c	/^typedef struct stinfo stinfo;$/;"	t	typeref:struct:stinfo	file:
stinfo::cookie	./services.c	/^    void *cookie;$/;"	m	struct:stinfo	file:	access:public
stinfo::fd	./services.c	/^    int fd;$/;"	m	struct:stinfo	file:	access:public
stinfo::func	./services.c	/^    void (*func)(int fd, void *cookie);$/;"	m	struct:stinfo	file:	access:public
stop	./sysdeps_win32.c	/^    void        (*stop)   ( EventHook  hook );$/;"	m	struct:EventHookRec_	file:	access:public
str	./sockets.c	/^    const char *str;$/;"	m	struct:prefix_struct	file:	access:public
str1	./usb_linux_client.c	/^        const char str1[sizeof(STR_INTERFACE_)];$/;"	m	struct:__anon42::__anon43	file:	access:public
str_eq	./libs/libcutils/str_parms.c	/^static bool str_eq(void *key_a, void *key_b)$/;"	f	file:	signature:(void *key_a, void *key_b)
str_hash_fn	./libs/libcutils/str_parms.c	/^static int str_hash_fn(void *str)$/;"	f	file:	signature:(void *str)
str_parms	./libs/libcutils/str_parms.c	/^    struct str_parms *str_parms;$/;"	m	struct:remove_ctxt	typeref:struct:remove_ctxt::str_parms	file:	access:public
str_parms	./libs/libcutils/str_parms.c	/^struct str_parms {$/;"	s	file:
str_parms::map	./libs/libcutils/str_parms.c	/^    Hashmap *map;$/;"	m	struct:str_parms	file:	access:public
str_parms_add_float	./libs/libcutils/cutils/str_parms.h	/^int str_parms_add_float(struct str_parms *str_parms, const char *key,$/;"	p	signature:(struct str_parms *str_parms, const char *key, float value)
str_parms_add_float	./libs/libcutils/str_parms.c	/^int str_parms_add_float(struct str_parms *str_parms, const char *key,$/;"	f	signature:(struct str_parms *str_parms, const char *key, float value)
str_parms_add_int	./libs/libcutils/cutils/str_parms.h	/^int str_parms_add_int(struct str_parms *str_parms, const char *key, int value);$/;"	p	signature:(struct str_parms *str_parms, const char *key, int value)
str_parms_add_int	./libs/libcutils/str_parms.c	/^int str_parms_add_int(struct str_parms *str_parms, const char *key, int value)$/;"	f	signature:(struct str_parms *str_parms, const char *key, int value)
str_parms_add_str	./libs/libcutils/cutils/str_parms.h	/^int str_parms_add_str(struct str_parms *str_parms, const char *key,$/;"	p	signature:(struct str_parms *str_parms, const char *key, const char *value)
str_parms_add_str	./libs/libcutils/str_parms.c	/^int str_parms_add_str(struct str_parms *str_parms, const char *key,$/;"	f	signature:(struct str_parms *str_parms, const char *key, const char *value)
str_parms_create	./libs/libcutils/cutils/str_parms.h	/^struct str_parms *str_parms_create(void);$/;"	p	signature:(void)
str_parms_create	./libs/libcutils/str_parms.c	/^struct str_parms *str_parms_create(void)$/;"	f	signature:(void)
str_parms_create_str	./libs/libcutils/cutils/str_parms.h	/^struct str_parms *str_parms_create_str(const char *_string);$/;"	p	signature:(const char *_string)
str_parms_create_str	./libs/libcutils/str_parms.c	/^struct str_parms *str_parms_create_str(const char *_string)$/;"	f	signature:(const char *_string)
str_parms_del	./libs/libcutils/cutils/str_parms.h	/^void str_parms_del(struct str_parms *str_parms, const char *key);$/;"	p	signature:(struct str_parms *str_parms, const char *key)
str_parms_del	./libs/libcutils/str_parms.c	/^void str_parms_del(struct str_parms *str_parms, const char *key)$/;"	f	signature:(struct str_parms *str_parms, const char *key)
str_parms_destroy	./libs/libcutils/cutils/str_parms.h	/^void str_parms_destroy(struct str_parms *str_parms);$/;"	p	signature:(struct str_parms *str_parms)
str_parms_destroy	./libs/libcutils/str_parms.c	/^void str_parms_destroy(struct str_parms *str_parms)$/;"	f	signature:(struct str_parms *str_parms)
str_parms_dump	./libs/libcutils/cutils/str_parms.h	/^void str_parms_dump(struct str_parms *str_parms);$/;"	p	signature:(struct str_parms *str_parms)
str_parms_dump	./libs/libcutils/str_parms.c	/^void str_parms_dump(struct str_parms *str_parms)$/;"	f	signature:(struct str_parms *str_parms)
str_parms_get_float	./libs/libcutils/cutils/str_parms.h	/^int str_parms_get_float(struct str_parms *str_parms, const char *key,$/;"	p	signature:(struct str_parms *str_parms, const char *key, float *out_val)
str_parms_get_float	./libs/libcutils/str_parms.c	/^int str_parms_get_float(struct str_parms *str_parms, const char *key,$/;"	f	signature:(struct str_parms *str_parms, const char *key, float *val)
str_parms_get_int	./libs/libcutils/cutils/str_parms.h	/^int str_parms_get_int(struct str_parms *str_parms, const char *key,$/;"	p	signature:(struct str_parms *str_parms, const char *key, int *out_val)
str_parms_get_int	./libs/libcutils/str_parms.c	/^int str_parms_get_int(struct str_parms *str_parms, const char *key, int *val)$/;"	f	signature:(struct str_parms *str_parms, const char *key, int *val)
str_parms_get_str	./libs/libcutils/cutils/str_parms.h	/^int str_parms_get_str(struct str_parms *str_parms, const char *key,$/;"	p	signature:(struct str_parms *str_parms, const char *key, char *out_val, int len)
str_parms_get_str	./libs/libcutils/str_parms.c	/^int str_parms_get_str(struct str_parms *str_parms, const char *key, char *val,$/;"	f	signature:(struct str_parms *str_parms, const char *key, char *val, int len)
str_parms_to_str	./libs/libcutils/cutils/str_parms.h	/^char *str_parms_to_str(struct str_parms *str_parms);$/;"	p	signature:(struct str_parms *str_parms)
str_parms_to_str	./libs/libcutils/str_parms.c	/^char *str_parms_to_str(struct str_parms *str_parms)$/;"	f	signature:(struct str_parms *str_parms)
strcpy8to16	./libs/libcutils/cutils/jstring.h	/^extern char16_t * strcpy8to16 (char16_t *dest, const char*s, size_t *out_len);$/;"	p	signature:(char16_t *dest, const char*s, size_t *out_len)
strcpy8to16	./libs/libcutils/strdup8to16.c	/^extern char16_t * strcpy8to16 (char16_t *utf16Str, const char*utf8Str, $/;"	f	signature:(char16_t *utf16Str, const char*utf8Str, size_t *out_len)
strcpylen8to16	./libs/libcutils/cutils/jstring.h	/^extern char16_t * strcpylen8to16 (char16_t *dest, const char*s, int length,$/;"	p	signature:(char16_t *dest, const char*s, int length, size_t *out_len)
strcpylen8to16	./libs/libcutils/strdup8to16.c	/^extern char16_t * strcpylen8to16 (char16_t *utf16Str, const char*utf8Str,$/;"	f	signature:(char16_t *utf16Str, const char*utf8Str, int length, size_t *out_len)
strdup8to16	./libs/libcutils/cutils/jstring.h	/^extern char16_t * strdup8to16 (const char* s, size_t *out_len);$/;"	p	signature:(const char* s, size_t *out_len)
strdup8to16	./libs/libcutils/strdup8to16.c	/^extern char16_t * strdup8to16 (const char* s, size_t *out_len)$/;"	f	signature:(const char* s, size_t *out_len)
strftime_locale	./libs/libcutils/cutils/tztime.h	/^struct strftime_locale {$/;"	s
strftime_locale::X_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *X_fmt;$/;"	m	struct:strftime_locale	access:public
strftime_locale::am	./libs/libcutils/cutils/tztime.h	/^    const char *am;$/;"	m	struct:strftime_locale	access:public
strftime_locale::c_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *c_fmt;$/;"	m	struct:strftime_locale	access:public
strftime_locale::date_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *date_fmt;$/;"	m	struct:strftime_locale	access:public
strftime_locale::mon	./libs/libcutils/cutils/tztime.h	/^    const char *mon[12];    \/* short names *\/$/;"	m	struct:strftime_locale	access:public
strftime_locale::month	./libs/libcutils/cutils/tztime.h	/^    const char *month[12];  \/* long names *\/$/;"	m	struct:strftime_locale	access:public
strftime_locale::pm	./libs/libcutils/cutils/tztime.h	/^    const char *pm;$/;"	m	struct:strftime_locale	access:public
strftime_locale::standalone_month	./libs/libcutils/cutils/tztime.h	/^    const char *standalone_month[12];  \/* long standalone names *\/$/;"	m	struct:strftime_locale	access:public
strftime_locale::wday	./libs/libcutils/cutils/tztime.h	/^    const char *wday[7];    \/* short names *\/$/;"	m	struct:strftime_locale	access:public
strftime_locale::weekday	./libs/libcutils/cutils/tztime.h	/^    const char *weekday[7]; \/* long names *\/$/;"	m	struct:strftime_locale	access:public
strftime_locale::x_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *x_fmt;$/;"	m	struct:strftime_locale	access:public
strftime_tz	./libs/libcutils/cutils/tztime.h	/^size_t strftime_tz(char *s, size_t max, const char *format, const struct tm *tm, const struct strftime_locale *locale);$/;"	p	signature:(char *s, size_t max, const char *format, const struct tm *tm, const struct strftime_locale *locale)
strftime_tz	./libs/libcutils/tzstrftime.c	/^strftime_tz(s, maxsize, format, t, Locale)$/;"	f
strings	./usb_linux_client.c	/^} __attribute__((packed)) strings = {$/;"	v	typeref:struct:__anon42	file:
strlcpy	./libs/libcutils/cutils/memory.h	/^size_t strlcpy(char *dst, const char *src, size_t size);$/;"	p	signature:(char *dst, const char *src, size_t size)
strlcpy	./libs/libcutils/memory.c	/^strlcpy(char *dst, const char *src, size_t siz)$/;"	f	signature:(char *dst, const char *src, size_t siz)
strlen8to16	./libs/libcutils/cutils/jstring.h	/^extern size_t strlen8to16 (const char* utf8Str);$/;"	p	signature:(const char* utf8Str)
strlen8to16	./libs/libcutils/strdup8to16.c	/^extern size_t strlen8to16 (const char* utf8Str)$/;"	f	signature:(const char* utf8Str)
strncpy16to8	./libs/libcutils/cutils/jstring.h	/^extern char * strncpy16to8 (char *dest, const char16_t*s, size_t n);$/;"	p	signature:(char *dest, const char16_t*s, size_t n)
strncpy16to8	./libs/libcutils/strdup16to8.c	/^extern char* strncpy16to8(char* utf8Str, const char16_t* utf16Str, size_t len)$/;"	f	signature:(char* utf8Str, const char16_t* utf16Str, size_t len)
strndup16to8	./libs/libcutils/cutils/jstring.h	/^extern char * strndup16to8 (const char16_t* s, size_t n);$/;"	p	signature:(const char16_t* s, size_t n)
strndup16to8	./libs/libcutils/strdup16to8.c	/^char * strndup16to8 (const char16_t* s, size_t n)$/;"	f	signature:(const char16_t* s, size_t n)
strnlen16to8	./libs/libcutils/cutils/jstring.h	/^extern size_t strnlen16to8 (const char16_t* s, size_t n);$/;"	p	signature:(const char16_t* s, size_t n)
strnlen16to8	./libs/libcutils/strdup16to8.c	/^extern size_t strnlen16to8(const char16_t* utf16Str, size_t len)$/;"	f	signature:(const char16_t* utf16Str, size_t len)
strtok_r	./sysdeps.h	501;"	d
strtok_r	./sysdeps.h	502;"	d
subM	./libs/libmincrypt/rsa_e_3.c	/^static void subM(const RSAPublicKey *key, uint32_t *a) {$/;"	f	file:	signature:(const RSAPublicKey *key, uint32_t *a)
subM	./libs/libmincrypt/rsa_e_f4.c	/^static void subM(const RSAPublicKey* key,$/;"	f	file:	signature:(const RSAPublicKey* key, uint32_t* a)
subproc_waiter_service	./services.c	/^static void subproc_waiter_service(int fd, void *cookie)$/;"	f	file:	signature:(int fd, void *cookie)
switch_socket_transport	./adb_client.c	/^static int switch_socket_transport(int fd)$/;"	f	file:	signature:(int fd)
sync_finish_readtime	./file_sync_client.c	/^static int sync_finish_readtime(int fd, unsigned int *timestamp,$/;"	f	file:	signature:(int fd, unsigned int *timestamp, unsigned int *mode, unsigned int *size)
sync_ls	./file_sync_client.c	/^int sync_ls(int fd, const char *path, sync_ls_cb func, void *cookie)$/;"	f	signature:(int fd, const char *path, sync_ls_cb func, void *cookie)
sync_ls_build_list_cb	./file_sync_client.c	/^sync_ls_build_list_cb(unsigned mode, unsigned size, unsigned time,$/;"	f	signature:(unsigned mode, unsigned size, unsigned time, const char *name, void *cookie)
sync_ls_build_list_cb_args	./file_sync_client.c	/^} sync_ls_build_list_cb_args;$/;"	t	typeref:struct:__anon32	file:
sync_ls_cb	./file_sync_client.c	/^typedef void (*sync_ls_cb)(unsigned mode, unsigned size, unsigned time, const char *name, void *cookie);$/;"	t	file:
sync_quit	./file_sync_client.c	/^void sync_quit(int fd)$/;"	f	signature:(int fd)
sync_readmode	./file_sync_client.c	/^int sync_readmode(int fd, const char *path, unsigned *mode)$/;"	f	signature:(int fd, const char *path, unsigned *mode)
sync_readtime	./file_sync_client.c	/^int sync_readtime(int fd, const char *path, unsigned *timestamp)$/;"	f	signature:(int fd, const char *path, unsigned *timestamp)
sync_recv	./file_sync_client.c	/^int sync_recv(int fd, const char *rpath, const char *lpath)$/;"	f	signature:(int fd, const char *rpath, const char *lpath)
sync_send	./file_sync_client.c	/^static int sync_send(int fd, const char *lpath, const char *rpath,$/;"	f	file:	signature:(int fd, const char *lpath, const char *rpath, unsigned mtime, mode_t mode, int verifyApk)
sync_start_readtime	./file_sync_client.c	/^static int sync_start_readtime(int fd, const char *path)$/;"	f	file:	signature:(int fd, const char *path)
sync_token	./adb.h	/^    unsigned sync_token;$/;"	m	struct:atransport	access:public
syncmsg	./file_sync_service.h	/^} syncmsg;$/;"	t	typeref:union:__anon33
syncsendbuf	./file_sync_client.c	/^struct syncsendbuf {$/;"	s	file:
syncsendbuf	./file_sync_client.c	/^typedef struct syncsendbuf syncsendbuf;$/;"	t	typeref:struct:syncsendbuf	file:
syncsendbuf::data	./file_sync_client.c	/^    char data[SYNC_DATA_MAX];$/;"	m	struct:syncsendbuf	file:	access:public
syncsendbuf::id	./file_sync_client.c	/^    unsigned id;$/;"	m	struct:syncsendbuf	file:	access:public
syncsendbuf::size	./file_sync_client.c	/^    unsigned size;$/;"	m	struct:syncsendbuf	file:	access:public
system_cgroup_fd	./libs/libcutils/sched_policy.c	/^static int system_cgroup_fd = -1;$/;"	v	file:
system_ro	./remount_service.c	/^static int system_ro = 1;$/;"	v	file:
tag	./libs/libcutils/cutils/logprint.h	/^    const char * tag;$/;"	m	struct:AndroidLogEntry_t	access:public
test_str_parms_str	./libs/libcutils/str_parms.c	/^static void test_str_parms_str(const char *str)$/;"	f	file:	signature:(const char *str)
text	./libs/libcutils/config_utils.c	/^    char *text;$/;"	m	struct:__anon3	file:	access:public
the_once	./libs/libcutils/sched_policy.c	/^static pthread_once_t the_once = PTHREAD_ONCE_INIT;$/;"	v	file:
thread	./sysdeps_win32.c	/^    HANDLE          thread;$/;"	m	struct:WaitForAllParam	file:	access:public
thread_store_destruct_t	./libs/libcutils/cutils/threads.h	/^typedef void  (*thread_store_destruct_t)(void*  value);$/;"	t
thread_store_get	./libs/libcutils/cutils/threads.h	/^extern void*  thread_store_get(thread_store_t*  store);$/;"	p	signature:(thread_store_t* store)
thread_store_get	./libs/libcutils/threads.c	/^void*  thread_store_get( thread_store_t*  store )$/;"	f	signature:( thread_store_t* store )
thread_store_set	./libs/libcutils/cutils/threads.h	/^extern void   thread_store_set(thread_store_t*          store, $/;"	p	signature:(thread_store_t* store, void* value, thread_store_destruct_t destroy)
thread_store_set	./libs/libcutils/threads.c	/^extern void   thread_store_set( thread_store_t*          store, $/;"	f	signature:( thread_store_t* store, void* value, thread_store_destruct_t destroy)
thread_store_set	./libs/libcutils/threads.c	/^void   thread_store_set( thread_store_t*          store,$/;"	f	signature:( thread_store_t* store, void* value, thread_store_destruct_t destroy )
thread_store_t	./libs/libcutils/cutils/threads.h	/^} thread_store_t;$/;"	t	typeref:struct:__anon18
thread_store_t	./libs/libcutils/cutils/threads.h	/^} thread_store_t;$/;"	t	typeref:struct:__anon19
thunk	./libs/libcutils/qsort_r_compat.c	/^    void* thunk;$/;"	m	struct:compar_data	file:	access:public
tid	./libs/libcutils/cutils/debugger.h	/^    pid_t tid;$/;"	m	struct:__anon25	access:public
tid	./libs/libcutils/cutils/logger.h	/^    int32_t     tid;       \/* generating process's tid *\/$/;"	m	struct:logger_entry_v2	access:public
tid	./libs/libcutils/cutils/logger.h	/^    int32_t     tid;    \/* generating process's tid *\/$/;"	m	struct:logger_entry	access:public
tid	./libs/libcutils/cutils/logprint.h	/^    int32_t tid;$/;"	m	struct:AndroidLogEntry_t	access:public
tid	./sysdeps.h	/^typedef struct { unsigned  tid; }  adb_thread_t;$/;"	m	struct:__anon29	access:public
time	./file_sync_client.c	/^    unsigned int time;$/;"	m	struct:copyinfo	file:	access:public
time	./file_sync_service.h	/^        unsigned time;$/;"	m	struct:__anon33::__anon35	access:public
time	./file_sync_service.h	/^        unsigned time;$/;"	m	struct:__anon33::__anon36	access:public
time1	./libs/libcutils/tztime.c	/^static time_t		time1 P((struct tm * tmp,$/;"	p	file:	signature:(struct tm * tmp, struct tm * (*funcp) P((const time_t *, long, struct tm *, const struct state* sp)), long offset, const struct state * sp)
time1	./libs/libcutils/tztime.c	/^time1(tmp, funcp, offset, sp)$/;"	f	file:
time2	./libs/libcutils/tztime.c	/^static time_t		time2 P((struct tm *tmp,$/;"	p	file:	signature:(struct tm *tmp, struct tm * (*funcp) P((const time_t *, long, struct tm*, const struct state* sp)), long offset, int * okayp, const struct state * sp)
time2	./libs/libcutils/tztime.c	/^time2(tmp, funcp, offset, okayp, sp)$/;"	f	file:
time2sub	./libs/libcutils/tztime.c	/^static time_t		time2sub P((struct tm *tmp,$/;"	p	file:	signature:(struct tm *tmp, struct tm * (*funcp) P((const time_t*, long, struct tm*,const struct state *sp)), long offset, int * okayp, int do_norm_secs, const struct state *sp)
time2sub	./libs/libcutils/tztime.c	/^time2sub(tmp, funcp, offset, okayp, do_norm_secs, sp)$/;"	f	file:
timecnt	./libs/libcutils/tztime.c	/^	int		timecnt;$/;"	m	struct:state	file:	access:public
timesub	./libs/libcutils/tztime.c	/^static struct tm *	timesub P((const time_t * timep, long offset,$/;"	p	file:	signature:(const time_t * timep, long offset, const struct state * sp, struct tm * tmp)
timesub	./libs/libcutils/tztime.c	/^timesub(timep, offset, sp, tmp)$/;"	f	file:
timezone	./libs/libcutils/tztime.c	/^time_t			timezone = 0;$/;"	v
tio_save	./commandline.c	/^static struct termios tio_save;$/;"	v	typeref:struct:termios	file:
tls	./libs/libcutils/cutils/threads.h	/^    DWORD             tls;$/;"	m	struct:__anon19	access:public
tls	./libs/libcutils/cutils/threads.h	/^    pthread_key_t     tls;$/;"	m	struct:__anon18	access:public
tm	./libs/libcutils/tztime.c	/^static struct tm	tm;$/;"	v	typeref:struct:tm	file:
tmcomp	./libs/libcutils/tztime.c	/^static int		tmcomp P((const struct tm * atmp,$/;"	p	file:	signature:(const struct tm * atmp, const struct tm * btmp)
tmcomp	./libs/libcutils/tztime.c	/^tmcomp(atmp, btmp)$/;"	f	file:
tmsg	./transport.c	/^struct tmsg$/;"	s	file:
tmsg	./transport.c	/^typedef struct tmsg tmsg;$/;"	t	typeref:struct:tmsg	file:
tmsg::action	./transport.c	/^    int         action;$/;"	m	struct:tmsg	file:	access:public
tmsg::transport	./transport.c	/^    atransport *transport;$/;"	m	struct:tmsg	file:	access:public
toint	./libs/libcutils/tztime.c	/^static int toint(unsigned char *s) {$/;"	f	file:	signature:(unsigned char *s)
token	./adb.h	/^    unsigned char token[TOKEN_SIZE];$/;"	m	struct:atransport	access:public
top_works	./commandline.c	/^static int top_works(const char *top)$/;"	f	file:	signature:(const char *top)
total_bytes	./file_sync_client.c	/^static unsigned total_bytes;$/;"	v	file:
transport	./adb.h	/^    atransport *transport;$/;"	m	struct:alistener	access:public
transport	./adb.h	/^    atransport *transport;$/;"	m	struct:asocket	access:public
transport	./services.c	/^    transport_type transport;$/;"	m	struct:state_info	file:	access:public
transport	./transport.c	/^    atransport *transport;$/;"	m	struct:tmsg	file:	access:public
transport_fde	./adb.h	/^    fdevent transport_fde;$/;"	m	struct:atransport	access:public
transport_list	./transport.c	/^static atransport transport_list = {$/;"	v	file:
transport_lock	./transport.c	/^ADB_MUTEX_DEFINE( transport_lock );$/;"	v
transport_read_action	./transport.c	/^transport_read_action(int  fd, struct tmsg*  m)$/;"	f	file:	signature:(int fd, struct tmsg* m)
transport_registration_fde	./transport.c	/^static fdevent transport_registration_fde;$/;"	v	file:
transport_registration_func	./transport.c	/^static void transport_registration_func(int _fd, unsigned ev, void *data)$/;"	f	file:	signature:(int _fd, unsigned ev, void *data)
transport_registration_recv	./transport.c	/^static int transport_registration_recv = -1;$/;"	v	file:
transport_registration_send	./transport.c	/^static int transport_registration_send = -1;$/;"	v	file:
transport_socket	./adb.h	/^    int transport_socket;$/;"	m	struct:atransport	access:public
transport_socket_events	./transport.c	/^static void transport_socket_events(int fd, unsigned events, void *_t)$/;"	f	file:	signature:(int fd, unsigned events, void *_t)
transport_type	./adb.h	/^typedef enum transport_type {$/;"	g
transport_type	./adb.h	/^} transport_type;$/;"	t	typeref:enum:transport_type
transport_unref	./transport.c	/^static void transport_unref(atransport *t)$/;"	f	file:	signature:(atransport *t)
transport_unref	./transport.c	/^static void transport_unref(atransport *t);$/;"	p	file:	signature:(atransport *t)
transport_unref_locked	./transport.c	/^static void transport_unref_locked(atransport *t)$/;"	f	file:	signature:(atransport *t)
transport_write_action	./transport.c	/^transport_write_action(int  fd, struct tmsg*  m)$/;"	f	file:	signature:(int fd, struct tmsg* m)
transtime	./libs/libcutils/tztime.c	/^static time_t		transtime P((time_t janfirst, int year,$/;"	p	file:	signature:(time_t janfirst, int year, const struct rule * rulep, long offset)
transtime	./libs/libcutils/tztime.c	/^transtime(janfirst, year, rulep, offset)$/;"	f	file:
tt_abbrind	./libs/libcutils/tztime.c	/^	int		tt_abbrind;	\/* abbreviation list index *\/$/;"	m	struct:ttinfo	file:	access:public
tt_gmtoff	./libs/libcutils/tztime.c	/^	long		tt_gmtoff;	\/* UTC offset in seconds *\/$/;"	m	struct:ttinfo	file:	access:public
tt_isdst	./libs/libcutils/tztime.c	/^	int		tt_isdst;	\/* used to set tm_isdst *\/$/;"	m	struct:ttinfo	file:	access:public
tt_ttisgmt	./libs/libcutils/tztime.c	/^	int		tt_ttisgmt;	\/* TRUE if transition is UTC *\/$/;"	m	struct:ttinfo	file:	access:public
tt_ttisstd	./libs/libcutils/tztime.c	/^	int		tt_ttisstd;	\/* TRUE if transition is std time *\/$/;"	m	struct:ttinfo	file:	access:public
ttinfo	./libs/libcutils/tztime.c	/^struct ttinfo {				\/* time type information *\/$/;"	s	file:
ttinfo::tt_abbrind	./libs/libcutils/tztime.c	/^	int		tt_abbrind;	\/* abbreviation list index *\/$/;"	m	struct:ttinfo	file:	access:public
ttinfo::tt_gmtoff	./libs/libcutils/tztime.c	/^	long		tt_gmtoff;	\/* UTC offset in seconds *\/$/;"	m	struct:ttinfo	file:	access:public
ttinfo::tt_isdst	./libs/libcutils/tztime.c	/^	int		tt_isdst;	\/* used to set tm_isdst *\/$/;"	m	struct:ttinfo	file:	access:public
ttinfo::tt_ttisgmt	./libs/libcutils/tztime.c	/^	int		tt_ttisgmt;	\/* TRUE if transition is UTC *\/$/;"	m	struct:ttinfo	file:	access:public
ttinfo::tt_ttisstd	./libs/libcutils/tztime.c	/^	int		tt_ttisstd;	\/* TRUE if transition is std time *\/$/;"	m	struct:ttinfo	file:	access:public
ttis	./libs/libcutils/tztime.c	/^	struct ttinfo	ttis[TZ_MAX_TYPES];$/;"	m	struct:state	typeref:struct:state::ttinfo	file:	access:public
tv_nsec	./libs/libcutils/cutils/logprint.h	/^    long tv_nsec;$/;"	m	struct:AndroidLogEntry_t	access:public
tv_sec	./libs/libcutils/cutils/logprint.h	/^    time_t tv_sec;$/;"	m	struct:AndroidLogEntry_t	access:public
type	./adb.h	/^    transport_type type;$/;"	m	struct:atransport	access:public
type	./libs/libcutils/mq.c	/^    PacketType type;$/;"	m	struct:__anon8	file:	access:public
type	./libs/libcutils/private.h	/^Please use a compiler that supports a 64-bit integer type (or wider);$/;"	p	signature:(or wider)
typecnt	./libs/libcutils/tztime.c	/^	int		typecnt;$/;"	m	struct:state	file:	access:public
types	./libs/libcutils/tztime.c	/^	unsigned char	types[TZ_MAX_TIMES];$/;"	m	struct:state	file:	access:public
tzfilehid	./libs/libcutils/tzfile.h	/^static char	tzfilehid[] = "@(#)tzfile.h	8.1";$/;"	v
tzh_charcnt	./libs/libcutils/tzfile.h	/^	char	tzh_charcnt[4];		\/* coded number of abbr. chars *\/$/;"	m	struct:tzhead	access:public
tzh_leapcnt	./libs/libcutils/tzfile.h	/^	char	tzh_leapcnt[4];		\/* coded number of leap seconds *\/$/;"	m	struct:tzhead	access:public
tzh_magic	./libs/libcutils/tzfile.h	/^	char	tzh_magic[4];		\/* TZ_MAGIC *\/$/;"	m	struct:tzhead	access:public
tzh_reserved	./libs/libcutils/tzfile.h	/^	char	tzh_reserved[15];	\/* reserved--must be zero *\/$/;"	m	struct:tzhead	access:public
tzh_timecnt	./libs/libcutils/tzfile.h	/^	char	tzh_timecnt[4];		\/* coded number of transition times *\/$/;"	m	struct:tzhead	access:public
tzh_ttisgmtcnt	./libs/libcutils/tzfile.h	/^	char	tzh_ttisgmtcnt[4];	\/* coded number of trans. time flags *\/$/;"	m	struct:tzhead	access:public
tzh_ttisstdcnt	./libs/libcutils/tzfile.h	/^	char	tzh_ttisstdcnt[4];	\/* coded number of trans. time flags *\/$/;"	m	struct:tzhead	access:public
tzh_typecnt	./libs/libcutils/tzfile.h	/^	char	tzh_typecnt[4];		\/* coded number of local time types *\/$/;"	m	struct:tzhead	access:public
tzh_version	./libs/libcutils/tzfile.h	/^	char	tzh_version[1];		\/* '\\0' or '2' as of 2005 *\/$/;"	m	struct:tzhead	access:public
tzhead	./libs/libcutils/tzfile.h	/^struct tzhead {$/;"	s
tzhead::tzh_charcnt	./libs/libcutils/tzfile.h	/^	char	tzh_charcnt[4];		\/* coded number of abbr. chars *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_leapcnt	./libs/libcutils/tzfile.h	/^	char	tzh_leapcnt[4];		\/* coded number of leap seconds *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_magic	./libs/libcutils/tzfile.h	/^	char	tzh_magic[4];		\/* TZ_MAGIC *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_reserved	./libs/libcutils/tzfile.h	/^	char	tzh_reserved[15];	\/* reserved--must be zero *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_timecnt	./libs/libcutils/tzfile.h	/^	char	tzh_timecnt[4];		\/* coded number of transition times *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_ttisgmtcnt	./libs/libcutils/tzfile.h	/^	char	tzh_ttisgmtcnt[4];	\/* coded number of trans. time flags *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_ttisstdcnt	./libs/libcutils/tzfile.h	/^	char	tzh_ttisstdcnt[4];	\/* coded number of trans. time flags *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_typecnt	./libs/libcutils/tzfile.h	/^	char	tzh_typecnt[4];		\/* coded number of local time types *\/$/;"	m	struct:tzhead	access:public
tzhead::tzh_version	./libs/libcutils/tzfile.h	/^	char	tzh_version[1];		\/* '\\0' or '2' as of 2005 *\/$/;"	m	struct:tzhead	access:public
tzload	./libs/libcutils/tztime.c	/^static int		tzload P((const char * name, struct state * sp,$/;"	p	file:	signature:(const char * name, struct state * sp, int doextend)
tzload	./libs/libcutils/tztime.c	/^tzload(const char *name, struct state * const sp, const int doextend)$/;"	f	file:	signature:(const char *name, struct state * const sp, const int doextend)
tzload_uncached	./libs/libcutils/tztime.c	/^static int		tzload_uncached P((const char * name, struct state * sp,$/;"	p	file:	signature:(const char * name, struct state * sp, int doextend)
tzload_uncached	./libs/libcutils/tztime.c	/^tzload_uncached(name, sp, doextend)$/;"	f	file:
tzname	./libs/libcutils/tztime.c	/^char *			tzname[2] = {$/;"	v
tzparse	./libs/libcutils/tztime.c	/^static int		tzparse P((const char * name, struct state * sp,$/;"	p	file:	signature:(const char * name, struct state * sp, int lastditch)
tzparse	./libs/libcutils/tztime.c	/^tzparse(name, sp, lastditch)$/;"	f	file:
u	./sysdeps_win32.c	/^    } u;$/;"	m	struct:FHRec_	typeref:union:FHRec_::__anon27	file:	access:public
uevent_kernel_multicast_recv	./libs/libcutils/cutils/uevent.h	/^ssize_t uevent_kernel_multicast_recv(int socket, void *buffer, size_t length);$/;"	p	signature:(int socket, void *buffer, size_t length)
uevent_kernel_multicast_recv	./libs/libcutils/uevent.c	/^ssize_t uevent_kernel_multicast_recv(int socket, void *buffer, size_t length)$/;"	f	signature:(int socket, void *buffer, size_t length)
uevent_kernel_multicast_uid_recv	./libs/libcutils/cutils/uevent.h	/^ssize_t uevent_kernel_multicast_uid_recv(int socket, void *buffer, size_t length, uid_t *uid);$/;"	p	signature:(int socket, void *buffer, size_t length, uid_t *uid)
uevent_kernel_multicast_uid_recv	./libs/libcutils/uevent.c	/^ssize_t uevent_kernel_multicast_uid_recv(int socket, void *buffer,$/;"	f	signature:(int socket, void *buffer, size_t length, uid_t *user)
uevent_open_socket	./libs/libcutils/cutils/uevent.h	/^int uevent_open_socket(int buf_sz, bool passcred);$/;"	p	signature:(int buf_sz, bool passcred)
uevent_open_socket	./libs/libcutils/uevent.c	/^int uevent_open_socket(int buf_sz, bool passcred)$/;"	f	signature:(int buf_sz, bool passcred)
uid	./libs/libcutils/mq.c	/^    uid_t uid;$/;"	m	struct:__anon5	file:	access:public
uid	./private/android_filesystem_config.h	/^    unsigned uid;$/;"	m	struct:fs_path_config	access:public
unconsumed	./libs/libcutils/record_stream.c	/^    unsigned char *unconsumed;$/;"	m	struct:RecordStream	file:	access:public
unhex	./sockets.c	/^unsigned unhex(unsigned char *s, int len)$/;"	f	signature:(unsigned char *s, int len)
uninstall_app	./commandline.c	/^int uninstall_app(transport_type transport, char* serial, int argc, char** argv)$/;"	f	signature:(transport_type transport, char* serial, int argc, char** argv)
uninstall_app	./commandline.c	/^int uninstall_app(transport_type transport, char* serial, int argc, char** argv);$/;"	p	file:	signature:(transport_type transport, char* serial, int argc, char** argv)
unix_close	./sysdeps.h	/^static __inline__ int  unix_close(int fd)$/;"	f	signature:(int fd)
unix_close	./sysdeps.h	416;"	d
unix_open	./sysdeps.h	/^static __inline__ int  unix_open(const char*  path, int options,...)$/;"	f	signature:(const char* path, int options,...)
unix_read	./sysdeps.h	/^static __inline__  int  unix_read(int  fd, void*  buf, size_t  len)$/;"	f	signature:(int fd, void* buf, size_t len)
unix_read	./sysdeps.h	414;"	d
unix_read	./test_track_devices.c	/^unix_read( int  fd, char*  buf, int  len )$/;"	f	file:	signature:( int fd, char* buf, int len )
unix_read	./test_track_jdwp.c	/^unix_read( int  fd, char*  buf, int  len )$/;"	f	file:	signature:( int fd, char* buf, int len )
unix_socketpair	./sysdeps.h	/^static __inline__ int  unix_socketpair( int  d, int  type, int  protocol, int sv[2] )$/;"	f	signature:( int d, int type, int protocol, int sv[2] )
unix_write	./sysdeps.h	/^static __inline__  int  unix_write(int  fd, const void*  buf, size_t  len)$/;"	f	signature:(int fd, const void* buf, size_t len)
unix_write	./sysdeps.h	415;"	d
unix_write	./test_track_devices.c	/^unix_write( int  fd, const char*  buf, int  len )$/;"	f	file:	signature:( int fd, const char* buf, int len )
unix_write	./test_track_jdwp.c	/^unix_write( int  fd, const char*  buf, int  len )$/;"	f	file:	signature:( int fd, const char* buf, int len )
unlink	./libs/libcutils/private.h	/^extern int	unlink P((const char * filename));$/;"	p	signature:(const char * filename)
unlink	./sysdeps.h	103;"	d
unlink	./sysdeps.h	104;"	d
unlink	./sysdeps.h	384;"	d
unlink	./sysdeps.h	385;"	d
unregister_all_tcp_transports	./adb.h	/^void unregister_all_tcp_transports();$/;"	p	signature:()
unregister_all_tcp_transports	./transport.c	/^void unregister_all_tcp_transports()$/;"	f
unregister_transport	./adb.h	/^void unregister_transport(atransport *t);$/;"	p	signature:(atransport *t)
unregister_transport	./transport.c	/^void unregister_transport(atransport *t)$/;"	f	signature:(atransport *t)
unregister_usb_transport	./adb.h	/^void unregister_usb_transport(usb_handle *usb);$/;"	p	signature:(usb_handle *usb)
unregister_usb_transport	./transport.c	/^void unregister_usb_transport(usb_handle *usb)$/;"	f	signature:(usb_handle *usb)
update_needed	./transport.c	/^    int              update_needed;$/;"	m	struct:device_tracker	file:	access:public
update_transports	./adb.h	/^void update_transports(void);$/;"	p	signature:(void)
update_transports	./transport.c	/^void  update_transports(void)$/;"	f	signature:(void)
urb_in	./usb_linux.c	/^    struct usbdevfs_urb urb_in;$/;"	m	struct:usb_handle	typeref:struct:usb_handle::usbdevfs_urb	file:	access:public
urb_in_busy	./usb_linux.c	/^    int urb_in_busy;$/;"	m	struct:usb_handle	file:	access:public
urb_out	./usb_linux.c	/^    struct usbdevfs_urb urb_out;$/;"	m	struct:usb_handle	typeref:struct:usb_handle::usbdevfs_urb	file:	access:public
urb_out_busy	./usb_linux.c	/^    int urb_out_busy;$/;"	m	struct:usb_handle	file:	access:public
usage	./commandline.c	/^int usage()$/;"	f
usb	./adb.h	/^    usb_handle *usb;$/;"	m	struct:atransport	access:public
usbNotification	./usb_osx.c	/^    io_object_t               usbNotification;$/;"	m	struct:usb_handle	file:	access:public
usb_adb_init	./usb_linux_client.c	/^static void usb_adb_init()$/;"	f	file:
usb_adb_kick	./usb_linux_client.c	/^static void usb_adb_kick(usb_handle *h)$/;"	f	file:	signature:(usb_handle *h)
usb_adb_open_thread	./usb_linux_client.c	/^static void *usb_adb_open_thread(void *x)$/;"	f	file:	signature:(void *x)
usb_adb_read	./usb_linux_client.c	/^static int usb_adb_read(usb_handle *h, void *data, int len)$/;"	f	file:	signature:(usb_handle *h, void *data, int len)
usb_adb_write	./usb_linux_client.c	/^static int usb_adb_write(usb_handle *h, const void *data, int len)$/;"	f	file:	signature:(usb_handle *h, const void *data, int len)
usb_bulk_read	./usb_libusb.c	/^usb_bulk_read(usb_handle *uh, void *data, int len)$/;"	f	file:	signature:(usb_handle *uh, void *data, int len)
usb_bulk_read	./usb_linux.c	/^static int usb_bulk_read(usb_handle *h, void *data, int len)$/;"	f	file:	signature:(usb_handle *h, void *data, int len)
usb_bulk_write	./usb_libusb.c	/^usb_bulk_write(usb_handle *uh, const void *data, int len)$/;"	f	file:	signature:(usb_handle *uh, const void *data, int len)
usb_bulk_write	./usb_linux.c	/^static int usb_bulk_write(usb_handle *h, const void *data, int len)$/;"	f	file:	signature:(usb_handle *h, const void *data, int len)
usb_class_id	./usb_windows.c	/^static const GUID usb_class_id = ANDROID_USB_CLASS_ID;$/;"	v	file:
usb_cleanup	./adb.h	/^void usb_cleanup();$/;"	p	signature:()
usb_cleanup	./usb_libusb.c	/^usb_cleanup()$/;"	f
usb_cleanup	./usb_linux.c	/^void usb_cleanup()$/;"	f
usb_cleanup	./usb_linux_client.c	/^void usb_cleanup()$/;"	f
usb_cleanup	./usb_osx.c	/^void usb_cleanup()$/;"	f
usb_cleanup	./usb_windows.c	/^void usb_cleanup() {$/;"	f
usb_cleanup	./usb_windows.c	/^void usb_cleanup();$/;"	p	file:
usb_cleanup_handle	./usb_windows.c	/^void usb_cleanup_handle(usb_handle* handle) {$/;"	f	signature:(usb_handle* handle)
usb_cleanup_handle	./usb_windows.c	/^void usb_cleanup_handle(usb_handle* handle);$/;"	p	file:	signature:(usb_handle* handle)
usb_close	./adb.h	/^int usb_close(usb_handle *h);$/;"	p	signature:(usb_handle *h)
usb_close	./usb_libusb.c	/^usb_close(struct usb_handle *h)$/;"	f	signature:(struct usb_handle *h)
usb_close	./usb_linux.c	/^int usb_close(usb_handle *h)$/;"	f	signature:(usb_handle *h)
usb_close	./usb_linux_client.c	/^int usb_close(usb_handle *h)$/;"	f	signature:(usb_handle *h)
usb_close	./usb_osx.c	/^int usb_close(usb_handle *handle)$/;"	f	signature:(usb_handle *handle)
usb_close	./usb_windows.c	/^int usb_close(usb_handle* handle) {$/;"	f	signature:(usb_handle* handle)
usb_close	./usb_windows.c	/^int usb_close(usb_handle* handle);$/;"	p	file:	signature:(usb_handle* handle)
usb_ffs_init	./usb_linux_client.c	/^static void usb_ffs_init()$/;"	f	file:
usb_ffs_kick	./usb_linux_client.c	/^static void usb_ffs_kick(usb_handle *h)$/;"	f	file:	signature:(usb_handle *h)
usb_ffs_open_thread	./usb_linux_client.c	/^static void *usb_ffs_open_thread(void *x)$/;"	f	file:	signature:(void *x)
usb_ffs_read	./usb_linux_client.c	/^static int usb_ffs_read(usb_handle *h, void *data, int len)$/;"	f	file:	signature:(usb_handle *h, void *data, int len)
usb_ffs_write	./usb_linux_client.c	/^static int usb_ffs_write(usb_handle *h, const void *data, int len)$/;"	f	file:	signature:(usb_handle *h, const void *data, int len)
usb_handle	./adb.h	/^typedef struct usb_handle usb_handle;$/;"	t	typeref:struct:usb_handle
usb_handle	./usb_libusb.c	/^struct usb_handle$/;"	s	file:
usb_handle	./usb_linux.c	/^struct usb_handle$/;"	s	file:
usb_handle	./usb_linux_client.c	/^struct usb_handle$/;"	s	file:
usb_handle	./usb_osx.c	/^struct usb_handle$/;"	s	file:
usb_handle	./usb_windows.c	/^struct usb_handle {$/;"	s	file:
usb_handle::adb_interface	./usb_windows.c	/^  ADBAPIHANDLE  adb_interface;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::adb_read_pipe	./usb_windows.c	/^  ADBAPIHANDLE  adb_read_pipe;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::adb_write_pipe	./usb_windows.c	/^  ADBAPIHANDLE  adb_write_pipe;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::bulkIn	./usb_osx.c	/^    UInt8                     bulkIn;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::bulkOut	./usb_osx.c	/^    UInt8                     bulkOut;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::bulk_in	./usb_linux_client.c	/^    int bulk_in;  \/* "in" from the host's perspective => sink for adbd *\/$/;"	m	struct:usb_handle	file:	access:public
usb_handle::bulk_out	./usb_linux_client.c	/^    int bulk_out; \/* "out" from the host's perspective => source for adbd *\/$/;"	m	struct:usb_handle	file:	access:public
usb_handle::control	./usb_linux_client.c	/^    int control;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::dead	./usb_linux.c	/^    int dead;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::desc	./usb_linux.c	/^    int desc;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::dev	./usb_libusb.c	/^    libusb_device         *dev;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::dev_addr	./usb_libusb.c	/^    uint8_t               dev_addr;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::dev_bus	./usb_libusb.c	/^    uint8_t               dev_bus;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::devh	./usb_libusb.c	/^    libusb_device_handle  *devh;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::end_point_address	./usb_libusb.c	/^    unsigned char         end_point_address[2];$/;"	m	struct:usb_handle	file:	access:public
usb_handle::ep_in	./usb_linux.c	/^    unsigned char ep_in;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::ep_out	./usb_linux.c	/^    unsigned char ep_out;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::fd	./usb_linux_client.c	/^    int fd;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::fname	./usb_linux.c	/^    char fname[64];$/;"	m	struct:usb_handle	file:	access:public
usb_handle::interface	./usb_libusb.c	/^    int                   interface;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::interface	./usb_osx.c	/^    IOUSBInterfaceInterface   **interface;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::interface_name	./usb_windows.c	/^  char*         interface_name;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::kick	./usb_linux_client.c	/^    void (*kick)(usb_handle *h);$/;"	m	struct:usb_handle	file:	access:public
usb_handle::lock	./usb_libusb.c	/^    adb_mutex_t           lock;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::lock	./usb_linux.c	/^    adb_mutex_t lock;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::lock	./usb_linux_client.c	/^    adb_mutex_t lock;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::mark	./usb_linux.c	/^    int mark;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::next	./usb_libusb.c	/^    usb_handle            *next;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::next	./usb_linux.c	/^    usb_handle *next;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::next	./usb_windows.c	/^  usb_handle *next;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::notify	./usb_libusb.c	/^    adb_cond_t            notify;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::notify	./usb_linux.c	/^    adb_cond_t notify;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::notify	./usb_linux_client.c	/^    adb_cond_t notify;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::prev	./usb_libusb.c	/^    usb_handle            *prev;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::prev	./usb_linux.c	/^    usb_handle *prev;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::prev	./usb_windows.c	/^  usb_handle *prev;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::read	./usb_linux_client.c	/^    int (*read)(usb_handle *h, void *data, int len);$/;"	m	struct:usb_handle	file:	access:public
usb_handle::reaper_thread	./usb_linux.c	/^    pthread_t reaper_thread;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::serial	./usb_libusb.c	/^    char                  serial[128];$/;"	m	struct:usb_handle	file:	access:public
usb_handle::urb_in	./usb_linux.c	/^    struct usbdevfs_urb urb_in;$/;"	m	struct:usb_handle	typeref:struct:usb_handle::usbdevfs_urb	file:	access:public
usb_handle::urb_in_busy	./usb_linux.c	/^    int urb_in_busy;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::urb_out	./usb_linux.c	/^    struct usbdevfs_urb urb_out;$/;"	m	struct:usb_handle	typeref:struct:usb_handle::usbdevfs_urb	file:	access:public
usb_handle::urb_out_busy	./usb_linux.c	/^    int urb_out_busy;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::usbNotification	./usb_osx.c	/^    io_object_t               usbNotification;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::write	./usb_linux_client.c	/^    int (*write)(usb_handle *h, const void *data, int len);$/;"	m	struct:usb_handle	file:	access:public
usb_handle::writeable	./usb_linux.c	/^    unsigned writeable;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::zero_mask	./usb_libusb.c	/^    int                   zero_mask;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::zero_mask	./usb_linux.c	/^    unsigned zero_mask;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::zero_mask	./usb_osx.c	/^    unsigned int              zero_mask;$/;"	m	struct:usb_handle	file:	access:public
usb_handle::zero_mask	./usb_windows.c	/^  unsigned zero_mask;$/;"	m	struct:usb_handle	file:	access:public
usb_init	./adb.h	/^void usb_init();$/;"	p	signature:()
usb_init	./usb_libusb.c	/^usb_init()$/;"	f
usb_init	./usb_linux.c	/^void usb_init()$/;"	f
usb_init	./usb_linux_client.c	/^void usb_init()$/;"	f
usb_init	./usb_osx.c	/^void usb_init()$/;"	f
usb_init	./usb_windows.c	/^void usb_init() {$/;"	f
usb_init	./usb_windows.c	/^void usb_init();$/;"	p	file:
usb_kick	./adb.h	/^void usb_kick(usb_handle *h);$/;"	p	signature:(usb_handle *h)
usb_kick	./usb_libusb.c	/^void usb_kick(struct usb_handle *h)$/;"	f	signature:(struct usb_handle *h)
usb_kick	./usb_linux.c	/^void usb_kick(usb_handle *h)$/;"	f	signature:(usb_handle *h)
usb_kick	./usb_linux_client.c	/^void usb_kick(usb_handle *h)$/;"	f	signature:(usb_handle *h)
usb_kick	./usb_osx.c	/^void usb_kick(usb_handle *handle)$/;"	f	signature:(usb_handle *handle)
usb_kick	./usb_windows.c	/^void usb_kick(usb_handle* handle) {$/;"	f	signature:(usb_handle* handle)
usb_kick	./usb_windows.c	/^void usb_kick(usb_handle* handle);$/;"	p	file:	signature:(usb_handle* handle)
usb_lock	./usb_libusb.c	/^static adb_mutex_t usb_lock = ADB_MUTEX_INITIALIZER;$/;"	v	file:
usb_lock	./usb_linux.c	/^ADB_MUTEX_DEFINE( usb_lock );$/;"	v
usb_lock	./usb_windows.c	/^ADB_MUTEX_DEFINE( usb_lock );$/;"	v
usb_name	./usb_windows.c	/^const char *usb_name(usb_handle* handle) {$/;"	f	signature:(usb_handle* handle)
usb_name	./usb_windows.c	/^const char *usb_name(usb_handle* handle);$/;"	p	file:	signature:(usb_handle* handle)
usb_read	./adb.h	/^int usb_read(usb_handle *h, void *data, int len);$/;"	p	signature:(usb_handle *h, void *data, int len)
usb_read	./usb_libusb.c	/^usb_read(struct usb_handle *uh, void *_data, int len)$/;"	f	signature:(struct usb_handle *uh, void *_data, int len)
usb_read	./usb_linux.c	/^int usb_read(usb_handle *h, void *_data, int len)$/;"	f	signature:(usb_handle *h, void *_data, int len)
usb_read	./usb_linux_client.c	/^int usb_read(usb_handle *h, void *data, int len)$/;"	f	signature:(usb_handle *h, void *data, int len)
usb_read	./usb_osx.c	/^int usb_read(usb_handle *handle, void *buf, int len)$/;"	f	signature:(usb_handle *handle, void *buf, int len)
usb_read	./usb_windows.c	/^int usb_read(usb_handle *handle, void* data, int len) {$/;"	f	signature:(usb_handle *handle, void* data, int len)
usb_read	./usb_windows.c	/^int usb_read(usb_handle *handle, void* data, int len);$/;"	p	file:	signature:(usb_handle *handle, void* data, int len)
usb_vendors_init	./usb_vendors.c	/^void usb_vendors_init(void)$/;"	f	signature:(void)
usb_vendors_init	./usb_vendors.h	/^void usb_vendors_init(void);$/;"	p	signature:(void)
usb_write	./adb.h	/^int usb_write(usb_handle *h, const void *data, int len);$/;"	p	signature:(usb_handle *h, const void *data, int len)
usb_write	./usb_libusb.c	/^usb_write(struct usb_handle *uh, const void *_data, int len)$/;"	f	signature:(struct usb_handle *uh, const void *_data, int len)
usb_write	./usb_linux.c	/^int usb_write(usb_handle *h, const void *_data, int len)$/;"	f	signature:(usb_handle *h, const void *_data, int len)
usb_write	./usb_linux_client.c	/^int usb_write(usb_handle *h, const void *data, int len)$/;"	f	signature:(usb_handle *h, const void *data, int len)
usb_write	./usb_osx.c	/^int usb_write(usb_handle *handle, const void *buf, int len)$/;"	f	signature:(usb_handle *handle, const void *buf, int len)
usb_write	./usb_windows.c	/^int usb_write(usb_handle* handle, const void* data, int len) {$/;"	f	signature:(usb_handle* handle, const void* data, int len)
usb_write	./usb_windows.c	/^int usb_write(usb_handle* handle, const void* data, int len);$/;"	p	file:	signature:(usb_handle* handle, const void* data, int len)
used	./sysdeps_win32.c	/^    int           used;$/;"	m	struct:SocketPairRec_	file:	access:public
used	./sysdeps_win32.c	/^    int        used;$/;"	m	struct:FHRec_	file:	access:public
userid_t	./libs/libcutils/cutils/multiuser.h	/^typedef uid_t userid_t;$/;"	t
value	./libs/libcutils/cutils/config_utils.h	/^    const char *value;$/;"	m	struct:cnode	access:public
value	./libs/libcutils/hashmap.c	/^    void* value;$/;"	m	struct:Entry	file:	access:public
vendorIdCount	./usb_vendors.c	/^unsigned vendorIdCount = 0;$/;"	v
vendorIds	./usb_vendors.c	/^int vendorIds[VENDOR_COUNT_MAX];$/;"	v
version	./commandline.c	/^void version(FILE * out) {$/;"	f	signature:(FILE * out)
version	./framebuffer_service.c	/^    unsigned int version;$/;"	m	struct:fbinfo	file:	access:public
version	./libs/libcutils/cutils/native_handle.h	/^    int version;        \/* sizeof(native_handle_t) *\/$/;"	m	struct:native_handle	access:public
w	./libs/libmincrypt/mincrypt/sha.h	/^        uint32_t w[16];$/;"	m	union:SHA_CTX::__anon26	access:public
wait_for_state	./services.c	/^static void wait_for_state(int fd, void* cookie)$/;"	f	file:	signature:(int fd, void* cookie)
wakeupFd	./libs/libcutils/selector.c	/^    SelectableFd* wakeupFd;$/;"	m	struct:Selector	file:	access:public
wakeupPipe	./libs/libcutils/selector.c	/^    int wakeupPipe[2];$/;"	m	struct:Selector	file:	access:public
wanted	./sysdeps_win32.c	/^    int          wanted;   \/* wanted event flags *\/$/;"	m	struct:EventHookRec_	file:	access:public
wday	./libs/libcutils/cutils/tztime.h	/^    const char *wday[7];    \/* short names *\/$/;"	m	struct:strftime_locale	access:public
weekday	./libs/libcutils/cutils/tztime.h	/^    const char *weekday[7]; \/* long names *\/$/;"	m	struct:strftime_locale	access:public
width	./framebuffer_service.c	/^    unsigned int width;$/;"	m	struct:fbinfo	file:	access:public
wildabbr	./libs/libcutils/tztime.c	/^static char		wildabbr[] = WILDABBR;$/;"	v	file:
win32_looper	./sysdeps_win32.c	/^static EventLooperRec  win32_looper;$/;"	v	file:
win_thread_func_t	./sysdeps.h	/^typedef  void (*win_thread_func_t)(void*  arg);$/;"	t
write	./adb.c	160;"	d	file:
write	./adb.c	162;"	d	file:
write	./adb.c	165;"	d	file:
write	./adb.c	167;"	d	file:
write	./sysdeps.h	139;"	d
write	./sysdeps.h	140;"	d
write	./sysdeps.h	370;"	d
write	./sysdeps.h	371;"	d
write	./transport_local.c	195;"	d	file:
write	./transport_local.c	197;"	d	file:
write	./transport_local.c	200;"	d	file:
write	./transport_local.c	202;"	d	file:
write	./usb_linux_client.c	/^    int (*write)(usb_handle *h, const void *data, int len);$/;"	m	struct:usb_handle	file:	access:public
writeFds	./libs/libcutils/selector.c	/^    fd_set writeFds;$/;"	m	struct:Selector	file:	access:public
write_ctrl	./libs/libcutils/qtaguid.c	/^static int write_ctrl(const char *cmd) {$/;"	f	file:	signature:(const char *cmd)
write_data_buffer	./file_sync_client.c	/^static int write_data_buffer(int fd, char* file_buffer, int size, syncsendbuf *sbuf)$/;"	f	file:	signature:(int fd, char* file_buffer, int size, syncsendbuf *sbuf)
write_data_file	./file_sync_client.c	/^static int write_data_file(int fd, const char *path, syncsendbuf *sbuf)$/;"	f	file:	signature:(int fd, const char *path, syncsendbuf *sbuf)
write_data_link	./file_sync_client.c	/^static int write_data_link(int fd, const char *path, syncsendbuf *sbuf)$/;"	f	file:	signature:(int fd, const char *path, syncsendbuf *sbuf)
write_fds	./fdevent.c	/^static fd_set write_fds;$/;"	v	file:
write_log_entry	./log_service.c	/^void write_log_entry(int fd, struct logger_entry *buf)$/;"	f	signature:(int fd, struct logger_entry *buf)
write_log_entry	./log_service.c	/^void write_log_entry(int fd, struct logger_entry *buf);$/;"	p	file:	signature:(int fd, struct logger_entry *buf)
write_memstream	./libs/libcutils/open_memstream.c	/^static int write_memstream(void* cookie, const char* buf, int size)$/;"	f	file:	signature:(void* cookie, const char* buf, int size)
write_misc	./libs/libcutils/android_reboot.c	/^extern int write_misc(char *reason);$/;"	p	file:	signature:(char *reason)
write_misc	./libs/libcutils/misc_rw.c	/^int write_misc(char *reason){$/;"	f	signature:(char *reason)
write_packet	./transport.c	/^write_packet(int  fd, const char* name, apacket** ppacket)$/;"	f	file:	signature:(int fd, const char* name, apacket** ppacket)
write_param	./libs/libcutils/qtaguid.c	/^static int write_param(const char *param_path, const char *value) {$/;"	f	file:	signature:(const char *param_path, const char *value)
write_public_keyfile	./adb_auth_host.c	/^static int write_public_keyfile(RSA *private_key, const char *private_key_path)$/;"	f	file:	signature:(RSA *private_key, const char *private_key_path)
write_string	./remount_service.c	/^static void write_string(int fd, const char* str)$/;"	f	file:	signature:(int fd, const char* str)
write_to_remote	./adb.h	/^    int (*write_to_remote)(apacket *p, atransport *t);$/;"	m	struct:atransport	access:public
writeable	./usb_linux.c	/^    unsigned writeable;$/;"	m	struct:usb_handle	file:	access:public
writev	./libs/libcutils/cutils/uio.h	/^extern int  writev( int  fd, const struct iovec*  vecs, int  count );$/;"	p	signature:( int fd, const struct iovec* vecs, int count )
writev	./libs/libcutils/uio.c	/^int  writev( int  fd, const struct iovec*  vecs, int  count )$/;"	f	signature:( int fd, const struct iovec* vecs, int count )
writex	./transport.c	/^int writex(int fd, const void *ptr, size_t len)$/;"	f	signature:(int fd, const void *ptr, size_t len)
writex	./transport.h	/^int writex(int fd, const void *ptr, size_t len);$/;"	p	signature:(int fd, const void *ptr, size_t len)
x_fmt	./libs/libcutils/cutils/tztime.h	/^    const char *x_fmt;$/;"	m	struct:strftime_locale	access:public
year_lengths	./libs/libcutils/tztime.c	/^static const int	year_lengths[2] = {$/;"	v	file:
zero_mask	./usb_libusb.c	/^    int                   zero_mask;$/;"	m	struct:usb_handle	file:	access:public
zero_mask	./usb_linux.c	/^    unsigned zero_mask;$/;"	m	struct:usb_handle	file:	access:public
zero_mask	./usb_osx.c	/^    unsigned int              zero_mask;$/;"	m	struct:usb_handle	file:	access:public
zero_mask	./usb_windows.c	/^  unsigned zero_mask;$/;"	m	struct:usb_handle	file:	access:public
zygote_run	./libs/libcutils/cutils/zygote.h	/^int zygote_run(int argc, const char **argv);$/;"	p	signature:(int argc, const char **argv)
zygote_run_oneshot	./libs/libcutils/cutils/zygote.h	/^int zygote_run_oneshot(int sendStdio, int argc, const char **argv);$/;"	p	signature:(int sendStdio, int argc, const char **argv)
zygote_run_oneshot	./libs/libcutils/zygote.c	/^int zygote_run_oneshot(int sendStdio, int argc, const char **argv) $/;"	f	signature:(int sendStdio, int argc, const char **argv)
zygote_run_wait	./libs/libcutils/cutils/zygote.h	/^int zygote_run_wait(int argc, const char **argv, void (*post_run_func)(int));$/;"	p	signature:(int argc, const char **argv, void (*post_run_func)(int))
zygote_run_wait	./libs/libcutils/zygote.c	/^int zygote_run_wait(int argc, const char **argv, void (*post_run_func)(int))$/;"	f	signature:(int argc, const char **argv, void (*post_run_func)(int))
